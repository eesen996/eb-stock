2019-01-26 08:42:01.521 [main] INFO  com.yun.YunEbStockApplication - Starting YunEbStockApplication on USER-20181202BJ with PID 4132 (E:\workspace\yun-eb-stock\target\classes started by Administrator in E:\workspace\yun-eb-stock)
2019-01-26 08:42:01.526 [main] DEBUG com.yun.YunEbStockApplication - Running with Spring Boot v1.5.9.RELEASE, Spring v4.3.13.RELEASE
2019-01-26 08:42:01.526 [main] INFO  com.yun.YunEbStockApplication - No active profile set, falling back to default profiles: default
2019-01-26 08:42:01.893 [main] INFO  o.s.b.c.e.AnnotationConfigEmbeddedWebApplicationContext - Refreshing org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@6a28ffa4: startup date [Sat Jan 26 08:42:01 CST 2019]; root of context hierarchy
2019-01-26 08:42:02.202 [background-preinit] INFO  org.hibernate.validator.internal.util.Version - HV000001: Hibernate Validator 5.3.6.Final
2019-01-26 08:42:03.528 [main] INFO  o.s.b.c.e.tomcat.TomcatEmbeddedServletContainer - Tomcat initialized with port(s): 8080 (http)
2019-01-26 08:42:03.539 [main] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2019-01-26 08:42:03.540 [main] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet Engine: Apache Tomcat/8.5.23
2019-01-26 08:42:03.647 [localhost-startStop-1] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2019-01-26 08:42:03.648 [localhost-startStop-1] INFO  org.springframework.web.context.ContextLoader - Root WebApplicationContext: initialization completed in 1755 ms
2019-01-26 08:42:03.793 [localhost-startStop-1] INFO  o.s.boot.web.servlet.ServletRegistrationBean - Mapping servlet: 'dispatcherServlet' to [/]
2019-01-26 08:42:03.798 [localhost-startStop-1] INFO  o.s.boot.web.servlet.FilterRegistrationBean - Mapping filter: 'characterEncodingFilter' to: [/*]
2019-01-26 08:42:03.799 [localhost-startStop-1] INFO  o.s.boot.web.servlet.FilterRegistrationBean - Mapping filter: 'hiddenHttpMethodFilter' to: [/*]
2019-01-26 08:42:03.799 [localhost-startStop-1] INFO  o.s.boot.web.servlet.FilterRegistrationBean - Mapping filter: 'httpPutFormContentFilter' to: [/*]
2019-01-26 08:42:03.799 [localhost-startStop-1] INFO  o.s.boot.web.servlet.FilterRegistrationBean - Mapping filter: 'requestContextFilter' to: [/*]
2019-01-26 08:42:04.601 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerAdapter - Looking for @ControllerAdvice: org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@6a28ffa4: startup date [Sat Jan 26 08:42:01 CST 2019]; root of context hierarchy
2019-01-26 08:42:04.657 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productSave]}" onto public java.lang.String com.yun.product.controller.ProductController.productSave(com.yun.product.model.Product)
2019-01-26 08:42:04.658 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productPreAdd]}" onto public java.lang.String com.yun.product.controller.ProductController.productPreAdd()
2019-01-26 08:42:04.659 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productList]}" onto public java.lang.String com.yun.product.controller.ProductController.productList(org.springframework.ui.Model,java.lang.String,java.lang.String,java.lang.String,java.lang.String)
2019-01-26 08:42:04.659 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productDelete]}" onto public java.lang.String com.yun.product.controller.ProductController.productDelete(int)
2019-01-26 08:42:04.659 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productPreUpdate]}" onto public java.lang.String com.yun.product.controller.ProductController.productPreUpdate(int,org.springframework.ui.Model)
2019-01-26 08:42:04.659 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productUpdate]}" onto public java.lang.String com.yun.product.controller.ProductController.productUpdate(com.yun.product.model.Product)
2019-01-26 08:42:04.660 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productListForAutoComplete]}" onto public java.util.List<com.yun.product.model.Product> com.yun.product.controller.ProductController.productListForAutoComplete(java.lang.String)
2019-01-26 08:42:04.661 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/prodParamDelete]}" onto public java.lang.String com.yun.product.controller.ProductParamController.prodParamDelete(int)
2019-01-26 08:42:04.661 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/prodParamPreAdd]}" onto public java.lang.String com.yun.product.controller.ProductParamController.prodParamPreAdd(int,org.springframework.ui.Model)
2019-01-26 08:42:04.662 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/prodParamList]}" onto public java.lang.String com.yun.product.controller.ProductParamController.prodParamList(int)
2019-01-26 08:42:04.662 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/prodParamSave]}" onto public java.lang.String com.yun.product.controller.ProductParamController.prodParamSave(com.yun.product.model.ProductParameter)
2019-01-26 08:42:04.664 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeList]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeList(org.springframework.ui.Model)
2019-01-26 08:42:04.665 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeTree]}" onto public java.util.List<com.yun.product.model.ProductType> com.yun.product.controller.ProductTypeController.productTypeTree()
2019-01-26 08:42:04.665 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeEdit]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeEdit()
2019-01-26 08:42:04.666 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeSave]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeSave(com.yun.product.model.ProductType)
2019-01-26 08:42:04.666 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeUpdate]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeUpdate(java.lang.Integer,org.springframework.ui.Model)
2019-01-26 08:42:04.667 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeUpdateSave]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeUpdateSave(com.yun.product.model.ProductType)
2019-01-26 08:42:04.667 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeDelete]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeDelete(java.lang.Integer,javax.servlet.http.HttpServletResponse) throws java.io.IOException
2019-01-26 08:42:04.668 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockSave]}" onto public java.lang.String com.yun.stock.controller.ProductStockController.productStockSave(com.yun.stock.model.ProductStock)
2019-01-26 08:42:04.668 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStocklist]}" onto public java.lang.String com.yun.stock.controller.ProductStockController.productStocklist(java.lang.String,java.lang.String,org.springframework.ui.Model)
2019-01-26 08:42:04.668 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockPreAdd]}" onto public java.lang.String com.yun.stock.controller.ProductStockController.productStockPreAdd()
2019-01-26 08:42:04.669 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/main]}" onto public java.lang.String com.yun.user.controller.MainController.main()
2019-01-26 08:42:04.670 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/userList]}" onto public java.lang.String com.yun.user.controller.UserController.userList(org.springframework.ui.Model)
2019-01-26 08:42:04.670 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/login]}" onto public java.lang.String com.yun.user.controller.UserController.login(java.lang.String,java.lang.String,javax.servlet.http.HttpSession)
2019-01-26 08:42:04.671 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/userEdit]}" onto public java.lang.String com.yun.user.controller.UserController.userEdit()
2019-01-26 08:42:04.671 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/userSave]}" onto public java.lang.String com.yun.user.controller.UserController.userSave(com.yun.user.model.UserInfo)
2019-01-26 08:42:04.671 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/deleteUserInfo]}" onto public java.lang.String com.yun.user.controller.UserController.userDelete(int)
2019-01-26 08:42:04.675 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/error]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> org.springframework.boot.autoconfigure.web.BasicErrorController.error(javax.servlet.http.HttpServletRequest)
2019-01-26 08:42:04.676 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/error],produces=[text/html]}" onto public org.springframework.web.servlet.ModelAndView org.springframework.boot.autoconfigure.web.BasicErrorController.errorHtml(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
2019-01-26 08:42:04.709 [main] INFO  o.s.web.servlet.handler.SimpleUrlHandlerMapping - Mapped URL path [/webjars/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-01-26 08:42:04.709 [main] INFO  o.s.web.servlet.handler.SimpleUrlHandlerMapping - Mapped URL path [/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-01-26 08:42:04.746 [main] INFO  o.s.web.servlet.handler.SimpleUrlHandlerMapping - Mapped URL path [/**/favicon.ico] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-01-26 08:42:05.042 [main] INFO  o.s.b.a.w.WebMvcAutoConfiguration$WelcomePageHandlerMapping - Adding welcome page: class path resource [static/index.html]
2019-01-26 08:42:05.308 [main] INFO  o.s.jmx.export.annotation.AnnotationMBeanExporter - Registering beans for JMX exposure on startup
2019-01-26 08:42:05.328 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2019-01-26 08:42:05.339 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2019-01-26 08:42:05.352 [main] INFO  org.apache.tomcat.util.net.NioSelectorPool - Using a shared selector for servlet write/read
2019-01-26 08:42:05.370 [main] INFO  o.s.b.c.e.tomcat.TomcatEmbeddedServletContainer - Tomcat started on port(s): 8080 (http)
2019-01-26 08:42:05.374 [main] INFO  com.yun.YunEbStockApplication - Started YunEbStockApplication in 4.311 seconds (JVM running for 5.488)
2019-01-26 08:42:15.535 [http-nio-8080-exec-1] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring FrameworkServlet 'dispatcherServlet'
2019-01-26 08:42:15.536 [http-nio-8080-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - FrameworkServlet 'dispatcherServlet': initialization started
2019-01-26 08:42:15.556 [http-nio-8080-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - FrameworkServlet 'dispatcherServlet': initialization completed in 20 ms
2019-01-26 08:42:17.976 [http-nio-8080-exec-8] DEBUG com.yun.stock.controller.ProductStockController - 跳转到物品库存查询控制器
2019-01-26 08:42:18.290 [http-nio-8080-exec-8] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==>  Preparing: select count(*) from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 
2019-01-26 08:42:18.309 [http-nio-8080-exec-8] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==> Parameters: 
2019-01-26 08:42:18.320 [http-nio-8080-exec-8] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - <==      Total: 1
2019-01-26 08:42:18.327 [http-nio-8080-exec-8] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==>  Preparing: select ps.prod_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 order by p.prod_id,pp.prod_param_id limit ?,? 
2019-01-26 08:42:18.328 [http-nio-8080-exec-8] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==> Parameters: 0(Integer), 5(Integer)
2019-01-26 08:42:18.329 [http-nio-8080-exec-8] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - <==      Total: 0
2019-01-26 08:42:18.330 [http-nio-8080-exec-8] DEBUG com.yun.stock.controller.ProductStockController - 转到物品库存页面
2019-01-26 08:42:44.405 [http-nio-8080-exec-3] DEBUG c.yun.product.dao.ProductDao.findProductRowByParam - ==>  Preparing: select count(*) from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 
2019-01-26 08:42:44.406 [http-nio-8080-exec-3] DEBUG c.yun.product.dao.ProductDao.findProductRowByParam - ==> Parameters: 
2019-01-26 08:42:44.407 [http-nio-8080-exec-3] DEBUG c.yun.product.dao.ProductDao.findProductRowByParam - <==      Total: 1
2019-01-26 08:42:44.412 [http-nio-8080-exec-3] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 order by prod_id limit ?,? 
2019-01-26 08:42:44.413 [http-nio-8080-exec-3] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==> Parameters: 0(Integer), 5(Integer)
2019-01-26 08:42:44.415 [http-nio-8080-exec-3] DEBUG com.yun.product.dao.ProductDao.findProductByParam - <==      Total: 1
2019-01-26 08:42:44.417 [http-nio-8080-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 08:42:44.417 [http-nio-8080-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 2(Integer)
2019-01-26 08:42:44.418 [http-nio-8080-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 0
2019-01-26 08:43:01.685 [http-nio-8080-exec-6] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - ==>  Preparing: select p1.prod_type_id,p1.prod_type_name,p1.parent_id,p2.prod_type_id parent_type_id,p2.prod_type_name parent_type_name from product_type p1 LEFT JOIN product_type p2 on p1.parent_id=p2.prod_type_id where p1.parent_id=? 
2019-01-26 08:43:01.686 [http-nio-8080-exec-6] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - ==> Parameters: 0(Integer)
2019-01-26 08:43:01.689 [http-nio-8080-exec-6] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - ====>  Preparing: select p1.prod_type_id,p1.prod_type_name,p1.parent_id,p2.prod_type_id parent_type_id,p2.prod_type_name parent_type_name from product_type p1 LEFT JOIN product_type p2 on p1.parent_id=p2.prod_type_id where p1.parent_id=? 
2019-01-26 08:43:01.690 [http-nio-8080-exec-6] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - ====> Parameters: 29(Integer)
2019-01-26 08:43:01.695 [http-nio-8080-exec-6] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - ======>  Preparing: select p1.prod_type_id,p1.prod_type_name,p1.parent_id,p2.prod_type_id parent_type_id,p2.prod_type_name parent_type_name from product_type p1 LEFT JOIN product_type p2 on p1.parent_id=p2.prod_type_id where p1.parent_id=? 
2019-01-26 08:43:01.697 [http-nio-8080-exec-6] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - ======> Parameters: 30(Integer)
2019-01-26 08:43:01.701 [http-nio-8080-exec-6] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - <======      Total: 0
2019-01-26 08:43:01.703 [http-nio-8080-exec-6] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - <====      Total: 1
2019-01-26 08:43:01.704 [http-nio-8080-exec-6] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - ====>  Preparing: select p1.prod_type_id,p1.prod_type_name,p1.parent_id,p2.prod_type_id parent_type_id,p2.prod_type_name parent_type_name from product_type p1 LEFT JOIN product_type p2 on p1.parent_id=p2.prod_type_id where p1.parent_id=? 
2019-01-26 08:43:01.705 [http-nio-8080-exec-6] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - ====> Parameters: 39(Integer)
2019-01-26 08:43:01.709 [http-nio-8080-exec-6] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - ======>  Preparing: select p1.prod_type_id,p1.prod_type_name,p1.parent_id,p2.prod_type_id parent_type_id,p2.prod_type_name parent_type_name from product_type p1 LEFT JOIN product_type p2 on p1.parent_id=p2.prod_type_id where p1.parent_id=? 
2019-01-26 08:43:01.710 [http-nio-8080-exec-6] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - ======> Parameters: 41(Integer)
2019-01-26 08:43:01.712 [http-nio-8080-exec-6] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - <======      Total: 0
2019-01-26 08:43:01.715 [http-nio-8080-exec-6] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - <====      Total: 1
2019-01-26 08:43:01.715 [http-nio-8080-exec-6] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - <==      Total: 2
2019-01-26 08:43:04.053 [http-nio-8080-exec-8] DEBUG com.yun.product.dao.ProductDao.insertProduct - ==>  Preparing: insert into product(prod_name,prod_no,prod_type_id,prod_state) values(?,?,?,0) 
2019-01-26 08:43:04.054 [http-nio-8080-exec-8] DEBUG com.yun.product.dao.ProductDao.insertProduct - ==> Parameters: 趣味游戏玩具(String), 5454(String), 30(Integer)
2019-01-26 08:43:04.108 [http-nio-8080-exec-8] DEBUG com.yun.product.dao.ProductDao.insertProduct - <==    Updates: 1
2019-01-26 08:43:04.207 [http-nio-8080-exec-9] DEBUG c.yun.product.dao.ProductDao.findProductRowByParam - ==>  Preparing: select count(*) from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 
2019-01-26 08:43:04.208 [http-nio-8080-exec-9] DEBUG c.yun.product.dao.ProductDao.findProductRowByParam - ==> Parameters: 
2019-01-26 08:43:04.209 [http-nio-8080-exec-9] DEBUG c.yun.product.dao.ProductDao.findProductRowByParam - <==      Total: 1
2019-01-26 08:43:04.214 [http-nio-8080-exec-9] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 order by prod_id limit ?,? 
2019-01-26 08:43:04.214 [http-nio-8080-exec-9] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==> Parameters: 0(Integer), 5(Integer)
2019-01-26 08:43:04.217 [http-nio-8080-exec-9] DEBUG com.yun.product.dao.ProductDao.findProductByParam - <==      Total: 2
2019-01-26 08:43:04.217 [http-nio-8080-exec-9] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 08:43:04.218 [http-nio-8080-exec-9] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 2(Integer)
2019-01-26 08:43:04.219 [http-nio-8080-exec-9] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 0
2019-01-26 08:43:04.220 [http-nio-8080-exec-9] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 08:43:04.220 [http-nio-8080-exec-9] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 3(Integer)
2019-01-26 08:43:04.221 [http-nio-8080-exec-9] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 0
2019-01-26 08:43:22.715 [http-nio-8080-exec-5] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - ==>  Preparing: select p1.prod_type_id,p1.prod_type_name,p1.parent_id,p2.prod_type_id parent_type_id,p2.prod_type_name parent_type_name from product_type p1 LEFT JOIN product_type p2 on p1.parent_id=p2.prod_type_id where p1.parent_id=? 
2019-01-26 08:43:22.716 [http-nio-8080-exec-5] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - ==> Parameters: 0(Integer)
2019-01-26 08:43:22.718 [http-nio-8080-exec-5] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - ====>  Preparing: select p1.prod_type_id,p1.prod_type_name,p1.parent_id,p2.prod_type_id parent_type_id,p2.prod_type_name parent_type_name from product_type p1 LEFT JOIN product_type p2 on p1.parent_id=p2.prod_type_id where p1.parent_id=? 
2019-01-26 08:43:22.719 [http-nio-8080-exec-5] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - ====> Parameters: 29(Integer)
2019-01-26 08:43:22.722 [http-nio-8080-exec-5] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - ======>  Preparing: select p1.prod_type_id,p1.prod_type_name,p1.parent_id,p2.prod_type_id parent_type_id,p2.prod_type_name parent_type_name from product_type p1 LEFT JOIN product_type p2 on p1.parent_id=p2.prod_type_id where p1.parent_id=? 
2019-01-26 08:43:22.723 [http-nio-8080-exec-5] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - ======> Parameters: 30(Integer)
2019-01-26 08:43:22.727 [http-nio-8080-exec-5] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - <======      Total: 0
2019-01-26 08:43:22.728 [http-nio-8080-exec-5] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - <====      Total: 1
2019-01-26 08:43:22.730 [http-nio-8080-exec-5] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - ====>  Preparing: select p1.prod_type_id,p1.prod_type_name,p1.parent_id,p2.prod_type_id parent_type_id,p2.prod_type_name parent_type_name from product_type p1 LEFT JOIN product_type p2 on p1.parent_id=p2.prod_type_id where p1.parent_id=? 
2019-01-26 08:43:22.731 [http-nio-8080-exec-5] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - ====> Parameters: 39(Integer)
2019-01-26 08:43:22.735 [http-nio-8080-exec-5] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - ======>  Preparing: select p1.prod_type_id,p1.prod_type_name,p1.parent_id,p2.prod_type_id parent_type_id,p2.prod_type_name parent_type_name from product_type p1 LEFT JOIN product_type p2 on p1.parent_id=p2.prod_type_id where p1.parent_id=? 
2019-01-26 08:43:22.736 [http-nio-8080-exec-5] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - ======> Parameters: 41(Integer)
2019-01-26 08:43:22.737 [http-nio-8080-exec-5] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - <======      Total: 0
2019-01-26 08:43:22.737 [http-nio-8080-exec-5] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - <====      Total: 1
2019-01-26 08:43:22.737 [http-nio-8080-exec-5] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - <==      Total: 2
2019-01-26 08:43:25.038 [http-nio-8080-exec-4] DEBUG com.yun.product.dao.ProductDao.insertProduct - ==>  Preparing: insert into product(prod_name,prod_no,prod_type_id,prod_state) values(?,?,?,0) 
2019-01-26 08:43:25.040 [http-nio-8080-exec-4] DEBUG com.yun.product.dao.ProductDao.insertProduct - ==> Parameters: 儿童玩具(String), 5454(String), 30(Integer)
2019-01-26 08:43:25.075 [http-nio-8080-exec-4] DEBUG com.yun.product.dao.ProductDao.insertProduct - <==    Updates: 1
2019-01-26 08:43:25.143 [http-nio-8080-exec-2] DEBUG c.yun.product.dao.ProductDao.findProductRowByParam - ==>  Preparing: select count(*) from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 
2019-01-26 08:43:25.145 [http-nio-8080-exec-2] DEBUG c.yun.product.dao.ProductDao.findProductRowByParam - ==> Parameters: 
2019-01-26 08:43:25.146 [http-nio-8080-exec-2] DEBUG c.yun.product.dao.ProductDao.findProductRowByParam - <==      Total: 1
2019-01-26 08:43:25.152 [http-nio-8080-exec-2] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 order by prod_id limit ?,? 
2019-01-26 08:43:25.153 [http-nio-8080-exec-2] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==> Parameters: 0(Integer), 5(Integer)
2019-01-26 08:43:25.166 [http-nio-8080-exec-2] DEBUG com.yun.product.dao.ProductDao.findProductByParam - <==      Total: 3
2019-01-26 08:43:25.167 [http-nio-8080-exec-2] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 08:43:25.167 [http-nio-8080-exec-2] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 2(Integer)
2019-01-26 08:43:25.168 [http-nio-8080-exec-2] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 0
2019-01-26 08:43:25.168 [http-nio-8080-exec-2] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 08:43:25.168 [http-nio-8080-exec-2] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 3(Integer)
2019-01-26 08:43:25.169 [http-nio-8080-exec-2] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 0
2019-01-26 08:43:25.169 [http-nio-8080-exec-2] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 08:43:25.169 [http-nio-8080-exec-2] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 4(Integer)
2019-01-26 08:43:25.170 [http-nio-8080-exec-2] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 2
2019-01-26 08:43:37.143 [http-nio-8080-exec-7] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - ==>  Preparing: select p1.prod_type_id,p1.prod_type_name,p1.parent_id,p2.prod_type_id parent_type_id,p2.prod_type_name parent_type_name from product_type p1 LEFT JOIN product_type p2 on p1.parent_id=p2.prod_type_id where p1.parent_id=? 
2019-01-26 08:43:37.144 [http-nio-8080-exec-7] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - ==> Parameters: 0(Integer)
2019-01-26 08:43:37.145 [http-nio-8080-exec-7] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - ====>  Preparing: select p1.prod_type_id,p1.prod_type_name,p1.parent_id,p2.prod_type_id parent_type_id,p2.prod_type_name parent_type_name from product_type p1 LEFT JOIN product_type p2 on p1.parent_id=p2.prod_type_id where p1.parent_id=? 
2019-01-26 08:43:37.146 [http-nio-8080-exec-7] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - ====> Parameters: 29(Integer)
2019-01-26 08:43:37.147 [http-nio-8080-exec-7] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - ======>  Preparing: select p1.prod_type_id,p1.prod_type_name,p1.parent_id,p2.prod_type_id parent_type_id,p2.prod_type_name parent_type_name from product_type p1 LEFT JOIN product_type p2 on p1.parent_id=p2.prod_type_id where p1.parent_id=? 
2019-01-26 08:43:37.148 [http-nio-8080-exec-7] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - ======> Parameters: 30(Integer)
2019-01-26 08:43:37.150 [http-nio-8080-exec-7] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - <======      Total: 0
2019-01-26 08:43:37.150 [http-nio-8080-exec-7] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - <====      Total: 1
2019-01-26 08:43:37.151 [http-nio-8080-exec-7] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - ====>  Preparing: select p1.prod_type_id,p1.prod_type_name,p1.parent_id,p2.prod_type_id parent_type_id,p2.prod_type_name parent_type_name from product_type p1 LEFT JOIN product_type p2 on p1.parent_id=p2.prod_type_id where p1.parent_id=? 
2019-01-26 08:43:37.151 [http-nio-8080-exec-7] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - ====> Parameters: 39(Integer)
2019-01-26 08:43:37.154 [http-nio-8080-exec-7] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - ======>  Preparing: select p1.prod_type_id,p1.prod_type_name,p1.parent_id,p2.prod_type_id parent_type_id,p2.prod_type_name parent_type_name from product_type p1 LEFT JOIN product_type p2 on p1.parent_id=p2.prod_type_id where p1.parent_id=? 
2019-01-26 08:43:37.155 [http-nio-8080-exec-7] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - ======> Parameters: 41(Integer)
2019-01-26 08:43:37.156 [http-nio-8080-exec-7] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - <======      Total: 0
2019-01-26 08:43:37.157 [http-nio-8080-exec-7] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - <====      Total: 1
2019-01-26 08:43:37.157 [http-nio-8080-exec-7] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - <==      Total: 2
2019-01-26 08:43:43.345 [http-nio-8080-exec-8] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - ==>  Preparing: select p1.prod_type_id,p1.prod_type_name,p1.parent_id,p2.prod_type_id parent_type_id,p2.prod_type_name parent_type_name from product_type p1 LEFT JOIN product_type p2 on p1.parent_id=p2.prod_type_id where p1.parent_id=? 
2019-01-26 08:43:43.346 [http-nio-8080-exec-8] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - ==> Parameters: 0(Integer)
2019-01-26 08:43:43.348 [http-nio-8080-exec-8] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - ====>  Preparing: select p1.prod_type_id,p1.prod_type_name,p1.parent_id,p2.prod_type_id parent_type_id,p2.prod_type_name parent_type_name from product_type p1 LEFT JOIN product_type p2 on p1.parent_id=p2.prod_type_id where p1.parent_id=? 
2019-01-26 08:43:43.348 [http-nio-8080-exec-8] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - ====> Parameters: 29(Integer)
2019-01-26 08:43:43.350 [http-nio-8080-exec-8] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - ======>  Preparing: select p1.prod_type_id,p1.prod_type_name,p1.parent_id,p2.prod_type_id parent_type_id,p2.prod_type_name parent_type_name from product_type p1 LEFT JOIN product_type p2 on p1.parent_id=p2.prod_type_id where p1.parent_id=? 
2019-01-26 08:43:43.351 [http-nio-8080-exec-8] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - ======> Parameters: 30(Integer)
2019-01-26 08:43:43.352 [http-nio-8080-exec-8] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - <======      Total: 0
2019-01-26 08:43:43.353 [http-nio-8080-exec-8] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - <====      Total: 1
2019-01-26 08:43:43.354 [http-nio-8080-exec-8] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - ====>  Preparing: select p1.prod_type_id,p1.prod_type_name,p1.parent_id,p2.prod_type_id parent_type_id,p2.prod_type_name parent_type_name from product_type p1 LEFT JOIN product_type p2 on p1.parent_id=p2.prod_type_id where p1.parent_id=? 
2019-01-26 08:43:43.354 [http-nio-8080-exec-8] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - ====> Parameters: 39(Integer)
2019-01-26 08:43:43.357 [http-nio-8080-exec-8] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - ======>  Preparing: select p1.prod_type_id,p1.prod_type_name,p1.parent_id,p2.prod_type_id parent_type_id,p2.prod_type_name parent_type_name from product_type p1 LEFT JOIN product_type p2 on p1.parent_id=p2.prod_type_id where p1.parent_id=? 
2019-01-26 08:43:43.358 [http-nio-8080-exec-8] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - ======> Parameters: 41(Integer)
2019-01-26 08:43:43.359 [http-nio-8080-exec-8] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - <======      Total: 0
2019-01-26 08:43:43.360 [http-nio-8080-exec-8] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - <====      Total: 1
2019-01-26 08:43:43.361 [http-nio-8080-exec-8] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - <==      Total: 2
2019-01-26 08:43:45.568 [http-nio-8080-exec-9] DEBUG com.yun.product.dao.ProductDao.insertProduct - ==>  Preparing: insert into product(prod_name,prod_no,prod_type_id,prod_state) values(?,?,?,0) 
2019-01-26 08:43:45.569 [http-nio-8080-exec-9] DEBUG com.yun.product.dao.ProductDao.insertProduct - ==> Parameters: 香水(String), 7676(String), 39(Integer)
2019-01-26 08:43:45.599 [http-nio-8080-exec-9] DEBUG com.yun.product.dao.ProductDao.insertProduct - <==    Updates: 1
2019-01-26 08:43:45.645 [http-nio-8080-exec-10] DEBUG c.yun.product.dao.ProductDao.findProductRowByParam - ==>  Preparing: select count(*) from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 
2019-01-26 08:43:45.645 [http-nio-8080-exec-10] DEBUG c.yun.product.dao.ProductDao.findProductRowByParam - ==> Parameters: 
2019-01-26 08:43:45.647 [http-nio-8080-exec-10] DEBUG c.yun.product.dao.ProductDao.findProductRowByParam - <==      Total: 1
2019-01-26 08:43:45.650 [http-nio-8080-exec-10] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 order by prod_id limit ?,? 
2019-01-26 08:43:45.650 [http-nio-8080-exec-10] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==> Parameters: 0(Integer), 5(Integer)
2019-01-26 08:43:45.653 [http-nio-8080-exec-10] DEBUG com.yun.product.dao.ProductDao.findProductByParam - <==      Total: 4
2019-01-26 08:43:45.654 [http-nio-8080-exec-10] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 08:43:45.654 [http-nio-8080-exec-10] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 2(Integer)
2019-01-26 08:43:45.655 [http-nio-8080-exec-10] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 0
2019-01-26 08:43:45.656 [http-nio-8080-exec-10] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 08:43:45.656 [http-nio-8080-exec-10] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 3(Integer)
2019-01-26 08:43:45.657 [http-nio-8080-exec-10] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 0
2019-01-26 08:43:45.658 [http-nio-8080-exec-10] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 08:43:45.658 [http-nio-8080-exec-10] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 4(Integer)
2019-01-26 08:43:45.659 [http-nio-8080-exec-10] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 2
2019-01-26 08:43:45.659 [http-nio-8080-exec-10] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 08:43:45.659 [http-nio-8080-exec-10] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 5(Integer)
2019-01-26 08:43:45.660 [http-nio-8080-exec-10] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-01-26 08:43:50.899 [http-nio-8080-exec-3] DEBUG com.yun.stock.controller.ProductStockController - 跳转到物品库存查询控制器
2019-01-26 08:43:50.905 [http-nio-8080-exec-3] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==>  Preparing: select count(*) from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 
2019-01-26 08:43:50.906 [http-nio-8080-exec-3] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==> Parameters: 
2019-01-26 08:43:50.908 [http-nio-8080-exec-3] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - <==      Total: 1
2019-01-26 08:43:50.909 [http-nio-8080-exec-3] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==>  Preparing: select ps.prod_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 order by p.prod_id,pp.prod_param_id limit ?,? 
2019-01-26 08:43:50.910 [http-nio-8080-exec-3] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==> Parameters: 0(Integer), 5(Integer)
2019-01-26 08:43:50.911 [http-nio-8080-exec-3] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - <==      Total: 0
2019-01-26 08:43:50.911 [http-nio-8080-exec-3] DEBUG com.yun.stock.controller.ProductStockController - 转到物品库存页面
2019-01-26 08:44:44.880 [http-nio-8080-exec-4] DEBUG com.yun.stock.controller.ProductStockController - 跳转到物品库存查询控制器
2019-01-26 08:44:44.881 [http-nio-8080-exec-4] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==>  Preparing: select count(*) from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 
2019-01-26 08:44:44.881 [http-nio-8080-exec-4] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==> Parameters: 
2019-01-26 08:44:44.882 [http-nio-8080-exec-4] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - <==      Total: 1
2019-01-26 08:44:44.884 [http-nio-8080-exec-4] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==>  Preparing: select ps.prod_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 order by p.prod_id,pp.prod_param_id limit ?,? 
2019-01-26 08:44:44.885 [http-nio-8080-exec-4] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==> Parameters: 0(Integer), 5(Integer)
2019-01-26 08:44:44.887 [http-nio-8080-exec-4] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - <==      Total: 0
2019-01-26 08:44:44.888 [http-nio-8080-exec-4] DEBUG com.yun.stock.controller.ProductStockController - 转到物品库存页面
2019-01-26 08:45:48.433 [http-nio-8080-exec-7] DEBUG com.yun.stock.controller.ProductStockController - 跳转到物品库存查询控制器
2019-01-26 08:45:48.436 [http-nio-8080-exec-7] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==>  Preparing: select count(*) from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 
2019-01-26 08:45:48.437 [http-nio-8080-exec-7] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==> Parameters: 
2019-01-26 08:45:48.439 [http-nio-8080-exec-7] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - <==      Total: 1
2019-01-26 08:45:48.440 [http-nio-8080-exec-7] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==>  Preparing: select ps.prod_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 order by p.prod_id,pp.prod_param_id limit ?,? 
2019-01-26 08:45:48.442 [http-nio-8080-exec-7] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==> Parameters: 0(Integer), 5(Integer)
2019-01-26 08:45:48.447 [http-nio-8080-exec-7] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - <==      Total: 0
2019-01-26 08:45:48.447 [http-nio-8080-exec-7] DEBUG com.yun.stock.controller.ProductStockController - 转到物品库存页面
2019-01-26 08:47:06.394 [http-nio-8080-exec-3] DEBUG com.yun.stock.controller.ProductStockController - 跳转到物品库存查询控制器
2019-01-26 08:47:06.397 [http-nio-8080-exec-3] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==>  Preparing: select count(*) from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 
2019-01-26 08:47:06.397 [http-nio-8080-exec-3] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==> Parameters: 
2019-01-26 08:47:06.400 [http-nio-8080-exec-3] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - <==      Total: 1
2019-01-26 08:47:06.401 [http-nio-8080-exec-3] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==>  Preparing: select ps.prod_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 order by p.prod_id,pp.prod_param_id limit ?,? 
2019-01-26 08:47:06.401 [http-nio-8080-exec-3] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==> Parameters: 0(Integer), 5(Integer)
2019-01-26 08:47:06.404 [http-nio-8080-exec-3] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - <==      Total: 0
2019-01-26 08:47:06.405 [http-nio-8080-exec-3] DEBUG com.yun.stock.controller.ProductStockController - 转到物品库存页面
2019-01-26 08:47:10.024 [http-nio-8080-exec-7] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 and p.prod_name like ? order by prod_id 
2019-01-26 08:47:10.025 [http-nio-8080-exec-7] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==> Parameters: %w%(String)
2019-01-26 08:47:10.026 [http-nio-8080-exec-7] DEBUG com.yun.product.dao.ProductDao.findProductByParam - <==      Total: 0
2019-01-26 08:47:11.003 [http-nio-8080-exec-9] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 and p.prod_name like ? order by prod_id 
2019-01-26 08:47:11.005 [http-nio-8080-exec-9] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==> Parameters: %wa%(String)
2019-01-26 08:47:11.008 [http-nio-8080-exec-9] DEBUG com.yun.product.dao.ProductDao.findProductByParam - <==      Total: 0
2019-01-26 08:47:11.207 [http-nio-8080-exec-10] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 and p.prod_name like ? order by prod_id 
2019-01-26 08:47:11.211 [http-nio-8080-exec-10] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==> Parameters: %wan%(String)
2019-01-26 08:47:11.214 [http-nio-8080-exec-10] DEBUG com.yun.product.dao.ProductDao.findProductByParam - <==      Total: 0
2019-01-26 08:47:11.567 [http-nio-8080-exec-1] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 and p.prod_name like ? order by prod_id 
2019-01-26 08:47:11.568 [http-nio-8080-exec-1] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==> Parameters: %wang%(String)
2019-01-26 08:47:11.571 [http-nio-8080-exec-1] DEBUG com.yun.product.dao.ProductDao.findProductByParam - <==      Total: 0
2019-01-26 08:47:12.455 [http-nio-8080-exec-3] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 and p.prod_name like ? order by prod_id 
2019-01-26 08:47:12.456 [http-nio-8080-exec-3] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==> Parameters: %wan%(String)
2019-01-26 08:47:12.458 [http-nio-8080-exec-3] DEBUG com.yun.product.dao.ProductDao.findProductByParam - <==      Total: 0
2019-01-26 08:47:13.361 [http-nio-8080-exec-5] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 and p.prod_name like ? order by prod_id 
2019-01-26 08:47:13.361 [http-nio-8080-exec-5] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==> Parameters: %玩%(String)
2019-01-26 08:47:13.363 [http-nio-8080-exec-5] DEBUG com.yun.product.dao.ProductDao.findProductByParam - <==      Total: 2
2019-01-26 08:47:13.363 [http-nio-8080-exec-5] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 08:47:13.363 [http-nio-8080-exec-5] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 3(Integer)
2019-01-26 08:47:13.365 [http-nio-8080-exec-5] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 0
2019-01-26 08:47:13.365 [http-nio-8080-exec-5] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 08:47:13.366 [http-nio-8080-exec-5] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 4(Integer)
2019-01-26 08:47:13.367 [http-nio-8080-exec-5] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 2
2019-01-26 08:48:02.116 [http-nio-8080-exec-4] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 order by prod_id 
2019-01-26 08:48:02.117 [http-nio-8080-exec-4] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==> Parameters: 
2019-01-26 08:48:02.125 [http-nio-8080-exec-4] DEBUG com.yun.product.dao.ProductDao.findProductByParam - <==      Total: 4
2019-01-26 08:48:02.126 [http-nio-8080-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 08:48:02.127 [http-nio-8080-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 2(Integer)
2019-01-26 08:48:02.128 [http-nio-8080-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 0
2019-01-26 08:48:02.128 [http-nio-8080-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 08:48:02.129 [http-nio-8080-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 3(Integer)
2019-01-26 08:48:02.130 [http-nio-8080-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 0
2019-01-26 08:48:02.130 [http-nio-8080-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 08:48:02.131 [http-nio-8080-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 4(Integer)
2019-01-26 08:48:02.133 [http-nio-8080-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 2
2019-01-26 08:48:02.134 [http-nio-8080-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 08:48:02.134 [http-nio-8080-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 5(Integer)
2019-01-26 08:48:02.135 [http-nio-8080-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-01-26 08:48:07.468 [http-nio-8080-exec-8] DEBUG com.yun.stock.controller.ProductStockController - 跳转到物品库存查询控制器
2019-01-26 08:48:07.471 [http-nio-8080-exec-8] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==>  Preparing: select count(*) from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 
2019-01-26 08:48:07.471 [http-nio-8080-exec-8] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==> Parameters: 
2019-01-26 08:48:07.474 [http-nio-8080-exec-8] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - <==      Total: 1
2019-01-26 08:48:07.475 [http-nio-8080-exec-8] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==>  Preparing: select ps.prod_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 order by p.prod_id,pp.prod_param_id limit ?,? 
2019-01-26 08:48:07.476 [http-nio-8080-exec-8] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==> Parameters: 0(Integer), 5(Integer)
2019-01-26 08:48:07.480 [http-nio-8080-exec-8] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - <==      Total: 0
2019-01-26 08:48:07.480 [http-nio-8080-exec-8] DEBUG com.yun.stock.controller.ProductStockController - 转到物品库存页面
2019-01-26 08:48:10.858 [http-nio-8080-exec-7] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 and p.prod_name like ? order by prod_id 
2019-01-26 08:48:10.859 [http-nio-8080-exec-7] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==> Parameters: %w%(String)
2019-01-26 08:48:10.860 [http-nio-8080-exec-7] DEBUG com.yun.product.dao.ProductDao.findProductByParam - <==      Total: 0
2019-01-26 08:48:15.697 [http-nio-8080-exec-3] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 and p.prod_name like ? order by prod_id 
2019-01-26 08:48:15.698 [http-nio-8080-exec-3] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==> Parameters: %玩%(String)
2019-01-26 08:48:15.703 [http-nio-8080-exec-3] DEBUG com.yun.product.dao.ProductDao.findProductByParam - <==      Total: 2
2019-01-26 08:48:15.704 [http-nio-8080-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 08:48:15.704 [http-nio-8080-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 3(Integer)
2019-01-26 08:48:15.706 [http-nio-8080-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 0
2019-01-26 08:48:15.707 [http-nio-8080-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 08:48:15.707 [http-nio-8080-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 4(Integer)
2019-01-26 08:48:15.709 [http-nio-8080-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 2
2019-01-26 08:50:44.694 [http-nio-8080-exec-8] DEBUG com.yun.stock.controller.ProductStockController - 跳转到物品库存查询控制器
2019-01-26 08:50:44.698 [http-nio-8080-exec-8] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==>  Preparing: select count(*) from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 
2019-01-26 08:50:44.698 [http-nio-8080-exec-8] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==> Parameters: 
2019-01-26 08:50:44.701 [http-nio-8080-exec-8] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - <==      Total: 1
2019-01-26 08:50:44.702 [http-nio-8080-exec-8] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==>  Preparing: select ps.prod_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 order by p.prod_id,pp.prod_param_id limit ?,? 
2019-01-26 08:50:44.702 [http-nio-8080-exec-8] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==> Parameters: 0(Integer), 5(Integer)
2019-01-26 08:50:44.703 [http-nio-8080-exec-8] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - <==      Total: 0
2019-01-26 08:50:44.704 [http-nio-8080-exec-8] DEBUG com.yun.stock.controller.ProductStockController - 转到物品库存页面
2019-01-26 08:50:48.595 [http-nio-8080-exec-7] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 and p.prod_name like ? order by prod_id 
2019-01-26 08:50:48.595 [http-nio-8080-exec-7] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==> Parameters: %w%(String)
2019-01-26 08:50:48.596 [http-nio-8080-exec-7] DEBUG com.yun.product.dao.ProductDao.findProductByParam - <==      Total: 0
2019-01-26 08:50:48.871 [http-nio-8080-exec-3] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 and p.prod_name like ? order by prod_id 
2019-01-26 08:50:48.872 [http-nio-8080-exec-3] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==> Parameters: %wa%(String)
2019-01-26 08:50:48.875 [http-nio-8080-exec-3] DEBUG com.yun.product.dao.ProductDao.findProductByParam - <==      Total: 0
2019-01-26 08:50:49.127 [http-nio-8080-exec-4] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 and p.prod_name like ? order by prod_id 
2019-01-26 08:50:49.128 [http-nio-8080-exec-4] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==> Parameters: %wan%(String)
2019-01-26 08:50:49.129 [http-nio-8080-exec-4] DEBUG com.yun.product.dao.ProductDao.findProductByParam - <==      Total: 0
2019-01-26 08:50:49.540 [http-nio-8080-exec-5] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 and p.prod_name like ? order by prod_id 
2019-01-26 08:50:49.541 [http-nio-8080-exec-5] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==> Parameters: %wang%(String)
2019-01-26 08:50:49.542 [http-nio-8080-exec-5] DEBUG com.yun.product.dao.ProductDao.findProductByParam - <==      Total: 0
2019-01-26 08:50:50.187 [http-nio-8080-exec-8] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 and p.prod_name like ? order by prod_id 
2019-01-26 08:50:50.187 [http-nio-8080-exec-8] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==> Parameters: %wan%(String)
2019-01-26 08:50:50.189 [http-nio-8080-exec-8] DEBUG com.yun.product.dao.ProductDao.findProductByParam - <==      Total: 0
2019-01-26 08:50:50.957 [http-nio-8080-exec-2] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 and p.prod_name like ? order by prod_id 
2019-01-26 08:50:50.958 [http-nio-8080-exec-2] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==> Parameters: %玩%(String)
2019-01-26 08:50:50.967 [http-nio-8080-exec-2] DEBUG com.yun.product.dao.ProductDao.findProductByParam - <==      Total: 2
2019-01-26 08:50:50.967 [http-nio-8080-exec-2] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 08:50:50.967 [http-nio-8080-exec-2] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 3(Integer)
2019-01-26 08:50:50.968 [http-nio-8080-exec-2] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 0
2019-01-26 08:50:50.969 [http-nio-8080-exec-2] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 08:50:50.969 [http-nio-8080-exec-2] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 4(Integer)
2019-01-26 08:50:50.970 [http-nio-8080-exec-2] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 2
2019-01-26 08:53:33.902 [http-nio-8080-exec-9] DEBUG com.yun.stock.controller.ProductStockController - 跳转到物品库存查询控制器
2019-01-26 08:53:33.903 [http-nio-8080-exec-9] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==>  Preparing: select count(*) from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 
2019-01-26 08:53:33.904 [http-nio-8080-exec-9] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==> Parameters: 
2019-01-26 08:53:33.905 [http-nio-8080-exec-9] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - <==      Total: 1
2019-01-26 08:53:33.905 [http-nio-8080-exec-9] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==>  Preparing: select ps.prod_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 order by p.prod_id,pp.prod_param_id limit ?,? 
2019-01-26 08:53:33.905 [http-nio-8080-exec-9] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==> Parameters: 0(Integer), 5(Integer)
2019-01-26 08:53:33.906 [http-nio-8080-exec-9] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - <==      Total: 0
2019-01-26 08:53:33.906 [http-nio-8080-exec-9] DEBUG com.yun.stock.controller.ProductStockController - 转到物品库存页面
2019-01-26 08:53:37.013 [http-nio-8080-exec-4] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 and p.prod_name like ? order by prod_id 
2019-01-26 08:53:37.013 [http-nio-8080-exec-4] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==> Parameters: %w%(String)
2019-01-26 08:53:37.014 [http-nio-8080-exec-4] DEBUG com.yun.product.dao.ProductDao.findProductByParam - <==      Total: 0
2019-01-26 08:53:38.234 [http-nio-8080-exec-2] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 order by prod_id 
2019-01-26 08:53:38.236 [http-nio-8080-exec-2] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==> Parameters: 
2019-01-26 08:53:38.248 [http-nio-8080-exec-2] DEBUG com.yun.product.dao.ProductDao.findProductByParam - <==      Total: 4
2019-01-26 08:53:38.252 [http-nio-8080-exec-2] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 08:53:38.253 [http-nio-8080-exec-2] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 2(Integer)
2019-01-26 08:53:38.254 [http-nio-8080-exec-2] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 0
2019-01-26 08:53:38.254 [http-nio-8080-exec-2] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 08:53:38.254 [http-nio-8080-exec-2] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 3(Integer)
2019-01-26 08:53:38.255 [http-nio-8080-exec-2] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 0
2019-01-26 08:53:38.256 [http-nio-8080-exec-2] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 08:53:38.256 [http-nio-8080-exec-2] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 4(Integer)
2019-01-26 08:53:38.258 [http-nio-8080-exec-2] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 2
2019-01-26 08:53:38.259 [http-nio-8080-exec-2] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 08:53:38.259 [http-nio-8080-exec-2] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 5(Integer)
2019-01-26 08:53:38.260 [http-nio-8080-exec-2] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-01-26 08:53:38.894 [http-nio-8080-exec-6] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 and p.prod_name like ? order by prod_id 
2019-01-26 08:53:38.895 [http-nio-8080-exec-6] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==> Parameters: %w%(String)
2019-01-26 08:53:38.896 [http-nio-8080-exec-6] DEBUG com.yun.product.dao.ProductDao.findProductByParam - <==      Total: 0
2019-01-26 08:53:39.107 [http-nio-8080-exec-1] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 and p.prod_name like ? order by prod_id 
2019-01-26 08:53:39.109 [http-nio-8080-exec-1] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==> Parameters: %wa%(String)
2019-01-26 08:53:39.111 [http-nio-8080-exec-1] DEBUG com.yun.product.dao.ProductDao.findProductByParam - <==      Total: 0
2019-01-26 08:53:39.319 [http-nio-8080-exec-9] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 and p.prod_name like ? order by prod_id 
2019-01-26 08:53:39.320 [http-nio-8080-exec-9] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==> Parameters: %wan%(String)
2019-01-26 08:53:39.322 [http-nio-8080-exec-9] DEBUG com.yun.product.dao.ProductDao.findProductByParam - <==      Total: 0
2019-01-26 08:53:39.530 [http-nio-8080-exec-10] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 and p.prod_name like ? order by prod_id 
2019-01-26 08:53:39.530 [http-nio-8080-exec-10] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==> Parameters: %wang%(String)
2019-01-26 08:53:39.537 [http-nio-8080-exec-10] DEBUG com.yun.product.dao.ProductDao.findProductByParam - <==      Total: 0
2019-01-26 08:53:39.861 [http-nio-8080-exec-7] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 and p.prod_name like ? order by prod_id 
2019-01-26 08:53:39.863 [http-nio-8080-exec-7] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==> Parameters: %王%(String)
2019-01-26 08:53:39.866 [http-nio-8080-exec-7] DEBUG com.yun.product.dao.ProductDao.findProductByParam - <==      Total: 0
2019-01-26 08:53:40.357 [http-nio-8080-exec-5] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 order by prod_id 
2019-01-26 08:53:40.358 [http-nio-8080-exec-5] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==> Parameters: 
2019-01-26 08:53:40.361 [http-nio-8080-exec-5] DEBUG com.yun.product.dao.ProductDao.findProductByParam - <==      Total: 4
2019-01-26 08:53:40.362 [http-nio-8080-exec-5] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 08:53:40.363 [http-nio-8080-exec-5] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 2(Integer)
2019-01-26 08:53:40.365 [http-nio-8080-exec-5] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 0
2019-01-26 08:53:40.366 [http-nio-8080-exec-5] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 08:53:40.367 [http-nio-8080-exec-5] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 3(Integer)
2019-01-26 08:53:40.368 [http-nio-8080-exec-5] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 0
2019-01-26 08:53:40.369 [http-nio-8080-exec-5] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 08:53:40.369 [http-nio-8080-exec-5] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 4(Integer)
2019-01-26 08:53:40.371 [http-nio-8080-exec-5] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 2
2019-01-26 08:53:40.371 [http-nio-8080-exec-5] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 08:53:40.372 [http-nio-8080-exec-5] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 5(Integer)
2019-01-26 08:53:40.376 [http-nio-8080-exec-5] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-01-26 08:53:40.579 [http-nio-8080-exec-3] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 and p.prod_name like ? order by prod_id 
2019-01-26 08:53:40.579 [http-nio-8080-exec-3] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==> Parameters: %w%(String)
2019-01-26 08:53:40.581 [http-nio-8080-exec-3] DEBUG com.yun.product.dao.ProductDao.findProductByParam - <==      Total: 0
2019-01-26 08:53:40.756 [http-nio-8080-exec-8] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 and p.prod_name like ? order by prod_id 
2019-01-26 08:53:40.757 [http-nio-8080-exec-8] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==> Parameters: %wa%(String)
2019-01-26 08:53:40.759 [http-nio-8080-exec-8] DEBUG com.yun.product.dao.ProductDao.findProductByParam - <==      Total: 0
2019-01-26 08:53:40.978 [http-nio-8080-exec-4] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 and p.prod_name like ? order by prod_id 
2019-01-26 08:53:40.978 [http-nio-8080-exec-4] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==> Parameters: %wang%(String)
2019-01-26 08:53:40.979 [http-nio-8080-exec-4] DEBUG com.yun.product.dao.ProductDao.findProductByParam - <==      Total: 0
2019-01-26 08:53:41.051 [http-nio-8080-exec-2] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 and p.prod_name like ? order by prod_id 
2019-01-26 08:53:41.051 [http-nio-8080-exec-2] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==> Parameters: %wang%(String)
2019-01-26 08:53:41.052 [http-nio-8080-exec-2] DEBUG com.yun.product.dao.ProductDao.findProductByParam - <==      Total: 0
2019-01-26 08:53:41.685 [http-nio-8080-exec-6] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 and p.prod_name like ? order by prod_id 
2019-01-26 08:53:41.687 [http-nio-8080-exec-6] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==> Parameters: %wan%(String)
2019-01-26 08:53:41.689 [http-nio-8080-exec-6] DEBUG com.yun.product.dao.ProductDao.findProductByParam - <==      Total: 0
2019-01-26 08:53:42.334 [http-nio-8080-exec-1] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 and p.prod_name like ? order by prod_id 
2019-01-26 08:53:42.339 [http-nio-8080-exec-1] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==> Parameters: %玩%(String)
2019-01-26 08:53:42.341 [http-nio-8080-exec-1] DEBUG com.yun.product.dao.ProductDao.findProductByParam - <==      Total: 2
2019-01-26 08:53:42.341 [http-nio-8080-exec-1] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 08:53:42.350 [http-nio-8080-exec-1] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 3(Integer)
2019-01-26 08:53:42.351 [http-nio-8080-exec-1] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 0
2019-01-26 08:53:42.353 [http-nio-8080-exec-1] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 08:53:42.354 [http-nio-8080-exec-1] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 4(Integer)
2019-01-26 08:53:42.356 [http-nio-8080-exec-1] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 2
2019-01-26 08:55:03.940 [http-nio-8080-exec-7] DEBUG com.yun.stock.controller.ProductStockController - 跳转到物品库存查询控制器
2019-01-26 08:55:03.946 [http-nio-8080-exec-7] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==>  Preparing: select count(*) from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 
2019-01-26 08:55:03.946 [http-nio-8080-exec-7] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==> Parameters: 
2019-01-26 08:55:03.956 [http-nio-8080-exec-7] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - <==      Total: 1
2019-01-26 08:55:03.957 [http-nio-8080-exec-7] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==>  Preparing: select ps.prod_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 order by p.prod_id,pp.prod_param_id limit ?,? 
2019-01-26 08:55:03.957 [http-nio-8080-exec-7] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==> Parameters: 0(Integer), 5(Integer)
2019-01-26 08:55:03.961 [http-nio-8080-exec-7] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - <==      Total: 0
2019-01-26 08:55:03.962 [http-nio-8080-exec-7] DEBUG com.yun.stock.controller.ProductStockController - 转到物品库存页面
2019-01-26 08:55:20.583 [http-nio-8080-exec-6] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 and p.prod_name like ? order by prod_id 
2019-01-26 08:55:20.584 [http-nio-8080-exec-6] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==> Parameters: %w%(String)
2019-01-26 08:55:20.585 [http-nio-8080-exec-6] DEBUG com.yun.product.dao.ProductDao.findProductByParam - <==      Total: 0
2019-01-26 08:55:21.397 [http-nio-8080-exec-1] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 and p.prod_name like ? order by prod_id 
2019-01-26 08:55:21.398 [http-nio-8080-exec-1] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==> Parameters: %wa%(String)
2019-01-26 08:55:21.400 [http-nio-8080-exec-1] DEBUG com.yun.product.dao.ProductDao.findProductByParam - <==      Total: 0
2019-01-26 08:55:22.180 [http-nio-8080-exec-9] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 and p.prod_name like ? order by prod_id 
2019-01-26 08:55:22.181 [http-nio-8080-exec-9] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==> Parameters: %wan%(String)
2019-01-26 08:55:22.183 [http-nio-8080-exec-9] DEBUG com.yun.product.dao.ProductDao.findProductByParam - <==      Total: 0
2019-01-26 08:55:22.409 [http-nio-8080-exec-10] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 and p.prod_name like ? order by prod_id 
2019-01-26 08:55:22.409 [http-nio-8080-exec-10] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==> Parameters: %wang%(String)
2019-01-26 08:55:22.410 [http-nio-8080-exec-10] DEBUG com.yun.product.dao.ProductDao.findProductByParam - <==      Total: 0
2019-01-26 08:55:23.035 [http-nio-8080-exec-7] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 and p.prod_name like ? order by prod_id 
2019-01-26 08:55:23.035 [http-nio-8080-exec-7] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==> Parameters: %wan%(String)
2019-01-26 08:55:23.037 [http-nio-8080-exec-7] DEBUG com.yun.product.dao.ProductDao.findProductByParam - <==      Total: 0
2019-01-26 08:55:23.408 [http-nio-8080-exec-3] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 and p.prod_name like ? order by prod_id 
2019-01-26 08:55:23.409 [http-nio-8080-exec-3] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==> Parameters: %玩%(String)
2019-01-26 08:55:23.413 [http-nio-8080-exec-3] DEBUG com.yun.product.dao.ProductDao.findProductByParam - <==      Total: 2
2019-01-26 08:55:23.417 [http-nio-8080-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 08:55:23.418 [http-nio-8080-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 3(Integer)
2019-01-26 08:55:23.420 [http-nio-8080-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 0
2019-01-26 08:55:23.421 [http-nio-8080-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 08:55:23.422 [http-nio-8080-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 4(Integer)
2019-01-26 08:55:23.428 [http-nio-8080-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 2
2019-01-26 08:56:25.738 [http-nio-8080-exec-8] DEBUG com.yun.stock.controller.ProductStockController - 跳转到物品库存查询控制器
2019-01-26 08:56:25.746 [http-nio-8080-exec-8] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==>  Preparing: select count(*) from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 
2019-01-26 08:56:25.746 [http-nio-8080-exec-8] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==> Parameters: 
2019-01-26 08:56:25.747 [http-nio-8080-exec-8] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - <==      Total: 1
2019-01-26 08:56:25.748 [http-nio-8080-exec-8] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==>  Preparing: select ps.prod_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 order by p.prod_id,pp.prod_param_id limit ?,? 
2019-01-26 08:56:25.749 [http-nio-8080-exec-8] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==> Parameters: 0(Integer), 5(Integer)
2019-01-26 08:56:25.753 [http-nio-8080-exec-8] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - <==      Total: 0
2019-01-26 08:56:25.754 [http-nio-8080-exec-8] DEBUG com.yun.stock.controller.ProductStockController - 转到物品库存页面
2019-01-26 08:56:29.440 [http-nio-8080-exec-6] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 and p.prod_name like ? order by prod_id 
2019-01-26 08:56:29.441 [http-nio-8080-exec-6] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==> Parameters: %w%(String)
2019-01-26 08:56:29.443 [http-nio-8080-exec-6] DEBUG com.yun.product.dao.ProductDao.findProductByParam - <==      Total: 0
2019-01-26 08:56:30.320 [http-nio-8080-exec-7] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 and p.prod_name like ? order by prod_id 
2019-01-26 08:56:30.322 [http-nio-8080-exec-7] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==> Parameters: %wa%(String)
2019-01-26 08:56:30.325 [http-nio-8080-exec-7] DEBUG com.yun.product.dao.ProductDao.findProductByParam - <==      Total: 0
2019-01-26 08:56:30.509 [http-nio-8080-exec-3] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 and p.prod_name like ? order by prod_id 
2019-01-26 08:56:30.509 [http-nio-8080-exec-3] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==> Parameters: %wan%(String)
2019-01-26 08:56:30.511 [http-nio-8080-exec-3] DEBUG com.yun.product.dao.ProductDao.findProductByParam - <==      Total: 0
2019-01-26 08:56:30.823 [http-nio-8080-exec-5] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 and p.prod_name like ? order by prod_id 
2019-01-26 08:56:30.824 [http-nio-8080-exec-5] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==> Parameters: %wang%(String)
2019-01-26 08:56:30.826 [http-nio-8080-exec-5] DEBUG com.yun.product.dao.ProductDao.findProductByParam - <==      Total: 0
2019-01-26 08:56:31.409 [http-nio-8080-exec-8] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 and p.prod_name like ? order by prod_id 
2019-01-26 08:56:31.409 [http-nio-8080-exec-8] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==> Parameters: %wan%(String)
2019-01-26 08:56:31.412 [http-nio-8080-exec-8] DEBUG com.yun.product.dao.ProductDao.findProductByParam - <==      Total: 0
2019-01-26 08:56:31.803 [http-nio-8080-exec-4] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 and p.prod_name like ? order by prod_id 
2019-01-26 08:56:31.805 [http-nio-8080-exec-4] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==> Parameters: %玩%(String)
2019-01-26 08:56:31.809 [http-nio-8080-exec-4] DEBUG com.yun.product.dao.ProductDao.findProductByParam - <==      Total: 2
2019-01-26 08:56:31.811 [http-nio-8080-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 08:56:31.812 [http-nio-8080-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 3(Integer)
2019-01-26 08:56:31.815 [http-nio-8080-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 0
2019-01-26 08:56:31.816 [http-nio-8080-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 08:56:31.817 [http-nio-8080-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 4(Integer)
2019-01-26 08:56:31.821 [http-nio-8080-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 2
2019-01-26 09:00:32.851 [http-nio-8080-exec-6] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 and p.prod_name like ? order by prod_id 
2019-01-26 09:00:32.853 [http-nio-8080-exec-6] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==> Parameters: %玩l%(String)
2019-01-26 09:00:32.854 [http-nio-8080-exec-6] DEBUG com.yun.product.dao.ProductDao.findProductByParam - <==      Total: 0
2019-01-26 09:00:33.911 [http-nio-8080-exec-7] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 and p.prod_name like ? order by prod_id 
2019-01-26 09:00:33.912 [http-nio-8080-exec-7] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==> Parameters: %玩%(String)
2019-01-26 09:00:33.915 [http-nio-8080-exec-7] DEBUG com.yun.product.dao.ProductDao.findProductByParam - <==      Total: 2
2019-01-26 09:00:33.916 [http-nio-8080-exec-7] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:00:33.916 [http-nio-8080-exec-7] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 3(Integer)
2019-01-26 09:00:33.918 [http-nio-8080-exec-7] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 0
2019-01-26 09:00:33.919 [http-nio-8080-exec-7] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:00:33.920 [http-nio-8080-exec-7] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 4(Integer)
2019-01-26 09:00:33.922 [http-nio-8080-exec-7] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 2
2019-01-26 09:00:34.958 [http-nio-8080-exec-3] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 and p.prod_name like ? order by prod_id 
2019-01-26 09:00:34.959 [http-nio-8080-exec-3] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==> Parameters: %玩a%(String)
2019-01-26 09:00:34.962 [http-nio-8080-exec-3] DEBUG com.yun.product.dao.ProductDao.findProductByParam - <==      Total: 0
2019-01-26 09:00:36.250 [http-nio-8080-exec-5] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 and p.prod_name like ? order by prod_id 
2019-01-26 09:00:36.251 [http-nio-8080-exec-5] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==> Parameters: %玩%(String)
2019-01-26 09:00:36.254 [http-nio-8080-exec-5] DEBUG com.yun.product.dao.ProductDao.findProductByParam - <==      Total: 2
2019-01-26 09:00:36.255 [http-nio-8080-exec-5] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:00:36.255 [http-nio-8080-exec-5] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 3(Integer)
2019-01-26 09:00:36.257 [http-nio-8080-exec-5] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 0
2019-01-26 09:00:36.258 [http-nio-8080-exec-5] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:00:36.258 [http-nio-8080-exec-5] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 4(Integer)
2019-01-26 09:00:36.261 [http-nio-8080-exec-5] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 2
2019-01-26 09:01:47.780 [http-nio-8080-exec-4] DEBUG com.yun.stock.controller.ProductStockController - 跳转到物品库存查询控制器
2019-01-26 09:01:47.782 [http-nio-8080-exec-4] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==>  Preparing: select count(*) from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 
2019-01-26 09:01:47.782 [http-nio-8080-exec-4] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==> Parameters: 
2019-01-26 09:01:47.783 [http-nio-8080-exec-4] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - <==      Total: 1
2019-01-26 09:01:47.784 [http-nio-8080-exec-4] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==>  Preparing: select ps.prod_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 order by p.prod_id,pp.prod_param_id limit ?,? 
2019-01-26 09:01:47.784 [http-nio-8080-exec-4] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==> Parameters: 0(Integer), 5(Integer)
2019-01-26 09:01:47.787 [http-nio-8080-exec-4] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - <==      Total: 0
2019-01-26 09:01:47.787 [http-nio-8080-exec-4] DEBUG com.yun.stock.controller.ProductStockController - 转到物品库存页面
2019-01-26 09:01:52.228 [http-nio-8080-exec-7] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 and p.prod_name like ? order by prod_id 
2019-01-26 09:01:52.229 [http-nio-8080-exec-7] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==> Parameters: %a%(String)
2019-01-26 09:01:52.230 [http-nio-8080-exec-7] DEBUG com.yun.product.dao.ProductDao.findProductByParam - <==      Total: 0
2019-01-26 09:01:57.776 [http-nio-8080-exec-3] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 and p.prod_name like ? order by prod_id 
2019-01-26 09:01:57.777 [http-nio-8080-exec-3] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==> Parameters: %aw%(String)
2019-01-26 09:01:57.779 [http-nio-8080-exec-3] DEBUG com.yun.product.dao.ProductDao.findProductByParam - <==      Total: 0
2019-01-26 09:01:58.394 [http-nio-8080-exec-5] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 and p.prod_name like ? order by prod_id 
2019-01-26 09:01:58.395 [http-nio-8080-exec-5] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==> Parameters: %awa%(String)
2019-01-26 09:01:58.398 [http-nio-8080-exec-5] DEBUG com.yun.product.dao.ProductDao.findProductByParam - <==      Total: 0
2019-01-26 09:01:58.621 [http-nio-8080-exec-8] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 and p.prod_name like ? order by prod_id 
2019-01-26 09:01:58.622 [http-nio-8080-exec-8] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==> Parameters: %awan%(String)
2019-01-26 09:01:58.622 [http-nio-8080-exec-8] DEBUG com.yun.product.dao.ProductDao.findProductByParam - <==      Total: 0
2019-01-26 09:01:59.071 [http-nio-8080-exec-4] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 and p.prod_name like ? order by prod_id 
2019-01-26 09:01:59.071 [http-nio-8080-exec-4] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==> Parameters: %awan%(String)
2019-01-26 09:01:59.073 [http-nio-8080-exec-4] DEBUG com.yun.product.dao.ProductDao.findProductByParam - <==      Total: 0
2019-01-26 09:01:59.489 [http-nio-8080-exec-9] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 and p.prod_name like ? order by prod_id 
2019-01-26 09:01:59.490 [http-nio-8080-exec-9] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==> Parameters: %awa%(String)
2019-01-26 09:01:59.492 [http-nio-8080-exec-9] DEBUG com.yun.product.dao.ProductDao.findProductByParam - <==      Total: 0
2019-01-26 09:01:59.668 [http-nio-8080-exec-2] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 and p.prod_name like ? order by prod_id 
2019-01-26 09:01:59.668 [http-nio-8080-exec-2] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==> Parameters: %aw%(String)
2019-01-26 09:01:59.670 [http-nio-8080-exec-2] DEBUG com.yun.product.dao.ProductDao.findProductByParam - <==      Total: 0
2019-01-26 09:01:59.840 [http-nio-8080-exec-1] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 and p.prod_name like ? order by prod_id 
2019-01-26 09:01:59.840 [http-nio-8080-exec-1] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==> Parameters: %a%(String)
2019-01-26 09:01:59.841 [http-nio-8080-exec-1] DEBUG com.yun.product.dao.ProductDao.findProductByParam - <==      Total: 0
2019-01-26 09:02:00.030 [http-nio-8080-exec-10] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 order by prod_id 
2019-01-26 09:02:00.031 [http-nio-8080-exec-10] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==> Parameters: 
2019-01-26 09:02:00.035 [http-nio-8080-exec-10] DEBUG com.yun.product.dao.ProductDao.findProductByParam - <==      Total: 4
2019-01-26 09:02:00.036 [http-nio-8080-exec-10] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:02:00.037 [http-nio-8080-exec-10] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 2(Integer)
2019-01-26 09:02:00.039 [http-nio-8080-exec-10] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 0
2019-01-26 09:02:00.040 [http-nio-8080-exec-10] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:02:00.040 [http-nio-8080-exec-10] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 3(Integer)
2019-01-26 09:02:00.042 [http-nio-8080-exec-10] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 0
2019-01-26 09:02:00.043 [http-nio-8080-exec-10] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:02:00.044 [http-nio-8080-exec-10] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 4(Integer)
2019-01-26 09:02:00.047 [http-nio-8080-exec-10] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 2
2019-01-26 09:02:00.048 [http-nio-8080-exec-10] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:02:00.048 [http-nio-8080-exec-10] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 5(Integer)
2019-01-26 09:02:00.051 [http-nio-8080-exec-10] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-01-26 09:02:00.668 [http-nio-8080-exec-6] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 and p.prod_name like ? order by prod_id 
2019-01-26 09:02:00.669 [http-nio-8080-exec-6] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==> Parameters: %w%(String)
2019-01-26 09:02:00.670 [http-nio-8080-exec-6] DEBUG com.yun.product.dao.ProductDao.findProductByParam - <==      Total: 0
2019-01-26 09:02:00.997 [http-nio-8080-exec-7] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 and p.prod_name like ? order by prod_id 
2019-01-26 09:02:00.997 [http-nio-8080-exec-7] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==> Parameters: %wa%(String)
2019-01-26 09:02:00.999 [http-nio-8080-exec-7] DEBUG com.yun.product.dao.ProductDao.findProductByParam - <==      Total: 0
2019-01-26 09:02:01.183 [http-nio-8080-exec-3] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 and p.prod_name like ? order by prod_id 
2019-01-26 09:02:01.183 [http-nio-8080-exec-3] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==> Parameters: %wan%(String)
2019-01-26 09:02:01.185 [http-nio-8080-exec-3] DEBUG com.yun.product.dao.ProductDao.findProductByParam - <==      Total: 0
2019-01-26 09:02:01.594 [http-nio-8080-exec-5] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 and p.prod_name like ? order by prod_id 
2019-01-26 09:02:01.595 [http-nio-8080-exec-5] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==> Parameters: %wa%(String)
2019-01-26 09:02:01.597 [http-nio-8080-exec-5] DEBUG com.yun.product.dao.ProductDao.findProductByParam - <==      Total: 0
2019-01-26 09:02:01.755 [http-nio-8080-exec-8] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 and p.prod_name like ? order by prod_id 
2019-01-26 09:02:01.756 [http-nio-8080-exec-8] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==> Parameters: %w%(String)
2019-01-26 09:02:01.758 [http-nio-8080-exec-8] DEBUG com.yun.product.dao.ProductDao.findProductByParam - <==      Total: 0
2019-01-26 09:02:01.948 [http-nio-8080-exec-4] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 order by prod_id 
2019-01-26 09:02:01.948 [http-nio-8080-exec-4] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==> Parameters: 
2019-01-26 09:02:01.951 [http-nio-8080-exec-4] DEBUG com.yun.product.dao.ProductDao.findProductByParam - <==      Total: 4
2019-01-26 09:02:01.951 [http-nio-8080-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:02:01.951 [http-nio-8080-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 2(Integer)
2019-01-26 09:02:01.953 [http-nio-8080-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 0
2019-01-26 09:02:01.953 [http-nio-8080-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:02:01.953 [http-nio-8080-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 3(Integer)
2019-01-26 09:02:01.955 [http-nio-8080-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 0
2019-01-26 09:02:01.955 [http-nio-8080-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:02:01.956 [http-nio-8080-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 4(Integer)
2019-01-26 09:02:01.957 [http-nio-8080-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 2
2019-01-26 09:02:01.958 [http-nio-8080-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:02:01.958 [http-nio-8080-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 5(Integer)
2019-01-26 09:02:01.960 [http-nio-8080-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-01-26 09:02:02.618 [http-nio-8080-exec-9] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 order by prod_id 
2019-01-26 09:02:02.618 [http-nio-8080-exec-9] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==> Parameters: 
2019-01-26 09:02:02.622 [http-nio-8080-exec-9] DEBUG com.yun.product.dao.ProductDao.findProductByParam - <==      Total: 4
2019-01-26 09:02:02.623 [http-nio-8080-exec-9] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:02:02.624 [http-nio-8080-exec-9] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 2(Integer)
2019-01-26 09:02:02.626 [http-nio-8080-exec-9] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 0
2019-01-26 09:02:02.627 [http-nio-8080-exec-9] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:02:02.627 [http-nio-8080-exec-9] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 3(Integer)
2019-01-26 09:02:02.630 [http-nio-8080-exec-9] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 0
2019-01-26 09:02:02.633 [http-nio-8080-exec-9] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:02:02.633 [http-nio-8080-exec-9] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 4(Integer)
2019-01-26 09:02:02.636 [http-nio-8080-exec-9] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 2
2019-01-26 09:02:02.636 [http-nio-8080-exec-9] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:02:02.637 [http-nio-8080-exec-9] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 5(Integer)
2019-01-26 09:02:02.637 [http-nio-8080-exec-2] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 order by prod_id 
2019-01-26 09:02:02.637 [http-nio-8080-exec-2] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==> Parameters: 
2019-01-26 09:02:02.638 [http-nio-8080-exec-9] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-01-26 09:02:02.644 [http-nio-8080-exec-2] DEBUG com.yun.product.dao.ProductDao.findProductByParam - <==      Total: 4
2019-01-26 09:02:02.644 [http-nio-8080-exec-2] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:02:02.645 [http-nio-8080-exec-2] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 2(Integer)
2019-01-26 09:02:02.647 [http-nio-8080-exec-2] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 0
2019-01-26 09:02:02.648 [http-nio-8080-exec-2] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:02:02.648 [http-nio-8080-exec-2] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 3(Integer)
2019-01-26 09:02:02.649 [http-nio-8080-exec-2] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 0
2019-01-26 09:02:02.649 [http-nio-8080-exec-2] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:02:02.649 [http-nio-8080-exec-2] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 4(Integer)
2019-01-26 09:02:02.650 [http-nio-8080-exec-2] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 2
2019-01-26 09:02:02.650 [http-nio-8080-exec-2] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:02:02.650 [http-nio-8080-exec-2] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 5(Integer)
2019-01-26 09:02:02.651 [http-nio-8080-exec-2] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-01-26 09:02:03.019 [http-nio-8080-exec-1] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 and p.prod_name like ? order by prod_id 
2019-01-26 09:02:03.020 [http-nio-8080-exec-1] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==> Parameters: %w%(String)
2019-01-26 09:02:03.022 [http-nio-8080-exec-1] DEBUG com.yun.product.dao.ProductDao.findProductByParam - <==      Total: 0
2019-01-26 09:02:03.313 [http-nio-8080-exec-10] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 and p.prod_name like ? order by prod_id 
2019-01-26 09:02:03.314 [http-nio-8080-exec-10] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==> Parameters: %wa%(String)
2019-01-26 09:02:03.316 [http-nio-8080-exec-10] DEBUG com.yun.product.dao.ProductDao.findProductByParam - <==      Total: 0
2019-01-26 09:02:03.476 [http-nio-8080-exec-6] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 and p.prod_name like ? order by prod_id 
2019-01-26 09:02:03.477 [http-nio-8080-exec-6] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==> Parameters: %wan%(String)
2019-01-26 09:02:03.479 [http-nio-8080-exec-6] DEBUG com.yun.product.dao.ProductDao.findProductByParam - <==      Total: 0
2019-01-26 09:02:04.097 [http-nio-8080-exec-7] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 and p.prod_name like ? order by prod_id 
2019-01-26 09:02:04.097 [http-nio-8080-exec-7] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==> Parameters: %wa%(String)
2019-01-26 09:02:04.099 [http-nio-8080-exec-7] DEBUG com.yun.product.dao.ProductDao.findProductByParam - <==      Total: 0
2019-01-26 09:02:04.247 [http-nio-8080-exec-3] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 and p.prod_name like ? order by prod_id 
2019-01-26 09:02:04.248 [http-nio-8080-exec-3] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==> Parameters: %w%(String)
2019-01-26 09:02:04.249 [http-nio-8080-exec-3] DEBUG com.yun.product.dao.ProductDao.findProductByParam - <==      Total: 0
2019-01-26 09:02:04.441 [http-nio-8080-exec-5] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 order by prod_id 
2019-01-26 09:02:04.442 [http-nio-8080-exec-5] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==> Parameters: 
2019-01-26 09:02:04.444 [http-nio-8080-exec-5] DEBUG com.yun.product.dao.ProductDao.findProductByParam - <==      Total: 4
2019-01-26 09:02:04.445 [http-nio-8080-exec-5] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:02:04.445 [http-nio-8080-exec-5] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 2(Integer)
2019-01-26 09:02:04.446 [http-nio-8080-exec-5] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 0
2019-01-26 09:02:04.447 [http-nio-8080-exec-5] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:02:04.448 [http-nio-8080-exec-5] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 3(Integer)
2019-01-26 09:02:04.449 [http-nio-8080-exec-5] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 0
2019-01-26 09:02:04.450 [http-nio-8080-exec-5] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:02:04.450 [http-nio-8080-exec-5] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 4(Integer)
2019-01-26 09:02:04.452 [http-nio-8080-exec-5] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 2
2019-01-26 09:02:04.452 [http-nio-8080-exec-5] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:02:04.452 [http-nio-8080-exec-5] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 5(Integer)
2019-01-26 09:02:04.454 [http-nio-8080-exec-5] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-01-26 09:02:05.043 [http-nio-8080-exec-8] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 order by prod_id 
2019-01-26 09:02:05.044 [http-nio-8080-exec-8] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==> Parameters: 
2019-01-26 09:02:05.045 [http-nio-8080-exec-8] DEBUG com.yun.product.dao.ProductDao.findProductByParam - <==      Total: 4
2019-01-26 09:02:05.046 [http-nio-8080-exec-8] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:02:05.046 [http-nio-8080-exec-8] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 2(Integer)
2019-01-26 09:02:05.049 [http-nio-8080-exec-8] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 0
2019-01-26 09:02:05.049 [http-nio-8080-exec-8] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:02:05.050 [http-nio-8080-exec-8] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 3(Integer)
2019-01-26 09:02:05.050 [http-nio-8080-exec-8] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 0
2019-01-26 09:02:05.051 [http-nio-8080-exec-8] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:02:05.051 [http-nio-8080-exec-8] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 4(Integer)
2019-01-26 09:02:05.052 [http-nio-8080-exec-8] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 2
2019-01-26 09:02:05.052 [http-nio-8080-exec-8] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:02:05.053 [http-nio-8080-exec-8] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 5(Integer)
2019-01-26 09:02:05.054 [http-nio-8080-exec-8] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-01-26 09:02:05.069 [http-nio-8080-exec-4] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 order by prod_id 
2019-01-26 09:02:05.070 [http-nio-8080-exec-4] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==> Parameters: 
2019-01-26 09:02:05.071 [http-nio-8080-exec-4] DEBUG com.yun.product.dao.ProductDao.findProductByParam - <==      Total: 4
2019-01-26 09:02:05.072 [http-nio-8080-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:02:05.072 [http-nio-8080-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 2(Integer)
2019-01-26 09:02:05.073 [http-nio-8080-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 0
2019-01-26 09:02:05.073 [http-nio-8080-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:02:05.073 [http-nio-8080-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 3(Integer)
2019-01-26 09:02:05.074 [http-nio-8080-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 0
2019-01-26 09:02:05.075 [http-nio-8080-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:02:05.075 [http-nio-8080-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 4(Integer)
2019-01-26 09:02:05.076 [http-nio-8080-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 2
2019-01-26 09:02:05.076 [http-nio-8080-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:02:05.076 [http-nio-8080-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 5(Integer)
2019-01-26 09:02:05.077 [http-nio-8080-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-01-26 09:02:05.708 [http-nio-8080-exec-9] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 and p.prod_name like ? order by prod_id 
2019-01-26 09:02:05.708 [http-nio-8080-exec-9] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==> Parameters: %w%(String)
2019-01-26 09:02:05.709 [http-nio-8080-exec-9] DEBUG com.yun.product.dao.ProductDao.findProductByParam - <==      Total: 0
2019-01-26 09:02:06.028 [http-nio-8080-exec-2] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 and p.prod_name like ? order by prod_id 
2019-01-26 09:02:06.028 [http-nio-8080-exec-2] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==> Parameters: %wa%(String)
2019-01-26 09:02:06.030 [http-nio-8080-exec-2] DEBUG com.yun.product.dao.ProductDao.findProductByParam - <==      Total: 0
2019-01-26 09:02:06.209 [http-nio-8080-exec-1] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 and p.prod_name like ? order by prod_id 
2019-01-26 09:02:06.209 [http-nio-8080-exec-1] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==> Parameters: %wan%(String)
2019-01-26 09:02:06.210 [http-nio-8080-exec-1] DEBUG com.yun.product.dao.ProductDao.findProductByParam - <==      Total: 0
2019-01-26 09:02:07.172 [http-nio-8080-exec-10] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 and p.prod_name like ? order by prod_id 
2019-01-26 09:02:07.173 [http-nio-8080-exec-10] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==> Parameters: %玩%(String)
2019-01-26 09:02:07.176 [http-nio-8080-exec-10] DEBUG com.yun.product.dao.ProductDao.findProductByParam - <==      Total: 2
2019-01-26 09:02:07.177 [http-nio-8080-exec-10] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:02:07.178 [http-nio-8080-exec-10] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 3(Integer)
2019-01-26 09:02:07.180 [http-nio-8080-exec-10] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 0
2019-01-26 09:02:07.181 [http-nio-8080-exec-10] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:02:07.181 [http-nio-8080-exec-10] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 4(Integer)
2019-01-26 09:02:07.184 [http-nio-8080-exec-10] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 2
2019-01-26 09:07:49.035 [http-nio-8080-exec-6] DEBUG com.yun.stock.controller.ProductStockController - 跳转到物品库存查询控制器
2019-01-26 09:07:49.040 [http-nio-8080-exec-6] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==>  Preparing: select count(*) from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 
2019-01-26 09:07:49.041 [http-nio-8080-exec-6] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==> Parameters: 
2019-01-26 09:07:49.047 [http-nio-8080-exec-6] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - <==      Total: 1
2019-01-26 09:07:49.048 [http-nio-8080-exec-6] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==>  Preparing: select ps.prod_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 order by p.prod_id,pp.prod_param_id limit ?,? 
2019-01-26 09:07:49.048 [http-nio-8080-exec-6] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==> Parameters: 0(Integer), 5(Integer)
2019-01-26 09:07:49.049 [http-nio-8080-exec-6] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - <==      Total: 0
2019-01-26 09:07:49.050 [http-nio-8080-exec-6] DEBUG com.yun.stock.controller.ProductStockController - 转到物品库存页面
2019-01-26 09:07:52.624 [http-nio-8080-exec-9] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 and p.prod_name like ? order by prod_id 
2019-01-26 09:07:52.625 [http-nio-8080-exec-9] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==> Parameters: %w%(String)
2019-01-26 09:07:52.627 [http-nio-8080-exec-9] DEBUG com.yun.product.dao.ProductDao.findProductByParam - <==      Total: 0
2019-01-26 09:07:53.728 [http-nio-8080-exec-2] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 order by prod_id 
2019-01-26 09:07:53.728 [http-nio-8080-exec-2] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==> Parameters: 
2019-01-26 09:07:53.730 [http-nio-8080-exec-2] DEBUG com.yun.product.dao.ProductDao.findProductByParam - <==      Total: 4
2019-01-26 09:07:53.730 [http-nio-8080-exec-2] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:07:53.730 [http-nio-8080-exec-2] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 2(Integer)
2019-01-26 09:07:53.731 [http-nio-8080-exec-2] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 0
2019-01-26 09:07:53.731 [http-nio-8080-exec-2] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:07:53.732 [http-nio-8080-exec-2] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 3(Integer)
2019-01-26 09:07:53.732 [http-nio-8080-exec-2] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 0
2019-01-26 09:07:53.733 [http-nio-8080-exec-2] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:07:53.733 [http-nio-8080-exec-2] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 4(Integer)
2019-01-26 09:07:53.734 [http-nio-8080-exec-2] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 2
2019-01-26 09:07:53.734 [http-nio-8080-exec-2] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:07:53.734 [http-nio-8080-exec-2] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 5(Integer)
2019-01-26 09:07:53.735 [http-nio-8080-exec-2] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-01-26 09:07:53.920 [http-nio-8080-exec-1] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 and p.prod_name like ? order by prod_id 
2019-01-26 09:07:53.920 [http-nio-8080-exec-1] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==> Parameters: %a%(String)
2019-01-26 09:07:53.921 [http-nio-8080-exec-1] DEBUG com.yun.product.dao.ProductDao.findProductByParam - <==      Total: 0
2019-01-26 09:07:55.298 [http-nio-8080-exec-10] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 order by prod_id 
2019-01-26 09:07:55.299 [http-nio-8080-exec-10] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==> Parameters: 
2019-01-26 09:07:55.302 [http-nio-8080-exec-10] DEBUG com.yun.product.dao.ProductDao.findProductByParam - <==      Total: 4
2019-01-26 09:07:55.303 [http-nio-8080-exec-10] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:07:55.305 [http-nio-8080-exec-10] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 2(Integer)
2019-01-26 09:07:55.307 [http-nio-8080-exec-10] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 0
2019-01-26 09:07:55.308 [http-nio-8080-exec-10] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:07:55.308 [http-nio-8080-exec-10] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 3(Integer)
2019-01-26 09:07:55.310 [http-nio-8080-exec-10] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 0
2019-01-26 09:07:55.310 [http-nio-8080-exec-10] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:07:55.311 [http-nio-8080-exec-10] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 4(Integer)
2019-01-26 09:07:55.313 [http-nio-8080-exec-10] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 2
2019-01-26 09:07:55.313 [http-nio-8080-exec-10] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:07:55.313 [http-nio-8080-exec-10] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 5(Integer)
2019-01-26 09:07:55.316 [http-nio-8080-exec-10] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-01-26 09:07:55.596 [http-nio-8080-exec-6] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 order by prod_id 
2019-01-26 09:07:55.596 [http-nio-8080-exec-6] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==> Parameters: 
2019-01-26 09:07:55.598 [http-nio-8080-exec-6] DEBUG com.yun.product.dao.ProductDao.findProductByParam - <==      Total: 4
2019-01-26 09:07:55.599 [http-nio-8080-exec-6] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:07:55.599 [http-nio-8080-exec-6] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 2(Integer)
2019-01-26 09:07:55.600 [http-nio-8080-exec-6] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 0
2019-01-26 09:07:55.601 [http-nio-8080-exec-6] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:07:55.601 [http-nio-8080-exec-6] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 3(Integer)
2019-01-26 09:07:55.602 [http-nio-8080-exec-6] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 0
2019-01-26 09:07:55.603 [http-nio-8080-exec-6] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:07:55.603 [http-nio-8080-exec-6] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 4(Integer)
2019-01-26 09:07:55.605 [http-nio-8080-exec-6] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 2
2019-01-26 09:07:55.605 [http-nio-8080-exec-6] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:07:55.605 [http-nio-8080-exec-6] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 5(Integer)
2019-01-26 09:07:55.607 [http-nio-8080-exec-6] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-01-26 09:07:55.617 [http-nio-8080-exec-3] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 order by prod_id 
2019-01-26 09:07:55.618 [http-nio-8080-exec-3] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==> Parameters: 
2019-01-26 09:07:55.620 [http-nio-8080-exec-3] DEBUG com.yun.product.dao.ProductDao.findProductByParam - <==      Total: 4
2019-01-26 09:07:55.620 [http-nio-8080-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:07:55.620 [http-nio-8080-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 2(Integer)
2019-01-26 09:07:55.621 [http-nio-8080-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 0
2019-01-26 09:07:55.621 [http-nio-8080-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:07:55.621 [http-nio-8080-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 3(Integer)
2019-01-26 09:07:55.622 [http-nio-8080-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 0
2019-01-26 09:07:55.622 [http-nio-8080-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:07:55.622 [http-nio-8080-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 4(Integer)
2019-01-26 09:07:55.623 [http-nio-8080-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 2
2019-01-26 09:07:55.623 [http-nio-8080-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:07:55.623 [http-nio-8080-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 5(Integer)
2019-01-26 09:07:55.624 [http-nio-8080-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-01-26 09:07:55.906 [http-nio-8080-exec-7] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 and p.prod_name like ? order by prod_id 
2019-01-26 09:07:55.906 [http-nio-8080-exec-7] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==> Parameters: %a%(String)
2019-01-26 09:07:55.907 [http-nio-8080-exec-7] DEBUG com.yun.product.dao.ProductDao.findProductByParam - <==      Total: 0
2019-01-26 09:07:56.803 [http-nio-8080-exec-8] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 order by prod_id 
2019-01-26 09:07:56.803 [http-nio-8080-exec-8] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==> Parameters: 
2019-01-26 09:07:56.807 [http-nio-8080-exec-8] DEBUG com.yun.product.dao.ProductDao.findProductByParam - <==      Total: 4
2019-01-26 09:07:56.807 [http-nio-8080-exec-8] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:07:56.808 [http-nio-8080-exec-8] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 2(Integer)
2019-01-26 09:07:56.810 [http-nio-8080-exec-8] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 0
2019-01-26 09:07:56.810 [http-nio-8080-exec-8] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:07:56.811 [http-nio-8080-exec-8] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 3(Integer)
2019-01-26 09:07:56.812 [http-nio-8080-exec-8] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 0
2019-01-26 09:07:56.813 [http-nio-8080-exec-8] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:07:56.814 [http-nio-8080-exec-8] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 4(Integer)
2019-01-26 09:07:56.816 [http-nio-8080-exec-8] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 2
2019-01-26 09:07:56.816 [http-nio-8080-exec-8] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:07:56.817 [http-nio-8080-exec-8] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 5(Integer)
2019-01-26 09:07:56.818 [http-nio-8080-exec-8] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-01-26 09:07:57.375 [http-nio-8080-exec-5] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 and p.prod_name like ? order by prod_id 
2019-01-26 09:07:57.376 [http-nio-8080-exec-5] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==> Parameters: %a%(String)
2019-01-26 09:07:57.380 [http-nio-8080-exec-5] DEBUG com.yun.product.dao.ProductDao.findProductByParam - <==      Total: 0
2019-01-26 09:07:58.971 [http-nio-8080-exec-4] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 and p.prod_name like ? order by prod_id 
2019-01-26 09:07:58.972 [http-nio-8080-exec-4] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==> Parameters: %as%(String)
2019-01-26 09:07:58.975 [http-nio-8080-exec-4] DEBUG com.yun.product.dao.ProductDao.findProductByParam - <==      Total: 0
2019-01-26 09:08:39.716 [http-nio-8080-exec-5] DEBUG com.yun.stock.controller.ProductStockController - 跳转到物品库存查询控制器
2019-01-26 09:08:39.718 [http-nio-8080-exec-5] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==>  Preparing: select count(*) from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 
2019-01-26 09:08:39.719 [http-nio-8080-exec-5] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==> Parameters: 
2019-01-26 09:08:39.720 [http-nio-8080-exec-5] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - <==      Total: 1
2019-01-26 09:08:39.721 [http-nio-8080-exec-5] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==>  Preparing: select ps.prod_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 order by p.prod_id,pp.prod_param_id limit ?,? 
2019-01-26 09:08:39.721 [http-nio-8080-exec-5] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==> Parameters: 0(Integer), 5(Integer)
2019-01-26 09:08:39.723 [http-nio-8080-exec-5] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - <==      Total: 0
2019-01-26 09:08:39.723 [http-nio-8080-exec-5] DEBUG com.yun.stock.controller.ProductStockController - 转到物品库存页面
2019-01-26 09:08:43.213 [http-nio-8080-exec-6] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 and p.prod_name like ? order by prod_id 
2019-01-26 09:08:43.214 [http-nio-8080-exec-6] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==> Parameters: %a%(String)
2019-01-26 09:08:43.216 [http-nio-8080-exec-6] DEBUG com.yun.product.dao.ProductDao.findProductByParam - <==      Total: 0
2019-01-26 09:08:44.324 [http-nio-8080-exec-3] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 order by prod_id 
2019-01-26 09:08:44.325 [http-nio-8080-exec-3] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==> Parameters: 
2019-01-26 09:08:44.328 [http-nio-8080-exec-3] DEBUG com.yun.product.dao.ProductDao.findProductByParam - <==      Total: 4
2019-01-26 09:08:44.329 [http-nio-8080-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:08:44.330 [http-nio-8080-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 2(Integer)
2019-01-26 09:08:44.332 [http-nio-8080-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 0
2019-01-26 09:08:44.333 [http-nio-8080-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:08:44.333 [http-nio-8080-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 3(Integer)
2019-01-26 09:08:44.335 [http-nio-8080-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 0
2019-01-26 09:08:44.335 [http-nio-8080-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:08:44.336 [http-nio-8080-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 4(Integer)
2019-01-26 09:08:44.337 [http-nio-8080-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 2
2019-01-26 09:08:44.338 [http-nio-8080-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:08:44.338 [http-nio-8080-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 5(Integer)
2019-01-26 09:08:44.339 [http-nio-8080-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-01-26 09:08:45.266 [http-nio-8080-exec-7] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 and p.prod_name like ? order by prod_id 
2019-01-26 09:08:45.266 [http-nio-8080-exec-7] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==> Parameters: %T%(String)
2019-01-26 09:08:45.269 [http-nio-8080-exec-7] DEBUG com.yun.product.dao.ProductDao.findProductByParam - <==      Total: 0
2019-01-26 09:08:45.453 [http-nio-8080-exec-8] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 and p.prod_name like ? order by prod_id 
2019-01-26 09:08:45.453 [http-nio-8080-exec-8] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==> Parameters: %T%(String)
2019-01-26 09:08:45.456 [http-nio-8080-exec-8] DEBUG com.yun.product.dao.ProductDao.findProductByParam - <==      Total: 0
2019-01-26 09:09:20.894 [http-nio-8080-exec-5] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 order by prod_id 
2019-01-26 09:09:20.895 [http-nio-8080-exec-5] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==> Parameters: 
2019-01-26 09:09:20.898 [http-nio-8080-exec-5] DEBUG com.yun.product.dao.ProductDao.findProductByParam - <==      Total: 4
2019-01-26 09:09:20.899 [http-nio-8080-exec-5] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:09:20.900 [http-nio-8080-exec-5] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 2(Integer)
2019-01-26 09:09:20.902 [http-nio-8080-exec-5] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 0
2019-01-26 09:09:20.903 [http-nio-8080-exec-5] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:09:20.903 [http-nio-8080-exec-5] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 3(Integer)
2019-01-26 09:09:20.904 [http-nio-8080-exec-5] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 0
2019-01-26 09:09:20.905 [http-nio-8080-exec-5] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:09:20.905 [http-nio-8080-exec-5] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 4(Integer)
2019-01-26 09:09:20.906 [http-nio-8080-exec-5] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 2
2019-01-26 09:09:20.907 [http-nio-8080-exec-5] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:09:20.907 [http-nio-8080-exec-5] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 5(Integer)
2019-01-26 09:09:20.908 [http-nio-8080-exec-5] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-01-26 09:09:21.188 [http-nio-8080-exec-4] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 and p.prod_name like ? order by prod_id 
2019-01-26 09:09:21.188 [http-nio-8080-exec-4] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==> Parameters: %w%(String)
2019-01-26 09:09:21.189 [http-nio-8080-exec-4] DEBUG com.yun.product.dao.ProductDao.findProductByParam - <==      Total: 0
2019-01-26 09:09:22.707 [http-nio-8080-exec-9] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 order by prod_id 
2019-01-26 09:09:22.707 [http-nio-8080-exec-9] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==> Parameters: 
2019-01-26 09:09:22.708 [http-nio-8080-exec-9] DEBUG com.yun.product.dao.ProductDao.findProductByParam - <==      Total: 4
2019-01-26 09:09:22.709 [http-nio-8080-exec-9] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:09:22.709 [http-nio-8080-exec-9] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 2(Integer)
2019-01-26 09:09:22.710 [http-nio-8080-exec-9] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 0
2019-01-26 09:09:22.710 [http-nio-8080-exec-9] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:09:22.710 [http-nio-8080-exec-9] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 3(Integer)
2019-01-26 09:09:22.711 [http-nio-8080-exec-9] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 0
2019-01-26 09:09:22.711 [http-nio-8080-exec-9] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:09:22.711 [http-nio-8080-exec-9] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 4(Integer)
2019-01-26 09:09:22.713 [http-nio-8080-exec-9] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 2
2019-01-26 09:09:22.713 [http-nio-8080-exec-9] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:09:22.713 [http-nio-8080-exec-9] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 5(Integer)
2019-01-26 09:09:22.714 [http-nio-8080-exec-9] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-01-26 09:09:27.798 [http-nio-8080-exec-4] DEBUG com.yun.stock.controller.ProductStockController - 跳转到物品库存查询控制器
2019-01-26 09:09:27.801 [http-nio-8080-exec-4] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==>  Preparing: select count(*) from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 
2019-01-26 09:09:27.801 [http-nio-8080-exec-4] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==> Parameters: 
2019-01-26 09:09:27.807 [http-nio-8080-exec-4] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - <==      Total: 1
2019-01-26 09:09:27.808 [http-nio-8080-exec-4] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==>  Preparing: select ps.prod_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 order by p.prod_id,pp.prod_param_id limit ?,? 
2019-01-26 09:09:27.808 [http-nio-8080-exec-4] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==> Parameters: 0(Integer), 5(Integer)
2019-01-26 09:09:27.809 [http-nio-8080-exec-4] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - <==      Total: 0
2019-01-26 09:09:27.809 [http-nio-8080-exec-4] DEBUG com.yun.stock.controller.ProductStockController - 转到物品库存页面
2019-01-26 09:09:30.691 [http-nio-8080-exec-3] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 and p.prod_name like ? order by prod_id 
2019-01-26 09:09:30.691 [http-nio-8080-exec-3] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==> Parameters: %w%(String)
2019-01-26 09:09:30.692 [http-nio-8080-exec-3] DEBUG com.yun.product.dao.ProductDao.findProductByParam - <==      Total: 0
2019-01-26 09:09:31.118 [http-nio-8080-exec-7] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 and p.prod_name like ? order by prod_id 
2019-01-26 09:09:31.119 [http-nio-8080-exec-7] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==> Parameters: %wa%(String)
2019-01-26 09:09:31.121 [http-nio-8080-exec-7] DEBUG com.yun.product.dao.ProductDao.findProductByParam - <==      Total: 0
2019-01-26 09:09:31.450 [http-nio-8080-exec-8] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 and p.prod_name like ? order by prod_id 
2019-01-26 09:09:31.450 [http-nio-8080-exec-8] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==> Parameters: %w%(String)
2019-01-26 09:09:31.452 [http-nio-8080-exec-8] DEBUG com.yun.product.dao.ProductDao.findProductByParam - <==      Total: 0
2019-01-26 09:09:31.630 [http-nio-8080-exec-5] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 order by prod_id 
2019-01-26 09:09:31.631 [http-nio-8080-exec-5] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==> Parameters: 
2019-01-26 09:09:31.634 [http-nio-8080-exec-5] DEBUG com.yun.product.dao.ProductDao.findProductByParam - <==      Total: 4
2019-01-26 09:09:31.635 [http-nio-8080-exec-5] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:09:31.635 [http-nio-8080-exec-5] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 2(Integer)
2019-01-26 09:09:31.637 [http-nio-8080-exec-5] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 0
2019-01-26 09:09:31.638 [http-nio-8080-exec-5] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:09:31.639 [http-nio-8080-exec-5] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 3(Integer)
2019-01-26 09:09:31.640 [http-nio-8080-exec-5] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 0
2019-01-26 09:09:31.641 [http-nio-8080-exec-5] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:09:31.642 [http-nio-8080-exec-5] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 4(Integer)
2019-01-26 09:09:31.644 [http-nio-8080-exec-5] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 2
2019-01-26 09:09:31.645 [http-nio-8080-exec-5] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:09:31.646 [http-nio-8080-exec-5] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 5(Integer)
2019-01-26 09:09:31.647 [http-nio-8080-exec-5] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-01-26 09:09:31.932 [http-nio-8080-exec-4] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 order by prod_id 
2019-01-26 09:09:31.932 [http-nio-8080-exec-4] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==> Parameters: 
2019-01-26 09:09:31.935 [http-nio-8080-exec-4] DEBUG com.yun.product.dao.ProductDao.findProductByParam - <==      Total: 4
2019-01-26 09:09:31.935 [http-nio-8080-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:09:31.935 [http-nio-8080-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 2(Integer)
2019-01-26 09:09:31.937 [http-nio-8080-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 0
2019-01-26 09:09:31.937 [http-nio-8080-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:09:31.937 [http-nio-8080-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 3(Integer)
2019-01-26 09:09:31.938 [http-nio-8080-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 0
2019-01-26 09:09:31.938 [http-nio-8080-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:09:31.938 [http-nio-8080-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 4(Integer)
2019-01-26 09:09:31.939 [http-nio-8080-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 2
2019-01-26 09:09:31.939 [http-nio-8080-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:09:31.939 [http-nio-8080-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 5(Integer)
2019-01-26 09:09:31.940 [http-nio-8080-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-01-26 09:09:31.960 [http-nio-8080-exec-9] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 order by prod_id 
2019-01-26 09:09:31.960 [http-nio-8080-exec-9] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==> Parameters: 
2019-01-26 09:09:31.961 [http-nio-8080-exec-9] DEBUG com.yun.product.dao.ProductDao.findProductByParam - <==      Total: 4
2019-01-26 09:09:31.961 [http-nio-8080-exec-9] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:09:31.962 [http-nio-8080-exec-9] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 2(Integer)
2019-01-26 09:09:31.962 [http-nio-8080-exec-9] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 0
2019-01-26 09:09:31.963 [http-nio-8080-exec-9] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:09:31.963 [http-nio-8080-exec-9] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 3(Integer)
2019-01-26 09:09:31.964 [http-nio-8080-exec-9] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 0
2019-01-26 09:09:31.964 [http-nio-8080-exec-9] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:09:31.964 [http-nio-8080-exec-9] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 4(Integer)
2019-01-26 09:09:31.965 [http-nio-8080-exec-9] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 2
2019-01-26 09:09:31.965 [http-nio-8080-exec-9] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:09:31.965 [http-nio-8080-exec-9] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 5(Integer)
2019-01-26 09:09:31.965 [http-nio-8080-exec-9] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-01-26 09:09:32.138 [http-nio-8080-exec-10] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 and p.prod_name like ? order by prod_id 
2019-01-26 09:09:32.139 [http-nio-8080-exec-10] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==> Parameters: %w%(String)
2019-01-26 09:09:32.141 [http-nio-8080-exec-10] DEBUG com.yun.product.dao.ProductDao.findProductByParam - <==      Total: 0
2019-01-26 09:09:32.383 [http-nio-8080-exec-1] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 and p.prod_name like ? order by prod_id 
2019-01-26 09:09:32.384 [http-nio-8080-exec-1] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==> Parameters: %wa%(String)
2019-01-26 09:09:32.386 [http-nio-8080-exec-1] DEBUG com.yun.product.dao.ProductDao.findProductByParam - <==      Total: 0
2019-01-26 09:09:32.601 [http-nio-8080-exec-2] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 and p.prod_name like ? order by prod_id 
2019-01-26 09:09:32.604 [http-nio-8080-exec-2] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==> Parameters: %wan%(String)
2019-01-26 09:09:32.606 [http-nio-8080-exec-2] DEBUG com.yun.product.dao.ProductDao.findProductByParam - <==      Total: 0
2019-01-26 09:09:32.768 [http-nio-8080-exec-6] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 and p.prod_name like ? order by prod_id 
2019-01-26 09:09:32.768 [http-nio-8080-exec-6] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==> Parameters: %wang%(String)
2019-01-26 09:09:32.769 [http-nio-8080-exec-6] DEBUG com.yun.product.dao.ProductDao.findProductByParam - <==      Total: 0
2019-01-26 09:09:33.514 [http-nio-8080-exec-3] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 and p.prod_name like ? order by prod_id 
2019-01-26 09:09:33.515 [http-nio-8080-exec-3] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==> Parameters: %wan%(String)
2019-01-26 09:09:33.517 [http-nio-8080-exec-3] DEBUG com.yun.product.dao.ProductDao.findProductByParam - <==      Total: 0
2019-01-26 09:09:34.645 [http-nio-8080-exec-7] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 and p.prod_name like ? order by prod_id 
2019-01-26 09:09:34.646 [http-nio-8080-exec-7] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==> Parameters: %玩%(String)
2019-01-26 09:09:34.648 [http-nio-8080-exec-7] DEBUG com.yun.product.dao.ProductDao.findProductByParam - <==      Total: 2
2019-01-26 09:09:34.649 [http-nio-8080-exec-7] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:09:34.649 [http-nio-8080-exec-7] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 3(Integer)
2019-01-26 09:09:34.651 [http-nio-8080-exec-7] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 0
2019-01-26 09:09:34.652 [http-nio-8080-exec-7] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:09:34.653 [http-nio-8080-exec-7] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 4(Integer)
2019-01-26 09:09:34.657 [http-nio-8080-exec-7] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 2
2019-01-26 09:11:42.536 [http-nio-8080-exec-4] DEBUG com.yun.stock.controller.ProductStockController - 跳转到物品库存查询控制器
2019-01-26 09:11:42.539 [http-nio-8080-exec-4] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==>  Preparing: select count(*) from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 
2019-01-26 09:11:42.539 [http-nio-8080-exec-4] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==> Parameters: 
2019-01-26 09:11:42.540 [http-nio-8080-exec-4] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - <==      Total: 1
2019-01-26 09:11:42.541 [http-nio-8080-exec-4] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==>  Preparing: select ps.prod_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 order by p.prod_id,pp.prod_param_id limit ?,? 
2019-01-26 09:11:42.541 [http-nio-8080-exec-4] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==> Parameters: 0(Integer), 5(Integer)
2019-01-26 09:11:42.542 [http-nio-8080-exec-4] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - <==      Total: 0
2019-01-26 09:11:42.542 [http-nio-8080-exec-4] DEBUG com.yun.stock.controller.ProductStockController - 转到物品库存页面
2019-01-26 09:11:45.334 [http-nio-8080-exec-6] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 and p.prod_name like ? order by prod_id 
2019-01-26 09:11:45.334 [http-nio-8080-exec-6] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==> Parameters: %a%(String)
2019-01-26 09:11:45.336 [http-nio-8080-exec-6] DEBUG com.yun.product.dao.ProductDao.findProductByParam - <==      Total: 0
2019-01-26 09:11:47.337 [http-nio-8080-exec-7] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 order by prod_id 
2019-01-26 09:11:47.337 [http-nio-8080-exec-7] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==> Parameters: 
2019-01-26 09:11:47.340 [http-nio-8080-exec-7] DEBUG com.yun.product.dao.ProductDao.findProductByParam - <==      Total: 4
2019-01-26 09:11:47.341 [http-nio-8080-exec-7] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:11:47.341 [http-nio-8080-exec-7] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 2(Integer)
2019-01-26 09:11:47.342 [http-nio-8080-exec-7] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 0
2019-01-26 09:11:47.343 [http-nio-8080-exec-7] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:11:47.343 [http-nio-8080-exec-7] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 3(Integer)
2019-01-26 09:11:47.345 [http-nio-8080-exec-7] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 0
2019-01-26 09:11:47.346 [http-nio-8080-exec-7] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:11:47.346 [http-nio-8080-exec-7] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 4(Integer)
2019-01-26 09:11:47.348 [http-nio-8080-exec-7] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 2
2019-01-26 09:11:47.349 [http-nio-8080-exec-7] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:11:47.349 [http-nio-8080-exec-7] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 5(Integer)
2019-01-26 09:11:47.350 [http-nio-8080-exec-7] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-01-26 09:11:47.637 [http-nio-8080-exec-5] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 and p.prod_name like ? order by prod_id 
2019-01-26 09:11:47.638 [http-nio-8080-exec-5] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==> Parameters: %w%(String)
2019-01-26 09:11:47.639 [http-nio-8080-exec-5] DEBUG com.yun.product.dao.ProductDao.findProductByParam - <==      Total: 0
2019-01-26 09:11:48.445 [http-nio-8080-exec-8] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 and p.prod_name like ? order by prod_id 
2019-01-26 09:11:48.446 [http-nio-8080-exec-8] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==> Parameters: %wa%(String)
2019-01-26 09:11:48.449 [http-nio-8080-exec-8] DEBUG com.yun.product.dao.ProductDao.findProductByParam - <==      Total: 0
2019-01-26 09:11:48.586 [http-nio-8080-exec-4] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 and p.prod_name like ? order by prod_id 
2019-01-26 09:11:48.586 [http-nio-8080-exec-4] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==> Parameters: %wan%(String)
2019-01-26 09:11:48.588 [http-nio-8080-exec-4] DEBUG com.yun.product.dao.ProductDao.findProductByParam - <==      Total: 0
2019-01-26 09:11:48.890 [http-nio-8080-exec-10] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 and p.prod_name like ? order by prod_id 
2019-01-26 09:11:48.891 [http-nio-8080-exec-10] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==> Parameters: %wang%(String)
2019-01-26 09:11:48.893 [http-nio-8080-exec-10] DEBUG com.yun.product.dao.ProductDao.findProductByParam - <==      Total: 0
2019-01-26 09:11:49.256 [http-nio-8080-exec-9] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 and p.prod_name like ? order by prod_id 
2019-01-26 09:11:49.257 [http-nio-8080-exec-9] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==> Parameters: %王%(String)
2019-01-26 09:11:49.258 [http-nio-8080-exec-9] DEBUG com.yun.product.dao.ProductDao.findProductByParam - <==      Total: 0
2019-01-26 09:11:49.739 [http-nio-8080-exec-2] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 order by prod_id 
2019-01-26 09:11:49.739 [http-nio-8080-exec-2] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==> Parameters: 
2019-01-26 09:11:49.742 [http-nio-8080-exec-2] DEBUG com.yun.product.dao.ProductDao.findProductByParam - <==      Total: 4
2019-01-26 09:11:49.742 [http-nio-8080-exec-2] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:11:49.743 [http-nio-8080-exec-2] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 2(Integer)
2019-01-26 09:11:49.745 [http-nio-8080-exec-2] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 0
2019-01-26 09:11:49.745 [http-nio-8080-exec-2] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:11:49.746 [http-nio-8080-exec-2] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 3(Integer)
2019-01-26 09:11:49.747 [http-nio-8080-exec-2] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 0
2019-01-26 09:11:49.747 [http-nio-8080-exec-2] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:11:49.747 [http-nio-8080-exec-2] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 4(Integer)
2019-01-26 09:11:49.749 [http-nio-8080-exec-2] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 2
2019-01-26 09:11:49.749 [http-nio-8080-exec-2] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:11:49.750 [http-nio-8080-exec-2] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 5(Integer)
2019-01-26 09:11:49.751 [http-nio-8080-exec-2] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-01-26 09:11:49.940 [http-nio-8080-exec-3] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 and p.prod_name like ? order by prod_id 
2019-01-26 09:11:49.941 [http-nio-8080-exec-3] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==> Parameters: %w%(String)
2019-01-26 09:11:49.943 [http-nio-8080-exec-3] DEBUG com.yun.product.dao.ProductDao.findProductByParam - <==      Total: 0
2019-01-26 09:11:50.116 [http-nio-8080-exec-1] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 and p.prod_name like ? order by prod_id 
2019-01-26 09:11:50.116 [http-nio-8080-exec-1] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==> Parameters: %wa%(String)
2019-01-26 09:11:50.118 [http-nio-8080-exec-1] DEBUG com.yun.product.dao.ProductDao.findProductByParam - <==      Total: 0
2019-01-26 09:11:50.297 [http-nio-8080-exec-6] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 and p.prod_name like ? order by prod_id 
2019-01-26 09:11:50.297 [http-nio-8080-exec-6] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==> Parameters: %wan%(String)
2019-01-26 09:11:50.300 [http-nio-8080-exec-6] DEBUG com.yun.product.dao.ProductDao.findProductByParam - <==      Total: 0
2019-01-26 09:11:50.924 [http-nio-8080-exec-7] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 and p.prod_name like ? order by prod_id 
2019-01-26 09:11:50.925 [http-nio-8080-exec-7] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==> Parameters: %玩%(String)
2019-01-26 09:11:50.927 [http-nio-8080-exec-7] DEBUG com.yun.product.dao.ProductDao.findProductByParam - <==      Total: 2
2019-01-26 09:11:50.928 [http-nio-8080-exec-7] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:11:50.928 [http-nio-8080-exec-7] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 3(Integer)
2019-01-26 09:11:50.930 [http-nio-8080-exec-7] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 0
2019-01-26 09:11:50.931 [http-nio-8080-exec-7] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:11:50.931 [http-nio-8080-exec-7] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 4(Integer)
2019-01-26 09:11:50.933 [http-nio-8080-exec-7] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 2
2019-01-26 09:11:59.755 [http-nio-8080-exec-6] DEBUG com.yun.stock.controller.ProductStockController - 跳转到物品库存查询控制器
2019-01-26 09:11:59.757 [http-nio-8080-exec-6] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==>  Preparing: select count(*) from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 
2019-01-26 09:11:59.757 [http-nio-8080-exec-6] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==> Parameters: 
2019-01-26 09:11:59.758 [http-nio-8080-exec-6] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - <==      Total: 1
2019-01-26 09:11:59.759 [http-nio-8080-exec-6] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==>  Preparing: select ps.prod_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 order by p.prod_id,pp.prod_param_id limit ?,? 
2019-01-26 09:11:59.760 [http-nio-8080-exec-6] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==> Parameters: 0(Integer), 5(Integer)
2019-01-26 09:11:59.761 [http-nio-8080-exec-6] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - <==      Total: 0
2019-01-26 09:11:59.761 [http-nio-8080-exec-6] DEBUG com.yun.stock.controller.ProductStockController - 转到物品库存页面
2019-01-26 09:12:03.035 [http-nio-8080-exec-9] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 and p.prod_name like ? order by prod_id 
2019-01-26 09:12:03.036 [http-nio-8080-exec-9] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==> Parameters: %a%(String)
2019-01-26 09:12:03.037 [http-nio-8080-exec-9] DEBUG com.yun.product.dao.ProductDao.findProductByParam - <==      Total: 0
2019-01-26 09:12:06.803 [http-nio-8080-exec-2] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 order by prod_id 
2019-01-26 09:12:06.804 [http-nio-8080-exec-2] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==> Parameters: 
2019-01-26 09:12:06.807 [http-nio-8080-exec-2] DEBUG com.yun.product.dao.ProductDao.findProductByParam - <==      Total: 4
2019-01-26 09:12:06.808 [http-nio-8080-exec-2] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:12:06.808 [http-nio-8080-exec-2] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 2(Integer)
2019-01-26 09:12:06.810 [http-nio-8080-exec-2] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 0
2019-01-26 09:12:06.810 [http-nio-8080-exec-2] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:12:06.810 [http-nio-8080-exec-2] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 3(Integer)
2019-01-26 09:12:06.811 [http-nio-8080-exec-2] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 0
2019-01-26 09:12:06.812 [http-nio-8080-exec-2] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:12:06.812 [http-nio-8080-exec-2] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 4(Integer)
2019-01-26 09:12:06.813 [http-nio-8080-exec-2] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 2
2019-01-26 09:12:06.813 [http-nio-8080-exec-2] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:12:06.814 [http-nio-8080-exec-2] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 5(Integer)
2019-01-26 09:12:06.815 [http-nio-8080-exec-2] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-01-26 09:12:07.265 [http-nio-8080-exec-3] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 and p.prod_name like ? order by prod_id 
2019-01-26 09:12:07.265 [http-nio-8080-exec-3] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==> Parameters: %w%(String)
2019-01-26 09:12:07.266 [http-nio-8080-exec-3] DEBUG com.yun.product.dao.ProductDao.findProductByParam - <==      Total: 0
2019-01-26 09:12:08.291 [http-nio-8080-exec-1] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 order by prod_id 
2019-01-26 09:12:08.292 [http-nio-8080-exec-1] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==> Parameters: 
2019-01-26 09:12:08.295 [http-nio-8080-exec-1] DEBUG com.yun.product.dao.ProductDao.findProductByParam - <==      Total: 4
2019-01-26 09:12:08.296 [http-nio-8080-exec-1] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:12:08.296 [http-nio-8080-exec-1] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 2(Integer)
2019-01-26 09:12:08.298 [http-nio-8080-exec-1] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 0
2019-01-26 09:12:08.299 [http-nio-8080-exec-1] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:12:08.300 [http-nio-8080-exec-1] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 3(Integer)
2019-01-26 09:12:08.301 [http-nio-8080-exec-1] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 0
2019-01-26 09:12:08.302 [http-nio-8080-exec-1] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:12:08.302 [http-nio-8080-exec-1] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 4(Integer)
2019-01-26 09:12:08.304 [http-nio-8080-exec-1] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 2
2019-01-26 09:12:08.304 [http-nio-8080-exec-1] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:12:08.305 [http-nio-8080-exec-1] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 5(Integer)
2019-01-26 09:12:08.306 [http-nio-8080-exec-1] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-01-26 09:12:08.596 [http-nio-8080-exec-6] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 and p.prod_name like ? order by prod_id 
2019-01-26 09:12:08.596 [http-nio-8080-exec-6] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==> Parameters: %w%(String)
2019-01-26 09:12:08.597 [http-nio-8080-exec-6] DEBUG com.yun.product.dao.ProductDao.findProductByParam - <==      Total: 0
2019-01-26 09:12:09.280 [http-nio-8080-exec-5] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 and p.prod_name like ? order by prod_id 
2019-01-26 09:12:09.281 [http-nio-8080-exec-5] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==> Parameters: %wa%(String)
2019-01-26 09:12:09.285 [http-nio-8080-exec-5] DEBUG com.yun.product.dao.ProductDao.findProductByParam - <==      Total: 0
2019-01-26 09:12:09.893 [http-nio-8080-exec-7] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 and p.prod_name like ? order by prod_id 
2019-01-26 09:12:09.893 [http-nio-8080-exec-7] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==> Parameters: %w%(String)
2019-01-26 09:12:09.896 [http-nio-8080-exec-7] DEBUG com.yun.product.dao.ProductDao.findProductByParam - <==      Total: 0
2019-01-26 09:12:10.288 [http-nio-8080-exec-8] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 and p.prod_name like ? order by prod_id 
2019-01-26 09:12:10.288 [http-nio-8080-exec-8] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==> Parameters: %玩%(String)
2019-01-26 09:12:10.290 [http-nio-8080-exec-8] DEBUG com.yun.product.dao.ProductDao.findProductByParam - <==      Total: 2
2019-01-26 09:12:10.291 [http-nio-8080-exec-8] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:12:10.291 [http-nio-8080-exec-8] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 3(Integer)
2019-01-26 09:12:10.292 [http-nio-8080-exec-8] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 0
2019-01-26 09:12:10.293 [http-nio-8080-exec-8] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:12:10.293 [http-nio-8080-exec-8] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 4(Integer)
2019-01-26 09:12:10.295 [http-nio-8080-exec-8] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 2
2019-01-26 09:12:54.434 [http-nio-8080-exec-7] DEBUG com.yun.stock.controller.ProductStockController - 跳转到物品库存查询控制器
2019-01-26 09:12:54.436 [http-nio-8080-exec-7] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==>  Preparing: select count(*) from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 
2019-01-26 09:12:54.437 [http-nio-8080-exec-7] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==> Parameters: 
2019-01-26 09:12:54.438 [http-nio-8080-exec-7] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - <==      Total: 1
2019-01-26 09:12:54.440 [http-nio-8080-exec-7] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==>  Preparing: select ps.prod_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 order by p.prod_id,pp.prod_param_id limit ?,? 
2019-01-26 09:12:54.440 [http-nio-8080-exec-7] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==> Parameters: 0(Integer), 5(Integer)
2019-01-26 09:12:54.443 [http-nio-8080-exec-7] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - <==      Total: 0
2019-01-26 09:12:54.444 [http-nio-8080-exec-7] DEBUG com.yun.stock.controller.ProductStockController - 转到物品库存页面
2019-01-26 09:12:57.623 [http-nio-8080-exec-9] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 and p.prod_name like ? order by prod_id 
2019-01-26 09:12:57.623 [http-nio-8080-exec-9] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==> Parameters: %a%(String)
2019-01-26 09:12:57.624 [http-nio-8080-exec-9] DEBUG com.yun.product.dao.ProductDao.findProductByParam - <==      Total: 0
2019-01-26 09:12:58.818 [http-nio-8080-exec-1] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 and p.prod_name like ? order by prod_id 
2019-01-26 09:12:58.819 [http-nio-8080-exec-1] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==> Parameters: %aa%(String)
2019-01-26 09:12:58.821 [http-nio-8080-exec-1] DEBUG com.yun.product.dao.ProductDao.findProductByParam - <==      Total: 0
2019-01-26 09:12:59.523 [http-nio-8080-exec-5] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 and p.prod_name like ? order by prod_id 
2019-01-26 09:12:59.523 [http-nio-8080-exec-5] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==> Parameters: %a%(String)
2019-01-26 09:12:59.525 [http-nio-8080-exec-5] DEBUG com.yun.product.dao.ProductDao.findProductByParam - <==      Total: 0
2019-01-26 09:12:59.705 [http-nio-8080-exec-6] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 order by prod_id 
2019-01-26 09:12:59.706 [http-nio-8080-exec-6] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==> Parameters: 
2019-01-26 09:12:59.708 [http-nio-8080-exec-6] DEBUG com.yun.product.dao.ProductDao.findProductByParam - <==      Total: 4
2019-01-26 09:12:59.709 [http-nio-8080-exec-6] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:12:59.709 [http-nio-8080-exec-6] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 2(Integer)
2019-01-26 09:12:59.710 [http-nio-8080-exec-6] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 0
2019-01-26 09:12:59.711 [http-nio-8080-exec-6] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:12:59.711 [http-nio-8080-exec-6] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 3(Integer)
2019-01-26 09:12:59.712 [http-nio-8080-exec-6] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 0
2019-01-26 09:12:59.712 [http-nio-8080-exec-6] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:12:59.713 [http-nio-8080-exec-6] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 4(Integer)
2019-01-26 09:12:59.715 [http-nio-8080-exec-6] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 2
2019-01-26 09:12:59.715 [http-nio-8080-exec-6] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:12:59.716 [http-nio-8080-exec-6] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 5(Integer)
2019-01-26 09:12:59.717 [http-nio-8080-exec-6] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-01-26 09:13:00.302 [http-nio-8080-exec-7] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 and p.prod_name like ? order by prod_id 
2019-01-26 09:13:00.303 [http-nio-8080-exec-7] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==> Parameters: %a%(String)
2019-01-26 09:13:00.306 [http-nio-8080-exec-7] DEBUG com.yun.product.dao.ProductDao.findProductByParam - <==      Total: 0
2019-01-26 09:13:01.669 [http-nio-8080-exec-8] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 order by prod_id 
2019-01-26 09:13:01.670 [http-nio-8080-exec-8] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==> Parameters: 
2019-01-26 09:13:01.672 [http-nio-8080-exec-8] DEBUG com.yun.product.dao.ProductDao.findProductByParam - <==      Total: 4
2019-01-26 09:13:01.673 [http-nio-8080-exec-8] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:13:01.674 [http-nio-8080-exec-8] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 2(Integer)
2019-01-26 09:13:01.676 [http-nio-8080-exec-8] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 0
2019-01-26 09:13:01.676 [http-nio-8080-exec-8] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:13:01.676 [http-nio-8080-exec-8] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 3(Integer)
2019-01-26 09:13:01.677 [http-nio-8080-exec-8] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 0
2019-01-26 09:13:01.677 [http-nio-8080-exec-8] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:13:01.678 [http-nio-8080-exec-8] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 4(Integer)
2019-01-26 09:13:01.679 [http-nio-8080-exec-8] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 2
2019-01-26 09:13:01.679 [http-nio-8080-exec-8] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:13:01.679 [http-nio-8080-exec-8] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 5(Integer)
2019-01-26 09:13:01.680 [http-nio-8080-exec-8] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-01-26 09:13:02.118 [http-nio-8080-exec-4] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 and p.prod_name like ? order by prod_id 
2019-01-26 09:13:02.119 [http-nio-8080-exec-4] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==> Parameters: %w%(String)
2019-01-26 09:13:02.121 [http-nio-8080-exec-4] DEBUG com.yun.product.dao.ProductDao.findProductByParam - <==      Total: 0
2019-01-26 09:13:02.928 [http-nio-8080-exec-10] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 and p.prod_name like ? order by prod_id 
2019-01-26 09:13:02.929 [http-nio-8080-exec-10] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==> Parameters: %玩%(String)
2019-01-26 09:13:02.931 [http-nio-8080-exec-10] DEBUG com.yun.product.dao.ProductDao.findProductByParam - <==      Total: 2
2019-01-26 09:13:02.932 [http-nio-8080-exec-10] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:13:02.932 [http-nio-8080-exec-10] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 3(Integer)
2019-01-26 09:13:02.935 [http-nio-8080-exec-10] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 0
2019-01-26 09:13:02.936 [http-nio-8080-exec-10] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:13:02.936 [http-nio-8080-exec-10] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 4(Integer)
2019-01-26 09:13:02.937 [http-nio-8080-exec-10] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 2
2019-01-26 09:13:19.633 [http-nio-8080-exec-4] DEBUG com.yun.stock.controller.ProductStockController - 跳转到物品库存查询控制器
2019-01-26 09:13:19.637 [http-nio-8080-exec-4] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==>  Preparing: select count(*) from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 
2019-01-26 09:13:19.638 [http-nio-8080-exec-4] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==> Parameters: 
2019-01-26 09:13:19.640 [http-nio-8080-exec-4] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - <==      Total: 1
2019-01-26 09:13:19.642 [http-nio-8080-exec-4] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==>  Preparing: select ps.prod_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 order by p.prod_id,pp.prod_param_id limit ?,? 
2019-01-26 09:13:19.642 [http-nio-8080-exec-4] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==> Parameters: 0(Integer), 5(Integer)
2019-01-26 09:13:19.645 [http-nio-8080-exec-4] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - <==      Total: 0
2019-01-26 09:13:19.646 [http-nio-8080-exec-4] DEBUG com.yun.stock.controller.ProductStockController - 转到物品库存页面
2019-01-26 09:13:26.189 [http-nio-8080-exec-3] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 and p.prod_name like ? order by prod_id 
2019-01-26 09:13:26.189 [http-nio-8080-exec-3] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==> Parameters: %玩%(String)
2019-01-26 09:13:26.191 [http-nio-8080-exec-3] DEBUG com.yun.product.dao.ProductDao.findProductByParam - <==      Total: 2
2019-01-26 09:13:26.192 [http-nio-8080-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:13:26.192 [http-nio-8080-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 3(Integer)
2019-01-26 09:13:26.193 [http-nio-8080-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 0
2019-01-26 09:13:26.194 [http-nio-8080-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:13:26.194 [http-nio-8080-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 4(Integer)
2019-01-26 09:13:26.196 [http-nio-8080-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 2
2019-01-26 09:29:07.804 [main] INFO  com.yun.YunEbStockApplication - Starting YunEbStockApplication on USER-20181202BJ with PID 6088 (E:\workspace\yun-eb-stock\target\classes started by Administrator in E:\workspace\yun-eb-stock)
2019-01-26 09:29:07.809 [main] DEBUG com.yun.YunEbStockApplication - Running with Spring Boot v1.5.9.RELEASE, Spring v4.3.13.RELEASE
2019-01-26 09:29:07.809 [main] INFO  com.yun.YunEbStockApplication - No active profile set, falling back to default profiles: default
2019-01-26 09:29:08.289 [background-preinit] INFO  org.hibernate.validator.internal.util.Version - HV000001: Hibernate Validator 5.3.6.Final
2019-01-26 09:29:08.327 [main] INFO  o.s.b.c.e.AnnotationConfigEmbeddedWebApplicationContext - Refreshing org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@6a28ffa4: startup date [Sat Jan 26 09:29:08 CST 2019]; root of context hierarchy
2019-01-26 09:29:09.812 [main] INFO  o.s.b.c.e.tomcat.TomcatEmbeddedServletContainer - Tomcat initialized with port(s): 8080 (http)
2019-01-26 09:29:09.822 [main] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2019-01-26 09:29:09.823 [main] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet Engine: Apache Tomcat/8.5.23
2019-01-26 09:29:09.927 [localhost-startStop-1] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2019-01-26 09:29:09.927 [localhost-startStop-1] INFO  org.springframework.web.context.ContextLoader - Root WebApplicationContext: initialization completed in 1600 ms
2019-01-26 09:29:10.073 [localhost-startStop-1] INFO  o.s.boot.web.servlet.ServletRegistrationBean - Mapping servlet: 'dispatcherServlet' to [/]
2019-01-26 09:29:10.079 [localhost-startStop-1] INFO  o.s.boot.web.servlet.FilterRegistrationBean - Mapping filter: 'characterEncodingFilter' to: [/*]
2019-01-26 09:29:10.079 [localhost-startStop-1] INFO  o.s.boot.web.servlet.FilterRegistrationBean - Mapping filter: 'hiddenHttpMethodFilter' to: [/*]
2019-01-26 09:29:10.080 [localhost-startStop-1] INFO  o.s.boot.web.servlet.FilterRegistrationBean - Mapping filter: 'httpPutFormContentFilter' to: [/*]
2019-01-26 09:29:10.080 [localhost-startStop-1] INFO  o.s.boot.web.servlet.FilterRegistrationBean - Mapping filter: 'requestContextFilter' to: [/*]
2019-01-26 09:29:10.843 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerAdapter - Looking for @ControllerAdvice: org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@6a28ffa4: startup date [Sat Jan 26 09:29:08 CST 2019]; root of context hierarchy
2019-01-26 09:29:10.902 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productListForAutoComplete]}" onto public java.util.List<com.yun.product.model.Product> com.yun.product.controller.ProductController.productListForAutoComplete(java.lang.String)
2019-01-26 09:29:10.903 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productList]}" onto public java.lang.String com.yun.product.controller.ProductController.productList(org.springframework.ui.Model,java.lang.String,java.lang.String,java.lang.String,java.lang.String)
2019-01-26 09:29:10.903 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productPreAdd]}" onto public java.lang.String com.yun.product.controller.ProductController.productPreAdd()
2019-01-26 09:29:10.904 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productSave]}" onto public java.lang.String com.yun.product.controller.ProductController.productSave(com.yun.product.model.Product)
2019-01-26 09:29:10.904 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productDelete]}" onto public java.lang.String com.yun.product.controller.ProductController.productDelete(int)
2019-01-26 09:29:10.904 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productPreUpdate]}" onto public java.lang.String com.yun.product.controller.ProductController.productPreUpdate(int,org.springframework.ui.Model)
2019-01-26 09:29:10.904 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productUpdate]}" onto public java.lang.String com.yun.product.controller.ProductController.productUpdate(com.yun.product.model.Product)
2019-01-26 09:29:10.905 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/prodParamPreAdd]}" onto public java.lang.String com.yun.product.controller.ProductParamController.prodParamPreAdd(int,org.springframework.ui.Model)
2019-01-26 09:29:10.906 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/prodParamList]}" onto public java.lang.String com.yun.product.controller.ProductParamController.prodParamList(int)
2019-01-26 09:29:10.906 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/prodParamDelete]}" onto public java.lang.String com.yun.product.controller.ProductParamController.prodParamDelete(int)
2019-01-26 09:29:10.906 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/prodParamSave]}" onto public java.lang.String com.yun.product.controller.ProductParamController.prodParamSave(com.yun.product.model.ProductParameter)
2019-01-26 09:29:10.909 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeList]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeList(org.springframework.ui.Model)
2019-01-26 09:29:10.909 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeTree]}" onto public java.util.List<com.yun.product.model.ProductType> com.yun.product.controller.ProductTypeController.productTypeTree()
2019-01-26 09:29:10.909 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeEdit]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeEdit()
2019-01-26 09:29:10.910 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeSave]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeSave(com.yun.product.model.ProductType)
2019-01-26 09:29:10.910 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeUpdate]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeUpdate(java.lang.Integer,org.springframework.ui.Model)
2019-01-26 09:29:10.910 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeUpdateSave]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeUpdateSave(com.yun.product.model.ProductType)
2019-01-26 09:29:10.910 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeDelete]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeDelete(java.lang.Integer,javax.servlet.http.HttpServletResponse) throws java.io.IOException
2019-01-26 09:29:10.911 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockSave]}" onto public java.lang.String com.yun.stock.controller.ProductStockController.productStockSave(com.yun.stock.model.ProductStock)
2019-01-26 09:29:10.911 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStocklist]}" onto public java.lang.String com.yun.stock.controller.ProductStockController.productStocklist(java.lang.String,java.lang.String,org.springframework.ui.Model)
2019-01-26 09:29:10.912 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockPreAdd]}" onto public java.lang.String com.yun.stock.controller.ProductStockController.productStockPreAdd()
2019-01-26 09:29:10.912 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/main]}" onto public java.lang.String com.yun.user.controller.MainController.main()
2019-01-26 09:29:10.913 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/userList]}" onto public java.lang.String com.yun.user.controller.UserController.userList(org.springframework.ui.Model)
2019-01-26 09:29:10.913 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/login]}" onto public java.lang.String com.yun.user.controller.UserController.login(java.lang.String,java.lang.String,javax.servlet.http.HttpSession)
2019-01-26 09:29:10.913 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/userEdit]}" onto public java.lang.String com.yun.user.controller.UserController.userEdit()
2019-01-26 09:29:10.913 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/userSave]}" onto public java.lang.String com.yun.user.controller.UserController.userSave(com.yun.user.model.UserInfo)
2019-01-26 09:29:10.913 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/deleteUserInfo]}" onto public java.lang.String com.yun.user.controller.UserController.userDelete(int)
2019-01-26 09:29:10.916 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/error]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> org.springframework.boot.autoconfigure.web.BasicErrorController.error(javax.servlet.http.HttpServletRequest)
2019-01-26 09:29:10.917 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/error],produces=[text/html]}" onto public org.springframework.web.servlet.ModelAndView org.springframework.boot.autoconfigure.web.BasicErrorController.errorHtml(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
2019-01-26 09:29:10.952 [main] INFO  o.s.web.servlet.handler.SimpleUrlHandlerMapping - Mapped URL path [/webjars/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-01-26 09:29:10.952 [main] INFO  o.s.web.servlet.handler.SimpleUrlHandlerMapping - Mapped URL path [/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-01-26 09:29:10.990 [main] INFO  o.s.web.servlet.handler.SimpleUrlHandlerMapping - Mapped URL path [/**/favicon.ico] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-01-26 09:29:11.298 [main] INFO  o.s.b.a.w.WebMvcAutoConfiguration$WelcomePageHandlerMapping - Adding welcome page: class path resource [static/index.html]
2019-01-26 09:29:11.555 [main] INFO  o.s.jmx.export.annotation.AnnotationMBeanExporter - Registering beans for JMX exposure on startup
2019-01-26 09:29:11.575 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2019-01-26 09:29:11.586 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2019-01-26 09:29:11.600 [main] INFO  org.apache.tomcat.util.net.NioSelectorPool - Using a shared selector for servlet write/read
2019-01-26 09:29:11.617 [main] INFO  o.s.b.c.e.tomcat.TomcatEmbeddedServletContainer - Tomcat started on port(s): 8080 (http)
2019-01-26 09:29:11.622 [main] INFO  com.yun.YunEbStockApplication - Started YunEbStockApplication in 4.273 seconds (JVM running for 5.455)
2019-01-26 09:29:21.026 [http-nio-8080-exec-1] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring FrameworkServlet 'dispatcherServlet'
2019-01-26 09:29:21.026 [http-nio-8080-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - FrameworkServlet 'dispatcherServlet': initialization started
2019-01-26 09:29:21.045 [http-nio-8080-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - FrameworkServlet 'dispatcherServlet': initialization completed in 19 ms
2019-01-26 09:29:26.818 [http-nio-8080-exec-9] DEBUG com.yun.stock.controller.ProductStockController - 跳转到物品库存查询控制器
2019-01-26 09:29:27.151 [http-nio-8080-exec-9] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==>  Preparing: select count(*) from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 
2019-01-26 09:29:27.179 [http-nio-8080-exec-9] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==> Parameters: 
2019-01-26 09:29:27.189 [http-nio-8080-exec-9] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - <==      Total: 1
2019-01-26 09:29:27.198 [http-nio-8080-exec-9] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==>  Preparing: select ps.prod_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 order by p.prod_id,pp.prod_param_id limit ?,? 
2019-01-26 09:29:27.198 [http-nio-8080-exec-9] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==> Parameters: 0(Integer), 5(Integer)
2019-01-26 09:29:27.199 [http-nio-8080-exec-9] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - <==      Total: 0
2019-01-26 09:29:27.200 [http-nio-8080-exec-9] DEBUG com.yun.stock.controller.ProductStockController - 转到物品库存页面
2019-01-26 09:29:30.274 [http-nio-8080-exec-7] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 order by prod_id 
2019-01-26 09:29:30.274 [http-nio-8080-exec-7] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==> Parameters: 
2019-01-26 09:29:30.277 [http-nio-8080-exec-7] DEBUG com.yun.product.dao.ProductDao.findProductByParam - <==      Total: 4
2019-01-26 09:29:30.280 [http-nio-8080-exec-7] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:29:30.280 [http-nio-8080-exec-7] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 2(Integer)
2019-01-26 09:29:30.281 [http-nio-8080-exec-7] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 0
2019-01-26 09:29:30.282 [http-nio-8080-exec-7] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:29:30.283 [http-nio-8080-exec-7] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 3(Integer)
2019-01-26 09:29:30.285 [http-nio-8080-exec-7] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 0
2019-01-26 09:29:30.285 [http-nio-8080-exec-7] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:29:30.285 [http-nio-8080-exec-7] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 4(Integer)
2019-01-26 09:29:30.287 [http-nio-8080-exec-7] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 2
2019-01-26 09:29:30.287 [http-nio-8080-exec-7] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:29:30.288 [http-nio-8080-exec-7] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 5(Integer)
2019-01-26 09:29:30.289 [http-nio-8080-exec-7] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-01-26 09:29:32.365 [http-nio-8080-exec-6] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 order by prod_id 
2019-01-26 09:29:32.367 [http-nio-8080-exec-6] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==> Parameters: 
2019-01-26 09:29:32.373 [http-nio-8080-exec-6] DEBUG com.yun.product.dao.ProductDao.findProductByParam - <==      Total: 4
2019-01-26 09:29:32.376 [http-nio-8080-exec-6] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:29:32.376 [http-nio-8080-exec-6] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 2(Integer)
2019-01-26 09:29:32.377 [http-nio-8080-exec-6] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 0
2019-01-26 09:29:32.378 [http-nio-8080-exec-6] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:29:32.379 [http-nio-8080-exec-6] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 3(Integer)
2019-01-26 09:29:32.381 [http-nio-8080-exec-6] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 0
2019-01-26 09:29:32.381 [http-nio-8080-exec-6] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:29:32.381 [http-nio-8080-exec-6] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 4(Integer)
2019-01-26 09:29:32.383 [http-nio-8080-exec-6] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 2
2019-01-26 09:29:32.384 [http-nio-8080-exec-6] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:29:32.384 [http-nio-8080-exec-6] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 5(Integer)
2019-01-26 09:29:32.386 [http-nio-8080-exec-6] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-01-26 09:29:32.978 [http-nio-8080-exec-8] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 order by prod_id 
2019-01-26 09:29:32.981 [http-nio-8080-exec-8] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==> Parameters: 
2019-01-26 09:29:32.995 [http-nio-8080-exec-8] DEBUG com.yun.product.dao.ProductDao.findProductByParam - <==      Total: 4
2019-01-26 09:29:32.997 [http-nio-8080-exec-8] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:29:32.997 [http-nio-8080-exec-8] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 2(Integer)
2019-01-26 09:29:32.999 [http-nio-8080-exec-8] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 0
2019-01-26 09:29:33.000 [http-nio-8080-exec-8] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:29:33.000 [http-nio-8080-exec-8] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 3(Integer)
2019-01-26 09:29:33.003 [http-nio-8080-exec-8] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 0
2019-01-26 09:29:33.004 [http-nio-8080-exec-8] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:29:33.005 [http-nio-8080-exec-8] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 4(Integer)
2019-01-26 09:29:33.007 [http-nio-8080-exec-8] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 2
2019-01-26 09:29:33.008 [http-nio-8080-exec-8] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:29:33.008 [http-nio-8080-exec-8] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 5(Integer)
2019-01-26 09:29:33.009 [http-nio-8080-exec-8] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-01-26 09:29:33.541 [http-nio-8080-exec-9] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 order by prod_id 
2019-01-26 09:29:33.541 [http-nio-8080-exec-9] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==> Parameters: 
2019-01-26 09:29:33.549 [http-nio-8080-exec-9] DEBUG com.yun.product.dao.ProductDao.findProductByParam - <==      Total: 4
2019-01-26 09:29:33.550 [http-nio-8080-exec-9] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:29:33.550 [http-nio-8080-exec-9] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 2(Integer)
2019-01-26 09:29:33.551 [http-nio-8080-exec-9] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 0
2019-01-26 09:29:33.552 [http-nio-8080-exec-9] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:29:33.553 [http-nio-8080-exec-9] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 3(Integer)
2019-01-26 09:29:33.554 [http-nio-8080-exec-9] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 0
2019-01-26 09:29:33.555 [http-nio-8080-exec-9] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:29:33.555 [http-nio-8080-exec-9] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 4(Integer)
2019-01-26 09:29:33.557 [http-nio-8080-exec-9] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 2
2019-01-26 09:29:33.558 [http-nio-8080-exec-9] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:29:33.559 [http-nio-8080-exec-9] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 5(Integer)
2019-01-26 09:29:33.560 [http-nio-8080-exec-9] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-01-26 09:29:33.855 [http-nio-8080-exec-10] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 order by prod_id 
2019-01-26 09:29:33.855 [http-nio-8080-exec-10] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==> Parameters: 
2019-01-26 09:29:33.860 [http-nio-8080-exec-10] DEBUG com.yun.product.dao.ProductDao.findProductByParam - <==      Total: 4
2019-01-26 09:29:33.861 [http-nio-8080-exec-10] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:29:33.862 [http-nio-8080-exec-10] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 2(Integer)
2019-01-26 09:29:33.863 [http-nio-8080-exec-10] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 0
2019-01-26 09:29:33.866 [http-nio-8080-exec-10] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:29:33.866 [http-nio-8080-exec-10] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 3(Integer)
2019-01-26 09:29:33.867 [http-nio-8080-exec-10] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 0
2019-01-26 09:29:33.868 [http-nio-8080-exec-10] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:29:33.868 [http-nio-8080-exec-10] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 4(Integer)
2019-01-26 09:29:33.869 [http-nio-8080-exec-10] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 2
2019-01-26 09:29:33.869 [http-nio-8080-exec-10] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:29:33.870 [http-nio-8080-exec-10] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 5(Integer)
2019-01-26 09:29:33.871 [http-nio-8080-exec-10] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-01-26 09:32:41.837 [http-nio-8080-exec-3] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 order by prod_id 
2019-01-26 09:32:41.840 [http-nio-8080-exec-3] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==> Parameters: 
2019-01-26 09:32:41.846 [http-nio-8080-exec-3] DEBUG com.yun.product.dao.ProductDao.findProductByParam - <==      Total: 4
2019-01-26 09:32:41.847 [http-nio-8080-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:32:41.847 [http-nio-8080-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 2(Integer)
2019-01-26 09:32:41.848 [http-nio-8080-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 0
2019-01-26 09:32:41.848 [http-nio-8080-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:32:41.849 [http-nio-8080-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 3(Integer)
2019-01-26 09:32:41.850 [http-nio-8080-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 0
2019-01-26 09:32:41.852 [http-nio-8080-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:32:41.852 [http-nio-8080-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 4(Integer)
2019-01-26 09:32:41.860 [http-nio-8080-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 2
2019-01-26 09:32:41.861 [http-nio-8080-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:32:41.862 [http-nio-8080-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 5(Integer)
2019-01-26 09:32:41.863 [http-nio-8080-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-01-26 09:32:45.189 [http-nio-8080-exec-2] DEBUG com.yun.stock.controller.ProductStockController - 跳转到物品库存查询控制器
2019-01-26 09:32:45.194 [http-nio-8080-exec-2] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==>  Preparing: select count(*) from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 
2019-01-26 09:32:45.194 [http-nio-8080-exec-2] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==> Parameters: 
2019-01-26 09:32:45.196 [http-nio-8080-exec-2] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - <==      Total: 1
2019-01-26 09:32:45.198 [http-nio-8080-exec-2] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==>  Preparing: select ps.prod_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 order by p.prod_id,pp.prod_param_id limit ?,? 
2019-01-26 09:32:45.199 [http-nio-8080-exec-2] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==> Parameters: 0(Integer), 5(Integer)
2019-01-26 09:32:45.202 [http-nio-8080-exec-2] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - <==      Total: 0
2019-01-26 09:32:45.203 [http-nio-8080-exec-2] DEBUG com.yun.stock.controller.ProductStockController - 转到物品库存页面
2019-01-26 09:32:48.141 [http-nio-8080-exec-4] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 order by prod_id 
2019-01-26 09:32:48.142 [http-nio-8080-exec-4] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==> Parameters: 
2019-01-26 09:32:48.145 [http-nio-8080-exec-4] DEBUG com.yun.product.dao.ProductDao.findProductByParam - <==      Total: 4
2019-01-26 09:32:48.145 [http-nio-8080-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:32:48.146 [http-nio-8080-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 2(Integer)
2019-01-26 09:32:48.148 [http-nio-8080-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 0
2019-01-26 09:32:48.149 [http-nio-8080-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:32:48.149 [http-nio-8080-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 3(Integer)
2019-01-26 09:32:48.152 [http-nio-8080-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 0
2019-01-26 09:32:48.152 [http-nio-8080-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:32:48.152 [http-nio-8080-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 4(Integer)
2019-01-26 09:32:48.153 [http-nio-8080-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 2
2019-01-26 09:32:48.154 [http-nio-8080-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:32:48.154 [http-nio-8080-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 5(Integer)
2019-01-26 09:32:48.155 [http-nio-8080-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-01-26 09:33:02.995 [http-nio-8080-exec-1] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 order by prod_id 
2019-01-26 09:33:02.996 [http-nio-8080-exec-1] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==> Parameters: 
2019-01-26 09:33:02.998 [http-nio-8080-exec-1] DEBUG com.yun.product.dao.ProductDao.findProductByParam - <==      Total: 4
2019-01-26 09:33:02.999 [http-nio-8080-exec-1] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:33:02.999 [http-nio-8080-exec-1] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 2(Integer)
2019-01-26 09:33:03.000 [http-nio-8080-exec-1] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 0
2019-01-26 09:33:03.001 [http-nio-8080-exec-1] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:33:03.001 [http-nio-8080-exec-1] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 3(Integer)
2019-01-26 09:33:03.002 [http-nio-8080-exec-1] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 0
2019-01-26 09:33:03.002 [http-nio-8080-exec-1] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:33:03.002 [http-nio-8080-exec-1] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 4(Integer)
2019-01-26 09:33:03.003 [http-nio-8080-exec-1] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 2
2019-01-26 09:33:03.004 [http-nio-8080-exec-1] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:33:03.004 [http-nio-8080-exec-1] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 5(Integer)
2019-01-26 09:33:03.006 [http-nio-8080-exec-1] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-01-26 09:33:42.557 [http-nio-8080-exec-7] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 order by prod_id 
2019-01-26 09:33:42.557 [http-nio-8080-exec-7] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==> Parameters: 
2019-01-26 09:33:42.560 [http-nio-8080-exec-7] DEBUG com.yun.product.dao.ProductDao.findProductByParam - <==      Total: 4
2019-01-26 09:33:42.560 [http-nio-8080-exec-7] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:33:42.561 [http-nio-8080-exec-7] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 2(Integer)
2019-01-26 09:33:42.562 [http-nio-8080-exec-7] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 0
2019-01-26 09:33:42.562 [http-nio-8080-exec-7] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:33:42.562 [http-nio-8080-exec-7] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 3(Integer)
2019-01-26 09:33:42.563 [http-nio-8080-exec-7] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 0
2019-01-26 09:33:42.563 [http-nio-8080-exec-7] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:33:42.564 [http-nio-8080-exec-7] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 4(Integer)
2019-01-26 09:33:42.565 [http-nio-8080-exec-7] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 2
2019-01-26 09:33:42.566 [http-nio-8080-exec-7] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:33:42.566 [http-nio-8080-exec-7] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 5(Integer)
2019-01-26 09:33:42.567 [http-nio-8080-exec-7] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-01-26 09:33:46.379 [http-nio-8080-exec-2] DEBUG com.yun.stock.controller.ProductStockController - 跳转到物品库存查询控制器
2019-01-26 09:33:46.381 [http-nio-8080-exec-2] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==>  Preparing: select count(*) from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 
2019-01-26 09:33:46.381 [http-nio-8080-exec-2] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==> Parameters: 
2019-01-26 09:33:46.382 [http-nio-8080-exec-2] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - <==      Total: 1
2019-01-26 09:33:46.383 [http-nio-8080-exec-2] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==>  Preparing: select ps.prod_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 order by p.prod_id,pp.prod_param_id limit ?,? 
2019-01-26 09:33:46.383 [http-nio-8080-exec-2] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==> Parameters: 0(Integer), 5(Integer)
2019-01-26 09:33:46.385 [http-nio-8080-exec-2] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - <==      Total: 0
2019-01-26 09:33:46.385 [http-nio-8080-exec-2] DEBUG com.yun.stock.controller.ProductStockController - 转到物品库存页面
2019-01-26 09:34:02.279 [http-nio-8080-exec-4] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 order by prod_id 
2019-01-26 09:34:02.279 [http-nio-8080-exec-4] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==> Parameters: 
2019-01-26 09:34:02.281 [http-nio-8080-exec-4] DEBUG com.yun.product.dao.ProductDao.findProductByParam - <==      Total: 4
2019-01-26 09:34:02.282 [http-nio-8080-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:34:02.283 [http-nio-8080-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 2(Integer)
2019-01-26 09:34:02.285 [http-nio-8080-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 0
2019-01-26 09:34:02.286 [http-nio-8080-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:34:02.286 [http-nio-8080-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 3(Integer)
2019-01-26 09:34:02.288 [http-nio-8080-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 0
2019-01-26 09:34:02.288 [http-nio-8080-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:34:02.288 [http-nio-8080-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 4(Integer)
2019-01-26 09:34:02.290 [http-nio-8080-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 2
2019-01-26 09:34:02.290 [http-nio-8080-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:34:02.291 [http-nio-8080-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 5(Integer)
2019-01-26 09:34:02.294 [http-nio-8080-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-01-26 09:34:06.902 [http-nio-8080-exec-1] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 order by prod_id 
2019-01-26 09:34:06.902 [http-nio-8080-exec-1] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==> Parameters: 
2019-01-26 09:34:06.906 [http-nio-8080-exec-1] DEBUG com.yun.product.dao.ProductDao.findProductByParam - <==      Total: 4
2019-01-26 09:34:06.907 [http-nio-8080-exec-1] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:34:06.907 [http-nio-8080-exec-1] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 2(Integer)
2019-01-26 09:34:06.908 [http-nio-8080-exec-1] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 0
2019-01-26 09:34:06.909 [http-nio-8080-exec-1] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:34:06.910 [http-nio-8080-exec-1] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 3(Integer)
2019-01-26 09:34:06.913 [http-nio-8080-exec-1] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 0
2019-01-26 09:34:06.913 [http-nio-8080-exec-1] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:34:06.914 [http-nio-8080-exec-1] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 4(Integer)
2019-01-26 09:34:06.916 [http-nio-8080-exec-1] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 2
2019-01-26 09:34:06.917 [http-nio-8080-exec-1] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:34:06.917 [http-nio-8080-exec-1] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 5(Integer)
2019-01-26 09:34:06.926 [http-nio-8080-exec-1] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-01-26 09:34:07.151 [http-nio-8080-exec-5] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 order by prod_id 
2019-01-26 09:34:07.151 [http-nio-8080-exec-5] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==> Parameters: 
2019-01-26 09:34:07.153 [http-nio-8080-exec-5] DEBUG com.yun.product.dao.ProductDao.findProductByParam - <==      Total: 4
2019-01-26 09:34:07.154 [http-nio-8080-exec-5] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:34:07.154 [http-nio-8080-exec-5] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 2(Integer)
2019-01-26 09:34:07.156 [http-nio-8080-exec-5] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 0
2019-01-26 09:34:07.156 [http-nio-8080-exec-5] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:34:07.157 [http-nio-8080-exec-5] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 3(Integer)
2019-01-26 09:34:07.158 [http-nio-8080-exec-5] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 0
2019-01-26 09:34:07.159 [http-nio-8080-exec-5] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:34:07.159 [http-nio-8080-exec-5] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 4(Integer)
2019-01-26 09:34:07.160 [http-nio-8080-exec-5] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 2
2019-01-26 09:34:07.161 [http-nio-8080-exec-5] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:34:07.161 [http-nio-8080-exec-5] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 5(Integer)
2019-01-26 09:34:07.162 [http-nio-8080-exec-5] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-01-26 09:34:07.999 [http-nio-8080-exec-2] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 order by prod_id 
2019-01-26 09:34:08.000 [http-nio-8080-exec-2] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==> Parameters: 
2019-01-26 09:34:08.004 [http-nio-8080-exec-2] DEBUG com.yun.product.dao.ProductDao.findProductByParam - <==      Total: 4
2019-01-26 09:34:08.006 [http-nio-8080-exec-2] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:34:08.006 [http-nio-8080-exec-2] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 2(Integer)
2019-01-26 09:34:08.007 [http-nio-8080-exec-2] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 0
2019-01-26 09:34:08.008 [http-nio-8080-exec-2] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:34:08.009 [http-nio-8080-exec-2] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 3(Integer)
2019-01-26 09:34:08.010 [http-nio-8080-exec-2] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 0
2019-01-26 09:34:08.011 [http-nio-8080-exec-2] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:34:08.012 [http-nio-8080-exec-2] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 4(Integer)
2019-01-26 09:34:08.013 [http-nio-8080-exec-2] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 2
2019-01-26 09:34:08.014 [http-nio-8080-exec-2] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:34:08.014 [http-nio-8080-exec-2] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 5(Integer)
2019-01-26 09:34:08.016 [http-nio-8080-exec-2] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-01-26 09:34:09.933 [http-nio-8080-exec-7] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 order by prod_id 
2019-01-26 09:34:09.934 [http-nio-8080-exec-7] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==> Parameters: 
2019-01-26 09:34:09.936 [http-nio-8080-exec-7] DEBUG com.yun.product.dao.ProductDao.findProductByParam - <==      Total: 4
2019-01-26 09:34:09.937 [http-nio-8080-exec-7] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:34:09.937 [http-nio-8080-exec-7] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 2(Integer)
2019-01-26 09:34:09.938 [http-nio-8080-exec-7] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 0
2019-01-26 09:34:09.938 [http-nio-8080-exec-7] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:34:09.939 [http-nio-8080-exec-7] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 3(Integer)
2019-01-26 09:34:09.940 [http-nio-8080-exec-7] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 0
2019-01-26 09:34:09.940 [http-nio-8080-exec-7] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:34:09.940 [http-nio-8080-exec-7] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 4(Integer)
2019-01-26 09:34:09.942 [http-nio-8080-exec-7] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 2
2019-01-26 09:34:09.942 [http-nio-8080-exec-7] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:34:09.943 [http-nio-8080-exec-7] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 5(Integer)
2019-01-26 09:34:09.944 [http-nio-8080-exec-7] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-01-26 09:34:10.880 [http-nio-8080-exec-3] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 order by prod_id 
2019-01-26 09:34:10.881 [http-nio-8080-exec-3] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==> Parameters: 
2019-01-26 09:34:10.886 [http-nio-8080-exec-3] DEBUG com.yun.product.dao.ProductDao.findProductByParam - <==      Total: 4
2019-01-26 09:34:10.887 [http-nio-8080-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:34:10.887 [http-nio-8080-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 2(Integer)
2019-01-26 09:34:10.888 [http-nio-8080-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 0
2019-01-26 09:34:10.889 [http-nio-8080-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:34:10.889 [http-nio-8080-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 3(Integer)
2019-01-26 09:34:10.891 [http-nio-8080-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 0
2019-01-26 09:34:10.891 [http-nio-8080-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:34:10.892 [http-nio-8080-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 4(Integer)
2019-01-26 09:34:10.893 [http-nio-8080-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 2
2019-01-26 09:34:10.894 [http-nio-8080-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:34:10.894 [http-nio-8080-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 5(Integer)
2019-01-26 09:34:10.896 [http-nio-8080-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-01-26 09:38:51.405 [main] INFO  com.yun.YunEbStockApplication - Starting YunEbStockApplication on USER-20181202BJ with PID 5336 (E:\workspace\yun-eb-stock\target\classes started by Administrator in E:\workspace\yun-eb-stock)
2019-01-26 09:38:51.424 [main] DEBUG com.yun.YunEbStockApplication - Running with Spring Boot v1.5.9.RELEASE, Spring v4.3.13.RELEASE
2019-01-26 09:38:51.425 [main] INFO  com.yun.YunEbStockApplication - No active profile set, falling back to default profiles: default
2019-01-26 09:38:51.960 [main] INFO  o.s.b.c.e.AnnotationConfigEmbeddedWebApplicationContext - Refreshing org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@6a28ffa4: startup date [Sat Jan 26 09:38:51 CST 2019]; root of context hierarchy
2019-01-26 09:38:51.963 [background-preinit] INFO  org.hibernate.validator.internal.util.Version - HV000001: Hibernate Validator 5.3.6.Final
2019-01-26 09:38:53.641 [main] INFO  o.s.b.c.e.tomcat.TomcatEmbeddedServletContainer - Tomcat initialized with port(s): 8080 (http)
2019-01-26 09:38:53.651 [main] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2019-01-26 09:38:53.652 [main] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet Engine: Apache Tomcat/8.5.23
2019-01-26 09:38:53.759 [localhost-startStop-1] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2019-01-26 09:38:53.760 [localhost-startStop-1] INFO  org.springframework.web.context.ContextLoader - Root WebApplicationContext: initialization completed in 1800 ms
2019-01-26 09:38:53.904 [localhost-startStop-1] INFO  o.s.boot.web.servlet.ServletRegistrationBean - Mapping servlet: 'dispatcherServlet' to [/]
2019-01-26 09:38:53.909 [localhost-startStop-1] INFO  o.s.boot.web.servlet.FilterRegistrationBean - Mapping filter: 'characterEncodingFilter' to: [/*]
2019-01-26 09:38:53.909 [localhost-startStop-1] INFO  o.s.boot.web.servlet.FilterRegistrationBean - Mapping filter: 'hiddenHttpMethodFilter' to: [/*]
2019-01-26 09:38:53.910 [localhost-startStop-1] INFO  o.s.boot.web.servlet.FilterRegistrationBean - Mapping filter: 'httpPutFormContentFilter' to: [/*]
2019-01-26 09:38:53.910 [localhost-startStop-1] INFO  o.s.boot.web.servlet.FilterRegistrationBean - Mapping filter: 'requestContextFilter' to: [/*]
2019-01-26 09:38:54.693 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerAdapter - Looking for @ControllerAdvice: org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@6a28ffa4: startup date [Sat Jan 26 09:38:51 CST 2019]; root of context hierarchy
2019-01-26 09:38:54.757 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productListForAutoComplete]}" onto public java.util.List<com.yun.product.model.Product> com.yun.product.controller.ProductController.productListForAutoComplete(java.lang.String)
2019-01-26 09:38:54.758 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productList]}" onto public java.lang.String com.yun.product.controller.ProductController.productList(org.springframework.ui.Model,java.lang.String,java.lang.String,java.lang.String,java.lang.String)
2019-01-26 09:38:54.759 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productPreAdd]}" onto public java.lang.String com.yun.product.controller.ProductController.productPreAdd()
2019-01-26 09:38:54.759 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productSave]}" onto public java.lang.String com.yun.product.controller.ProductController.productSave(com.yun.product.model.Product)
2019-01-26 09:38:54.759 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productDelete]}" onto public java.lang.String com.yun.product.controller.ProductController.productDelete(int)
2019-01-26 09:38:54.759 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productPreUpdate]}" onto public java.lang.String com.yun.product.controller.ProductController.productPreUpdate(int,org.springframework.ui.Model)
2019-01-26 09:38:54.759 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productUpdate]}" onto public java.lang.String com.yun.product.controller.ProductController.productUpdate(com.yun.product.model.Product)
2019-01-26 09:38:54.760 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/prodParamPreAdd]}" onto public java.lang.String com.yun.product.controller.ProductParamController.prodParamPreAdd(int,org.springframework.ui.Model)
2019-01-26 09:38:54.761 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/prodParamList]}" onto public java.lang.String com.yun.product.controller.ProductParamController.prodParamList(int)
2019-01-26 09:38:54.761 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/prodParamDelete]}" onto public java.lang.String com.yun.product.controller.ProductParamController.prodParamDelete(int)
2019-01-26 09:38:54.761 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/prodParamSave]}" onto public java.lang.String com.yun.product.controller.ProductParamController.prodParamSave(com.yun.product.model.ProductParameter)
2019-01-26 09:38:54.764 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeUpdate]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeUpdate(java.lang.Integer,org.springframework.ui.Model)
2019-01-26 09:38:54.764 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeUpdateSave]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeUpdateSave(com.yun.product.model.ProductType)
2019-01-26 09:38:54.765 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeDelete]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeDelete(java.lang.Integer,javax.servlet.http.HttpServletResponse) throws java.io.IOException
2019-01-26 09:38:54.765 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeList]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeList(org.springframework.ui.Model)
2019-01-26 09:38:54.765 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeTree]}" onto public java.util.List<com.yun.product.model.ProductType> com.yun.product.controller.ProductTypeController.productTypeTree()
2019-01-26 09:38:54.766 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeEdit]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeEdit()
2019-01-26 09:38:54.766 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeSave]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeSave(com.yun.product.model.ProductType)
2019-01-26 09:38:54.767 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockPreAdd]}" onto public java.lang.String com.yun.stock.controller.ProductStockController.productStockPreAdd()
2019-01-26 09:38:54.767 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockSave]}" onto public java.lang.String com.yun.stock.controller.ProductStockController.productStockSave(com.yun.stock.model.ProductStock)
2019-01-26 09:38:54.767 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStocklist]}" onto public java.lang.String com.yun.stock.controller.ProductStockController.productStocklist(java.lang.String,java.lang.String,org.springframework.ui.Model)
2019-01-26 09:38:54.768 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/main]}" onto public java.lang.String com.yun.user.controller.MainController.main()
2019-01-26 09:38:54.769 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/userList]}" onto public java.lang.String com.yun.user.controller.UserController.userList(org.springframework.ui.Model)
2019-01-26 09:38:54.769 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/login]}" onto public java.lang.String com.yun.user.controller.UserController.login(java.lang.String,java.lang.String,javax.servlet.http.HttpSession)
2019-01-26 09:38:54.769 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/userEdit]}" onto public java.lang.String com.yun.user.controller.UserController.userEdit()
2019-01-26 09:38:54.769 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/userSave]}" onto public java.lang.String com.yun.user.controller.UserController.userSave(com.yun.user.model.UserInfo)
2019-01-26 09:38:54.769 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/deleteUserInfo]}" onto public java.lang.String com.yun.user.controller.UserController.userDelete(int)
2019-01-26 09:38:54.772 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/error]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> org.springframework.boot.autoconfigure.web.BasicErrorController.error(javax.servlet.http.HttpServletRequest)
2019-01-26 09:38:54.773 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/error],produces=[text/html]}" onto public org.springframework.web.servlet.ModelAndView org.springframework.boot.autoconfigure.web.BasicErrorController.errorHtml(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
2019-01-26 09:38:54.806 [main] INFO  o.s.web.servlet.handler.SimpleUrlHandlerMapping - Mapped URL path [/webjars/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-01-26 09:38:54.807 [main] INFO  o.s.web.servlet.handler.SimpleUrlHandlerMapping - Mapped URL path [/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-01-26 09:38:54.846 [main] INFO  o.s.web.servlet.handler.SimpleUrlHandlerMapping - Mapped URL path [/**/favicon.ico] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-01-26 09:38:55.152 [main] INFO  o.s.b.a.w.WebMvcAutoConfiguration$WelcomePageHandlerMapping - Adding welcome page: class path resource [static/index.html]
2019-01-26 09:38:55.438 [main] INFO  o.s.jmx.export.annotation.AnnotationMBeanExporter - Registering beans for JMX exposure on startup
2019-01-26 09:38:55.462 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2019-01-26 09:38:55.474 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2019-01-26 09:38:55.489 [main] INFO  org.apache.tomcat.util.net.NioSelectorPool - Using a shared selector for servlet write/read
2019-01-26 09:38:55.508 [main] INFO  o.s.b.c.e.tomcat.TomcatEmbeddedServletContainer - Tomcat started on port(s): 8080 (http)
2019-01-26 09:38:55.514 [main] INFO  com.yun.YunEbStockApplication - Started YunEbStockApplication in 4.566 seconds (JVM running for 5.757)
2019-01-26 09:38:59.727 [http-nio-8080-exec-2] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring FrameworkServlet 'dispatcherServlet'
2019-01-26 09:38:59.727 [http-nio-8080-exec-2] INFO  org.springframework.web.servlet.DispatcherServlet - FrameworkServlet 'dispatcherServlet': initialization started
2019-01-26 09:38:59.746 [http-nio-8080-exec-2] INFO  org.springframework.web.servlet.DispatcherServlet - FrameworkServlet 'dispatcherServlet': initialization completed in 19 ms
2019-01-26 09:39:00.132 [http-nio-8080-exec-2] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 order by prod_id 
2019-01-26 09:39:00.156 [http-nio-8080-exec-2] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==> Parameters: 
2019-01-26 09:39:00.176 [http-nio-8080-exec-2] DEBUG com.yun.product.dao.ProductDao.findProductByParam - <==      Total: 4
2019-01-26 09:39:00.178 [http-nio-8080-exec-2] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:39:00.179 [http-nio-8080-exec-2] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 2(Integer)
2019-01-26 09:39:00.181 [http-nio-8080-exec-2] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 0
2019-01-26 09:39:00.182 [http-nio-8080-exec-2] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:39:00.182 [http-nio-8080-exec-2] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 3(Integer)
2019-01-26 09:39:00.183 [http-nio-8080-exec-2] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 0
2019-01-26 09:39:00.184 [http-nio-8080-exec-2] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:39:00.185 [http-nio-8080-exec-2] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 4(Integer)
2019-01-26 09:39:00.186 [http-nio-8080-exec-2] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 2
2019-01-26 09:39:00.187 [http-nio-8080-exec-2] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:39:00.187 [http-nio-8080-exec-2] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 5(Integer)
2019-01-26 09:39:00.189 [http-nio-8080-exec-2] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-01-26 09:39:03.336 [http-nio-8080-exec-10] DEBUG com.yun.stock.controller.ProductStockController - 跳转到物品库存查询控制器
2019-01-26 09:39:03.348 [http-nio-8080-exec-10] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==>  Preparing: select count(*) from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 
2019-01-26 09:39:03.348 [http-nio-8080-exec-10] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==> Parameters: 
2019-01-26 09:39:03.351 [http-nio-8080-exec-10] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - <==      Total: 1
2019-01-26 09:39:03.356 [http-nio-8080-exec-10] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==>  Preparing: select ps.prod_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 order by p.prod_id,pp.prod_param_id limit ?,? 
2019-01-26 09:39:03.357 [http-nio-8080-exec-10] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==> Parameters: 0(Integer), 5(Integer)
2019-01-26 09:39:03.358 [http-nio-8080-exec-10] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - <==      Total: 0
2019-01-26 09:39:03.359 [http-nio-8080-exec-10] DEBUG com.yun.stock.controller.ProductStockController - 转到物品库存页面
2019-01-26 09:39:20.915 [http-nio-8080-exec-7] DEBUG com.yun.stock.controller.ProductStockController - 跳转到物品库存查询控制器
2019-01-26 09:39:20.919 [http-nio-8080-exec-7] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==>  Preparing: select count(*) from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 
2019-01-26 09:39:20.920 [http-nio-8080-exec-7] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==> Parameters: 
2019-01-26 09:39:20.926 [http-nio-8080-exec-7] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - <==      Total: 1
2019-01-26 09:39:20.931 [http-nio-8080-exec-7] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==>  Preparing: select ps.prod_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 order by p.prod_id,pp.prod_param_id limit ?,? 
2019-01-26 09:39:20.933 [http-nio-8080-exec-7] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==> Parameters: 0(Integer), 5(Integer)
2019-01-26 09:39:20.936 [http-nio-8080-exec-7] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - <==      Total: 0
2019-01-26 09:39:20.937 [http-nio-8080-exec-7] DEBUG com.yun.stock.controller.ProductStockController - 转到物品库存页面
2019-01-26 09:39:29.610 [http-nio-8080-exec-4] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 order by prod_id 
2019-01-26 09:39:29.610 [http-nio-8080-exec-4] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==> Parameters: 
2019-01-26 09:39:29.614 [http-nio-8080-exec-4] DEBUG com.yun.product.dao.ProductDao.findProductByParam - <==      Total: 4
2019-01-26 09:39:29.614 [http-nio-8080-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:39:29.615 [http-nio-8080-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 2(Integer)
2019-01-26 09:39:29.616 [http-nio-8080-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 0
2019-01-26 09:39:29.618 [http-nio-8080-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:39:29.618 [http-nio-8080-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 3(Integer)
2019-01-26 09:39:29.620 [http-nio-8080-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 0
2019-01-26 09:39:29.620 [http-nio-8080-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:39:29.621 [http-nio-8080-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 4(Integer)
2019-01-26 09:39:29.622 [http-nio-8080-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 2
2019-01-26 09:39:29.623 [http-nio-8080-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:39:29.623 [http-nio-8080-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 5(Integer)
2019-01-26 09:39:29.624 [http-nio-8080-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-01-26 09:39:29.875 [http-nio-8080-exec-5] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 order by prod_id 
2019-01-26 09:39:29.875 [http-nio-8080-exec-5] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==> Parameters: 
2019-01-26 09:39:29.879 [http-nio-8080-exec-5] DEBUG com.yun.product.dao.ProductDao.findProductByParam - <==      Total: 4
2019-01-26 09:39:29.880 [http-nio-8080-exec-5] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:39:29.882 [http-nio-8080-exec-5] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 2(Integer)
2019-01-26 09:39:29.884 [http-nio-8080-exec-5] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 0
2019-01-26 09:39:29.885 [http-nio-8080-exec-5] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:39:29.886 [http-nio-8080-exec-5] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 3(Integer)
2019-01-26 09:39:29.887 [http-nio-8080-exec-5] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 0
2019-01-26 09:39:29.888 [http-nio-8080-exec-5] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:39:29.888 [http-nio-8080-exec-5] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 4(Integer)
2019-01-26 09:39:29.890 [http-nio-8080-exec-5] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 2
2019-01-26 09:39:29.890 [http-nio-8080-exec-5] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:39:29.891 [http-nio-8080-exec-5] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 5(Integer)
2019-01-26 09:39:29.892 [http-nio-8080-exec-5] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-01-26 09:39:51.986 [http-nio-8080-exec-3] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 order by prod_id 
2019-01-26 09:39:51.986 [http-nio-8080-exec-3] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==> Parameters: 
2019-01-26 09:39:51.990 [http-nio-8080-exec-3] DEBUG com.yun.product.dao.ProductDao.findProductByParam - <==      Total: 4
2019-01-26 09:39:51.990 [http-nio-8080-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:39:51.991 [http-nio-8080-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 2(Integer)
2019-01-26 09:39:51.992 [http-nio-8080-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 0
2019-01-26 09:39:51.992 [http-nio-8080-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:39:51.992 [http-nio-8080-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 3(Integer)
2019-01-26 09:39:51.993 [http-nio-8080-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 0
2019-01-26 09:39:51.994 [http-nio-8080-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:39:51.994 [http-nio-8080-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 4(Integer)
2019-01-26 09:39:51.995 [http-nio-8080-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 2
2019-01-26 09:39:51.996 [http-nio-8080-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:39:51.996 [http-nio-8080-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 5(Integer)
2019-01-26 09:39:51.997 [http-nio-8080-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-01-26 09:40:04.282 [http-nio-8080-exec-8] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 order by prod_id 
2019-01-26 09:40:04.284 [http-nio-8080-exec-8] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==> Parameters: 
2019-01-26 09:40:04.288 [http-nio-8080-exec-8] DEBUG com.yun.product.dao.ProductDao.findProductByParam - <==      Total: 4
2019-01-26 09:40:04.289 [http-nio-8080-exec-8] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:40:04.289 [http-nio-8080-exec-8] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 2(Integer)
2019-01-26 09:40:04.291 [http-nio-8080-exec-8] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 0
2019-01-26 09:40:04.291 [http-nio-8080-exec-8] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:40:04.292 [http-nio-8080-exec-8] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 3(Integer)
2019-01-26 09:40:04.293 [http-nio-8080-exec-8] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 0
2019-01-26 09:40:04.294 [http-nio-8080-exec-8] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:40:04.295 [http-nio-8080-exec-8] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 4(Integer)
2019-01-26 09:40:04.298 [http-nio-8080-exec-8] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 2
2019-01-26 09:40:04.299 [http-nio-8080-exec-8] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:40:04.300 [http-nio-8080-exec-8] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 5(Integer)
2019-01-26 09:40:04.302 [http-nio-8080-exec-8] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-01-26 09:40:47.649 [http-nio-8080-exec-10] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 order by prod_id 
2019-01-26 09:40:47.650 [http-nio-8080-exec-10] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==> Parameters: 
2019-01-26 09:40:47.653 [http-nio-8080-exec-10] DEBUG com.yun.product.dao.ProductDao.findProductByParam - <==      Total: 4
2019-01-26 09:40:47.654 [http-nio-8080-exec-10] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:40:47.654 [http-nio-8080-exec-10] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 2(Integer)
2019-01-26 09:40:47.657 [http-nio-8080-exec-10] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 0
2019-01-26 09:40:47.658 [http-nio-8080-exec-10] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:40:47.659 [http-nio-8080-exec-10] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 3(Integer)
2019-01-26 09:40:47.661 [http-nio-8080-exec-10] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 0
2019-01-26 09:40:47.661 [http-nio-8080-exec-10] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:40:47.662 [http-nio-8080-exec-10] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 4(Integer)
2019-01-26 09:40:47.665 [http-nio-8080-exec-10] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 2
2019-01-26 09:40:47.665 [http-nio-8080-exec-10] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:40:47.665 [http-nio-8080-exec-10] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 5(Integer)
2019-01-26 09:40:47.668 [http-nio-8080-exec-10] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-01-26 09:40:49.965 [http-nio-8080-exec-1] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 order by prod_id 
2019-01-26 09:40:49.966 [http-nio-8080-exec-1] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==> Parameters: 
2019-01-26 09:40:49.971 [http-nio-8080-exec-1] DEBUG com.yun.product.dao.ProductDao.findProductByParam - <==      Total: 4
2019-01-26 09:40:49.972 [http-nio-8080-exec-1] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:40:49.974 [http-nio-8080-exec-1] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 2(Integer)
2019-01-26 09:40:49.976 [http-nio-8080-exec-1] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 0
2019-01-26 09:40:49.977 [http-nio-8080-exec-1] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:40:49.978 [http-nio-8080-exec-1] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 3(Integer)
2019-01-26 09:40:49.979 [http-nio-8080-exec-1] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 0
2019-01-26 09:40:49.980 [http-nio-8080-exec-1] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:40:49.980 [http-nio-8080-exec-1] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 4(Integer)
2019-01-26 09:40:49.981 [http-nio-8080-exec-1] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 2
2019-01-26 09:40:49.982 [http-nio-8080-exec-1] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:40:49.982 [http-nio-8080-exec-1] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 5(Integer)
2019-01-26 09:40:49.984 [http-nio-8080-exec-1] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-01-26 09:40:56.324 [http-nio-8080-exec-2] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 order by prod_id 
2019-01-26 09:40:56.326 [http-nio-8080-exec-2] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==> Parameters: 
2019-01-26 09:40:56.329 [http-nio-8080-exec-2] DEBUG com.yun.product.dao.ProductDao.findProductByParam - <==      Total: 4
2019-01-26 09:40:56.329 [http-nio-8080-exec-2] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:40:56.330 [http-nio-8080-exec-2] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 2(Integer)
2019-01-26 09:40:56.332 [http-nio-8080-exec-2] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 0
2019-01-26 09:40:56.333 [http-nio-8080-exec-2] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:40:56.333 [http-nio-8080-exec-2] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 3(Integer)
2019-01-26 09:40:56.335 [http-nio-8080-exec-2] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 0
2019-01-26 09:40:56.335 [http-nio-8080-exec-2] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:40:56.335 [http-nio-8080-exec-2] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 4(Integer)
2019-01-26 09:40:56.336 [http-nio-8080-exec-2] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 2
2019-01-26 09:40:56.338 [http-nio-8080-exec-2] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:40:56.339 [http-nio-8080-exec-2] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 5(Integer)
2019-01-26 09:40:56.341 [http-nio-8080-exec-2] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-01-26 09:45:03.327 [main] INFO  com.yun.YunEbStockApplication - Starting YunEbStockApplication on USER-20181202BJ with PID 3332 (E:\workspace\yun-eb-stock\target\classes started by Administrator in E:\workspace\yun-eb-stock)
2019-01-26 09:45:03.334 [main] DEBUG com.yun.YunEbStockApplication - Running with Spring Boot v1.5.9.RELEASE, Spring v4.3.13.RELEASE
2019-01-26 09:45:03.335 [main] INFO  com.yun.YunEbStockApplication - No active profile set, falling back to default profiles: default
2019-01-26 09:45:04.147 [main] INFO  o.s.b.c.e.AnnotationConfigEmbeddedWebApplicationContext - Refreshing org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@27216cd: startup date [Sat Jan 26 09:45:04 CST 2019]; root of context hierarchy
2019-01-26 09:45:04.862 [background-preinit] INFO  org.hibernate.validator.internal.util.Version - HV000001: Hibernate Validator 5.3.6.Final
2019-01-26 09:45:06.343 [main] INFO  o.s.b.c.e.tomcat.TomcatEmbeddedServletContainer - Tomcat initialized with port(s): 8080 (http)
2019-01-26 09:45:06.355 [main] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2019-01-26 09:45:06.356 [main] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet Engine: Apache Tomcat/8.5.23
2019-01-26 09:45:06.486 [localhost-startStop-1] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2019-01-26 09:45:06.487 [localhost-startStop-1] INFO  org.springframework.web.context.ContextLoader - Root WebApplicationContext: initialization completed in 2340 ms
2019-01-26 09:45:06.711 [localhost-startStop-1] INFO  o.s.boot.web.servlet.ServletRegistrationBean - Mapping servlet: 'dispatcherServlet' to [/]
2019-01-26 09:45:06.718 [localhost-startStop-1] INFO  o.s.boot.web.servlet.FilterRegistrationBean - Mapping filter: 'characterEncodingFilter' to: [/*]
2019-01-26 09:45:06.720 [localhost-startStop-1] INFO  o.s.boot.web.servlet.FilterRegistrationBean - Mapping filter: 'hiddenHttpMethodFilter' to: [/*]
2019-01-26 09:45:06.720 [localhost-startStop-1] INFO  o.s.boot.web.servlet.FilterRegistrationBean - Mapping filter: 'httpPutFormContentFilter' to: [/*]
2019-01-26 09:45:06.720 [localhost-startStop-1] INFO  o.s.boot.web.servlet.FilterRegistrationBean - Mapping filter: 'requestContextFilter' to: [/*]
2019-01-26 09:45:08.024 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerAdapter - Looking for @ControllerAdvice: org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@27216cd: startup date [Sat Jan 26 09:45:04 CST 2019]; root of context hierarchy
2019-01-26 09:45:08.111 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productList]}" onto public java.lang.String com.yun.product.controller.ProductController.productList(org.springframework.ui.Model,java.lang.String,java.lang.String,java.lang.String,java.lang.String)
2019-01-26 09:45:08.112 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productPreAdd]}" onto public java.lang.String com.yun.product.controller.ProductController.productPreAdd()
2019-01-26 09:45:08.112 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productSave]}" onto public java.lang.String com.yun.product.controller.ProductController.productSave(com.yun.product.model.Product)
2019-01-26 09:45:08.113 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productDelete]}" onto public java.lang.String com.yun.product.controller.ProductController.productDelete(int)
2019-01-26 09:45:08.113 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productPreUpdate]}" onto public java.lang.String com.yun.product.controller.ProductController.productPreUpdate(int,org.springframework.ui.Model)
2019-01-26 09:45:08.114 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productUpdate]}" onto public java.lang.String com.yun.product.controller.ProductController.productUpdate(com.yun.product.model.Product)
2019-01-26 09:45:08.114 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productListForAutoComplete]}" onto public java.util.List<com.yun.product.model.Product> com.yun.product.controller.ProductController.productListForAutoComplete(java.lang.String)
2019-01-26 09:45:08.115 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/prodParamPreAdd]}" onto public java.lang.String com.yun.product.controller.ProductParamController.prodParamPreAdd(int,org.springframework.ui.Model)
2019-01-26 09:45:08.116 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/prodParamDelete]}" onto public java.lang.String com.yun.product.controller.ProductParamController.prodParamDelete(int)
2019-01-26 09:45:08.116 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/prodParamList]}" onto public java.lang.String com.yun.product.controller.ProductParamController.prodParamList(int)
2019-01-26 09:45:08.116 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/prodParamSave]}" onto public java.lang.String com.yun.product.controller.ProductParamController.prodParamSave(com.yun.product.model.ProductParameter)
2019-01-26 09:45:08.120 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeTree]}" onto public java.util.List<com.yun.product.model.ProductType> com.yun.product.controller.ProductTypeController.productTypeTree()
2019-01-26 09:45:08.120 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeList]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeList(org.springframework.ui.Model)
2019-01-26 09:45:08.121 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeEdit]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeEdit()
2019-01-26 09:45:08.121 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeSave]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeSave(com.yun.product.model.ProductType)
2019-01-26 09:45:08.121 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeUpdate]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeUpdate(java.lang.Integer,org.springframework.ui.Model)
2019-01-26 09:45:08.122 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeUpdateSave]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeUpdateSave(com.yun.product.model.ProductType)
2019-01-26 09:45:08.123 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeDelete]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeDelete(java.lang.Integer,javax.servlet.http.HttpServletResponse) throws java.io.IOException
2019-01-26 09:45:08.124 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockSave]}" onto public java.lang.String com.yun.stock.controller.ProductStockController.productStockSave(com.yun.stock.model.ProductStock)
2019-01-26 09:45:08.124 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStocklist]}" onto public java.lang.String com.yun.stock.controller.ProductStockController.productStocklist(java.lang.String,java.lang.String,org.springframework.ui.Model)
2019-01-26 09:45:08.124 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockPreAdd]}" onto public java.lang.String com.yun.stock.controller.ProductStockController.productStockPreAdd()
2019-01-26 09:45:08.125 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/main]}" onto public java.lang.String com.yun.user.controller.MainController.main()
2019-01-26 09:45:08.125 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/userList]}" onto public java.lang.String com.yun.user.controller.UserController.userList(org.springframework.ui.Model)
2019-01-26 09:45:08.126 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/login]}" onto public java.lang.String com.yun.user.controller.UserController.login(java.lang.String,java.lang.String,javax.servlet.http.HttpSession)
2019-01-26 09:45:08.126 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/userEdit]}" onto public java.lang.String com.yun.user.controller.UserController.userEdit()
2019-01-26 09:45:08.126 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/userSave]}" onto public java.lang.String com.yun.user.controller.UserController.userSave(com.yun.user.model.UserInfo)
2019-01-26 09:45:08.126 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/deleteUserInfo]}" onto public java.lang.String com.yun.user.controller.UserController.userDelete(int)
2019-01-26 09:45:08.131 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/error]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> org.springframework.boot.autoconfigure.web.BasicErrorController.error(javax.servlet.http.HttpServletRequest)
2019-01-26 09:45:08.131 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/error],produces=[text/html]}" onto public org.springframework.web.servlet.ModelAndView org.springframework.boot.autoconfigure.web.BasicErrorController.errorHtml(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
2019-01-26 09:45:08.188 [main] INFO  o.s.web.servlet.handler.SimpleUrlHandlerMapping - Mapped URL path [/webjars/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-01-26 09:45:08.189 [main] INFO  o.s.web.servlet.handler.SimpleUrlHandlerMapping - Mapped URL path [/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-01-26 09:45:08.260 [main] INFO  o.s.web.servlet.handler.SimpleUrlHandlerMapping - Mapped URL path [/**/favicon.ico] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-01-26 09:45:08.712 [main] INFO  o.s.b.a.w.WebMvcAutoConfiguration$WelcomePageHandlerMapping - Adding welcome page: class path resource [static/index.html]
2019-01-26 09:45:09.202 [main] INFO  o.s.jmx.export.annotation.AnnotationMBeanExporter - Registering beans for JMX exposure on startup
2019-01-26 09:45:09.227 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2019-01-26 09:45:09.242 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2019-01-26 09:45:09.262 [main] INFO  org.apache.tomcat.util.net.NioSelectorPool - Using a shared selector for servlet write/read
2019-01-26 09:45:09.457 [main] INFO  o.s.b.c.e.tomcat.TomcatEmbeddedServletContainer - Tomcat started on port(s): 8080 (http)
2019-01-26 09:45:09.464 [main] INFO  com.yun.YunEbStockApplication - Started YunEbStockApplication in 6.958 seconds (JVM running for 8.617)
2019-01-26 09:45:13.895 [http-nio-8080-exec-1] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring FrameworkServlet 'dispatcherServlet'
2019-01-26 09:45:13.895 [http-nio-8080-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - FrameworkServlet 'dispatcherServlet': initialization started
2019-01-26 09:45:13.927 [http-nio-8080-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - FrameworkServlet 'dispatcherServlet': initialization completed in 32 ms
2019-01-26 09:45:25.192 [http-nio-8080-exec-1] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 order by prod_id 
2019-01-26 09:45:25.192 [http-nio-8080-exec-2] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 order by prod_id 
2019-01-26 09:45:25.215 [http-nio-8080-exec-2] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==> Parameters: 
2019-01-26 09:45:25.215 [http-nio-8080-exec-1] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==> Parameters: 
2019-01-26 09:45:25.237 [http-nio-8080-exec-2] DEBUG com.yun.product.dao.ProductDao.findProductByParam - <==      Total: 4
2019-01-26 09:45:25.237 [http-nio-8080-exec-1] DEBUG com.yun.product.dao.ProductDao.findProductByParam - <==      Total: 4
2019-01-26 09:45:25.240 [http-nio-8080-exec-1] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:45:25.240 [http-nio-8080-exec-2] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:45:25.240 [http-nio-8080-exec-2] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 2(Integer)
2019-01-26 09:45:25.240 [http-nio-8080-exec-1] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 2(Integer)
2019-01-26 09:45:25.241 [http-nio-8080-exec-1] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 0
2019-01-26 09:45:25.242 [http-nio-8080-exec-1] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:45:25.243 [http-nio-8080-exec-1] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 3(Integer)
2019-01-26 09:45:25.243 [http-nio-8080-exec-2] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 0
2019-01-26 09:45:25.244 [http-nio-8080-exec-1] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 0
2019-01-26 09:45:25.244 [http-nio-8080-exec-2] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:45:25.244 [http-nio-8080-exec-2] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 3(Integer)
2019-01-26 09:45:25.244 [http-nio-8080-exec-1] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:45:25.245 [http-nio-8080-exec-1] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 4(Integer)
2019-01-26 09:45:25.246 [http-nio-8080-exec-2] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 0
2019-01-26 09:45:25.247 [http-nio-8080-exec-2] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:45:25.247 [http-nio-8080-exec-1] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 2
2019-01-26 09:45:25.247 [http-nio-8080-exec-2] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 4(Integer)
2019-01-26 09:45:25.247 [http-nio-8080-exec-1] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:45:25.248 [http-nio-8080-exec-1] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 5(Integer)
2019-01-26 09:45:25.249 [http-nio-8080-exec-1] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-01-26 09:45:25.249 [http-nio-8080-exec-2] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 2
2019-01-26 09:45:25.251 [http-nio-8080-exec-2] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:45:25.252 [http-nio-8080-exec-2] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 5(Integer)
2019-01-26 09:45:25.253 [http-nio-8080-exec-2] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-01-26 09:45:38.364 [http-nio-8080-exec-3] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 order by prod_id 
2019-01-26 09:45:38.368 [http-nio-8080-exec-3] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==> Parameters: 
2019-01-26 09:45:38.371 [http-nio-8080-exec-3] DEBUG com.yun.product.dao.ProductDao.findProductByParam - <==      Total: 4
2019-01-26 09:45:38.371 [http-nio-8080-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:45:38.427 [http-nio-8080-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 2(Integer)
2019-01-26 09:45:38.428 [http-nio-8080-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 0
2019-01-26 09:45:38.428 [http-nio-8080-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:45:38.429 [http-nio-8080-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 3(Integer)
2019-01-26 09:45:38.430 [http-nio-8080-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 0
2019-01-26 09:45:38.431 [http-nio-8080-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:45:38.431 [http-nio-8080-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 4(Integer)
2019-01-26 09:45:38.432 [http-nio-8080-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 2
2019-01-26 09:45:38.433 [http-nio-8080-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:45:38.433 [http-nio-8080-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 5(Integer)
2019-01-26 09:45:38.435 [http-nio-8080-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-01-26 09:45:38.447 [http-nio-8080-exec-13] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 order by prod_id 
2019-01-26 09:45:38.448 [http-nio-8080-exec-13] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==> Parameters: 
2019-01-26 09:45:38.454 [http-nio-8080-exec-13] DEBUG com.yun.product.dao.ProductDao.findProductByParam - <==      Total: 4
2019-01-26 09:45:38.458 [http-nio-8080-exec-13] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:45:38.460 [http-nio-8080-exec-13] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 2(Integer)
2019-01-26 09:45:38.462 [http-nio-8080-exec-13] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 0
2019-01-26 09:45:38.463 [http-nio-8080-exec-13] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:45:38.463 [http-nio-8080-exec-13] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 3(Integer)
2019-01-26 09:45:38.465 [http-nio-8080-exec-13] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 0
2019-01-26 09:45:39.325 [http-nio-8080-exec-13] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:45:39.326 [http-nio-8080-exec-13] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 4(Integer)
2019-01-26 09:45:39.331 [http-nio-8080-exec-13] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 2
2019-01-26 09:45:39.334 [http-nio-8080-exec-13] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:45:39.336 [http-nio-8080-exec-13] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 5(Integer)
2019-01-26 09:45:39.338 [http-nio-8080-exec-13] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-01-26 09:45:39.359 [http-nio-8080-exec-7] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 order by prod_id 
2019-01-26 09:45:39.360 [http-nio-8080-exec-7] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==> Parameters: 
2019-01-26 09:45:39.361 [http-nio-8080-exec-5] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 order by prod_id 
2019-01-26 09:45:39.361 [http-nio-8080-exec-5] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==> Parameters: 
2019-01-26 09:45:39.364 [http-nio-8080-exec-7] DEBUG com.yun.product.dao.ProductDao.findProductByParam - <==      Total: 4
2019-01-26 09:45:39.364 [http-nio-8080-exec-7] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:45:39.365 [http-nio-8080-exec-7] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 2(Integer)
2019-01-26 09:45:39.366 [http-nio-8080-exec-7] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 0
2019-01-26 09:45:39.366 [http-nio-8080-exec-7] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:45:39.367 [http-nio-8080-exec-5] DEBUG com.yun.product.dao.ProductDao.findProductByParam - <==      Total: 4
2019-01-26 09:45:39.367 [http-nio-8080-exec-7] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 3(Integer)
2019-01-26 09:45:39.932 [http-nio-8080-exec-5] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:45:39.933 [http-nio-8080-exec-5] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 2(Integer)
2019-01-26 09:45:39.937 [http-nio-8080-exec-7] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 0
2019-01-26 09:45:39.937 [http-nio-8080-exec-7] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:45:39.937 [http-nio-8080-exec-12] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 order by prod_id 
2019-01-26 09:45:39.938 [http-nio-8080-exec-12] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==> Parameters: 
2019-01-26 09:45:39.938 [http-nio-8080-exec-7] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 4(Integer)
2019-01-26 09:45:39.939 [http-nio-8080-exec-5] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 0
2019-01-26 09:45:39.939 [http-nio-8080-exec-5] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:45:39.939 [http-nio-8080-exec-7] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 2
2019-01-26 09:45:39.940 [http-nio-8080-exec-7] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:45:39.940 [http-nio-8080-exec-7] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 5(Integer)
2019-01-26 09:45:39.942 [http-nio-8080-exec-7] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-01-26 09:45:39.946 [http-nio-8080-exec-5] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 3(Integer)
2019-01-26 09:45:39.951 [http-nio-8080-exec-5] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 0
2019-01-26 09:45:39.948 [http-nio-8080-exec-12] DEBUG com.yun.product.dao.ProductDao.findProductByParam - <==      Total: 4
2019-01-26 09:45:39.951 [http-nio-8080-exec-5] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:45:39.951 [http-nio-8080-exec-12] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:45:39.952 [http-nio-8080-exec-5] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 4(Integer)
2019-01-26 09:45:39.952 [http-nio-8080-exec-12] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 2(Integer)
2019-01-26 09:45:39.953 [http-nio-8080-exec-12] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 0
2019-01-26 09:45:39.954 [http-nio-8080-exec-12] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:45:39.954 [http-nio-8080-exec-12] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 3(Integer)
2019-01-26 09:45:39.955 [http-nio-8080-exec-12] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 0
2019-01-26 09:45:39.955 [http-nio-8080-exec-5] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 2
2019-01-26 09:45:39.955 [http-nio-8080-exec-12] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:45:39.956 [http-nio-8080-exec-5] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:45:39.956 [http-nio-8080-exec-12] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 4(Integer)
2019-01-26 09:45:39.957 [http-nio-8080-exec-5] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 5(Integer)
2019-01-26 09:45:39.957 [http-nio-8080-exec-5] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-01-26 09:45:39.958 [http-nio-8080-exec-12] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 2
2019-01-26 09:45:39.958 [http-nio-8080-exec-12] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:45:39.959 [http-nio-8080-exec-12] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 5(Integer)
2019-01-26 09:45:39.960 [http-nio-8080-exec-12] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-01-26 09:45:39.962 [http-nio-8080-exec-9] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 order by prod_id 
2019-01-26 09:45:39.964 [http-nio-8080-exec-9] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==> Parameters: 
2019-01-26 09:45:39.964 [http-nio-8080-exec-8] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 order by prod_id 
2019-01-26 09:45:39.966 [http-nio-8080-exec-8] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==> Parameters: 
2019-01-26 09:45:39.971 [http-nio-8080-exec-9] DEBUG com.yun.product.dao.ProductDao.findProductByParam - <==      Total: 4
2019-01-26 09:45:39.972 [http-nio-8080-exec-9] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:45:39.972 [http-nio-8080-exec-8] DEBUG com.yun.product.dao.ProductDao.findProductByParam - <==      Total: 4
2019-01-26 09:45:39.972 [http-nio-8080-exec-8] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:45:39.972 [http-nio-8080-exec-8] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 2(Integer)
2019-01-26 09:45:39.973 [http-nio-8080-exec-14] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 order by prod_id 
2019-01-26 09:45:39.973 [http-nio-8080-exec-14] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==> Parameters: 
2019-01-26 09:45:39.974 [http-nio-8080-exec-14] DEBUG com.yun.product.dao.ProductDao.findProductByParam - <==      Total: 4
2019-01-26 09:45:39.975 [http-nio-8080-exec-14] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:45:39.975 [http-nio-8080-exec-14] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 2(Integer)
2019-01-26 09:45:39.975 [http-nio-8080-exec-8] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 0
2019-01-26 09:45:39.975 [http-nio-8080-exec-14] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 0
2019-01-26 09:45:39.976 [http-nio-8080-exec-9] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 2(Integer)
2019-01-26 09:45:39.976 [http-nio-8080-exec-14] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:45:39.976 [http-nio-8080-exec-8] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:45:39.976 [http-nio-8080-exec-14] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 3(Integer)
2019-01-26 09:45:39.976 [http-nio-8080-exec-8] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 3(Integer)
2019-01-26 09:45:39.977 [http-nio-8080-exec-8] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 0
2019-01-26 09:45:39.978 [http-nio-8080-exec-8] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:45:39.979 [http-nio-8080-exec-8] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 4(Integer)
2019-01-26 09:45:39.979 [http-nio-8080-exec-14] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 0
2019-01-26 09:45:39.979 [http-nio-8080-exec-9] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 0
2019-01-26 09:45:39.980 [http-nio-8080-exec-9] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:45:39.980 [http-nio-8080-exec-9] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 3(Integer)
2019-01-26 09:45:39.980 [http-nio-8080-exec-8] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 2
2019-01-26 09:45:39.981 [http-nio-8080-exec-8] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:45:39.981 [http-nio-8080-exec-6] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 order by prod_id 
2019-01-26 09:45:39.981 [http-nio-8080-exec-8] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 5(Integer)
2019-01-26 09:45:39.981 [http-nio-8080-exec-6] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==> Parameters: 
2019-01-26 09:45:39.980 [http-nio-8080-exec-14] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:45:39.983 [http-nio-8080-exec-8] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-01-26 09:45:39.983 [http-nio-8080-exec-9] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 0
2019-01-26 09:45:39.983 [http-nio-8080-exec-9] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:45:39.984 [http-nio-8080-exec-9] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 4(Integer)
2019-01-26 09:45:39.983 [http-nio-8080-exec-14] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 4(Integer)
2019-01-26 09:45:39.986 [http-nio-8080-exec-6] DEBUG com.yun.product.dao.ProductDao.findProductByParam - <==      Total: 4
2019-01-26 09:45:39.986 [http-nio-8080-exec-6] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:45:39.986 [http-nio-8080-exec-9] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 2
2019-01-26 09:45:39.986 [http-nio-8080-exec-6] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 2(Integer)
2019-01-26 09:45:39.987 [http-nio-8080-exec-9] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:45:39.987 [http-nio-8080-exec-9] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 5(Integer)
2019-01-26 09:45:39.987 [http-nio-8080-exec-6] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 0
2019-01-26 09:45:39.988 [http-nio-8080-exec-14] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 2
2019-01-26 09:45:39.988 [http-nio-8080-exec-14] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:45:39.988 [http-nio-8080-exec-14] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 5(Integer)
2019-01-26 09:45:39.988 [http-nio-8080-exec-9] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-01-26 09:45:39.988 [http-nio-8080-exec-6] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:45:39.990 [http-nio-8080-exec-6] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 3(Integer)
2019-01-26 09:45:39.989 [http-nio-8080-exec-14] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-01-26 09:45:39.992 [http-nio-8080-exec-6] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 0
2019-01-26 09:45:39.993 [http-nio-8080-exec-11] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 order by prod_id 
2019-01-26 09:45:39.994 [http-nio-8080-exec-11] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==> Parameters: 
2019-01-26 09:45:39.997 [http-nio-8080-exec-4] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 order by prod_id 
2019-01-26 09:45:39.997 [http-nio-8080-exec-4] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==> Parameters: 
2019-01-26 09:45:39.998 [http-nio-8080-exec-3] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 order by prod_id 
2019-01-26 09:45:39.998 [http-nio-8080-exec-3] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==> Parameters: 
2019-01-26 09:45:40.000 [http-nio-8080-exec-3] DEBUG com.yun.product.dao.ProductDao.findProductByParam - <==      Total: 4
2019-01-26 09:45:40.000 [http-nio-8080-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:45:40.000 [http-nio-8080-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 2(Integer)
2019-01-26 09:45:40.001 [http-nio-8080-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 0
2019-01-26 09:45:40.001 [http-nio-8080-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:45:40.002 [http-nio-8080-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 3(Integer)
2019-01-26 09:45:40.002 [http-nio-8080-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 0
2019-01-26 09:45:40.002 [http-nio-8080-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:45:40.003 [http-nio-8080-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 4(Integer)
2019-01-26 09:45:40.003 [http-nio-8080-exec-4] DEBUG com.yun.product.dao.ProductDao.findProductByParam - <==      Total: 4
2019-01-26 09:45:40.003 [http-nio-8080-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 2
2019-01-26 09:45:40.003 [http-nio-8080-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:45:40.004 [http-nio-8080-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:45:40.004 [http-nio-8080-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 5(Integer)
2019-01-26 09:45:40.004 [http-nio-8080-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 2(Integer)
2019-01-26 09:45:40.005 [http-nio-8080-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-01-26 09:45:40.005 [http-nio-8080-exec-6] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:45:40.006 [http-nio-8080-exec-6] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 4(Integer)
2019-01-26 09:45:40.006 [http-nio-8080-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 0
2019-01-26 09:45:40.006 [http-nio-8080-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:45:40.006 [http-nio-8080-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 3(Integer)
2019-01-26 09:45:40.007 [http-nio-8080-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 0
2019-01-26 09:45:40.007 [http-nio-8080-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:45:40.007 [http-nio-8080-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 4(Integer)
2019-01-26 09:45:40.007 [http-nio-8080-exec-11] DEBUG com.yun.product.dao.ProductDao.findProductByParam - <==      Total: 4
2019-01-26 09:45:40.008 [http-nio-8080-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 2
2019-01-26 09:45:40.010 [http-nio-8080-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:45:40.010 [http-nio-8080-exec-11] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:45:40.010 [http-nio-8080-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 5(Integer)
2019-01-26 09:45:40.009 [http-nio-8080-exec-6] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 2
2019-01-26 09:45:40.011 [http-nio-8080-exec-6] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:45:40.011 [http-nio-8080-exec-6] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 5(Integer)
2019-01-26 09:45:40.011 [http-nio-8080-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-01-26 09:45:40.014 [http-nio-8080-exec-6] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-01-26 09:45:40.012 [http-nio-8080-exec-11] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 2(Integer)
2019-01-26 09:45:40.018 [http-nio-8080-exec-11] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 0
2019-01-26 09:45:40.019 [http-nio-8080-exec-11] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:45:40.019 [http-nio-8080-exec-11] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 3(Integer)
2019-01-26 09:45:40.021 [http-nio-8080-exec-11] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 0
2019-01-26 09:45:40.022 [http-nio-8080-exec-11] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:45:40.022 [http-nio-8080-exec-11] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 4(Integer)
2019-01-26 09:45:40.025 [http-nio-8080-exec-11] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 2
2019-01-26 09:45:40.026 [http-nio-8080-exec-11] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:45:40.026 [http-nio-8080-exec-11] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 5(Integer)
2019-01-26 09:45:40.027 [http-nio-8080-exec-11] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-01-26 09:45:40.030 [http-nio-8080-exec-10] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 order by prod_id 
2019-01-26 09:45:40.030 [http-nio-8080-exec-10] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==> Parameters: 
2019-01-26 09:45:40.033 [http-nio-8080-exec-10] DEBUG com.yun.product.dao.ProductDao.findProductByParam - <==      Total: 4
2019-01-26 09:45:40.033 [http-nio-8080-exec-10] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:45:40.034 [http-nio-8080-exec-10] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 2(Integer)
2019-01-26 09:45:40.036 [http-nio-8080-exec-10] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 0
2019-01-26 09:45:40.036 [http-nio-8080-exec-10] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:45:40.037 [http-nio-8080-exec-10] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 3(Integer)
2019-01-26 09:45:40.038 [http-nio-8080-exec-10] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 0
2019-01-26 09:45:40.039 [http-nio-8080-exec-10] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:45:40.040 [http-nio-8080-exec-10] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 4(Integer)
2019-01-26 09:45:40.041 [http-nio-8080-exec-10] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 2
2019-01-26 09:45:40.042 [http-nio-8080-exec-10] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:45:40.042 [http-nio-8080-exec-10] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 5(Integer)
2019-01-26 09:45:40.044 [http-nio-8080-exec-10] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-01-26 09:46:15.763 [http-nio-8080-exec-1] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 order by prod_id 
2019-01-26 09:46:15.764 [http-nio-8080-exec-1] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==> Parameters: 
2019-01-26 09:46:15.774 [http-nio-8080-exec-1] DEBUG com.yun.product.dao.ProductDao.findProductByParam - <==      Total: 4
2019-01-26 09:46:15.775 [http-nio-8080-exec-1] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:46:15.776 [http-nio-8080-exec-1] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 2(Integer)
2019-01-26 09:46:15.777 [http-nio-8080-exec-1] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 0
2019-01-26 09:46:15.778 [http-nio-8080-exec-1] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:46:15.778 [http-nio-8080-exec-1] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 3(Integer)
2019-01-26 09:46:15.779 [http-nio-8080-exec-1] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 0
2019-01-26 09:46:15.779 [http-nio-8080-exec-1] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:46:15.779 [http-nio-8080-exec-1] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 4(Integer)
2019-01-26 09:46:15.781 [http-nio-8080-exec-1] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 2
2019-01-26 09:46:15.782 [http-nio-8080-exec-1] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:46:15.782 [http-nio-8080-exec-1] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 5(Integer)
2019-01-26 09:46:15.783 [http-nio-8080-exec-1] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-01-26 09:51:04.611 [main] INFO  com.yun.YunEbStockApplication - Starting YunEbStockApplication on USER-20181202BJ with PID 1020 (E:\workspace\yun-eb-stock\target\classes started by Administrator in E:\workspace\yun-eb-stock)
2019-01-26 09:51:04.620 [main] DEBUG com.yun.YunEbStockApplication - Running with Spring Boot v1.5.9.RELEASE, Spring v4.3.13.RELEASE
2019-01-26 09:51:04.620 [main] INFO  com.yun.YunEbStockApplication - No active profile set, falling back to default profiles: default
2019-01-26 09:51:09.951 [main] INFO  com.yun.YunEbStockApplication - Starting YunEbStockApplication on USER-20181202BJ with PID 2984 (E:\workspace\yun-eb-stock\target\classes started by Administrator in E:\workspace\yun-eb-stock)
2019-01-26 09:51:09.958 [main] DEBUG com.yun.YunEbStockApplication - Running with Spring Boot v1.5.9.RELEASE, Spring v4.3.13.RELEASE
2019-01-26 09:51:09.958 [main] INFO  com.yun.YunEbStockApplication - No active profile set, falling back to default profiles: default
2019-01-26 09:51:10.271 [background-preinit] INFO  org.hibernate.validator.internal.util.Version - HV000001: Hibernate Validator 5.3.6.Final
2019-01-26 09:51:10.429 [main] INFO  o.s.b.c.e.AnnotationConfigEmbeddedWebApplicationContext - Refreshing org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@27216cd: startup date [Sat Jan 26 09:51:10 CST 2019]; root of context hierarchy
2019-01-26 09:51:12.307 [main] INFO  o.s.b.c.e.tomcat.TomcatEmbeddedServletContainer - Tomcat initialized with port(s): 8080 (http)
2019-01-26 09:51:12.320 [main] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2019-01-26 09:51:12.321 [main] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet Engine: Apache Tomcat/8.5.23
2019-01-26 09:51:12.447 [localhost-startStop-1] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2019-01-26 09:51:12.448 [localhost-startStop-1] INFO  org.springframework.web.context.ContextLoader - Root WebApplicationContext: initialization completed in 2019 ms
2019-01-26 09:51:12.658 [localhost-startStop-1] INFO  o.s.boot.web.servlet.ServletRegistrationBean - Mapping servlet: 'dispatcherServlet' to [/]
2019-01-26 09:51:12.668 [localhost-startStop-1] INFO  o.s.boot.web.servlet.FilterRegistrationBean - Mapping filter: 'characterEncodingFilter' to: [/*]
2019-01-26 09:51:12.669 [localhost-startStop-1] INFO  o.s.boot.web.servlet.FilterRegistrationBean - Mapping filter: 'hiddenHttpMethodFilter' to: [/*]
2019-01-26 09:51:12.669 [localhost-startStop-1] INFO  o.s.boot.web.servlet.FilterRegistrationBean - Mapping filter: 'httpPutFormContentFilter' to: [/*]
2019-01-26 09:51:12.669 [localhost-startStop-1] INFO  o.s.boot.web.servlet.FilterRegistrationBean - Mapping filter: 'requestContextFilter' to: [/*]
2019-01-26 09:51:13.700 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerAdapter - Looking for @ControllerAdvice: org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@27216cd: startup date [Sat Jan 26 09:51:10 CST 2019]; root of context hierarchy
2019-01-26 09:51:13.778 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productListForAutoComplete]}" onto public java.util.List<com.yun.product.model.Product> com.yun.product.controller.ProductController.productListForAutoComplete(java.lang.String)
2019-01-26 09:51:13.780 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productList]}" onto public java.lang.String com.yun.product.controller.ProductController.productList(org.springframework.ui.Model,java.lang.String,java.lang.String,java.lang.String,java.lang.String)
2019-01-26 09:51:13.780 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productPreAdd]}" onto public java.lang.String com.yun.product.controller.ProductController.productPreAdd()
2019-01-26 09:51:13.780 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productSave]}" onto public java.lang.String com.yun.product.controller.ProductController.productSave(com.yun.product.model.Product)
2019-01-26 09:51:13.780 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productDelete]}" onto public java.lang.String com.yun.product.controller.ProductController.productDelete(int)
2019-01-26 09:51:13.780 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productPreUpdate]}" onto public java.lang.String com.yun.product.controller.ProductController.productPreUpdate(int,org.springframework.ui.Model)
2019-01-26 09:51:13.781 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productUpdate]}" onto public java.lang.String com.yun.product.controller.ProductController.productUpdate(com.yun.product.model.Product)
2019-01-26 09:51:13.781 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/prodParamPreAdd]}" onto public java.lang.String com.yun.product.controller.ProductParamController.prodParamPreAdd(int,org.springframework.ui.Model)
2019-01-26 09:51:13.782 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/prodParamDelete]}" onto public java.lang.String com.yun.product.controller.ProductParamController.prodParamDelete(int)
2019-01-26 09:51:13.782 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/prodParamList]}" onto public java.lang.String com.yun.product.controller.ProductParamController.prodParamList(int)
2019-01-26 09:51:13.782 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/prodParamSave]}" onto public java.lang.String com.yun.product.controller.ProductParamController.prodParamSave(com.yun.product.model.ProductParameter)
2019-01-26 09:51:13.786 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeUpdate]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeUpdate(java.lang.Integer,org.springframework.ui.Model)
2019-01-26 09:51:13.786 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeTree]}" onto public java.util.List<com.yun.product.model.ProductType> com.yun.product.controller.ProductTypeController.productTypeTree()
2019-01-26 09:51:13.786 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeList]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeList(org.springframework.ui.Model)
2019-01-26 09:51:13.786 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeEdit]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeEdit()
2019-01-26 09:51:13.786 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeSave]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeSave(com.yun.product.model.ProductType)
2019-01-26 09:51:13.787 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeUpdateSave]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeUpdateSave(com.yun.product.model.ProductType)
2019-01-26 09:51:13.787 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeDelete]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeDelete(java.lang.Integer,javax.servlet.http.HttpServletResponse) throws java.io.IOException
2019-01-26 09:51:13.788 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockSave]}" onto public java.lang.String com.yun.stock.controller.ProductStockController.productStockSave(com.yun.stock.model.ProductStock)
2019-01-26 09:51:13.788 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStocklist]}" onto public java.lang.String com.yun.stock.controller.ProductStockController.productStocklist(java.lang.String,java.lang.String,org.springframework.ui.Model)
2019-01-26 09:51:13.788 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockPreAdd]}" onto public java.lang.String com.yun.stock.controller.ProductStockController.productStockPreAdd()
2019-01-26 09:51:13.789 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/main]}" onto public java.lang.String com.yun.user.controller.MainController.main()
2019-01-26 09:51:13.789 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/userList]}" onto public java.lang.String com.yun.user.controller.UserController.userList(org.springframework.ui.Model)
2019-01-26 09:51:13.790 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/login]}" onto public java.lang.String com.yun.user.controller.UserController.login(java.lang.String,java.lang.String,javax.servlet.http.HttpSession)
2019-01-26 09:51:13.790 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/userEdit]}" onto public java.lang.String com.yun.user.controller.UserController.userEdit()
2019-01-26 09:51:13.790 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/userSave]}" onto public java.lang.String com.yun.user.controller.UserController.userSave(com.yun.user.model.UserInfo)
2019-01-26 09:51:13.790 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/deleteUserInfo]}" onto public java.lang.String com.yun.user.controller.UserController.userDelete(int)
2019-01-26 09:51:13.793 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/error]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> org.springframework.boot.autoconfigure.web.BasicErrorController.error(javax.servlet.http.HttpServletRequest)
2019-01-26 09:51:13.794 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/error],produces=[text/html]}" onto public org.springframework.web.servlet.ModelAndView org.springframework.boot.autoconfigure.web.BasicErrorController.errorHtml(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
2019-01-26 09:51:13.846 [main] INFO  o.s.web.servlet.handler.SimpleUrlHandlerMapping - Mapped URL path [/webjars/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-01-26 09:51:13.846 [main] INFO  o.s.web.servlet.handler.SimpleUrlHandlerMapping - Mapped URL path [/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-01-26 09:51:13.904 [main] INFO  o.s.web.servlet.handler.SimpleUrlHandlerMapping - Mapped URL path [/**/favicon.ico] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-01-26 09:51:14.344 [main] INFO  o.s.b.a.w.WebMvcAutoConfiguration$WelcomePageHandlerMapping - Adding welcome page: class path resource [static/index.html]
2019-01-26 09:51:14.819 [main] INFO  o.s.jmx.export.annotation.AnnotationMBeanExporter - Registering beans for JMX exposure on startup
2019-01-26 09:51:14.844 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2019-01-26 09:51:14.858 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2019-01-26 09:51:14.876 [main] INFO  org.apache.tomcat.util.net.NioSelectorPool - Using a shared selector for servlet write/read
2019-01-26 09:51:14.901 [main] INFO  o.s.b.c.e.tomcat.TomcatEmbeddedServletContainer - Tomcat started on port(s): 8080 (http)
2019-01-26 09:51:14.906 [main] INFO  com.yun.YunEbStockApplication - Started YunEbStockApplication in 5.483 seconds (JVM running for 7.178)
2019-01-26 09:51:16.999 [http-nio-8080-exec-1] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring FrameworkServlet 'dispatcherServlet'
2019-01-26 09:51:16.999 [http-nio-8080-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - FrameworkServlet 'dispatcherServlet': initialization started
2019-01-26 09:51:17.030 [http-nio-8080-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - FrameworkServlet 'dispatcherServlet': initialization completed in 31 ms
2019-01-26 09:51:17.448 [http-nio-8080-exec-1] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 order by prod_id 
2019-01-26 09:51:17.470 [http-nio-8080-exec-1] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==> Parameters: 
2019-01-26 09:51:17.492 [http-nio-8080-exec-1] DEBUG com.yun.product.dao.ProductDao.findProductByParam - <==      Total: 4
2019-01-26 09:51:17.494 [http-nio-8080-exec-1] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:51:17.494 [http-nio-8080-exec-1] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 2(Integer)
2019-01-26 09:51:17.495 [http-nio-8080-exec-1] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 0
2019-01-26 09:51:17.496 [http-nio-8080-exec-1] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:51:17.497 [http-nio-8080-exec-1] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 3(Integer)
2019-01-26 09:51:17.497 [http-nio-8080-exec-1] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 0
2019-01-26 09:51:17.498 [http-nio-8080-exec-1] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:51:17.498 [http-nio-8080-exec-1] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 4(Integer)
2019-01-26 09:51:17.500 [http-nio-8080-exec-1] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 2
2019-01-26 09:51:17.500 [http-nio-8080-exec-1] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:51:17.501 [http-nio-8080-exec-1] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 5(Integer)
2019-01-26 09:51:17.502 [http-nio-8080-exec-1] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-01-26 09:51:21.700 [http-nio-8080-exec-10] DEBUG com.yun.stock.controller.ProductStockController - 跳转到物品库存查询控制器
2019-01-26 09:51:21.705 [http-nio-8080-exec-10] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==>  Preparing: select count(*) from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 
2019-01-26 09:51:21.706 [http-nio-8080-exec-10] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==> Parameters: 
2019-01-26 09:51:21.713 [http-nio-8080-exec-10] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - <==      Total: 1
2019-01-26 09:51:21.716 [http-nio-8080-exec-10] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==>  Preparing: select ps.prod_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 order by p.prod_id,pp.prod_param_id limit ?,? 
2019-01-26 09:51:21.718 [http-nio-8080-exec-10] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==> Parameters: 0(Integer), 5(Integer)
2019-01-26 09:51:21.720 [http-nio-8080-exec-10] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - <==      Total: 0
2019-01-26 09:51:21.721 [http-nio-8080-exec-10] DEBUG com.yun.stock.controller.ProductStockController - 转到物品库存页面
2019-01-26 09:51:46.042 [http-nio-8080-exec-6] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 order by prod_id 
2019-01-26 09:51:46.045 [http-nio-8080-exec-6] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==> Parameters: 
2019-01-26 09:51:46.068 [http-nio-8080-exec-6] DEBUG com.yun.product.dao.ProductDao.findProductByParam - <==      Total: 4
2019-01-26 09:51:46.075 [http-nio-8080-exec-6] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:51:46.076 [http-nio-8080-exec-6] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 2(Integer)
2019-01-26 09:51:46.077 [http-nio-8080-exec-6] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 0
2019-01-26 09:51:46.078 [http-nio-8080-exec-6] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:51:46.080 [http-nio-8080-exec-6] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 3(Integer)
2019-01-26 09:51:46.081 [http-nio-8080-exec-6] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 0
2019-01-26 09:51:46.082 [http-nio-8080-exec-6] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:51:46.082 [http-nio-8080-exec-6] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 4(Integer)
2019-01-26 09:51:46.084 [http-nio-8080-exec-6] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 2
2019-01-26 09:51:46.085 [http-nio-8080-exec-6] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:51:46.085 [http-nio-8080-exec-6] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 5(Integer)
2019-01-26 09:51:46.087 [http-nio-8080-exec-6] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-01-26 09:52:04.944 [http-nio-8080-exec-9] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 order by prod_id 
2019-01-26 09:52:04.945 [http-nio-8080-exec-9] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==> Parameters: 
2019-01-26 09:52:04.947 [http-nio-8080-exec-9] DEBUG com.yun.product.dao.ProductDao.findProductByParam - <==      Total: 4
2019-01-26 09:52:04.948 [http-nio-8080-exec-9] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:52:04.948 [http-nio-8080-exec-9] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 2(Integer)
2019-01-26 09:52:04.949 [http-nio-8080-exec-9] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 0
2019-01-26 09:52:04.949 [http-nio-8080-exec-9] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:52:04.949 [http-nio-8080-exec-9] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 3(Integer)
2019-01-26 09:52:04.950 [http-nio-8080-exec-9] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 0
2019-01-26 09:52:04.951 [http-nio-8080-exec-9] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:52:04.952 [http-nio-8080-exec-9] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 4(Integer)
2019-01-26 09:52:04.954 [http-nio-8080-exec-9] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 2
2019-01-26 09:52:04.955 [http-nio-8080-exec-9] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:52:04.955 [http-nio-8080-exec-9] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 5(Integer)
2019-01-26 09:52:05.337 [http-nio-8080-exec-9] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-01-26 09:52:06.358 [http-nio-8080-exec-7] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 order by prod_id 
2019-01-26 09:52:06.360 [http-nio-8080-exec-7] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==> Parameters: 
2019-01-26 09:52:06.406 [http-nio-8080-exec-7] DEBUG com.yun.product.dao.ProductDao.findProductByParam - <==      Total: 4
2019-01-26 09:52:06.408 [http-nio-8080-exec-7] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:52:06.409 [http-nio-8080-exec-7] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 2(Integer)
2019-01-26 09:52:06.411 [http-nio-8080-exec-7] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 0
2019-01-26 09:52:06.413 [http-nio-8080-exec-7] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:52:06.414 [http-nio-8080-exec-7] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 3(Integer)
2019-01-26 09:52:06.416 [http-nio-8080-exec-7] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 0
2019-01-26 09:52:06.418 [http-nio-8080-exec-7] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:52:06.420 [http-nio-8080-exec-7] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 4(Integer)
2019-01-26 09:52:06.423 [http-nio-8080-exec-7] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 2
2019-01-26 09:52:06.427 [http-nio-8080-exec-7] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:52:06.429 [http-nio-8080-exec-7] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 5(Integer)
2019-01-26 09:52:06.432 [http-nio-8080-exec-7] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-01-26 09:52:11.466 [http-nio-8080-exec-10] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 order by prod_id 
2019-01-26 09:52:11.467 [http-nio-8080-exec-10] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==> Parameters: 
2019-01-26 09:52:11.475 [http-nio-8080-exec-10] DEBUG com.yun.product.dao.ProductDao.findProductByParam - <==      Total: 4
2019-01-26 09:52:11.475 [http-nio-8080-exec-10] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:52:11.475 [http-nio-8080-exec-10] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 2(Integer)
2019-01-26 09:52:11.480 [http-nio-8080-exec-10] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 0
2019-01-26 09:52:11.480 [http-nio-8080-exec-10] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:52:11.481 [http-nio-8080-exec-10] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 3(Integer)
2019-01-26 09:52:11.482 [http-nio-8080-exec-10] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 0
2019-01-26 09:52:11.483 [http-nio-8080-exec-10] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:52:11.483 [http-nio-8080-exec-10] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 4(Integer)
2019-01-26 09:52:11.485 [http-nio-8080-exec-10] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 2
2019-01-26 09:52:11.485 [http-nio-8080-exec-10] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:52:11.485 [http-nio-8080-exec-10] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 5(Integer)
2019-01-26 09:52:11.486 [http-nio-8080-exec-10] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-01-26 09:52:20.330 [http-nio-8080-exec-4] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 order by prod_id 
2019-01-26 09:52:20.331 [http-nio-8080-exec-4] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==> Parameters: 
2019-01-26 09:52:20.333 [http-nio-8080-exec-4] DEBUG com.yun.product.dao.ProductDao.findProductByParam - <==      Total: 4
2019-01-26 09:52:20.334 [http-nio-8080-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:52:20.334 [http-nio-8080-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 2(Integer)
2019-01-26 09:52:20.338 [http-nio-8080-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 0
2019-01-26 09:52:20.339 [http-nio-8080-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:52:20.339 [http-nio-8080-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 3(Integer)
2019-01-26 09:52:20.341 [http-nio-8080-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 0
2019-01-26 09:52:20.341 [http-nio-8080-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:52:20.342 [http-nio-8080-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 4(Integer)
2019-01-26 09:52:20.348 [http-nio-8080-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 2
2019-01-26 09:52:20.349 [http-nio-8080-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:52:20.349 [http-nio-8080-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 5(Integer)
2019-01-26 09:52:20.351 [http-nio-8080-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-01-26 09:53:01.952 [http-nio-8080-exec-5] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 order by prod_id 
2019-01-26 09:53:01.952 [http-nio-8080-exec-5] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==> Parameters: 
2019-01-26 09:53:01.954 [http-nio-8080-exec-5] DEBUG com.yun.product.dao.ProductDao.findProductByParam - <==      Total: 4
2019-01-26 09:53:01.955 [http-nio-8080-exec-5] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:53:01.955 [http-nio-8080-exec-5] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 2(Integer)
2019-01-26 09:53:01.956 [http-nio-8080-exec-5] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 0
2019-01-26 09:53:01.957 [http-nio-8080-exec-5] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:53:01.958 [http-nio-8080-exec-5] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 3(Integer)
2019-01-26 09:53:01.959 [http-nio-8080-exec-5] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 0
2019-01-26 09:53:01.960 [http-nio-8080-exec-5] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:53:01.960 [http-nio-8080-exec-5] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 4(Integer)
2019-01-26 09:53:01.961 [http-nio-8080-exec-5] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 2
2019-01-26 09:53:01.962 [http-nio-8080-exec-5] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:53:01.962 [http-nio-8080-exec-5] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 5(Integer)
2019-01-26 09:53:01.963 [http-nio-8080-exec-5] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-01-26 09:53:54.661 [http-nio-8080-exec-10] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 order by prod_id 
2019-01-26 09:53:54.662 [http-nio-8080-exec-10] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==> Parameters: 
2019-01-26 09:53:54.669 [http-nio-8080-exec-10] DEBUG com.yun.product.dao.ProductDao.findProductByParam - <==      Total: 4
2019-01-26 09:53:54.670 [http-nio-8080-exec-10] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:53:54.673 [http-nio-8080-exec-10] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 2(Integer)
2019-01-26 09:53:54.702 [http-nio-8080-exec-10] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 0
2019-01-26 09:53:54.702 [http-nio-8080-exec-10] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:53:54.703 [http-nio-8080-exec-10] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 3(Integer)
2019-01-26 09:53:54.706 [http-nio-8080-exec-10] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 0
2019-01-26 09:53:54.707 [http-nio-8080-exec-10] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:53:54.708 [http-nio-8080-exec-10] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 4(Integer)
2019-01-26 09:53:54.715 [http-nio-8080-exec-10] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 2
2019-01-26 09:53:54.715 [http-nio-8080-exec-10] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 09:53:54.716 [http-nio-8080-exec-10] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 5(Integer)
2019-01-26 09:53:54.717 [http-nio-8080-exec-10] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-01-26 09:53:57.809 [http-nio-8080-exec-3] DEBUG com.yun.stock.controller.ProductStockController - 跳转到物品库存查询控制器
2019-01-26 09:53:57.815 [http-nio-8080-exec-3] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==>  Preparing: select count(*) from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 
2019-01-26 09:53:57.816 [http-nio-8080-exec-3] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==> Parameters: 
2019-01-26 09:53:57.817 [http-nio-8080-exec-3] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - <==      Total: 1
2019-01-26 09:53:57.820 [http-nio-8080-exec-3] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==>  Preparing: select ps.prod_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 order by p.prod_id,pp.prod_param_id limit ?,? 
2019-01-26 09:53:57.821 [http-nio-8080-exec-3] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==> Parameters: 0(Integer), 5(Integer)
2019-01-26 09:53:57.825 [http-nio-8080-exec-3] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - <==      Total: 0
2019-01-26 09:53:57.825 [http-nio-8080-exec-3] DEBUG com.yun.stock.controller.ProductStockController - 转到物品库存页面
2019-01-26 10:03:05.190 [http-nio-8080-exec-3] DEBUG com.yun.stock.controller.ProductStockController - 跳转到物品库存查询控制器
2019-01-26 10:03:05.193 [http-nio-8080-exec-3] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==>  Preparing: select count(*) from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 
2019-01-26 10:03:05.194 [http-nio-8080-exec-3] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==> Parameters: 
2019-01-26 10:03:05.195 [http-nio-8080-exec-3] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - <==      Total: 1
2019-01-26 10:03:05.195 [http-nio-8080-exec-3] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==>  Preparing: select ps.prod_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 order by p.prod_id,pp.prod_param_id limit ?,? 
2019-01-26 10:03:05.196 [http-nio-8080-exec-3] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==> Parameters: 0(Integer), 5(Integer)
2019-01-26 10:03:05.198 [http-nio-8080-exec-3] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - <==      Total: 0
2019-01-26 10:03:05.198 [http-nio-8080-exec-3] DEBUG com.yun.stock.controller.ProductStockController - 转到物品库存页面
2019-01-26 10:04:02.077 [http-nio-8080-exec-1] DEBUG com.yun.stock.controller.ProductStockController - 跳转到物品库存查询控制器
2019-01-26 10:04:02.080 [http-nio-8080-exec-1] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==>  Preparing: select count(*) from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 
2019-01-26 10:04:02.081 [http-nio-8080-exec-1] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==> Parameters: 
2019-01-26 10:04:02.084 [http-nio-8080-exec-1] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - <==      Total: 1
2019-01-26 10:04:02.087 [http-nio-8080-exec-1] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==>  Preparing: select ps.prod_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 order by p.prod_id,pp.prod_param_id limit ?,? 
2019-01-26 10:04:02.087 [http-nio-8080-exec-1] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==> Parameters: 0(Integer), 5(Integer)
2019-01-26 10:04:02.090 [http-nio-8080-exec-1] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - <==      Total: 0
2019-01-26 10:04:02.093 [http-nio-8080-exec-1] DEBUG com.yun.stock.controller.ProductStockController - 转到物品库存页面
2019-01-26 10:04:56.832 [http-nio-8080-exec-9] DEBUG com.yun.stock.controller.ProductStockController - 跳转到物品库存查询控制器
2019-01-26 10:04:56.835 [http-nio-8080-exec-9] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==>  Preparing: select count(*) from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 
2019-01-26 10:04:56.837 [http-nio-8080-exec-9] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==> Parameters: 
2019-01-26 10:04:56.839 [http-nio-8080-exec-9] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - <==      Total: 1
2019-01-26 10:04:56.841 [http-nio-8080-exec-9] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==>  Preparing: select ps.prod_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 order by p.prod_id,pp.prod_param_id limit ?,? 
2019-01-26 10:04:56.842 [http-nio-8080-exec-9] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==> Parameters: 0(Integer), 5(Integer)
2019-01-26 10:04:56.846 [http-nio-8080-exec-9] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - <==      Total: 0
2019-01-26 10:04:56.846 [http-nio-8080-exec-9] DEBUG com.yun.stock.controller.ProductStockController - 转到物品库存页面
2019-01-26 10:05:50.929 [http-nio-8080-exec-1] DEBUG com.yun.stock.controller.ProductStockController - 跳转到物品库存查询控制器
2019-01-26 10:05:50.932 [http-nio-8080-exec-1] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==>  Preparing: select count(*) from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 
2019-01-26 10:05:50.933 [http-nio-8080-exec-1] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==> Parameters: 
2019-01-26 10:05:50.936 [http-nio-8080-exec-1] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - <==      Total: 1
2019-01-26 10:05:50.937 [http-nio-8080-exec-1] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==>  Preparing: select ps.prod_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 order by p.prod_id,pp.prod_param_id limit ?,? 
2019-01-26 10:05:50.937 [http-nio-8080-exec-1] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==> Parameters: 0(Integer), 5(Integer)
2019-01-26 10:05:50.938 [http-nio-8080-exec-1] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - <==      Total: 0
2019-01-26 10:05:50.939 [http-nio-8080-exec-1] DEBUG com.yun.stock.controller.ProductStockController - 转到物品库存页面
2019-01-26 10:06:32.739 [http-nio-8080-exec-10] DEBUG com.yun.stock.controller.ProductStockController - 跳转到物品库存查询控制器
2019-01-26 10:06:32.742 [http-nio-8080-exec-10] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==>  Preparing: select count(*) from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 
2019-01-26 10:06:32.743 [http-nio-8080-exec-10] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==> Parameters: 
2019-01-26 10:06:32.745 [http-nio-8080-exec-10] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - <==      Total: 1
2019-01-26 10:06:32.746 [http-nio-8080-exec-10] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==>  Preparing: select ps.prod_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 order by p.prod_id,pp.prod_param_id limit ?,? 
2019-01-26 10:06:32.747 [http-nio-8080-exec-10] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==> Parameters: 0(Integer), 5(Integer)
2019-01-26 10:06:32.749 [http-nio-8080-exec-10] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - <==      Total: 0
2019-01-26 10:06:32.750 [http-nio-8080-exec-10] DEBUG com.yun.stock.controller.ProductStockController - 转到物品库存页面
2019-01-26 10:07:19.531 [http-nio-8080-exec-3] DEBUG com.yun.stock.controller.ProductStockController - 跳转到物品库存查询控制器
2019-01-26 10:07:19.533 [http-nio-8080-exec-3] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==>  Preparing: select count(*) from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 
2019-01-26 10:07:19.534 [http-nio-8080-exec-3] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==> Parameters: 
2019-01-26 10:07:19.535 [http-nio-8080-exec-3] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - <==      Total: 1
2019-01-26 10:07:19.537 [http-nio-8080-exec-3] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==>  Preparing: select ps.prod_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 order by p.prod_id,pp.prod_param_id limit ?,? 
2019-01-26 10:07:19.538 [http-nio-8080-exec-3] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==> Parameters: 0(Integer), 5(Integer)
2019-01-26 10:07:19.540 [http-nio-8080-exec-3] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - <==      Total: 0
2019-01-26 10:07:19.541 [http-nio-8080-exec-3] DEBUG com.yun.stock.controller.ProductStockController - 转到物品库存页面
2019-01-26 10:08:21.406 [http-nio-8080-exec-1] DEBUG com.yun.stock.controller.ProductStockController - 跳转到物品库存查询控制器
2019-01-26 10:08:21.409 [http-nio-8080-exec-1] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==>  Preparing: select count(*) from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 
2019-01-26 10:08:21.410 [http-nio-8080-exec-1] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==> Parameters: 
2019-01-26 10:08:21.413 [http-nio-8080-exec-1] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - <==      Total: 1
2019-01-26 10:08:21.415 [http-nio-8080-exec-1] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==>  Preparing: select ps.prod_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 order by p.prod_id,pp.prod_param_id limit ?,? 
2019-01-26 10:08:21.416 [http-nio-8080-exec-1] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==> Parameters: 0(Integer), 5(Integer)
2019-01-26 10:08:21.418 [http-nio-8080-exec-1] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - <==      Total: 0
2019-01-26 10:08:21.418 [http-nio-8080-exec-1] DEBUG com.yun.stock.controller.ProductStockController - 转到物品库存页面
2019-01-26 10:08:38.666 [http-nio-8080-exec-2] DEBUG com.yun.stock.controller.ProductStockController - 跳转到物品库存查询控制器
2019-01-26 10:08:38.668 [http-nio-8080-exec-2] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==>  Preparing: select count(*) from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 
2019-01-26 10:08:38.669 [http-nio-8080-exec-2] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==> Parameters: 
2019-01-26 10:08:38.671 [http-nio-8080-exec-2] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - <==      Total: 1
2019-01-26 10:08:38.672 [http-nio-8080-exec-2] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==>  Preparing: select ps.prod_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 order by p.prod_id,pp.prod_param_id limit ?,? 
2019-01-26 10:08:38.673 [http-nio-8080-exec-2] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==> Parameters: 0(Integer), 5(Integer)
2019-01-26 10:08:38.675 [http-nio-8080-exec-2] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - <==      Total: 0
2019-01-26 10:08:38.675 [http-nio-8080-exec-2] DEBUG com.yun.stock.controller.ProductStockController - 转到物品库存页面
2019-01-26 10:09:31.200 [http-nio-8080-exec-3] DEBUG com.yun.stock.controller.ProductStockController - 跳转到物品库存查询控制器
2019-01-26 10:09:31.202 [http-nio-8080-exec-3] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==>  Preparing: select count(*) from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 
2019-01-26 10:09:31.203 [http-nio-8080-exec-3] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==> Parameters: 
2019-01-26 10:09:31.206 [http-nio-8080-exec-3] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - <==      Total: 1
2019-01-26 10:09:31.207 [http-nio-8080-exec-3] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==>  Preparing: select ps.prod_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 order by p.prod_id,pp.prod_param_id limit ?,? 
2019-01-26 10:09:31.208 [http-nio-8080-exec-3] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==> Parameters: 0(Integer), 5(Integer)
2019-01-26 10:09:31.210 [http-nio-8080-exec-3] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - <==      Total: 0
2019-01-26 10:09:31.211 [http-nio-8080-exec-3] DEBUG com.yun.stock.controller.ProductStockController - 转到物品库存页面
2019-01-26 10:09:35.655 [http-nio-8080-exec-5] DEBUG com.yun.stock.controller.ProductStockController - 跳转到物品库存查询控制器
2019-01-26 10:09:35.661 [http-nio-8080-exec-5] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==>  Preparing: select count(*) from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 
2019-01-26 10:09:35.662 [http-nio-8080-exec-5] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==> Parameters: 
2019-01-26 10:09:35.664 [http-nio-8080-exec-5] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - <==      Total: 1
2019-01-26 10:09:35.666 [http-nio-8080-exec-5] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==>  Preparing: select ps.prod_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 order by p.prod_id,pp.prod_param_id limit ?,? 
2019-01-26 10:09:35.668 [http-nio-8080-exec-5] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==> Parameters: 0(Integer), 5(Integer)
2019-01-26 10:09:35.669 [http-nio-8080-exec-5] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - <==      Total: 0
2019-01-26 10:09:35.669 [http-nio-8080-exec-5] DEBUG com.yun.stock.controller.ProductStockController - 转到物品库存页面
2019-01-26 10:09:39.507 [http-nio-8080-exec-7] DEBUG com.yun.stock.controller.ProductStockController - 跳转到物品库存查询控制器
2019-01-26 10:09:39.509 [http-nio-8080-exec-7] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==>  Preparing: select count(*) from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 
2019-01-26 10:09:39.509 [http-nio-8080-exec-7] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==> Parameters: 
2019-01-26 10:09:39.511 [http-nio-8080-exec-7] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - <==      Total: 1
2019-01-26 10:09:39.512 [http-nio-8080-exec-7] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==>  Preparing: select ps.prod_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 order by p.prod_id,pp.prod_param_id limit ?,? 
2019-01-26 10:09:39.513 [http-nio-8080-exec-7] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==> Parameters: 0(Integer), 5(Integer)
2019-01-26 10:09:39.515 [http-nio-8080-exec-7] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - <==      Total: 0
2019-01-26 10:09:39.516 [http-nio-8080-exec-7] DEBUG com.yun.stock.controller.ProductStockController - 转到物品库存页面
2019-01-26 10:10:03.010 [http-nio-8080-exec-5] DEBUG com.yun.stock.controller.ProductStockController - 跳转到物品库存查询控制器
2019-01-26 10:10:03.017 [http-nio-8080-exec-5] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==>  Preparing: select count(*) from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 
2019-01-26 10:10:03.018 [http-nio-8080-exec-5] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==> Parameters: 
2019-01-26 10:10:03.021 [http-nio-8080-exec-5] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - <==      Total: 1
2019-01-26 10:10:03.022 [http-nio-8080-exec-5] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==>  Preparing: select ps.prod_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 order by p.prod_id,pp.prod_param_id limit ?,? 
2019-01-26 10:10:03.023 [http-nio-8080-exec-5] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==> Parameters: 0(Integer), 5(Integer)
2019-01-26 10:10:03.026 [http-nio-8080-exec-5] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - <==      Total: 0
2019-01-26 10:10:03.026 [http-nio-8080-exec-5] DEBUG com.yun.stock.controller.ProductStockController - 转到物品库存页面
2019-01-26 10:11:50.821 [http-nio-8080-exec-5] DEBUG com.yun.stock.controller.ProductStockController - 跳转到物品库存查询控制器
2019-01-26 10:11:50.823 [http-nio-8080-exec-5] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==>  Preparing: select count(*) from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 
2019-01-26 10:11:50.823 [http-nio-8080-exec-5] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==> Parameters: 
2019-01-26 10:11:50.825 [http-nio-8080-exec-5] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - <==      Total: 1
2019-01-26 10:11:50.826 [http-nio-8080-exec-5] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==>  Preparing: select ps.prod_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 order by p.prod_id,pp.prod_param_id limit ?,? 
2019-01-26 10:11:50.826 [http-nio-8080-exec-5] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==> Parameters: 0(Integer), 5(Integer)
2019-01-26 10:11:50.828 [http-nio-8080-exec-5] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - <==      Total: 0
2019-01-26 10:11:50.828 [http-nio-8080-exec-5] DEBUG com.yun.stock.controller.ProductStockController - 转到物品库存页面
2019-01-26 10:12:14.524 [http-nio-8080-exec-1] DEBUG c.y.user.dao.UserInfoDao.findUserInfoByNameAndPass - ==>  Preparing: select * from user_info where login_name=? and login_pass=? 
2019-01-26 10:12:14.525 [http-nio-8080-exec-1] DEBUG c.y.user.dao.UserInfoDao.findUserInfoByNameAndPass - ==> Parameters: admin(String), 123(String)
2019-01-26 10:12:14.529 [http-nio-8080-exec-1] DEBUG c.y.user.dao.UserInfoDao.findUserInfoByNameAndPass - <==      Total: 1
2019-01-26 10:12:17.050 [http-nio-8080-exec-3] DEBUG com.yun.stock.controller.ProductStockController - 跳转到物品库存查询控制器
2019-01-26 10:12:17.051 [http-nio-8080-exec-3] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==>  Preparing: select count(*) from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 
2019-01-26 10:12:17.051 [http-nio-8080-exec-3] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==> Parameters: 
2019-01-26 10:12:17.058 [http-nio-8080-exec-3] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - <==      Total: 1
2019-01-26 10:12:17.059 [http-nio-8080-exec-3] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==>  Preparing: select ps.prod_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 order by p.prod_id,pp.prod_param_id limit ?,? 
2019-01-26 10:12:17.060 [http-nio-8080-exec-3] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==> Parameters: 0(Integer), 5(Integer)
2019-01-26 10:12:17.065 [http-nio-8080-exec-3] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - <==      Total: 0
2019-01-26 10:12:17.066 [http-nio-8080-exec-3] DEBUG com.yun.stock.controller.ProductStockController - 转到物品库存页面
2019-01-26 10:14:15.239 [http-nio-8080-exec-5] DEBUG com.yun.stock.controller.ProductStockController - 跳转到物品库存查询控制器
2019-01-26 10:14:15.242 [http-nio-8080-exec-5] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==>  Preparing: select count(*) from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 
2019-01-26 10:14:15.242 [http-nio-8080-exec-5] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==> Parameters: 
2019-01-26 10:14:15.244 [http-nio-8080-exec-5] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - <==      Total: 1
2019-01-26 10:14:15.246 [http-nio-8080-exec-5] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==>  Preparing: select ps.prod_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 order by p.prod_id,pp.prod_param_id limit ?,? 
2019-01-26 10:14:15.274 [http-nio-8080-exec-5] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==> Parameters: 0(Integer), 5(Integer)
2019-01-26 10:14:15.275 [http-nio-8080-exec-5] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - <==      Total: 0
2019-01-26 10:14:15.276 [http-nio-8080-exec-5] DEBUG com.yun.stock.controller.ProductStockController - 转到物品库存页面
2019-01-26 10:16:07.561 [http-nio-8080-exec-1] DEBUG com.yun.stock.controller.ProductStockController - 跳转到物品库存查询控制器
2019-01-26 10:16:07.564 [http-nio-8080-exec-1] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==>  Preparing: select count(*) from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 
2019-01-26 10:16:07.564 [http-nio-8080-exec-1] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==> Parameters: 
2019-01-26 10:16:07.568 [http-nio-8080-exec-1] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - <==      Total: 1
2019-01-26 10:16:07.569 [http-nio-8080-exec-1] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==>  Preparing: select ps.prod_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 order by p.prod_id,pp.prod_param_id limit ?,? 
2019-01-26 10:16:07.570 [http-nio-8080-exec-1] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==> Parameters: 0(Integer), 5(Integer)
2019-01-26 10:16:07.572 [http-nio-8080-exec-1] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - <==      Total: 0
2019-01-26 10:16:07.573 [http-nio-8080-exec-1] DEBUG com.yun.stock.controller.ProductStockController - 转到物品库存页面
2019-01-26 10:21:38.689 [http-nio-8080-exec-10] DEBUG com.yun.stock.controller.ProductStockController - 跳转到物品库存查询控制器
2019-01-26 10:21:38.691 [http-nio-8080-exec-10] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==>  Preparing: select count(*) from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 
2019-01-26 10:21:38.692 [http-nio-8080-exec-10] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==> Parameters: 
2019-01-26 10:21:38.694 [http-nio-8080-exec-10] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - <==      Total: 1
2019-01-26 10:21:38.695 [http-nio-8080-exec-10] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==>  Preparing: select ps.prod_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 order by p.prod_id,pp.prod_param_id limit ?,? 
2019-01-26 10:21:38.696 [http-nio-8080-exec-10] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==> Parameters: 0(Integer), 5(Integer)
2019-01-26 10:21:38.697 [http-nio-8080-exec-10] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - <==      Total: 0
2019-01-26 10:21:38.697 [http-nio-8080-exec-10] DEBUG com.yun.stock.controller.ProductStockController - 转到物品库存页面
2019-01-26 10:23:07.430 [http-nio-8080-exec-6] DEBUG com.yun.stock.controller.ProductStockController - 跳转到物品库存查询控制器
2019-01-26 10:23:07.434 [http-nio-8080-exec-6] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==>  Preparing: select count(*) from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 
2019-01-26 10:23:07.434 [http-nio-8080-exec-6] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==> Parameters: 
2019-01-26 10:23:07.437 [http-nio-8080-exec-6] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - <==      Total: 1
2019-01-26 10:23:07.438 [http-nio-8080-exec-6] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==>  Preparing: select ps.prod_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 order by p.prod_id,pp.prod_param_id limit ?,? 
2019-01-26 10:23:07.438 [http-nio-8080-exec-6] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==> Parameters: 0(Integer), 5(Integer)
2019-01-26 10:23:07.440 [http-nio-8080-exec-6] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - <==      Total: 0
2019-01-26 10:23:07.441 [http-nio-8080-exec-6] DEBUG com.yun.stock.controller.ProductStockController - 转到物品库存页面
2019-01-26 10:23:50.275 [http-nio-8080-exec-4] DEBUG com.yun.stock.controller.ProductStockController - 跳转到物品库存查询控制器
2019-01-26 10:23:50.277 [http-nio-8080-exec-4] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==>  Preparing: select count(*) from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 
2019-01-26 10:23:50.278 [http-nio-8080-exec-4] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==> Parameters: 
2019-01-26 10:23:50.281 [http-nio-8080-exec-4] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - <==      Total: 1
2019-01-26 10:23:50.282 [http-nio-8080-exec-4] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==>  Preparing: select ps.prod_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 order by p.prod_id,pp.prod_param_id limit ?,? 
2019-01-26 10:23:50.283 [http-nio-8080-exec-4] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==> Parameters: 0(Integer), 5(Integer)
2019-01-26 10:23:50.285 [http-nio-8080-exec-4] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - <==      Total: 0
2019-01-26 10:23:50.285 [http-nio-8080-exec-4] DEBUG com.yun.stock.controller.ProductStockController - 转到物品库存页面
2019-01-26 10:25:34.042 [http-nio-8080-exec-10] DEBUG com.yun.stock.controller.ProductStockController - 跳转到物品库存查询控制器
2019-01-26 10:25:34.047 [http-nio-8080-exec-10] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==>  Preparing: select count(*) from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 
2019-01-26 10:25:34.047 [http-nio-8080-exec-10] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==> Parameters: 
2019-01-26 10:25:34.048 [http-nio-8080-exec-10] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - <==      Total: 1
2019-01-26 10:25:34.049 [http-nio-8080-exec-10] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==>  Preparing: select ps.prod_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 order by p.prod_id,pp.prod_param_id limit ?,? 
2019-01-26 10:25:34.049 [http-nio-8080-exec-10] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==> Parameters: 0(Integer), 5(Integer)
2019-01-26 10:25:34.051 [http-nio-8080-exec-10] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - <==      Total: 0
2019-01-26 10:25:34.051 [http-nio-8080-exec-10] DEBUG com.yun.stock.controller.ProductStockController - 转到物品库存页面
2019-01-26 10:26:04.049 [http-nio-8080-exec-1] DEBUG com.yun.stock.controller.ProductStockController - 跳转到物品库存查询控制器
2019-01-26 10:26:04.053 [http-nio-8080-exec-1] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==>  Preparing: select count(*) from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 
2019-01-26 10:26:04.054 [http-nio-8080-exec-1] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==> Parameters: 
2019-01-26 10:26:04.056 [http-nio-8080-exec-1] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - <==      Total: 1
2019-01-26 10:26:04.058 [http-nio-8080-exec-1] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==>  Preparing: select ps.prod_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 order by p.prod_id,pp.prod_param_id limit ?,? 
2019-01-26 10:26:04.059 [http-nio-8080-exec-1] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==> Parameters: 0(Integer), 5(Integer)
2019-01-26 10:26:04.061 [http-nio-8080-exec-1] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - <==      Total: 0
2019-01-26 10:26:04.062 [http-nio-8080-exec-1] DEBUG com.yun.stock.controller.ProductStockController - 转到物品库存页面
2019-01-26 10:40:52.476 [http-nio-8080-exec-7] DEBUG com.yun.stock.controller.ProductStockController - 跳转到物品库存查询控制器
2019-01-26 10:40:52.481 [http-nio-8080-exec-7] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==>  Preparing: select count(*) from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 
2019-01-26 10:40:52.482 [http-nio-8080-exec-7] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==> Parameters: 
2019-01-26 10:40:52.486 [http-nio-8080-exec-7] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - <==      Total: 1
2019-01-26 10:40:52.491 [http-nio-8080-exec-7] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==>  Preparing: select ps.prod_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 order by p.prod_id,pp.prod_param_id limit ?,? 
2019-01-26 10:40:52.491 [http-nio-8080-exec-7] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==> Parameters: 0(Integer), 5(Integer)
2019-01-26 10:40:52.493 [http-nio-8080-exec-7] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - <==      Total: 0
2019-01-26 10:40:52.494 [http-nio-8080-exec-7] DEBUG com.yun.stock.controller.ProductStockController - 转到物品库存页面
2019-01-26 10:40:54.108 [http-nio-8080-exec-6] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 order by prod_id 
2019-01-26 10:40:54.109 [http-nio-8080-exec-6] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==> Parameters: 
2019-01-26 10:40:54.113 [http-nio-8080-exec-6] DEBUG com.yun.product.dao.ProductDao.findProductByParam - <==      Total: 4
2019-01-26 10:40:54.114 [http-nio-8080-exec-6] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 10:40:54.114 [http-nio-8080-exec-6] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 2(Integer)
2019-01-26 10:40:54.115 [http-nio-8080-exec-6] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 0
2019-01-26 10:40:54.115 [http-nio-8080-exec-6] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 10:40:54.115 [http-nio-8080-exec-6] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 3(Integer)
2019-01-26 10:40:54.116 [http-nio-8080-exec-6] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 0
2019-01-26 10:40:54.117 [http-nio-8080-exec-6] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 10:40:54.117 [http-nio-8080-exec-6] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 4(Integer)
2019-01-26 10:40:54.118 [http-nio-8080-exec-6] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 2
2019-01-26 10:40:54.119 [http-nio-8080-exec-6] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 10:40:54.119 [http-nio-8080-exec-6] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 5(Integer)
2019-01-26 10:40:54.120 [http-nio-8080-exec-6] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-01-26 10:41:46.216 [http-nio-8080-exec-4] DEBUG com.yun.stock.controller.ProductStockController - 跳转到物品库存查询控制器
2019-01-26 10:41:46.219 [http-nio-8080-exec-4] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==>  Preparing: select count(*) from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 
2019-01-26 10:41:46.219 [http-nio-8080-exec-4] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==> Parameters: 
2019-01-26 10:41:46.221 [http-nio-8080-exec-4] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - <==      Total: 1
2019-01-26 10:41:46.223 [http-nio-8080-exec-4] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==>  Preparing: select ps.prod_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 order by p.prod_id,pp.prod_param_id limit ?,? 
2019-01-26 10:41:46.224 [http-nio-8080-exec-4] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==> Parameters: 0(Integer), 5(Integer)
2019-01-26 10:41:46.227 [http-nio-8080-exec-4] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - <==      Total: 0
2019-01-26 10:41:46.227 [http-nio-8080-exec-4] DEBUG com.yun.stock.controller.ProductStockController - 转到物品库存页面
2019-01-26 10:41:47.621 [http-nio-8080-exec-6] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 order by prod_id 
2019-01-26 10:41:47.621 [http-nio-8080-exec-6] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==> Parameters: 
2019-01-26 10:41:47.623 [http-nio-8080-exec-6] DEBUG com.yun.product.dao.ProductDao.findProductByParam - <==      Total: 4
2019-01-26 10:41:47.623 [http-nio-8080-exec-6] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 10:41:47.623 [http-nio-8080-exec-6] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 2(Integer)
2019-01-26 10:41:47.624 [http-nio-8080-exec-6] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 0
2019-01-26 10:41:47.624 [http-nio-8080-exec-6] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 10:41:47.624 [http-nio-8080-exec-6] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 3(Integer)
2019-01-26 10:41:47.625 [http-nio-8080-exec-6] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 0
2019-01-26 10:41:47.625 [http-nio-8080-exec-6] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 10:41:47.625 [http-nio-8080-exec-6] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 4(Integer)
2019-01-26 10:41:47.626 [http-nio-8080-exec-6] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 2
2019-01-26 10:41:47.626 [http-nio-8080-exec-6] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 10:41:47.626 [http-nio-8080-exec-6] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 5(Integer)
2019-01-26 10:41:47.627 [http-nio-8080-exec-6] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-01-26 10:42:27.791 [http-nio-8080-exec-2] DEBUG com.yun.stock.controller.ProductStockController - 跳转到物品库存查询控制器
2019-01-26 10:42:27.794 [http-nio-8080-exec-2] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==>  Preparing: select count(*) from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 
2019-01-26 10:42:27.795 [http-nio-8080-exec-2] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==> Parameters: 
2019-01-26 10:42:27.797 [http-nio-8080-exec-2] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - <==      Total: 1
2019-01-26 10:42:27.799 [http-nio-8080-exec-2] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==>  Preparing: select ps.prod_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 order by p.prod_id,pp.prod_param_id limit ?,? 
2019-01-26 10:42:27.800 [http-nio-8080-exec-2] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==> Parameters: 0(Integer), 5(Integer)
2019-01-26 10:42:27.802 [http-nio-8080-exec-2] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - <==      Total: 0
2019-01-26 10:42:27.803 [http-nio-8080-exec-2] DEBUG com.yun.stock.controller.ProductStockController - 转到物品库存页面
2019-01-26 10:42:31.209 [http-nio-8080-exec-7] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 order by prod_id 
2019-01-26 10:42:31.210 [http-nio-8080-exec-7] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==> Parameters: 
2019-01-26 10:42:31.211 [http-nio-8080-exec-7] DEBUG com.yun.product.dao.ProductDao.findProductByParam - <==      Total: 4
2019-01-26 10:42:31.211 [http-nio-8080-exec-7] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 10:42:31.212 [http-nio-8080-exec-7] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 2(Integer)
2019-01-26 10:42:31.212 [http-nio-8080-exec-7] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 0
2019-01-26 10:42:31.213 [http-nio-8080-exec-7] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 10:42:31.213 [http-nio-8080-exec-7] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 3(Integer)
2019-01-26 10:42:31.213 [http-nio-8080-exec-7] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 0
2019-01-26 10:42:31.214 [http-nio-8080-exec-7] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 10:42:31.214 [http-nio-8080-exec-7] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 4(Integer)
2019-01-26 10:42:31.214 [http-nio-8080-exec-7] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 2
2019-01-26 10:42:31.215 [http-nio-8080-exec-7] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 10:42:31.215 [http-nio-8080-exec-7] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 5(Integer)
2019-01-26 10:42:31.216 [http-nio-8080-exec-7] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-01-26 10:45:02.577 [http-nio-8080-exec-9] DEBUG com.yun.stock.controller.ProductStockController - 跳转到物品库存查询控制器
2019-01-26 10:45:02.580 [http-nio-8080-exec-9] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==>  Preparing: select count(*) from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 
2019-01-26 10:45:02.581 [http-nio-8080-exec-9] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==> Parameters: 
2019-01-26 10:45:02.583 [http-nio-8080-exec-9] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - <==      Total: 1
2019-01-26 10:45:02.584 [http-nio-8080-exec-9] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==>  Preparing: select ps.prod_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 order by p.prod_id,pp.prod_param_id limit ?,? 
2019-01-26 10:45:02.584 [http-nio-8080-exec-9] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==> Parameters: 0(Integer), 5(Integer)
2019-01-26 10:45:02.587 [http-nio-8080-exec-9] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - <==      Total: 0
2019-01-26 10:45:02.587 [http-nio-8080-exec-9] DEBUG com.yun.stock.controller.ProductStockController - 转到物品库存页面
2019-01-26 10:46:42.229 [http-nio-8080-exec-6] DEBUG com.yun.stock.controller.ProductStockController - 跳转到物品库存查询控制器
2019-01-26 10:46:42.232 [http-nio-8080-exec-6] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==>  Preparing: select count(*) from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 
2019-01-26 10:46:42.233 [http-nio-8080-exec-6] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==> Parameters: 
2019-01-26 10:46:42.235 [http-nio-8080-exec-6] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - <==      Total: 1
2019-01-26 10:46:42.236 [http-nio-8080-exec-6] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==>  Preparing: select ps.prod_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 order by p.prod_id,pp.prod_param_id limit ?,? 
2019-01-26 10:46:42.236 [http-nio-8080-exec-6] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==> Parameters: 0(Integer), 5(Integer)
2019-01-26 10:46:42.238 [http-nio-8080-exec-6] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - <==      Total: 0
2019-01-26 10:46:42.238 [http-nio-8080-exec-6] DEBUG com.yun.stock.controller.ProductStockController - 转到物品库存页面
2019-01-26 10:46:43.775 [http-nio-8080-exec-3] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 order by prod_id 
2019-01-26 10:46:43.775 [http-nio-8080-exec-3] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==> Parameters: 
2019-01-26 10:46:43.777 [http-nio-8080-exec-3] DEBUG com.yun.product.dao.ProductDao.findProductByParam - <==      Total: 4
2019-01-26 10:46:43.777 [http-nio-8080-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 10:46:43.777 [http-nio-8080-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 2(Integer)
2019-01-26 10:46:43.778 [http-nio-8080-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 0
2019-01-26 10:46:43.778 [http-nio-8080-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 10:46:43.778 [http-nio-8080-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 3(Integer)
2019-01-26 10:46:43.779 [http-nio-8080-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 0
2019-01-26 10:46:43.781 [http-nio-8080-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 10:46:43.781 [http-nio-8080-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 4(Integer)
2019-01-26 10:46:43.782 [http-nio-8080-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 2
2019-01-26 10:46:43.782 [http-nio-8080-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 10:46:43.782 [http-nio-8080-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 5(Integer)
2019-01-26 10:46:43.783 [http-nio-8080-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-01-26 10:47:07.771 [http-nio-8080-exec-7] DEBUG com.yun.stock.controller.ProductStockController - 跳转到物品库存查询控制器
2019-01-26 10:47:07.773 [http-nio-8080-exec-7] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==>  Preparing: select count(*) from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 
2019-01-26 10:47:07.774 [http-nio-8080-exec-7] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==> Parameters: 
2019-01-26 10:47:07.776 [http-nio-8080-exec-7] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - <==      Total: 1
2019-01-26 10:47:07.777 [http-nio-8080-exec-7] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==>  Preparing: select ps.prod_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 order by p.prod_id,pp.prod_param_id limit ?,? 
2019-01-26 10:47:07.777 [http-nio-8080-exec-7] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==> Parameters: 0(Integer), 5(Integer)
2019-01-26 10:47:07.779 [http-nio-8080-exec-7] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - <==      Total: 0
2019-01-26 10:47:07.780 [http-nio-8080-exec-7] DEBUG com.yun.stock.controller.ProductStockController - 转到物品库存页面
2019-01-26 10:47:08.935 [http-nio-8080-exec-1] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 order by prod_id 
2019-01-26 10:47:08.935 [http-nio-8080-exec-1] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==> Parameters: 
2019-01-26 10:47:08.939 [http-nio-8080-exec-1] DEBUG com.yun.product.dao.ProductDao.findProductByParam - <==      Total: 4
2019-01-26 10:47:08.939 [http-nio-8080-exec-1] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 10:47:08.940 [http-nio-8080-exec-1] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 2(Integer)
2019-01-26 10:47:08.941 [http-nio-8080-exec-1] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 0
2019-01-26 10:47:08.941 [http-nio-8080-exec-1] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 10:47:08.941 [http-nio-8080-exec-1] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 3(Integer)
2019-01-26 10:47:08.942 [http-nio-8080-exec-1] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 0
2019-01-26 10:47:08.943 [http-nio-8080-exec-1] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 10:47:08.943 [http-nio-8080-exec-1] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 4(Integer)
2019-01-26 10:47:08.944 [http-nio-8080-exec-1] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 2
2019-01-26 10:47:08.945 [http-nio-8080-exec-1] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 10:47:08.945 [http-nio-8080-exec-1] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 5(Integer)
2019-01-26 10:47:08.946 [http-nio-8080-exec-1] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-01-26 10:48:07.470 [http-nio-8080-exec-9] DEBUG com.yun.stock.controller.ProductStockController - 跳转到物品库存查询控制器
2019-01-26 10:48:07.474 [http-nio-8080-exec-9] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==>  Preparing: select count(*) from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 
2019-01-26 10:48:07.474 [http-nio-8080-exec-9] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==> Parameters: 
2019-01-26 10:48:07.476 [http-nio-8080-exec-9] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - <==      Total: 1
2019-01-26 10:48:07.478 [http-nio-8080-exec-9] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==>  Preparing: select ps.prod_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 order by p.prod_id,pp.prod_param_id limit ?,? 
2019-01-26 10:48:07.479 [http-nio-8080-exec-9] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==> Parameters: 0(Integer), 5(Integer)
2019-01-26 10:48:07.481 [http-nio-8080-exec-9] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - <==      Total: 0
2019-01-26 10:48:07.481 [http-nio-8080-exec-9] DEBUG com.yun.stock.controller.ProductStockController - 转到物品库存页面
2019-01-26 10:48:08.627 [http-nio-8080-exec-6] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 order by prod_id 
2019-01-26 10:48:08.627 [http-nio-8080-exec-6] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==> Parameters: 
2019-01-26 10:48:08.629 [http-nio-8080-exec-6] DEBUG com.yun.product.dao.ProductDao.findProductByParam - <==      Total: 4
2019-01-26 10:48:08.629 [http-nio-8080-exec-6] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 10:48:08.630 [http-nio-8080-exec-6] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 2(Integer)
2019-01-26 10:48:08.631 [http-nio-8080-exec-6] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 0
2019-01-26 10:48:08.631 [http-nio-8080-exec-6] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 10:48:08.632 [http-nio-8080-exec-6] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 3(Integer)
2019-01-26 10:48:08.633 [http-nio-8080-exec-6] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 0
2019-01-26 10:48:08.633 [http-nio-8080-exec-6] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 10:48:08.633 [http-nio-8080-exec-6] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 4(Integer)
2019-01-26 10:48:08.635 [http-nio-8080-exec-6] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 2
2019-01-26 10:48:08.636 [http-nio-8080-exec-6] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 10:48:08.636 [http-nio-8080-exec-6] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 5(Integer)
2019-01-26 10:48:08.637 [http-nio-8080-exec-6] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-01-26 10:50:03.945 [http-nio-8080-exec-7] DEBUG com.yun.stock.controller.ProductStockController - 跳转到物品库存查询控制器
2019-01-26 10:50:03.950 [http-nio-8080-exec-7] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==>  Preparing: select count(*) from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 
2019-01-26 10:50:03.950 [http-nio-8080-exec-7] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==> Parameters: 
2019-01-26 10:50:03.952 [http-nio-8080-exec-7] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - <==      Total: 1
2019-01-26 10:50:03.954 [http-nio-8080-exec-7] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==>  Preparing: select ps.prod_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 order by p.prod_id,pp.prod_param_id limit ?,? 
2019-01-26 10:50:03.954 [http-nio-8080-exec-7] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==> Parameters: 0(Integer), 5(Integer)
2019-01-26 10:50:03.956 [http-nio-8080-exec-7] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - <==      Total: 0
2019-01-26 10:50:03.956 [http-nio-8080-exec-7] DEBUG com.yun.stock.controller.ProductStockController - 转到物品库存页面
2019-01-26 10:50:05.475 [http-nio-8080-exec-5] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 order by prod_id 
2019-01-26 10:50:05.475 [http-nio-8080-exec-5] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==> Parameters: 
2019-01-26 10:50:05.477 [http-nio-8080-exec-5] DEBUG com.yun.product.dao.ProductDao.findProductByParam - <==      Total: 4
2019-01-26 10:50:05.477 [http-nio-8080-exec-5] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 10:50:05.478 [http-nio-8080-exec-5] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 2(Integer)
2019-01-26 10:50:05.479 [http-nio-8080-exec-5] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 0
2019-01-26 10:50:05.479 [http-nio-8080-exec-5] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 10:50:05.479 [http-nio-8080-exec-5] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 3(Integer)
2019-01-26 10:50:05.480 [http-nio-8080-exec-5] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 0
2019-01-26 10:50:05.482 [http-nio-8080-exec-5] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 10:50:05.482 [http-nio-8080-exec-5] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 4(Integer)
2019-01-26 10:50:05.484 [http-nio-8080-exec-5] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 2
2019-01-26 10:50:05.484 [http-nio-8080-exec-5] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 10:50:05.484 [http-nio-8080-exec-5] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 5(Integer)
2019-01-26 10:50:05.485 [http-nio-8080-exec-5] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-01-26 10:50:49.732 [http-nio-8080-exec-6] DEBUG com.yun.stock.controller.ProductStockController - 跳转到物品库存查询控制器
2019-01-26 10:50:49.735 [http-nio-8080-exec-6] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==>  Preparing: select count(*) from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 
2019-01-26 10:50:49.735 [http-nio-8080-exec-6] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==> Parameters: 
2019-01-26 10:50:49.737 [http-nio-8080-exec-6] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - <==      Total: 1
2019-01-26 10:50:49.738 [http-nio-8080-exec-6] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==>  Preparing: select ps.prod_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 order by p.prod_id,pp.prod_param_id limit ?,? 
2019-01-26 10:50:49.738 [http-nio-8080-exec-6] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==> Parameters: 0(Integer), 5(Integer)
2019-01-26 10:50:49.739 [http-nio-8080-exec-6] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - <==      Total: 0
2019-01-26 10:50:49.739 [http-nio-8080-exec-6] DEBUG com.yun.stock.controller.ProductStockController - 转到物品库存页面
2019-01-26 10:50:50.966 [http-nio-8080-exec-4] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 order by prod_id 
2019-01-26 10:50:50.966 [http-nio-8080-exec-4] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==> Parameters: 
2019-01-26 10:50:50.968 [http-nio-8080-exec-4] DEBUG com.yun.product.dao.ProductDao.findProductByParam - <==      Total: 4
2019-01-26 10:50:50.968 [http-nio-8080-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 10:50:50.968 [http-nio-8080-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 2(Integer)
2019-01-26 10:50:50.969 [http-nio-8080-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 0
2019-01-26 10:50:50.969 [http-nio-8080-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 10:50:50.969 [http-nio-8080-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 3(Integer)
2019-01-26 10:50:50.970 [http-nio-8080-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 0
2019-01-26 10:50:50.970 [http-nio-8080-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 10:50:50.971 [http-nio-8080-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 4(Integer)
2019-01-26 10:50:50.972 [http-nio-8080-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 2
2019-01-26 10:50:50.973 [http-nio-8080-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 10:50:50.973 [http-nio-8080-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 5(Integer)
2019-01-26 10:50:50.974 [http-nio-8080-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-01-26 10:51:22.671 [http-nio-8080-exec-2] DEBUG com.yun.stock.controller.ProductStockController - 跳转到物品库存查询控制器
2019-01-26 10:51:22.673 [http-nio-8080-exec-2] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==>  Preparing: select count(*) from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 
2019-01-26 10:51:22.674 [http-nio-8080-exec-2] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==> Parameters: 
2019-01-26 10:51:22.676 [http-nio-8080-exec-2] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - <==      Total: 1
2019-01-26 10:51:22.677 [http-nio-8080-exec-2] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==>  Preparing: select ps.prod_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 order by p.prod_id,pp.prod_param_id limit ?,? 
2019-01-26 10:51:22.677 [http-nio-8080-exec-2] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==> Parameters: 0(Integer), 5(Integer)
2019-01-26 10:51:22.679 [http-nio-8080-exec-2] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - <==      Total: 0
2019-01-26 10:51:22.679 [http-nio-8080-exec-2] DEBUG com.yun.stock.controller.ProductStockController - 转到物品库存页面
2019-01-26 11:02:29.699 [http-nio-8080-exec-7] INFO  com.yun.product.controller.ProductTypeController - 跳转到stock/productTypeList.html页面
2019-01-26 11:02:29.845 [http-nio-8080-exec-5] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - ==>  Preparing: select p1.prod_type_id,p1.prod_type_name,p1.parent_id,p2.prod_type_id parent_type_id,p2.prod_type_name parent_type_name from product_type p1 LEFT JOIN product_type p2 on p1.parent_id=p2.prod_type_id where p1.parent_id=? 
2019-01-26 11:02:29.846 [http-nio-8080-exec-5] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - ==> Parameters: 0(Integer)
2019-01-26 11:02:29.850 [http-nio-8080-exec-5] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - ====>  Preparing: select p1.prod_type_id,p1.prod_type_name,p1.parent_id,p2.prod_type_id parent_type_id,p2.prod_type_name parent_type_name from product_type p1 LEFT JOIN product_type p2 on p1.parent_id=p2.prod_type_id where p1.parent_id=? 
2019-01-26 11:02:29.851 [http-nio-8080-exec-5] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - ====> Parameters: 29(Integer)
2019-01-26 11:02:29.852 [http-nio-8080-exec-5] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - ======>  Preparing: select p1.prod_type_id,p1.prod_type_name,p1.parent_id,p2.prod_type_id parent_type_id,p2.prod_type_name parent_type_name from product_type p1 LEFT JOIN product_type p2 on p1.parent_id=p2.prod_type_id where p1.parent_id=? 
2019-01-26 11:02:29.853 [http-nio-8080-exec-5] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - ======> Parameters: 30(Integer)
2019-01-26 11:02:29.854 [http-nio-8080-exec-5] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - <======      Total: 0
2019-01-26 11:02:29.854 [http-nio-8080-exec-5] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - <====      Total: 1
2019-01-26 11:02:29.855 [http-nio-8080-exec-5] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - ====>  Preparing: select p1.prod_type_id,p1.prod_type_name,p1.parent_id,p2.prod_type_id parent_type_id,p2.prod_type_name parent_type_name from product_type p1 LEFT JOIN product_type p2 on p1.parent_id=p2.prod_type_id where p1.parent_id=? 
2019-01-26 11:02:29.855 [http-nio-8080-exec-5] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - ====> Parameters: 39(Integer)
2019-01-26 11:02:29.857 [http-nio-8080-exec-5] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - ======>  Preparing: select p1.prod_type_id,p1.prod_type_name,p1.parent_id,p2.prod_type_id parent_type_id,p2.prod_type_name parent_type_name from product_type p1 LEFT JOIN product_type p2 on p1.parent_id=p2.prod_type_id where p1.parent_id=? 
2019-01-26 11:02:29.857 [http-nio-8080-exec-5] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - ======> Parameters: 41(Integer)
2019-01-26 11:02:29.858 [http-nio-8080-exec-5] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - <======      Total: 0
2019-01-26 11:02:29.858 [http-nio-8080-exec-5] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - <====      Total: 1
2019-01-26 11:02:29.858 [http-nio-8080-exec-5] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - <==      Total: 2
2019-01-26 11:02:33.209 [http-nio-8080-exec-8] DEBUG com.yun.stock.controller.ProductStockController - 跳转到物品库存查询控制器
2019-01-26 11:02:33.211 [http-nio-8080-exec-8] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==>  Preparing: select count(*) from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 
2019-01-26 11:02:33.212 [http-nio-8080-exec-8] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==> Parameters: 
2019-01-26 11:02:33.213 [http-nio-8080-exec-8] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - <==      Total: 1
2019-01-26 11:02:33.214 [http-nio-8080-exec-8] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==>  Preparing: select ps.prod_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 order by p.prod_id,pp.prod_param_id limit ?,? 
2019-01-26 11:02:33.215 [http-nio-8080-exec-8] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==> Parameters: 0(Integer), 5(Integer)
2019-01-26 11:02:33.218 [http-nio-8080-exec-8] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - <==      Total: 0
2019-01-26 11:02:33.219 [http-nio-8080-exec-8] DEBUG com.yun.stock.controller.ProductStockController - 转到物品库存页面
2019-01-26 11:02:34.644 [http-nio-8080-exec-3] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 order by prod_id 
2019-01-26 11:02:34.644 [http-nio-8080-exec-3] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==> Parameters: 
2019-01-26 11:02:34.646 [http-nio-8080-exec-3] DEBUG com.yun.product.dao.ProductDao.findProductByParam - <==      Total: 4
2019-01-26 11:02:34.646 [http-nio-8080-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 11:02:34.647 [http-nio-8080-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 2(Integer)
2019-01-26 11:02:34.647 [http-nio-8080-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 0
2019-01-26 11:02:34.647 [http-nio-8080-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 11:02:34.648 [http-nio-8080-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 3(Integer)
2019-01-26 11:02:34.648 [http-nio-8080-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 0
2019-01-26 11:02:34.648 [http-nio-8080-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 11:02:34.649 [http-nio-8080-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 4(Integer)
2019-01-26 11:02:34.650 [http-nio-8080-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 2
2019-01-26 11:02:34.650 [http-nio-8080-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 11:02:34.650 [http-nio-8080-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 5(Integer)
2019-01-26 11:02:34.651 [http-nio-8080-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-01-26 11:04:04.886 [http-nio-8080-exec-8] DEBUG com.yun.stock.controller.ProductStockController - 跳转到物品库存查询控制器
2019-01-26 11:04:04.887 [http-nio-8080-exec-8] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==>  Preparing: select count(*) from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 
2019-01-26 11:04:04.887 [http-nio-8080-exec-8] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==> Parameters: 
2019-01-26 11:04:04.888 [http-nio-8080-exec-8] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - <==      Total: 1
2019-01-26 11:04:04.889 [http-nio-8080-exec-8] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==>  Preparing: select ps.prod_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 order by p.prod_id,pp.prod_param_id limit ?,? 
2019-01-26 11:04:04.890 [http-nio-8080-exec-8] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==> Parameters: 0(Integer), 5(Integer)
2019-01-26 11:04:04.891 [http-nio-8080-exec-8] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - <==      Total: 0
2019-01-26 11:04:04.891 [http-nio-8080-exec-8] DEBUG com.yun.stock.controller.ProductStockController - 转到物品库存页面
2019-01-26 11:04:06.670 [http-nio-8080-exec-4] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 order by prod_id 
2019-01-26 11:04:06.670 [http-nio-8080-exec-4] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==> Parameters: 
2019-01-26 11:04:06.672 [http-nio-8080-exec-4] DEBUG com.yun.product.dao.ProductDao.findProductByParam - <==      Total: 4
2019-01-26 11:04:06.672 [http-nio-8080-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 11:04:06.672 [http-nio-8080-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 2(Integer)
2019-01-26 11:04:06.673 [http-nio-8080-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 0
2019-01-26 11:04:06.673 [http-nio-8080-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 11:04:06.674 [http-nio-8080-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 3(Integer)
2019-01-26 11:04:06.674 [http-nio-8080-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 0
2019-01-26 11:04:06.674 [http-nio-8080-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 11:04:06.674 [http-nio-8080-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 4(Integer)
2019-01-26 11:04:06.675 [http-nio-8080-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 2
2019-01-26 11:04:06.676 [http-nio-8080-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 11:04:06.676 [http-nio-8080-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 5(Integer)
2019-01-26 11:04:06.677 [http-nio-8080-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-01-26 11:05:16.569 [http-nio-8080-exec-10] DEBUG com.yun.stock.controller.ProductStockController - 跳转到物品库存查询控制器
2019-01-26 11:05:16.573 [http-nio-8080-exec-10] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==>  Preparing: select count(*) from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 
2019-01-26 11:05:16.573 [http-nio-8080-exec-10] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==> Parameters: 
2019-01-26 11:05:16.575 [http-nio-8080-exec-10] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - <==      Total: 1
2019-01-26 11:05:16.576 [http-nio-8080-exec-10] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==>  Preparing: select ps.prod_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 order by p.prod_id,pp.prod_param_id limit ?,? 
2019-01-26 11:05:16.577 [http-nio-8080-exec-10] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==> Parameters: 0(Integer), 5(Integer)
2019-01-26 11:05:16.581 [http-nio-8080-exec-10] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - <==      Total: 0
2019-01-26 11:05:16.582 [http-nio-8080-exec-10] DEBUG com.yun.stock.controller.ProductStockController - 转到物品库存页面
2019-01-26 11:05:17.866 [http-nio-8080-exec-5] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 order by prod_id 
2019-01-26 11:05:17.866 [http-nio-8080-exec-5] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==> Parameters: 
2019-01-26 11:05:17.868 [http-nio-8080-exec-5] DEBUG com.yun.product.dao.ProductDao.findProductByParam - <==      Total: 4
2019-01-26 11:05:17.868 [http-nio-8080-exec-5] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 11:05:17.868 [http-nio-8080-exec-5] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 2(Integer)
2019-01-26 11:05:17.869 [http-nio-8080-exec-5] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 0
2019-01-26 11:05:17.870 [http-nio-8080-exec-5] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 11:05:17.870 [http-nio-8080-exec-5] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 3(Integer)
2019-01-26 11:05:17.871 [http-nio-8080-exec-5] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 0
2019-01-26 11:05:17.871 [http-nio-8080-exec-5] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 11:05:17.871 [http-nio-8080-exec-5] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 4(Integer)
2019-01-26 11:05:17.872 [http-nio-8080-exec-5] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 2
2019-01-26 11:05:17.873 [http-nio-8080-exec-5] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 11:05:17.873 [http-nio-8080-exec-5] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 5(Integer)
2019-01-26 11:05:17.875 [http-nio-8080-exec-5] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-01-26 11:06:04.926 [http-nio-8080-exec-8] DEBUG com.yun.stock.controller.ProductStockController - 跳转到物品库存查询控制器
2019-01-26 11:06:04.929 [http-nio-8080-exec-8] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==>  Preparing: select count(*) from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 
2019-01-26 11:06:04.930 [http-nio-8080-exec-8] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==> Parameters: 
2019-01-26 11:06:04.932 [http-nio-8080-exec-8] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - <==      Total: 1
2019-01-26 11:06:04.933 [http-nio-8080-exec-8] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==>  Preparing: select ps.prod_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 order by p.prod_id,pp.prod_param_id limit ?,? 
2019-01-26 11:06:04.934 [http-nio-8080-exec-8] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==> Parameters: 0(Integer), 5(Integer)
2019-01-26 11:06:04.936 [http-nio-8080-exec-8] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - <==      Total: 0
2019-01-26 11:06:04.937 [http-nio-8080-exec-8] DEBUG com.yun.stock.controller.ProductStockController - 转到物品库存页面
2019-01-26 11:06:06.853 [http-nio-8080-exec-4] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 order by prod_id 
2019-01-26 11:06:06.854 [http-nio-8080-exec-4] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==> Parameters: 
2019-01-26 11:06:06.855 [http-nio-8080-exec-4] DEBUG com.yun.product.dao.ProductDao.findProductByParam - <==      Total: 4
2019-01-26 11:06:06.855 [http-nio-8080-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 11:06:06.856 [http-nio-8080-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 2(Integer)
2019-01-26 11:06:06.856 [http-nio-8080-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 0
2019-01-26 11:06:06.857 [http-nio-8080-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 11:06:06.857 [http-nio-8080-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 3(Integer)
2019-01-26 11:06:06.858 [http-nio-8080-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 0
2019-01-26 11:06:06.858 [http-nio-8080-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 11:06:06.859 [http-nio-8080-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 4(Integer)
2019-01-26 11:06:06.860 [http-nio-8080-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 2
2019-01-26 11:06:06.860 [http-nio-8080-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 11:06:06.861 [http-nio-8080-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 5(Integer)
2019-01-26 11:06:06.862 [http-nio-8080-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-01-26 11:07:33.610 [http-nio-8080-exec-7] DEBUG com.yun.stock.controller.ProductStockController - 跳转到物品库存查询控制器
2019-01-26 11:07:33.612 [http-nio-8080-exec-7] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==>  Preparing: select count(*) from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 
2019-01-26 11:07:33.612 [http-nio-8080-exec-7] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==> Parameters: 
2019-01-26 11:07:33.614 [http-nio-8080-exec-7] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - <==      Total: 1
2019-01-26 11:07:33.615 [http-nio-8080-exec-7] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==>  Preparing: select ps.prod_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 order by p.prod_id,pp.prod_param_id limit ?,? 
2019-01-26 11:07:33.616 [http-nio-8080-exec-7] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==> Parameters: 0(Integer), 5(Integer)
2019-01-26 11:07:33.618 [http-nio-8080-exec-7] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - <==      Total: 0
2019-01-26 11:07:33.619 [http-nio-8080-exec-7] DEBUG com.yun.stock.controller.ProductStockController - 转到物品库存页面
2019-01-26 11:07:35.304 [http-nio-8080-exec-9] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 order by prod_id 
2019-01-26 11:07:35.304 [http-nio-8080-exec-9] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==> Parameters: 
2019-01-26 11:07:35.305 [http-nio-8080-exec-9] DEBUG com.yun.product.dao.ProductDao.findProductByParam - <==      Total: 4
2019-01-26 11:07:35.305 [http-nio-8080-exec-9] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 11:07:35.306 [http-nio-8080-exec-9] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 2(Integer)
2019-01-26 11:07:35.306 [http-nio-8080-exec-9] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 0
2019-01-26 11:07:35.307 [http-nio-8080-exec-9] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 11:07:35.307 [http-nio-8080-exec-9] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 3(Integer)
2019-01-26 11:07:35.307 [http-nio-8080-exec-9] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 0
2019-01-26 11:07:35.307 [http-nio-8080-exec-9] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 11:07:35.308 [http-nio-8080-exec-9] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 4(Integer)
2019-01-26 11:07:35.308 [http-nio-8080-exec-9] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 2
2019-01-26 11:07:35.308 [http-nio-8080-exec-9] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 11:07:35.308 [http-nio-8080-exec-9] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 5(Integer)
2019-01-26 11:07:35.309 [http-nio-8080-exec-9] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-01-26 11:08:33.362 [http-nio-8080-exec-2] DEBUG com.yun.stock.controller.ProductStockController - 跳转到物品库存查询控制器
2019-01-26 11:08:33.364 [http-nio-8080-exec-2] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==>  Preparing: select count(*) from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 
2019-01-26 11:08:33.365 [http-nio-8080-exec-2] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==> Parameters: 
2019-01-26 11:08:33.367 [http-nio-8080-exec-2] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - <==      Total: 1
2019-01-26 11:08:33.369 [http-nio-8080-exec-2] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==>  Preparing: select ps.prod_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 order by p.prod_id,pp.prod_param_id limit ?,? 
2019-01-26 11:08:33.369 [http-nio-8080-exec-2] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==> Parameters: 0(Integer), 5(Integer)
2019-01-26 11:08:33.371 [http-nio-8080-exec-2] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - <==      Total: 0
2019-01-26 11:08:33.372 [http-nio-8080-exec-2] DEBUG com.yun.stock.controller.ProductStockController - 转到物品库存页面
2019-01-26 11:08:34.630 [http-nio-8080-exec-3] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 order by prod_id 
2019-01-26 11:08:34.630 [http-nio-8080-exec-3] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==> Parameters: 
2019-01-26 11:08:34.632 [http-nio-8080-exec-3] DEBUG com.yun.product.dao.ProductDao.findProductByParam - <==      Total: 4
2019-01-26 11:08:34.632 [http-nio-8080-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 11:08:34.633 [http-nio-8080-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 2(Integer)
2019-01-26 11:08:34.634 [http-nio-8080-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 0
2019-01-26 11:08:34.634 [http-nio-8080-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 11:08:34.634 [http-nio-8080-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 3(Integer)
2019-01-26 11:08:34.635 [http-nio-8080-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 0
2019-01-26 11:08:34.635 [http-nio-8080-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 11:08:34.636 [http-nio-8080-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 4(Integer)
2019-01-26 11:08:34.636 [http-nio-8080-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 2
2019-01-26 11:08:34.637 [http-nio-8080-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 11:08:34.637 [http-nio-8080-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 5(Integer)
2019-01-26 11:08:34.638 [http-nio-8080-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-01-26 11:10:27.572 [http-nio-8080-exec-4] DEBUG com.yun.stock.controller.ProductStockController - 跳转到物品库存查询控制器
2019-01-26 11:10:27.580 [http-nio-8080-exec-4] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==>  Preparing: select count(*) from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 
2019-01-26 11:10:27.581 [http-nio-8080-exec-4] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==> Parameters: 
2019-01-26 11:10:27.583 [http-nio-8080-exec-4] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - <==      Total: 1
2019-01-26 11:10:27.584 [http-nio-8080-exec-4] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==>  Preparing: select ps.prod_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 order by p.prod_id,pp.prod_param_id limit ?,? 
2019-01-26 11:10:27.585 [http-nio-8080-exec-4] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==> Parameters: 0(Integer), 5(Integer)
2019-01-26 11:10:27.588 [http-nio-8080-exec-4] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - <==      Total: 0
2019-01-26 11:10:27.588 [http-nio-8080-exec-4] DEBUG com.yun.stock.controller.ProductStockController - 转到物品库存页面
2019-01-26 11:11:08.486 [http-nio-8080-exec-6] DEBUG com.yun.stock.controller.ProductStockController - 跳转到物品库存查询控制器
2019-01-26 11:11:08.488 [http-nio-8080-exec-6] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==>  Preparing: select count(*) from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 
2019-01-26 11:11:08.488 [http-nio-8080-exec-6] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==> Parameters: 
2019-01-26 11:11:08.490 [http-nio-8080-exec-6] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - <==      Total: 1
2019-01-26 11:11:08.491 [http-nio-8080-exec-6] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==>  Preparing: select ps.prod_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 order by p.prod_id,pp.prod_param_id limit ?,? 
2019-01-26 11:11:08.491 [http-nio-8080-exec-6] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==> Parameters: 0(Integer), 5(Integer)
2019-01-26 11:11:08.493 [http-nio-8080-exec-6] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - <==      Total: 0
2019-01-26 11:11:08.493 [http-nio-8080-exec-6] DEBUG com.yun.stock.controller.ProductStockController - 转到物品库存页面
2019-01-26 11:11:27.269 [http-nio-8080-exec-5] DEBUG com.yun.stock.controller.ProductStockController - 跳转到物品库存查询控制器
2019-01-26 11:11:27.272 [http-nio-8080-exec-5] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==>  Preparing: select count(*) from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 
2019-01-26 11:11:27.273 [http-nio-8080-exec-5] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==> Parameters: 
2019-01-26 11:11:27.276 [http-nio-8080-exec-5] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - <==      Total: 1
2019-01-26 11:11:27.277 [http-nio-8080-exec-5] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==>  Preparing: select ps.prod_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 order by p.prod_id,pp.prod_param_id limit ?,? 
2019-01-26 11:11:27.278 [http-nio-8080-exec-5] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==> Parameters: 0(Integer), 5(Integer)
2019-01-26 11:11:27.283 [http-nio-8080-exec-5] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - <==      Total: 0
2019-01-26 11:11:27.283 [http-nio-8080-exec-5] DEBUG com.yun.stock.controller.ProductStockController - 转到物品库存页面
2019-01-26 11:12:20.459 [http-nio-8080-exec-2] INFO  com.yun.product.controller.ProductTypeController - 跳转到stock/productTypeList.html页面
2019-01-26 11:12:20.550 [http-nio-8080-exec-1] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - ==>  Preparing: select p1.prod_type_id,p1.prod_type_name,p1.parent_id,p2.prod_type_id parent_type_id,p2.prod_type_name parent_type_name from product_type p1 LEFT JOIN product_type p2 on p1.parent_id=p2.prod_type_id where p1.parent_id=? 
2019-01-26 11:12:20.550 [http-nio-8080-exec-1] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - ==> Parameters: 0(Integer)
2019-01-26 11:12:20.551 [http-nio-8080-exec-1] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - ====>  Preparing: select p1.prod_type_id,p1.prod_type_name,p1.parent_id,p2.prod_type_id parent_type_id,p2.prod_type_name parent_type_name from product_type p1 LEFT JOIN product_type p2 on p1.parent_id=p2.prod_type_id where p1.parent_id=? 
2019-01-26 11:12:20.551 [http-nio-8080-exec-1] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - ====> Parameters: 29(Integer)
2019-01-26 11:12:20.552 [http-nio-8080-exec-1] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - ======>  Preparing: select p1.prod_type_id,p1.prod_type_name,p1.parent_id,p2.prod_type_id parent_type_id,p2.prod_type_name parent_type_name from product_type p1 LEFT JOIN product_type p2 on p1.parent_id=p2.prod_type_id where p1.parent_id=? 
2019-01-26 11:12:20.552 [http-nio-8080-exec-1] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - ======> Parameters: 30(Integer)
2019-01-26 11:12:20.553 [http-nio-8080-exec-1] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - <======      Total: 0
2019-01-26 11:12:20.553 [http-nio-8080-exec-1] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - <====      Total: 1
2019-01-26 11:12:20.554 [http-nio-8080-exec-1] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - ====>  Preparing: select p1.prod_type_id,p1.prod_type_name,p1.parent_id,p2.prod_type_id parent_type_id,p2.prod_type_name parent_type_name from product_type p1 LEFT JOIN product_type p2 on p1.parent_id=p2.prod_type_id where p1.parent_id=? 
2019-01-26 11:12:20.554 [http-nio-8080-exec-1] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - ====> Parameters: 39(Integer)
2019-01-26 11:12:20.556 [http-nio-8080-exec-1] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - ======>  Preparing: select p1.prod_type_id,p1.prod_type_name,p1.parent_id,p2.prod_type_id parent_type_id,p2.prod_type_name parent_type_name from product_type p1 LEFT JOIN product_type p2 on p1.parent_id=p2.prod_type_id where p1.parent_id=? 
2019-01-26 11:12:20.557 [http-nio-8080-exec-1] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - ======> Parameters: 41(Integer)
2019-01-26 11:12:20.558 [http-nio-8080-exec-1] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - <======      Total: 0
2019-01-26 11:12:20.558 [http-nio-8080-exec-1] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - <====      Total: 1
2019-01-26 11:12:20.558 [http-nio-8080-exec-1] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - <==      Total: 2
2019-01-26 11:12:21.543 [http-nio-8080-exec-8] DEBUG c.yun.product.dao.ProductDao.findProductRowByParam - ==>  Preparing: select count(*) from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 
2019-01-26 11:12:21.543 [http-nio-8080-exec-8] DEBUG c.yun.product.dao.ProductDao.findProductRowByParam - ==> Parameters: 
2019-01-26 11:12:21.544 [http-nio-8080-exec-8] DEBUG c.yun.product.dao.ProductDao.findProductRowByParam - <==      Total: 1
2019-01-26 11:12:21.552 [http-nio-8080-exec-8] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 order by prod_id limit ?,? 
2019-01-26 11:12:21.554 [http-nio-8080-exec-8] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==> Parameters: 0(Integer), 5(Integer)
2019-01-26 11:12:21.557 [http-nio-8080-exec-8] DEBUG com.yun.product.dao.ProductDao.findProductByParam - <==      Total: 4
2019-01-26 11:12:21.558 [http-nio-8080-exec-8] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 11:12:21.558 [http-nio-8080-exec-8] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 2(Integer)
2019-01-26 11:12:21.559 [http-nio-8080-exec-8] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 0
2019-01-26 11:12:21.560 [http-nio-8080-exec-8] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 11:12:21.560 [http-nio-8080-exec-8] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 3(Integer)
2019-01-26 11:12:21.561 [http-nio-8080-exec-8] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 0
2019-01-26 11:12:21.562 [http-nio-8080-exec-8] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 11:12:21.562 [http-nio-8080-exec-8] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 4(Integer)
2019-01-26 11:12:21.564 [http-nio-8080-exec-8] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 2
2019-01-26 11:12:21.564 [http-nio-8080-exec-8] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 11:12:21.567 [http-nio-8080-exec-8] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 5(Integer)
2019-01-26 11:12:21.568 [http-nio-8080-exec-8] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-01-26 11:12:23.779 [http-nio-8080-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 11:12:23.780 [http-nio-8080-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 3(Integer)
2019-01-26 11:12:23.782 [http-nio-8080-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 0
2019-01-26 11:12:26.673 [http-nio-8080-exec-9] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 11:12:26.674 [http-nio-8080-exec-9] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 5(Integer)
2019-01-26 11:12:26.675 [http-nio-8080-exec-9] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-01-26 11:12:31.127 [http-nio-8080-exec-4] DEBUG com.yun.stock.controller.ProductStockController - 跳转到物品库存查询控制器
2019-01-26 11:12:31.130 [http-nio-8080-exec-4] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==>  Preparing: select count(*) from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 
2019-01-26 11:12:31.130 [http-nio-8080-exec-4] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==> Parameters: 
2019-01-26 11:12:31.133 [http-nio-8080-exec-4] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - <==      Total: 1
2019-01-26 11:12:31.134 [http-nio-8080-exec-4] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==>  Preparing: select ps.prod_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 order by p.prod_id,pp.prod_param_id limit ?,? 
2019-01-26 11:12:31.135 [http-nio-8080-exec-4] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==> Parameters: 0(Integer), 5(Integer)
2019-01-26 11:12:31.137 [http-nio-8080-exec-4] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - <==      Total: 0
2019-01-26 11:12:31.137 [http-nio-8080-exec-4] DEBUG com.yun.stock.controller.ProductStockController - 转到物品库存页面
2019-01-26 11:12:45.251 [http-nio-8080-exec-6] DEBUG com.yun.stock.controller.ProductStockController - 跳转到物品库存查询控制器
2019-01-26 11:12:45.252 [http-nio-8080-exec-6] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==>  Preparing: select count(*) from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 
2019-01-26 11:12:45.252 [http-nio-8080-exec-6] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==> Parameters: 
2019-01-26 11:12:45.253 [http-nio-8080-exec-6] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - <==      Total: 1
2019-01-26 11:12:45.253 [http-nio-8080-exec-6] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==>  Preparing: select ps.prod_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 order by p.prod_id,pp.prod_param_id limit ?,? 
2019-01-26 11:12:45.253 [http-nio-8080-exec-6] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==> Parameters: 0(Integer), 5(Integer)
2019-01-26 11:12:45.254 [http-nio-8080-exec-6] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - <==      Total: 0
2019-01-26 11:12:45.254 [http-nio-8080-exec-6] DEBUG com.yun.stock.controller.ProductStockController - 转到物品库存页面
2019-01-26 11:14:23.259 [main] INFO  com.yun.YunEbStockApplication - Starting YunEbStockApplication on USER-20181202BJ with PID 5748 (E:\workspace\yun-eb-stock\target\classes started by Administrator in E:\workspace\yun-eb-stock)
2019-01-26 11:14:23.264 [main] DEBUG com.yun.YunEbStockApplication - Running with Spring Boot v1.5.9.RELEASE, Spring v4.3.13.RELEASE
2019-01-26 11:14:23.264 [main] INFO  com.yun.YunEbStockApplication - No active profile set, falling back to default profiles: default
2019-01-26 11:14:23.545 [background-preinit] INFO  org.hibernate.validator.internal.util.Version - HV000001: Hibernate Validator 5.3.6.Final
2019-01-26 11:14:23.702 [main] INFO  o.s.b.c.e.AnnotationConfigEmbeddedWebApplicationContext - Refreshing org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@6a28ffa4: startup date [Sat Jan 26 11:14:23 CST 2019]; root of context hierarchy
2019-01-26 11:14:25.473 [main] INFO  o.s.b.c.e.tomcat.TomcatEmbeddedServletContainer - Tomcat initialized with port(s): 8080 (http)
2019-01-26 11:14:25.483 [main] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2019-01-26 11:14:25.483 [main] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet Engine: Apache Tomcat/8.5.23
2019-01-26 11:14:25.590 [localhost-startStop-1] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2019-01-26 11:14:25.590 [localhost-startStop-1] INFO  org.springframework.web.context.ContextLoader - Root WebApplicationContext: initialization completed in 1888 ms
2019-01-26 11:14:25.728 [localhost-startStop-1] INFO  o.s.boot.web.servlet.ServletRegistrationBean - Mapping servlet: 'dispatcherServlet' to [/]
2019-01-26 11:14:25.733 [localhost-startStop-1] INFO  o.s.boot.web.servlet.FilterRegistrationBean - Mapping filter: 'characterEncodingFilter' to: [/*]
2019-01-26 11:14:25.734 [localhost-startStop-1] INFO  o.s.boot.web.servlet.FilterRegistrationBean - Mapping filter: 'hiddenHttpMethodFilter' to: [/*]
2019-01-26 11:14:25.734 [localhost-startStop-1] INFO  o.s.boot.web.servlet.FilterRegistrationBean - Mapping filter: 'httpPutFormContentFilter' to: [/*]
2019-01-26 11:14:25.734 [localhost-startStop-1] INFO  o.s.boot.web.servlet.FilterRegistrationBean - Mapping filter: 'requestContextFilter' to: [/*]
2019-01-26 11:14:26.489 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerAdapter - Looking for @ControllerAdvice: org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@6a28ffa4: startup date [Sat Jan 26 11:14:23 CST 2019]; root of context hierarchy
2019-01-26 11:14:26.546 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productListForAutoComplete]}" onto public java.util.List<com.yun.product.model.Product> com.yun.product.controller.ProductController.productListForAutoComplete(java.lang.String)
2019-01-26 11:14:26.547 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productSave]}" onto public java.lang.String com.yun.product.controller.ProductController.productSave(com.yun.product.model.Product)
2019-01-26 11:14:26.547 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productPreAdd]}" onto public java.lang.String com.yun.product.controller.ProductController.productPreAdd()
2019-01-26 11:14:26.547 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productList]}" onto public java.lang.String com.yun.product.controller.ProductController.productList(org.springframework.ui.Model,java.lang.String,java.lang.String,java.lang.String,java.lang.String)
2019-01-26 11:14:26.547 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productDelete]}" onto public java.lang.String com.yun.product.controller.ProductController.productDelete(int)
2019-01-26 11:14:26.548 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productPreUpdate]}" onto public java.lang.String com.yun.product.controller.ProductController.productPreUpdate(int,org.springframework.ui.Model)
2019-01-26 11:14:26.548 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productUpdate]}" onto public java.lang.String com.yun.product.controller.ProductController.productUpdate(com.yun.product.model.Product)
2019-01-26 11:14:26.549 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/prodParamPreAdd]}" onto public java.lang.String com.yun.product.controller.ProductParamController.prodParamPreAdd(int,org.springframework.ui.Model)
2019-01-26 11:14:26.549 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/prodParamList]}" onto public java.lang.String com.yun.product.controller.ProductParamController.prodParamList(int)
2019-01-26 11:14:26.550 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/prodParamDelete]}" onto public java.lang.String com.yun.product.controller.ProductParamController.prodParamDelete(int)
2019-01-26 11:14:26.550 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/prodParamSave]}" onto public java.lang.String com.yun.product.controller.ProductParamController.prodParamSave(com.yun.product.model.ProductParameter)
2019-01-26 11:14:26.552 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeUpdate]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeUpdate(java.lang.Integer,org.springframework.ui.Model)
2019-01-26 11:14:26.553 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeUpdateSave]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeUpdateSave(com.yun.product.model.ProductType)
2019-01-26 11:14:26.553 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeDelete]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeDelete(java.lang.Integer,javax.servlet.http.HttpServletResponse) throws java.io.IOException
2019-01-26 11:14:26.553 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeList]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeList(org.springframework.ui.Model)
2019-01-26 11:14:26.553 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeTree]}" onto public java.util.List<com.yun.product.model.ProductType> com.yun.product.controller.ProductTypeController.productTypeTree()
2019-01-26 11:14:26.554 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeEdit]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeEdit()
2019-01-26 11:14:26.554 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeSave]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeSave(com.yun.product.model.ProductType)
2019-01-26 11:14:26.555 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockPreAdd]}" onto public java.lang.String com.yun.stock.controller.ProductStockController.productStockPreAdd()
2019-01-26 11:14:26.555 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockSave]}" onto public java.lang.String com.yun.stock.controller.ProductStockController.productStockSave(com.yun.stock.model.ProductStock)
2019-01-26 11:14:26.555 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockList]}" onto public java.lang.String com.yun.stock.controller.ProductStockController.productStocklist(java.lang.String,java.lang.String,org.springframework.ui.Model)
2019-01-26 11:14:26.555 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/main]}" onto public java.lang.String com.yun.user.controller.MainController.main()
2019-01-26 11:14:26.556 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/userList]}" onto public java.lang.String com.yun.user.controller.UserController.userList(org.springframework.ui.Model)
2019-01-26 11:14:26.556 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/login]}" onto public java.lang.String com.yun.user.controller.UserController.login(java.lang.String,java.lang.String,javax.servlet.http.HttpSession)
2019-01-26 11:14:26.556 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/userEdit]}" onto public java.lang.String com.yun.user.controller.UserController.userEdit()
2019-01-26 11:14:26.557 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/userSave]}" onto public java.lang.String com.yun.user.controller.UserController.userSave(com.yun.user.model.UserInfo)
2019-01-26 11:14:26.557 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/deleteUserInfo]}" onto public java.lang.String com.yun.user.controller.UserController.userDelete(int)
2019-01-26 11:14:26.560 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/error]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> org.springframework.boot.autoconfigure.web.BasicErrorController.error(javax.servlet.http.HttpServletRequest)
2019-01-26 11:14:26.560 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/error],produces=[text/html]}" onto public org.springframework.web.servlet.ModelAndView org.springframework.boot.autoconfigure.web.BasicErrorController.errorHtml(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
2019-01-26 11:14:26.594 [main] INFO  o.s.web.servlet.handler.SimpleUrlHandlerMapping - Mapped URL path [/webjars/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-01-26 11:14:26.594 [main] INFO  o.s.web.servlet.handler.SimpleUrlHandlerMapping - Mapped URL path [/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-01-26 11:14:26.631 [main] INFO  o.s.web.servlet.handler.SimpleUrlHandlerMapping - Mapped URL path [/**/favicon.ico] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-01-26 11:14:26.950 [main] INFO  o.s.b.a.w.WebMvcAutoConfiguration$WelcomePageHandlerMapping - Adding welcome page: class path resource [static/index.html]
2019-01-26 11:14:27.206 [main] INFO  o.s.jmx.export.annotation.AnnotationMBeanExporter - Registering beans for JMX exposure on startup
2019-01-26 11:14:27.225 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2019-01-26 11:14:27.236 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2019-01-26 11:14:27.250 [main] INFO  org.apache.tomcat.util.net.NioSelectorPool - Using a shared selector for servlet write/read
2019-01-26 11:14:27.268 [main] INFO  o.s.b.c.e.tomcat.TomcatEmbeddedServletContainer - Tomcat started on port(s): 8080 (http)
2019-01-26 11:14:27.273 [main] INFO  com.yun.YunEbStockApplication - Started YunEbStockApplication in 4.413 seconds (JVM running for 5.615)
2019-01-26 11:14:33.510 [http-nio-8080-exec-1] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring FrameworkServlet 'dispatcherServlet'
2019-01-26 11:14:33.510 [http-nio-8080-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - FrameworkServlet 'dispatcherServlet': initialization started
2019-01-26 11:14:33.530 [http-nio-8080-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - FrameworkServlet 'dispatcherServlet': initialization completed in 20 ms
2019-01-26 11:14:36.508 [http-nio-8080-exec-8] DEBUG com.yun.stock.controller.ProductStockController - 跳转到物品库存查询控制器
2019-01-26 11:14:36.824 [http-nio-8080-exec-8] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==>  Preparing: select count(*) from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 
2019-01-26 11:14:36.847 [http-nio-8080-exec-8] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==> Parameters: 
2019-01-26 11:14:36.860 [http-nio-8080-exec-8] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - <==      Total: 1
2019-01-26 11:14:36.867 [http-nio-8080-exec-8] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==>  Preparing: select ps.prod_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 order by p.prod_id,pp.prod_param_id limit ?,? 
2019-01-26 11:14:36.867 [http-nio-8080-exec-8] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==> Parameters: 0(Integer), 5(Integer)
2019-01-26 11:14:36.869 [http-nio-8080-exec-8] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - <==      Total: 0
2019-01-26 11:14:36.869 [http-nio-8080-exec-8] DEBUG com.yun.stock.controller.ProductStockController - 转到物品库存页面
2019-01-26 11:14:39.671 [http-nio-8080-exec-9] DEBUG com.yun.stock.controller.ProductStockController - 跳转到物品库存查询控制器
2019-01-26 11:14:39.676 [http-nio-8080-exec-9] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==>  Preparing: select count(*) from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 
2019-01-26 11:14:39.679 [http-nio-8080-exec-9] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==> Parameters: 
2019-01-26 11:14:39.684 [http-nio-8080-exec-9] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - <==      Total: 1
2019-01-26 11:14:39.687 [http-nio-8080-exec-9] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==>  Preparing: select ps.prod_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 order by p.prod_id,pp.prod_param_id limit ?,? 
2019-01-26 11:14:39.688 [http-nio-8080-exec-9] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==> Parameters: 0(Integer), 5(Integer)
2019-01-26 11:14:39.690 [http-nio-8080-exec-9] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - <==      Total: 0
2019-01-26 11:14:39.690 [http-nio-8080-exec-9] DEBUG com.yun.stock.controller.ProductStockController - 转到物品库存页面
2019-01-26 11:14:41.231 [http-nio-8080-exec-10] DEBUG com.yun.stock.controller.ProductStockController - 跳转到物品库存查询控制器
2019-01-26 11:14:41.238 [http-nio-8080-exec-10] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==>  Preparing: select count(*) from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 
2019-01-26 11:14:41.239 [http-nio-8080-exec-10] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==> Parameters: 
2019-01-26 11:14:41.243 [http-nio-8080-exec-10] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - <==      Total: 1
2019-01-26 11:14:41.244 [http-nio-8080-exec-10] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==>  Preparing: select ps.prod_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 order by p.prod_id,pp.prod_param_id limit ?,? 
2019-01-26 11:14:41.245 [http-nio-8080-exec-10] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==> Parameters: 0(Integer), 5(Integer)
2019-01-26 11:14:41.248 [http-nio-8080-exec-10] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - <==      Total: 0
2019-01-26 11:14:41.248 [http-nio-8080-exec-10] DEBUG com.yun.stock.controller.ProductStockController - 转到物品库存页面
2019-01-26 11:14:41.852 [http-nio-8080-exec-1] DEBUG com.yun.stock.controller.ProductStockController - 跳转到物品库存查询控制器
2019-01-26 11:14:41.853 [http-nio-8080-exec-1] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==>  Preparing: select count(*) from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 
2019-01-26 11:14:41.853 [http-nio-8080-exec-1] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==> Parameters: 
2019-01-26 11:14:41.855 [http-nio-8080-exec-1] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - <==      Total: 1
2019-01-26 11:14:41.856 [http-nio-8080-exec-1] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==>  Preparing: select ps.prod_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 order by p.prod_id,pp.prod_param_id limit ?,? 
2019-01-26 11:14:41.857 [http-nio-8080-exec-1] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==> Parameters: 0(Integer), 5(Integer)
2019-01-26 11:14:41.858 [http-nio-8080-exec-1] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - <==      Total: 0
2019-01-26 11:14:41.859 [http-nio-8080-exec-1] DEBUG com.yun.stock.controller.ProductStockController - 转到物品库存页面
2019-01-26 11:14:42.327 [http-nio-8080-exec-2] DEBUG com.yun.stock.controller.ProductStockController - 跳转到物品库存查询控制器
2019-01-26 11:14:42.328 [http-nio-8080-exec-2] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==>  Preparing: select count(*) from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 
2019-01-26 11:14:42.329 [http-nio-8080-exec-2] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==> Parameters: 
2019-01-26 11:14:42.330 [http-nio-8080-exec-2] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - <==      Total: 1
2019-01-26 11:14:42.334 [http-nio-8080-exec-2] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==>  Preparing: select ps.prod_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 order by p.prod_id,pp.prod_param_id limit ?,? 
2019-01-26 11:14:42.334 [http-nio-8080-exec-2] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==> Parameters: 0(Integer), 5(Integer)
2019-01-26 11:14:42.337 [http-nio-8080-exec-2] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - <==      Total: 0
2019-01-26 11:14:42.337 [http-nio-8080-exec-2] DEBUG com.yun.stock.controller.ProductStockController - 转到物品库存页面
2019-01-26 11:21:51.029 [http-nio-8080-exec-10] INFO  com.yun.product.controller.ProductTypeController - 跳转到stock/productTypeList.html页面
2019-01-26 11:21:51.121 [http-nio-8080-exec-1] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - ==>  Preparing: select p1.prod_type_id,p1.prod_type_name,p1.parent_id,p2.prod_type_id parent_type_id,p2.prod_type_name parent_type_name from product_type p1 LEFT JOIN product_type p2 on p1.parent_id=p2.prod_type_id where p1.parent_id=? 
2019-01-26 11:21:51.121 [http-nio-8080-exec-1] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - ==> Parameters: 0(Integer)
2019-01-26 11:21:51.127 [http-nio-8080-exec-1] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - ====>  Preparing: select p1.prod_type_id,p1.prod_type_name,p1.parent_id,p2.prod_type_id parent_type_id,p2.prod_type_name parent_type_name from product_type p1 LEFT JOIN product_type p2 on p1.parent_id=p2.prod_type_id where p1.parent_id=? 
2019-01-26 11:21:51.127 [http-nio-8080-exec-1] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - ====> Parameters: 29(Integer)
2019-01-26 11:21:51.129 [http-nio-8080-exec-1] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - ======>  Preparing: select p1.prod_type_id,p1.prod_type_name,p1.parent_id,p2.prod_type_id parent_type_id,p2.prod_type_name parent_type_name from product_type p1 LEFT JOIN product_type p2 on p1.parent_id=p2.prod_type_id where p1.parent_id=? 
2019-01-26 11:21:51.129 [http-nio-8080-exec-1] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - ======> Parameters: 30(Integer)
2019-01-26 11:21:51.130 [http-nio-8080-exec-1] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - <======      Total: 0
2019-01-26 11:21:51.131 [http-nio-8080-exec-1] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - <====      Total: 1
2019-01-26 11:21:51.132 [http-nio-8080-exec-1] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - ====>  Preparing: select p1.prod_type_id,p1.prod_type_name,p1.parent_id,p2.prod_type_id parent_type_id,p2.prod_type_name parent_type_name from product_type p1 LEFT JOIN product_type p2 on p1.parent_id=p2.prod_type_id where p1.parent_id=? 
2019-01-26 11:21:51.132 [http-nio-8080-exec-1] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - ====> Parameters: 39(Integer)
2019-01-26 11:21:51.134 [http-nio-8080-exec-1] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - ======>  Preparing: select p1.prod_type_id,p1.prod_type_name,p1.parent_id,p2.prod_type_id parent_type_id,p2.prod_type_name parent_type_name from product_type p1 LEFT JOIN product_type p2 on p1.parent_id=p2.prod_type_id where p1.parent_id=? 
2019-01-26 11:21:51.135 [http-nio-8080-exec-1] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - ======> Parameters: 41(Integer)
2019-01-26 11:21:51.136 [http-nio-8080-exec-1] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - <======      Total: 0
2019-01-26 11:21:51.136 [http-nio-8080-exec-1] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - <====      Total: 1
2019-01-26 11:21:51.137 [http-nio-8080-exec-1] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - <==      Total: 2
2019-01-26 11:21:58.369 [http-nio-8080-exec-2] DEBUG c.yun.product.dao.ProductDao.findProductRowByParam - ==>  Preparing: select count(*) from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 
2019-01-26 11:21:58.372 [http-nio-8080-exec-2] DEBUG c.yun.product.dao.ProductDao.findProductRowByParam - ==> Parameters: 
2019-01-26 11:21:58.378 [http-nio-8080-exec-2] DEBUG c.yun.product.dao.ProductDao.findProductRowByParam - <==      Total: 1
2019-01-26 11:21:58.383 [http-nio-8080-exec-2] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 order by prod_id limit ?,? 
2019-01-26 11:21:58.383 [http-nio-8080-exec-2] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==> Parameters: 0(Integer), 5(Integer)
2019-01-26 11:21:58.386 [http-nio-8080-exec-2] DEBUG com.yun.product.dao.ProductDao.findProductByParam - <==      Total: 4
2019-01-26 11:21:58.387 [http-nio-8080-exec-2] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 11:21:58.388 [http-nio-8080-exec-2] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 2(Integer)
2019-01-26 11:21:58.389 [http-nio-8080-exec-2] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 0
2019-01-26 11:21:58.389 [http-nio-8080-exec-2] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 11:21:58.390 [http-nio-8080-exec-2] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 3(Integer)
2019-01-26 11:21:58.391 [http-nio-8080-exec-2] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 0
2019-01-26 11:21:58.391 [http-nio-8080-exec-2] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 11:21:58.391 [http-nio-8080-exec-2] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 4(Integer)
2019-01-26 11:21:58.393 [http-nio-8080-exec-2] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 2
2019-01-26 11:21:58.393 [http-nio-8080-exec-2] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 11:21:58.394 [http-nio-8080-exec-2] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 5(Integer)
2019-01-26 11:21:58.395 [http-nio-8080-exec-2] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-01-26 11:22:03.075 [http-nio-8080-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 11:22:03.081 [http-nio-8080-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 2(Integer)
2019-01-26 11:22:03.085 [http-nio-8080-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 0
2019-01-26 11:22:16.394 [http-nio-8080-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 11:22:16.396 [http-nio-8080-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 4(Integer)
2019-01-26 11:22:16.401 [http-nio-8080-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 2
2019-01-26 11:22:24.102 [http-nio-8080-exec-5] DEBUG com.yun.stock.controller.ProductStockController - 跳转到物品库存查询控制器
2019-01-26 11:22:24.104 [http-nio-8080-exec-5] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==>  Preparing: select count(*) from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 
2019-01-26 11:22:24.105 [http-nio-8080-exec-5] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==> Parameters: 
2019-01-26 11:22:24.106 [http-nio-8080-exec-5] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - <==      Total: 1
2019-01-26 11:22:24.106 [http-nio-8080-exec-5] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==>  Preparing: select ps.prod_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 order by p.prod_id,pp.prod_param_id limit ?,? 
2019-01-26 11:22:24.107 [http-nio-8080-exec-5] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==> Parameters: 0(Integer), 5(Integer)
2019-01-26 11:22:24.108 [http-nio-8080-exec-5] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - <==      Total: 0
2019-01-26 11:22:24.109 [http-nio-8080-exec-5] DEBUG com.yun.stock.controller.ProductStockController - 转到物品库存页面
2019-01-26 11:22:39.560 [http-nio-8080-exec-7] DEBUG com.yun.stock.controller.ProductStockController - 跳转到物品库存查询控制器
2019-01-26 11:22:39.563 [http-nio-8080-exec-7] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==>  Preparing: select count(*) from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 
2019-01-26 11:22:39.565 [http-nio-8080-exec-7] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==> Parameters: 
2019-01-26 11:22:39.568 [http-nio-8080-exec-7] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - <==      Total: 1
2019-01-26 11:22:39.569 [http-nio-8080-exec-7] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==>  Preparing: select ps.prod_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 order by p.prod_id,pp.prod_param_id limit ?,? 
2019-01-26 11:22:39.570 [http-nio-8080-exec-7] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==> Parameters: 0(Integer), 5(Integer)
2019-01-26 11:22:39.572 [http-nio-8080-exec-7] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - <==      Total: 0
2019-01-26 11:22:39.573 [http-nio-8080-exec-7] DEBUG com.yun.stock.controller.ProductStockController - 转到物品库存页面
2019-01-26 11:32:45.994 [main] INFO  com.yun.YunEbStockApplication - Starting YunEbStockApplication on USER-20181202BJ with PID 4532 (E:\workspace\yun-eb-stock\target\classes started by Administrator in E:\workspace\yun-eb-stock)
2019-01-26 11:32:45.999 [main] DEBUG com.yun.YunEbStockApplication - Running with Spring Boot v1.5.9.RELEASE, Spring v4.3.13.RELEASE
2019-01-26 11:32:46.014 [main] INFO  com.yun.YunEbStockApplication - No active profile set, falling back to default profiles: default
2019-01-26 11:32:46.404 [background-preinit] INFO  org.hibernate.validator.internal.util.Version - HV000001: Hibernate Validator 5.3.6.Final
2019-01-26 11:32:46.490 [main] INFO  o.s.b.c.e.AnnotationConfigEmbeddedWebApplicationContext - Refreshing org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@6a28ffa4: startup date [Sat Jan 26 11:32:46 CST 2019]; root of context hierarchy
2019-01-26 11:32:48.017 [main] INFO  o.s.b.c.e.tomcat.TomcatEmbeddedServletContainer - Tomcat initialized with port(s): 8080 (http)
2019-01-26 11:32:48.029 [main] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2019-01-26 11:32:48.030 [main] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet Engine: Apache Tomcat/8.5.23
2019-01-26 11:32:48.153 [localhost-startStop-1] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2019-01-26 11:32:48.153 [localhost-startStop-1] INFO  org.springframework.web.context.ContextLoader - Root WebApplicationContext: initialization completed in 1663 ms
2019-01-26 11:32:48.309 [localhost-startStop-1] INFO  o.s.boot.web.servlet.ServletRegistrationBean - Mapping servlet: 'dispatcherServlet' to [/]
2019-01-26 11:32:48.314 [localhost-startStop-1] INFO  o.s.boot.web.servlet.FilterRegistrationBean - Mapping filter: 'characterEncodingFilter' to: [/*]
2019-01-26 11:32:48.315 [localhost-startStop-1] INFO  o.s.boot.web.servlet.FilterRegistrationBean - Mapping filter: 'hiddenHttpMethodFilter' to: [/*]
2019-01-26 11:32:48.315 [localhost-startStop-1] INFO  o.s.boot.web.servlet.FilterRegistrationBean - Mapping filter: 'httpPutFormContentFilter' to: [/*]
2019-01-26 11:32:48.315 [localhost-startStop-1] INFO  o.s.boot.web.servlet.FilterRegistrationBean - Mapping filter: 'requestContextFilter' to: [/*]
2019-01-26 11:32:49.105 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerAdapter - Looking for @ControllerAdvice: org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@6a28ffa4: startup date [Sat Jan 26 11:32:46 CST 2019]; root of context hierarchy
2019-01-26 11:32:49.172 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productList]}" onto public java.lang.String com.yun.product.controller.ProductController.productList(org.springframework.ui.Model,java.lang.String,java.lang.String,java.lang.String,java.lang.String)
2019-01-26 11:32:49.174 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productPreAdd]}" onto public java.lang.String com.yun.product.controller.ProductController.productPreAdd()
2019-01-26 11:32:49.174 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productSave]}" onto public java.lang.String com.yun.product.controller.ProductController.productSave(com.yun.product.model.Product)
2019-01-26 11:32:49.174 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productDelete]}" onto public java.lang.String com.yun.product.controller.ProductController.productDelete(int)
2019-01-26 11:32:49.174 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productPreUpdate]}" onto public java.lang.String com.yun.product.controller.ProductController.productPreUpdate(int,org.springframework.ui.Model)
2019-01-26 11:32:49.175 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productUpdate]}" onto public java.lang.String com.yun.product.controller.ProductController.productUpdate(com.yun.product.model.Product)
2019-01-26 11:32:49.175 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productListForAutoComplete]}" onto public java.util.List<com.yun.product.model.Product> com.yun.product.controller.ProductController.productListForAutoComplete(java.lang.String)
2019-01-26 11:32:49.176 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/prodParamPreAdd]}" onto public java.lang.String com.yun.product.controller.ProductParamController.prodParamPreAdd(int,org.springframework.ui.Model)
2019-01-26 11:32:49.176 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/prodParamList]}" onto public java.lang.String com.yun.product.controller.ProductParamController.prodParamList(int)
2019-01-26 11:32:49.176 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/prodParamDelete]}" onto public java.lang.String com.yun.product.controller.ProductParamController.prodParamDelete(int)
2019-01-26 11:32:49.177 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/prodParamSave]}" onto public java.lang.String com.yun.product.controller.ProductParamController.prodParamSave(com.yun.product.model.ProductParameter)
2019-01-26 11:32:49.179 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeList]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeList(org.springframework.ui.Model)
2019-01-26 11:32:49.180 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeTree]}" onto public java.util.List<com.yun.product.model.ProductType> com.yun.product.controller.ProductTypeController.productTypeTree()
2019-01-26 11:32:49.180 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeEdit]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeEdit()
2019-01-26 11:32:49.180 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeSave]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeSave(com.yun.product.model.ProductType)
2019-01-26 11:32:49.181 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeUpdate]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeUpdate(java.lang.Integer,org.springframework.ui.Model)
2019-01-26 11:32:49.181 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeUpdateSave]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeUpdateSave(com.yun.product.model.ProductType)
2019-01-26 11:32:49.181 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeDelete]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeDelete(java.lang.Integer,javax.servlet.http.HttpServletResponse) throws java.io.IOException
2019-01-26 11:32:49.182 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockSave]}" onto public java.lang.String com.yun.stock.controller.ProductStockController.productStockSave(com.yun.stock.model.ProductStock)
2019-01-26 11:32:49.183 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockList]}" onto public java.lang.String com.yun.stock.controller.ProductStockController.productStocklist(java.lang.String,java.lang.String,org.springframework.ui.Model)
2019-01-26 11:32:49.183 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockPreAdd]}" onto public java.lang.String com.yun.stock.controller.ProductStockController.productStockPreAdd()
2019-01-26 11:32:49.183 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/main]}" onto public java.lang.String com.yun.user.controller.MainController.main()
2019-01-26 11:32:49.184 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/userList]}" onto public java.lang.String com.yun.user.controller.UserController.userList(org.springframework.ui.Model)
2019-01-26 11:32:49.184 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/login]}" onto public java.lang.String com.yun.user.controller.UserController.login(java.lang.String,java.lang.String,javax.servlet.http.HttpSession)
2019-01-26 11:32:49.185 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/userEdit]}" onto public java.lang.String com.yun.user.controller.UserController.userEdit()
2019-01-26 11:32:49.185 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/userSave]}" onto public java.lang.String com.yun.user.controller.UserController.userSave(com.yun.user.model.UserInfo)
2019-01-26 11:32:49.185 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/deleteUserInfo]}" onto public java.lang.String com.yun.user.controller.UserController.userDelete(int)
2019-01-26 11:32:49.188 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/error]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> org.springframework.boot.autoconfigure.web.BasicErrorController.error(javax.servlet.http.HttpServletRequest)
2019-01-26 11:32:49.188 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/error],produces=[text/html]}" onto public org.springframework.web.servlet.ModelAndView org.springframework.boot.autoconfigure.web.BasicErrorController.errorHtml(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
2019-01-26 11:32:49.224 [main] INFO  o.s.web.servlet.handler.SimpleUrlHandlerMapping - Mapped URL path [/webjars/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-01-26 11:32:49.224 [main] INFO  o.s.web.servlet.handler.SimpleUrlHandlerMapping - Mapped URL path [/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-01-26 11:32:49.266 [main] INFO  o.s.web.servlet.handler.SimpleUrlHandlerMapping - Mapped URL path [/**/favicon.ico] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-01-26 11:32:49.590 [main] INFO  o.s.b.a.w.WebMvcAutoConfiguration$WelcomePageHandlerMapping - Adding welcome page: class path resource [static/index.html]
2019-01-26 11:32:49.860 [main] INFO  o.s.jmx.export.annotation.AnnotationMBeanExporter - Registering beans for JMX exposure on startup
2019-01-26 11:32:49.881 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2019-01-26 11:32:49.891 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2019-01-26 11:32:49.907 [main] INFO  org.apache.tomcat.util.net.NioSelectorPool - Using a shared selector for servlet write/read
2019-01-26 11:32:49.926 [main] INFO  o.s.b.c.e.tomcat.TomcatEmbeddedServletContainer - Tomcat started on port(s): 8080 (http)
2019-01-26 11:32:49.931 [main] INFO  com.yun.YunEbStockApplication - Started YunEbStockApplication in 4.353 seconds (JVM running for 5.494)
2019-01-26 11:32:56.548 [http-nio-8080-exec-1] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring FrameworkServlet 'dispatcherServlet'
2019-01-26 11:32:56.548 [http-nio-8080-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - FrameworkServlet 'dispatcherServlet': initialization started
2019-01-26 11:32:56.567 [http-nio-8080-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - FrameworkServlet 'dispatcherServlet': initialization completed in 19 ms
2019-01-26 11:33:00.629 [http-nio-8080-exec-8] DEBUG com.yun.stock.controller.ProductStockController - 跳转到物品库存查询控制器
2019-01-26 11:33:00.925 [http-nio-8080-exec-8] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==>  Preparing: select count(*) from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 
2019-01-26 11:33:00.944 [http-nio-8080-exec-8] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==> Parameters: 
2019-01-26 11:33:00.956 [http-nio-8080-exec-8] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - <==      Total: 1
2019-01-26 11:33:00.963 [http-nio-8080-exec-8] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==>  Preparing: select ps.prod_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 order by p.prod_id,pp.prod_param_id limit ?,? 
2019-01-26 11:33:00.964 [http-nio-8080-exec-8] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==> Parameters: 0(Integer), 5(Integer)
2019-01-26 11:33:00.965 [http-nio-8080-exec-8] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - <==      Total: 0
2019-01-26 11:33:00.966 [http-nio-8080-exec-8] DEBUG com.yun.stock.controller.ProductStockController - 转到物品库存页面
2019-01-26 11:33:33.568 [http-nio-8080-exec-9] DEBUG com.yun.stock.controller.ProductStockController - 跳转到物品库存查询控制器
2019-01-26 11:33:33.571 [http-nio-8080-exec-9] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==>  Preparing: select count(*) from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 
2019-01-26 11:33:33.571 [http-nio-8080-exec-9] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==> Parameters: 
2019-01-26 11:33:33.573 [http-nio-8080-exec-9] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - <==      Total: 1
2019-01-26 11:33:33.574 [http-nio-8080-exec-9] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==>  Preparing: select ps.prod_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 order by p.prod_id,pp.prod_param_id limit ?,? 
2019-01-26 11:33:33.574 [http-nio-8080-exec-9] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==> Parameters: 0(Integer), 5(Integer)
2019-01-26 11:33:33.576 [http-nio-8080-exec-9] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - <==      Total: 0
2019-01-26 11:33:33.576 [http-nio-8080-exec-9] DEBUG com.yun.stock.controller.ProductStockController - 转到物品库存页面
2019-01-26 11:42:02.741 [main] INFO  com.yun.YunEbStockApplication - Starting YunEbStockApplication on USER-20181202BJ with PID 5024 (E:\workspace\yun-eb-stock\target\classes started by Administrator in E:\workspace\yun-eb-stock)
2019-01-26 11:42:02.745 [main] DEBUG com.yun.YunEbStockApplication - Running with Spring Boot v1.5.9.RELEASE, Spring v4.3.13.RELEASE
2019-01-26 11:42:02.745 [main] INFO  com.yun.YunEbStockApplication - No active profile set, falling back to default profiles: default
2019-01-26 11:42:02.969 [background-preinit] INFO  org.hibernate.validator.internal.util.Version - HV000001: Hibernate Validator 5.3.6.Final
2019-01-26 11:42:03.284 [main] INFO  o.s.b.c.e.AnnotationConfigEmbeddedWebApplicationContext - Refreshing org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@6a28ffa4: startup date [Sat Jan 26 11:42:03 CST 2019]; root of context hierarchy
2019-01-26 11:42:04.846 [main] INFO  o.s.b.c.e.tomcat.TomcatEmbeddedServletContainer - Tomcat initialized with port(s): 8080 (http)
2019-01-26 11:42:04.857 [main] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2019-01-26 11:42:04.858 [main] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet Engine: Apache Tomcat/8.5.23
2019-01-26 11:42:04.976 [localhost-startStop-1] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2019-01-26 11:42:04.977 [localhost-startStop-1] INFO  org.springframework.web.context.ContextLoader - Root WebApplicationContext: initialization completed in 1693 ms
2019-01-26 11:42:05.131 [localhost-startStop-1] INFO  o.s.boot.web.servlet.ServletRegistrationBean - Mapping servlet: 'dispatcherServlet' to [/]
2019-01-26 11:42:05.136 [localhost-startStop-1] INFO  o.s.boot.web.servlet.FilterRegistrationBean - Mapping filter: 'characterEncodingFilter' to: [/*]
2019-01-26 11:42:05.137 [localhost-startStop-1] INFO  o.s.boot.web.servlet.FilterRegistrationBean - Mapping filter: 'hiddenHttpMethodFilter' to: [/*]
2019-01-26 11:42:05.138 [localhost-startStop-1] INFO  o.s.boot.web.servlet.FilterRegistrationBean - Mapping filter: 'httpPutFormContentFilter' to: [/*]
2019-01-26 11:42:05.138 [localhost-startStop-1] INFO  o.s.boot.web.servlet.FilterRegistrationBean - Mapping filter: 'requestContextFilter' to: [/*]
2019-01-26 11:42:05.932 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerAdapter - Looking for @ControllerAdvice: org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@6a28ffa4: startup date [Sat Jan 26 11:42:03 CST 2019]; root of context hierarchy
2019-01-26 11:42:05.989 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productList]}" onto public java.lang.String com.yun.product.controller.ProductController.productList(org.springframework.ui.Model,java.lang.String,java.lang.String,java.lang.String,java.lang.String)
2019-01-26 11:42:05.990 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productPreAdd]}" onto public java.lang.String com.yun.product.controller.ProductController.productPreAdd()
2019-01-26 11:42:05.990 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productSave]}" onto public java.lang.String com.yun.product.controller.ProductController.productSave(com.yun.product.model.Product)
2019-01-26 11:42:05.991 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productDelete]}" onto public java.lang.String com.yun.product.controller.ProductController.productDelete(int)
2019-01-26 11:42:05.991 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productPreUpdate]}" onto public java.lang.String com.yun.product.controller.ProductController.productPreUpdate(int,org.springframework.ui.Model)
2019-01-26 11:42:05.991 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productUpdate]}" onto public java.lang.String com.yun.product.controller.ProductController.productUpdate(com.yun.product.model.Product)
2019-01-26 11:42:05.992 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productListForAutoComplete]}" onto public java.util.List<com.yun.product.model.Product> com.yun.product.controller.ProductController.productListForAutoComplete(java.lang.String)
2019-01-26 11:42:05.992 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productListForStock]}" onto public java.util.List<com.yun.product.model.Product> com.yun.product.controller.ProductController.productListForStock()
2019-01-26 11:42:05.993 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/prodParamDelete]}" onto public java.lang.String com.yun.product.controller.ProductParamController.prodParamDelete(int)
2019-01-26 11:42:05.994 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/prodParamSave]}" onto public java.lang.String com.yun.product.controller.ProductParamController.prodParamSave(com.yun.product.model.ProductParameter)
2019-01-26 11:42:05.994 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/prodParamList]}" onto public java.lang.String com.yun.product.controller.ProductParamController.prodParamList(int)
2019-01-26 11:42:05.995 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/prodParamPreAdd]}" onto public java.lang.String com.yun.product.controller.ProductParamController.prodParamPreAdd(int,org.springframework.ui.Model)
2019-01-26 11:42:05.998 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeList]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeList(org.springframework.ui.Model)
2019-01-26 11:42:05.998 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeTree]}" onto public java.util.List<com.yun.product.model.ProductType> com.yun.product.controller.ProductTypeController.productTypeTree()
2019-01-26 11:42:05.998 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeEdit]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeEdit()
2019-01-26 11:42:05.998 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeSave]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeSave(com.yun.product.model.ProductType)
2019-01-26 11:42:05.999 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeUpdate]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeUpdate(java.lang.Integer,org.springframework.ui.Model)
2019-01-26 11:42:05.999 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeUpdateSave]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeUpdateSave(com.yun.product.model.ProductType)
2019-01-26 11:42:05.999 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeDelete]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeDelete(java.lang.Integer,javax.servlet.http.HttpServletResponse) throws java.io.IOException
2019-01-26 11:42:06.000 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockSave]}" onto public java.lang.String com.yun.stock.controller.ProductStockController.productStockSave(com.yun.stock.model.ProductStock)
2019-01-26 11:42:06.000 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockList]}" onto public java.lang.String com.yun.stock.controller.ProductStockController.productStocklist(java.lang.String,java.lang.String,org.springframework.ui.Model)
2019-01-26 11:42:06.000 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockPreAdd]}" onto public java.lang.String com.yun.stock.controller.ProductStockController.productStockPreAdd()
2019-01-26 11:42:06.001 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/main]}" onto public java.lang.String com.yun.user.controller.MainController.main()
2019-01-26 11:42:06.002 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/userList]}" onto public java.lang.String com.yun.user.controller.UserController.userList(org.springframework.ui.Model)
2019-01-26 11:42:06.002 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/login]}" onto public java.lang.String com.yun.user.controller.UserController.login(java.lang.String,java.lang.String,javax.servlet.http.HttpSession)
2019-01-26 11:42:06.002 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/userEdit]}" onto public java.lang.String com.yun.user.controller.UserController.userEdit()
2019-01-26 11:42:06.002 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/userSave]}" onto public java.lang.String com.yun.user.controller.UserController.userSave(com.yun.user.model.UserInfo)
2019-01-26 11:42:06.002 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/deleteUserInfo]}" onto public java.lang.String com.yun.user.controller.UserController.userDelete(int)
2019-01-26 11:42:06.005 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/error]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> org.springframework.boot.autoconfigure.web.BasicErrorController.error(javax.servlet.http.HttpServletRequest)
2019-01-26 11:42:06.006 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/error],produces=[text/html]}" onto public org.springframework.web.servlet.ModelAndView org.springframework.boot.autoconfigure.web.BasicErrorController.errorHtml(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
2019-01-26 11:42:06.040 [main] INFO  o.s.web.servlet.handler.SimpleUrlHandlerMapping - Mapped URL path [/webjars/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-01-26 11:42:06.041 [main] INFO  o.s.web.servlet.handler.SimpleUrlHandlerMapping - Mapped URL path [/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-01-26 11:42:06.079 [main] INFO  o.s.web.servlet.handler.SimpleUrlHandlerMapping - Mapped URL path [/**/favicon.ico] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-01-26 11:42:06.382 [main] INFO  o.s.b.a.w.WebMvcAutoConfiguration$WelcomePageHandlerMapping - Adding welcome page: class path resource [static/index.html]
2019-01-26 11:42:06.681 [main] INFO  o.s.jmx.export.annotation.AnnotationMBeanExporter - Registering beans for JMX exposure on startup
2019-01-26 11:42:06.706 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2019-01-26 11:42:06.721 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2019-01-26 11:42:06.737 [main] INFO  org.apache.tomcat.util.net.NioSelectorPool - Using a shared selector for servlet write/read
2019-01-26 11:42:06.756 [main] INFO  o.s.b.c.e.tomcat.TomcatEmbeddedServletContainer - Tomcat started on port(s): 8080 (http)
2019-01-26 11:42:06.761 [main] INFO  com.yun.YunEbStockApplication - Started YunEbStockApplication in 4.543 seconds (JVM running for 5.743)
2019-01-26 11:42:07.255 [http-nio-8080-exec-1] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring FrameworkServlet 'dispatcherServlet'
2019-01-26 11:42:07.255 [http-nio-8080-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - FrameworkServlet 'dispatcherServlet': initialization started
2019-01-26 11:42:07.284 [http-nio-8080-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - FrameworkServlet 'dispatcherServlet': initialization completed in 28 ms
2019-01-26 11:42:10.172 [http-nio-8080-exec-8] DEBUG com.yun.stock.controller.ProductStockController - 跳转到物品库存查询控制器
2019-01-26 11:42:10.469 [http-nio-8080-exec-8] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==>  Preparing: select count(*) from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 
2019-01-26 11:42:10.489 [http-nio-8080-exec-8] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==> Parameters: 
2019-01-26 11:42:10.501 [http-nio-8080-exec-8] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - <==      Total: 1
2019-01-26 11:42:10.509 [http-nio-8080-exec-8] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==>  Preparing: select ps.prod_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 order by p.prod_id,pp.prod_param_id limit ?,? 
2019-01-26 11:42:10.510 [http-nio-8080-exec-8] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==> Parameters: 0(Integer), 5(Integer)
2019-01-26 11:42:10.511 [http-nio-8080-exec-8] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - <==      Total: 0
2019-01-26 11:42:10.511 [http-nio-8080-exec-8] DEBUG com.yun.stock.controller.ProductStockController - 转到物品库存页面
2019-01-26 11:42:13.080 [http-nio-8080-exec-10] DEBUG c.yun.stock.dao.ProductStockDao.insertProductStock - ==>  Preparing: insert into product_stock(prod_id,prod_param_id,stock_num)values(?,?,?) 
2019-01-26 11:42:13.105 [http-nio-8080-exec-10] ERROR o.a.c.c.C.[.[localhost].[/].[dispatcherServlet] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is org.mybatis.spring.MyBatisSystemException: nested exception is org.apache.ibatis.reflection.ReflectionException: There is no getter for property named 'prodId' in 'class com.yun.stock.model.ProductStock'] with root cause
org.apache.ibatis.reflection.ReflectionException: There is no getter for property named 'prodId' in 'class com.yun.stock.model.ProductStock'
	at org.apache.ibatis.reflection.Reflector.getGetInvoker(Reflector.java:419)
	at org.apache.ibatis.reflection.MetaClass.getGetInvoker(MetaClass.java:164)
	at org.apache.ibatis.reflection.wrapper.BeanWrapper.getBeanProperty(BeanWrapper.java:162)
	at org.apache.ibatis.reflection.wrapper.BeanWrapper.get(BeanWrapper.java:49)
	at org.apache.ibatis.reflection.MetaObject.getValue(MetaObject.java:122)
	at org.apache.ibatis.scripting.defaults.DefaultParameterHandler.setParameters(DefaultParameterHandler.java:79)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.parameterize(PreparedStatementHandler.java:93)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.parameterize(RoutingStatementHandler.java:64)
	at org.apache.ibatis.executor.SimpleExecutor.prepareStatement(SimpleExecutor.java:86)
	at org.apache.ibatis.executor.SimpleExecutor.doUpdate(SimpleExecutor.java:49)
	at org.apache.ibatis.executor.BaseExecutor.update(BaseExecutor.java:117)
	at org.apache.ibatis.executor.CachingExecutor.update(CachingExecutor.java:76)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.update(DefaultSqlSession.java:198)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.insert(DefaultSqlSession.java:185)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:483)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:433)
	at com.sun.proxy.$Proxy59.insert(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.insert(SqlSessionTemplate.java:278)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:58)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:59)
	at com.sun.proxy.$Proxy79.insertProductStock(Unknown Source)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:483)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:333)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:190)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:157)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:136)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:213)
	at com.sun.proxy.$Proxy80.insertProductStock(Unknown Source)
	at com.yun.stock.service.ProductStockService.insertProductStock(ProductStockService.java:27)
	at com.yun.stock.controller.ProductStockController.productStockSave(ProductStockController.java:55)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:483)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:133)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:97)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:827)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:738)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:85)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:967)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:901)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:970)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:872)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:661)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:846)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:742)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HttpPutFormContentFilter.doFilterInternal(HttpPutFormContentFilter.java:108)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:81)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:197)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:199)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:478)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:140)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:81)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:803)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1459)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:745)
2019-01-26 11:42:32.573 [http-nio-8080-exec-2] DEBUG c.yun.stock.dao.ProductStockDao.insertProductStock - ==>  Preparing: insert into product_stock(prod_id,prod_param_id,stock_num)values(?,?,?) 
2019-01-26 11:42:32.576 [http-nio-8080-exec-2] ERROR o.a.c.c.C.[.[localhost].[/].[dispatcherServlet] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is org.mybatis.spring.MyBatisSystemException: nested exception is org.apache.ibatis.reflection.ReflectionException: There is no getter for property named 'prodId' in 'class com.yun.stock.model.ProductStock'] with root cause
org.apache.ibatis.reflection.ReflectionException: There is no getter for property named 'prodId' in 'class com.yun.stock.model.ProductStock'
	at org.apache.ibatis.reflection.Reflector.getGetInvoker(Reflector.java:419)
	at org.apache.ibatis.reflection.MetaClass.getGetInvoker(MetaClass.java:164)
	at org.apache.ibatis.reflection.wrapper.BeanWrapper.getBeanProperty(BeanWrapper.java:162)
	at org.apache.ibatis.reflection.wrapper.BeanWrapper.get(BeanWrapper.java:49)
	at org.apache.ibatis.reflection.MetaObject.getValue(MetaObject.java:122)
	at org.apache.ibatis.scripting.defaults.DefaultParameterHandler.setParameters(DefaultParameterHandler.java:79)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.parameterize(PreparedStatementHandler.java:93)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.parameterize(RoutingStatementHandler.java:64)
	at org.apache.ibatis.executor.SimpleExecutor.prepareStatement(SimpleExecutor.java:86)
	at org.apache.ibatis.executor.SimpleExecutor.doUpdate(SimpleExecutor.java:49)
	at org.apache.ibatis.executor.BaseExecutor.update(BaseExecutor.java:117)
	at org.apache.ibatis.executor.CachingExecutor.update(CachingExecutor.java:76)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.update(DefaultSqlSession.java:198)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.insert(DefaultSqlSession.java:185)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:483)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:433)
	at com.sun.proxy.$Proxy59.insert(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.insert(SqlSessionTemplate.java:278)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:58)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:59)
	at com.sun.proxy.$Proxy79.insertProductStock(Unknown Source)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:483)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:333)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:190)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:157)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:136)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:213)
	at com.sun.proxy.$Proxy80.insertProductStock(Unknown Source)
	at com.yun.stock.service.ProductStockService.insertProductStock(ProductStockService.java:27)
	at com.yun.stock.controller.ProductStockController.productStockSave(ProductStockController.java:55)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:483)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:133)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:97)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:827)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:738)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:85)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:967)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:901)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:970)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:872)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:661)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:846)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:742)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HttpPutFormContentFilter.doFilterInternal(HttpPutFormContentFilter.java:108)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:81)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:197)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:199)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:478)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:140)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:81)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:803)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1459)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:745)
2019-01-26 11:43:38.356 [http-nio-8080-exec-6] DEBUG com.yun.stock.controller.ProductStockController - 跳转到物品库存查询控制器
2019-01-26 11:43:38.361 [http-nio-8080-exec-6] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==>  Preparing: select count(*) from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 
2019-01-26 11:43:38.362 [http-nio-8080-exec-6] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==> Parameters: 
2019-01-26 11:43:38.366 [http-nio-8080-exec-6] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - <==      Total: 1
2019-01-26 11:43:38.367 [http-nio-8080-exec-6] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==>  Preparing: select ps.prod_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 order by p.prod_id,pp.prod_param_id limit ?,? 
2019-01-26 11:43:38.369 [http-nio-8080-exec-6] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==> Parameters: 0(Integer), 5(Integer)
2019-01-26 11:43:38.371 [http-nio-8080-exec-6] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - <==      Total: 0
2019-01-26 11:43:38.372 [http-nio-8080-exec-6] DEBUG com.yun.stock.controller.ProductStockController - 转到物品库存页面
2019-01-26 11:43:42.612 [http-nio-8080-exec-5] DEBUG com.yun.product.dao.ProductDao.productListForStock - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where prod_id not in(select prod_id from product_stock) 
2019-01-26 11:43:42.612 [http-nio-8080-exec-5] DEBUG com.yun.product.dao.ProductDao.productListForStock - ==> Parameters: 
2019-01-26 11:43:42.619 [http-nio-8080-exec-5] DEBUG com.yun.product.dao.ProductDao.productListForStock - <==      Total: 5
2019-01-26 11:43:42.631 [http-nio-8080-exec-5] ERROR org.thymeleaf.TemplateEngine - [THYMELEAF][http-nio-8080-exec-5] Exception processing template "productListForStock": Error resolving template "productListForStock", template might not exist or might not be accessible by any of the configured Template Resolvers
2019-01-26 11:43:42.632 [http-nio-8080-exec-5] ERROR o.a.c.c.C.[.[localhost].[/].[dispatcherServlet] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is org.thymeleaf.exceptions.TemplateInputException: Error resolving template "productListForStock", template might not exist or might not be accessible by any of the configured Template Resolvers] with root cause
org.thymeleaf.exceptions.TemplateInputException: Error resolving template "productListForStock", template might not exist or might not be accessible by any of the configured Template Resolvers
	at org.thymeleaf.TemplateRepository.getTemplate(TemplateRepository.java:246)
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1104)
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1060)
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1011)
	at org.thymeleaf.spring4.view.ThymeleafView.renderFragment(ThymeleafView.java:335)
	at org.thymeleaf.spring4.view.ThymeleafView.render(ThymeleafView.java:190)
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1286)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1041)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:984)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:901)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:970)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:872)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:661)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:846)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:742)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HttpPutFormContentFilter.doFilterInternal(HttpPutFormContentFilter.java:108)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:81)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:197)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:199)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:478)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:140)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:81)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:803)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1459)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:745)
2019-01-26 11:44:27.310 [main] INFO  com.yun.YunEbStockApplication - Starting YunEbStockApplication on USER-20181202BJ with PID 3076 (E:\workspace\yun-eb-stock\target\classes started by Administrator in E:\workspace\yun-eb-stock)
2019-01-26 11:44:27.314 [main] DEBUG com.yun.YunEbStockApplication - Running with Spring Boot v1.5.9.RELEASE, Spring v4.3.13.RELEASE
2019-01-26 11:44:27.315 [main] INFO  com.yun.YunEbStockApplication - No active profile set, falling back to default profiles: default
2019-01-26 11:44:27.640 [background-preinit] INFO  org.hibernate.validator.internal.util.Version - HV000001: Hibernate Validator 5.3.6.Final
2019-01-26 11:44:27.865 [main] INFO  o.s.b.c.e.AnnotationConfigEmbeddedWebApplicationContext - Refreshing org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@6a28ffa4: startup date [Sat Jan 26 11:44:27 CST 2019]; root of context hierarchy
2019-01-26 11:44:29.357 [main] INFO  o.s.b.c.e.tomcat.TomcatEmbeddedServletContainer - Tomcat initialized with port(s): 8080 (http)
2019-01-26 11:44:29.366 [main] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2019-01-26 11:44:29.367 [main] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet Engine: Apache Tomcat/8.5.23
2019-01-26 11:44:29.481 [localhost-startStop-1] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2019-01-26 11:44:29.481 [localhost-startStop-1] INFO  org.springframework.web.context.ContextLoader - Root WebApplicationContext: initialization completed in 1616 ms
2019-01-26 11:44:29.643 [localhost-startStop-1] INFO  o.s.boot.web.servlet.ServletRegistrationBean - Mapping servlet: 'dispatcherServlet' to [/]
2019-01-26 11:44:29.648 [localhost-startStop-1] INFO  o.s.boot.web.servlet.FilterRegistrationBean - Mapping filter: 'characterEncodingFilter' to: [/*]
2019-01-26 11:44:29.649 [localhost-startStop-1] INFO  o.s.boot.web.servlet.FilterRegistrationBean - Mapping filter: 'hiddenHttpMethodFilter' to: [/*]
2019-01-26 11:44:29.649 [localhost-startStop-1] INFO  o.s.boot.web.servlet.FilterRegistrationBean - Mapping filter: 'httpPutFormContentFilter' to: [/*]
2019-01-26 11:44:29.649 [localhost-startStop-1] INFO  o.s.boot.web.servlet.FilterRegistrationBean - Mapping filter: 'requestContextFilter' to: [/*]
2019-01-26 11:44:30.391 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerAdapter - Looking for @ControllerAdvice: org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@6a28ffa4: startup date [Sat Jan 26 11:44:27 CST 2019]; root of context hierarchy
2019-01-26 11:44:30.446 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productListForAutoComplete]}" onto public java.util.List<com.yun.product.model.Product> com.yun.product.controller.ProductController.productListForAutoComplete(java.lang.String)
2019-01-26 11:44:30.447 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productListForStock]}" onto public java.util.List<com.yun.product.model.Product> com.yun.product.controller.ProductController.productListForStock()
2019-01-26 11:44:30.448 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productList]}" onto public java.lang.String com.yun.product.controller.ProductController.productList(org.springframework.ui.Model,java.lang.String,java.lang.String,java.lang.String,java.lang.String)
2019-01-26 11:44:30.448 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productPreAdd]}" onto public java.lang.String com.yun.product.controller.ProductController.productPreAdd()
2019-01-26 11:44:30.448 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productSave]}" onto public java.lang.String com.yun.product.controller.ProductController.productSave(com.yun.product.model.Product)
2019-01-26 11:44:30.448 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productDelete]}" onto public java.lang.String com.yun.product.controller.ProductController.productDelete(int)
2019-01-26 11:44:30.449 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productPreUpdate]}" onto public java.lang.String com.yun.product.controller.ProductController.productPreUpdate(int,org.springframework.ui.Model)
2019-01-26 11:44:30.449 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productUpdate]}" onto public java.lang.String com.yun.product.controller.ProductController.productUpdate(com.yun.product.model.Product)
2019-01-26 11:44:30.450 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/prodParamDelete]}" onto public java.lang.String com.yun.product.controller.ProductParamController.prodParamDelete(int)
2019-01-26 11:44:30.450 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/prodParamSave]}" onto public java.lang.String com.yun.product.controller.ProductParamController.prodParamSave(com.yun.product.model.ProductParameter)
2019-01-26 11:44:30.450 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/prodParamList]}" onto public java.lang.String com.yun.product.controller.ProductParamController.prodParamList(int)
2019-01-26 11:44:30.450 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/prodParamPreAdd]}" onto public java.lang.String com.yun.product.controller.ProductParamController.prodParamPreAdd(int,org.springframework.ui.Model)
2019-01-26 11:44:30.453 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeUpdate]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeUpdate(java.lang.Integer,org.springframework.ui.Model)
2019-01-26 11:44:30.453 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeUpdateSave]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeUpdateSave(com.yun.product.model.ProductType)
2019-01-26 11:44:30.453 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeDelete]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeDelete(java.lang.Integer,javax.servlet.http.HttpServletResponse) throws java.io.IOException
2019-01-26 11:44:30.454 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeList]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeList(org.springframework.ui.Model)
2019-01-26 11:44:30.454 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeTree]}" onto public java.util.List<com.yun.product.model.ProductType> com.yun.product.controller.ProductTypeController.productTypeTree()
2019-01-26 11:44:30.454 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeEdit]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeEdit()
2019-01-26 11:44:30.454 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeSave]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeSave(com.yun.product.model.ProductType)
2019-01-26 11:44:30.455 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockPreAdd]}" onto public java.lang.String com.yun.stock.controller.ProductStockController.productStockPreAdd()
2019-01-26 11:44:30.455 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockSave]}" onto public java.lang.String com.yun.stock.controller.ProductStockController.productStockSave(com.yun.stock.model.ProductStock)
2019-01-26 11:44:30.456 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockList]}" onto public java.lang.String com.yun.stock.controller.ProductStockController.productStocklist(java.lang.String,java.lang.String,org.springframework.ui.Model)
2019-01-26 11:44:30.456 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/main]}" onto public java.lang.String com.yun.user.controller.MainController.main()
2019-01-26 11:44:30.457 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/userList]}" onto public java.lang.String com.yun.user.controller.UserController.userList(org.springframework.ui.Model)
2019-01-26 11:44:30.457 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/login]}" onto public java.lang.String com.yun.user.controller.UserController.login(java.lang.String,java.lang.String,javax.servlet.http.HttpSession)
2019-01-26 11:44:30.457 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/userEdit]}" onto public java.lang.String com.yun.user.controller.UserController.userEdit()
2019-01-26 11:44:30.458 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/userSave]}" onto public java.lang.String com.yun.user.controller.UserController.userSave(com.yun.user.model.UserInfo)
2019-01-26 11:44:30.458 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/deleteUserInfo]}" onto public java.lang.String com.yun.user.controller.UserController.userDelete(int)
2019-01-26 11:44:30.461 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/error]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> org.springframework.boot.autoconfigure.web.BasicErrorController.error(javax.servlet.http.HttpServletRequest)
2019-01-26 11:44:30.461 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/error],produces=[text/html]}" onto public org.springframework.web.servlet.ModelAndView org.springframework.boot.autoconfigure.web.BasicErrorController.errorHtml(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
2019-01-26 11:44:30.496 [main] INFO  o.s.web.servlet.handler.SimpleUrlHandlerMapping - Mapped URL path [/webjars/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-01-26 11:44:30.497 [main] INFO  o.s.web.servlet.handler.SimpleUrlHandlerMapping - Mapped URL path [/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-01-26 11:44:30.533 [main] INFO  o.s.web.servlet.handler.SimpleUrlHandlerMapping - Mapped URL path [/**/favicon.ico] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-01-26 11:44:30.828 [main] INFO  o.s.b.a.w.WebMvcAutoConfiguration$WelcomePageHandlerMapping - Adding welcome page: class path resource [static/index.html]
2019-01-26 11:44:31.090 [main] INFO  o.s.jmx.export.annotation.AnnotationMBeanExporter - Registering beans for JMX exposure on startup
2019-01-26 11:44:31.109 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2019-01-26 11:44:31.120 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2019-01-26 11:44:31.134 [main] INFO  org.apache.tomcat.util.net.NioSelectorPool - Using a shared selector for servlet write/read
2019-01-26 11:44:31.151 [main] INFO  o.s.b.c.e.tomcat.TomcatEmbeddedServletContainer - Tomcat started on port(s): 8080 (http)
2019-01-26 11:44:31.156 [main] INFO  com.yun.YunEbStockApplication - Started YunEbStockApplication in 4.235 seconds (JVM running for 5.386)
2019-01-26 11:44:40.026 [http-nio-8080-exec-1] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring FrameworkServlet 'dispatcherServlet'
2019-01-26 11:44:40.027 [http-nio-8080-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - FrameworkServlet 'dispatcherServlet': initialization started
2019-01-26 11:44:40.048 [http-nio-8080-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - FrameworkServlet 'dispatcherServlet': initialization completed in 21 ms
2019-01-26 11:44:40.378 [http-nio-8080-exec-1] DEBUG com.yun.product.dao.ProductDao.productListForStock - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where prod_id not in(select prod_id from product_stock) 
2019-01-26 11:44:40.402 [http-nio-8080-exec-1] DEBUG com.yun.product.dao.ProductDao.productListForStock - ==> Parameters: 
2019-01-26 11:44:40.427 [http-nio-8080-exec-1] DEBUG com.yun.product.dao.ProductDao.productListForStock - <==      Total: 5
2019-01-26 11:44:40.516 [http-nio-8080-exec-1] ERROR org.thymeleaf.TemplateEngine - [THYMELEAF][http-nio-8080-exec-1] Exception processing template "productListForStock": Error resolving template "productListForStock", template might not exist or might not be accessible by any of the configured Template Resolvers
2019-01-26 11:44:40.520 [http-nio-8080-exec-1] ERROR o.a.c.c.C.[.[localhost].[/].[dispatcherServlet] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is org.thymeleaf.exceptions.TemplateInputException: Error resolving template "productListForStock", template might not exist or might not be accessible by any of the configured Template Resolvers] with root cause
org.thymeleaf.exceptions.TemplateInputException: Error resolving template "productListForStock", template might not exist or might not be accessible by any of the configured Template Resolvers
	at org.thymeleaf.TemplateRepository.getTemplate(TemplateRepository.java:246)
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1104)
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1060)
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1011)
	at org.thymeleaf.spring4.view.ThymeleafView.renderFragment(ThymeleafView.java:335)
	at org.thymeleaf.spring4.view.ThymeleafView.render(ThymeleafView.java:190)
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1286)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1041)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:984)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:901)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:970)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:872)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:661)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:846)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:742)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HttpPutFormContentFilter.doFilterInternal(HttpPutFormContentFilter.java:108)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:81)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:197)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:199)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:478)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:140)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:81)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:803)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1459)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:745)
2019-01-26 11:44:52.351 [http-nio-8080-exec-10] DEBUG com.yun.stock.controller.ProductStockController - 跳转到物品库存查询控制器
2019-01-26 11:44:52.404 [http-nio-8080-exec-10] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==>  Preparing: select count(*) from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 
2019-01-26 11:44:52.404 [http-nio-8080-exec-10] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==> Parameters: 
2019-01-26 11:44:52.405 [http-nio-8080-exec-10] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - <==      Total: 1
2019-01-26 11:44:52.407 [http-nio-8080-exec-10] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==>  Preparing: select ps.prod_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 order by p.prod_id,pp.prod_param_id limit ?,? 
2019-01-26 11:44:52.407 [http-nio-8080-exec-10] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==> Parameters: 0(Integer), 5(Integer)
2019-01-26 11:44:52.409 [http-nio-8080-exec-10] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - <==      Total: 0
2019-01-26 11:44:52.409 [http-nio-8080-exec-10] DEBUG com.yun.stock.controller.ProductStockController - 转到物品库存页面
2019-01-26 11:44:57.824 [http-nio-8080-exec-6] DEBUG com.yun.product.dao.ProductDao.productListForStock - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where prod_id not in(select prod_id from product_stock) 
2019-01-26 11:44:57.825 [http-nio-8080-exec-6] DEBUG com.yun.product.dao.ProductDao.productListForStock - ==> Parameters: 
2019-01-26 11:44:57.836 [http-nio-8080-exec-6] DEBUG com.yun.product.dao.ProductDao.productListForStock - <==      Total: 5
2019-01-26 11:44:57.840 [http-nio-8080-exec-6] ERROR org.thymeleaf.TemplateEngine - [THYMELEAF][http-nio-8080-exec-6] Exception processing template "productListForStock": Error resolving template "productListForStock", template might not exist or might not be accessible by any of the configured Template Resolvers
2019-01-26 11:44:57.840 [http-nio-8080-exec-6] ERROR o.a.c.c.C.[.[localhost].[/].[dispatcherServlet] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is org.thymeleaf.exceptions.TemplateInputException: Error resolving template "productListForStock", template might not exist or might not be accessible by any of the configured Template Resolvers] with root cause
org.thymeleaf.exceptions.TemplateInputException: Error resolving template "productListForStock", template might not exist or might not be accessible by any of the configured Template Resolvers
	at org.thymeleaf.TemplateRepository.getTemplate(TemplateRepository.java:246)
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1104)
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1060)
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1011)
	at org.thymeleaf.spring4.view.ThymeleafView.renderFragment(ThymeleafView.java:335)
	at org.thymeleaf.spring4.view.ThymeleafView.render(ThymeleafView.java:190)
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1286)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1041)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:984)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:901)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:970)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:872)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:661)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:846)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:742)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HttpPutFormContentFilter.doFilterInternal(HttpPutFormContentFilter.java:108)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:81)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:197)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:199)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:478)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:140)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:81)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:803)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1459)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:745)
2019-01-26 11:45:56.849 [main] INFO  com.yun.YunEbStockApplication - Starting YunEbStockApplication on USER-20181202BJ with PID 5988 (E:\workspace\yun-eb-stock\target\classes started by Administrator in E:\workspace\yun-eb-stock)
2019-01-26 11:45:56.854 [main] DEBUG com.yun.YunEbStockApplication - Running with Spring Boot v1.5.9.RELEASE, Spring v4.3.13.RELEASE
2019-01-26 11:45:56.854 [main] INFO  com.yun.YunEbStockApplication - No active profile set, falling back to default profiles: default
2019-01-26 11:45:57.156 [background-preinit] INFO  org.hibernate.validator.internal.util.Version - HV000001: Hibernate Validator 5.3.6.Final
2019-01-26 11:45:57.491 [main] INFO  o.s.b.c.e.AnnotationConfigEmbeddedWebApplicationContext - Refreshing org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@6a28ffa4: startup date [Sat Jan 26 11:45:57 CST 2019]; root of context hierarchy
2019-01-26 11:45:58.910 [main] INFO  o.s.b.c.e.tomcat.TomcatEmbeddedServletContainer - Tomcat initialized with port(s): 8080 (http)
2019-01-26 11:45:58.920 [main] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2019-01-26 11:45:58.922 [main] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet Engine: Apache Tomcat/8.5.23
2019-01-26 11:45:59.026 [localhost-startStop-1] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2019-01-26 11:45:59.026 [localhost-startStop-1] INFO  org.springframework.web.context.ContextLoader - Root WebApplicationContext: initialization completed in 1535 ms
2019-01-26 11:45:59.163 [localhost-startStop-1] INFO  o.s.boot.web.servlet.ServletRegistrationBean - Mapping servlet: 'dispatcherServlet' to [/]
2019-01-26 11:45:59.169 [localhost-startStop-1] INFO  o.s.boot.web.servlet.FilterRegistrationBean - Mapping filter: 'characterEncodingFilter' to: [/*]
2019-01-26 11:45:59.170 [localhost-startStop-1] INFO  o.s.boot.web.servlet.FilterRegistrationBean - Mapping filter: 'hiddenHttpMethodFilter' to: [/*]
2019-01-26 11:45:59.170 [localhost-startStop-1] INFO  o.s.boot.web.servlet.FilterRegistrationBean - Mapping filter: 'httpPutFormContentFilter' to: [/*]
2019-01-26 11:45:59.170 [localhost-startStop-1] INFO  o.s.boot.web.servlet.FilterRegistrationBean - Mapping filter: 'requestContextFilter' to: [/*]
2019-01-26 11:45:59.944 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerAdapter - Looking for @ControllerAdvice: org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@6a28ffa4: startup date [Sat Jan 26 11:45:57 CST 2019]; root of context hierarchy
2019-01-26 11:46:00.000 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productSave]}" onto public java.lang.String com.yun.product.controller.ProductController.productSave(com.yun.product.model.Product)
2019-01-26 11:46:00.002 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productPreAdd]}" onto public java.lang.String com.yun.product.controller.ProductController.productPreAdd()
2019-01-26 11:46:00.002 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productList]}" onto public java.lang.String com.yun.product.controller.ProductController.productList(org.springframework.ui.Model,java.lang.String,java.lang.String,java.lang.String,java.lang.String)
2019-01-26 11:46:00.002 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productDelete]}" onto public java.lang.String com.yun.product.controller.ProductController.productDelete(int)
2019-01-26 11:46:00.003 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productPreUpdate]}" onto public java.lang.String com.yun.product.controller.ProductController.productPreUpdate(int,org.springframework.ui.Model)
2019-01-26 11:46:00.003 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productUpdate]}" onto public java.lang.String com.yun.product.controller.ProductController.productUpdate(com.yun.product.model.Product)
2019-01-26 11:46:00.005 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productListForAutoComplete]}" onto public java.util.List<com.yun.product.model.Product> com.yun.product.controller.ProductController.productListForAutoComplete(java.lang.String)
2019-01-26 11:46:00.005 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productListForStock]}" onto public java.util.List<com.yun.product.model.Product> com.yun.product.controller.ProductController.productListForStock()
2019-01-26 11:46:00.006 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/prodParamDelete]}" onto public java.lang.String com.yun.product.controller.ProductParamController.prodParamDelete(int)
2019-01-26 11:46:00.007 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/prodParamSave]}" onto public java.lang.String com.yun.product.controller.ProductParamController.prodParamSave(com.yun.product.model.ProductParameter)
2019-01-26 11:46:00.007 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/prodParamList]}" onto public java.lang.String com.yun.product.controller.ProductParamController.prodParamList(int)
2019-01-26 11:46:00.007 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/prodParamPreAdd]}" onto public java.lang.String com.yun.product.controller.ProductParamController.prodParamPreAdd(int,org.springframework.ui.Model)
2019-01-26 11:46:00.010 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeList]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeList(org.springframework.ui.Model)
2019-01-26 11:46:00.011 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeTree]}" onto public java.util.List<com.yun.product.model.ProductType> com.yun.product.controller.ProductTypeController.productTypeTree()
2019-01-26 11:46:00.011 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeEdit]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeEdit()
2019-01-26 11:46:00.012 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeSave]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeSave(com.yun.product.model.ProductType)
2019-01-26 11:46:00.012 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeUpdate]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeUpdate(java.lang.Integer,org.springframework.ui.Model)
2019-01-26 11:46:00.013 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeUpdateSave]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeUpdateSave(com.yun.product.model.ProductType)
2019-01-26 11:46:00.013 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeDelete]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeDelete(java.lang.Integer,javax.servlet.http.HttpServletResponse) throws java.io.IOException
2019-01-26 11:46:00.014 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockSave]}" onto public java.lang.String com.yun.stock.controller.ProductStockController.productStockSave(com.yun.stock.model.ProductStock)
2019-01-26 11:46:00.014 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockList]}" onto public java.lang.String com.yun.stock.controller.ProductStockController.productStocklist(java.lang.String,java.lang.String,org.springframework.ui.Model)
2019-01-26 11:46:00.015 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockPreAdd]}" onto public java.lang.String com.yun.stock.controller.ProductStockController.productStockPreAdd()
2019-01-26 11:46:00.015 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/main]}" onto public java.lang.String com.yun.user.controller.MainController.main()
2019-01-26 11:46:00.017 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/userList]}" onto public java.lang.String com.yun.user.controller.UserController.userList(org.springframework.ui.Model)
2019-01-26 11:46:00.017 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/login]}" onto public java.lang.String com.yun.user.controller.UserController.login(java.lang.String,java.lang.String,javax.servlet.http.HttpSession)
2019-01-26 11:46:00.017 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/userEdit]}" onto public java.lang.String com.yun.user.controller.UserController.userEdit()
2019-01-26 11:46:00.018 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/userSave]}" onto public java.lang.String com.yun.user.controller.UserController.userSave(com.yun.user.model.UserInfo)
2019-01-26 11:46:00.018 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/deleteUserInfo]}" onto public java.lang.String com.yun.user.controller.UserController.userDelete(int)
2019-01-26 11:46:00.021 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/error]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> org.springframework.boot.autoconfigure.web.BasicErrorController.error(javax.servlet.http.HttpServletRequest)
2019-01-26 11:46:00.022 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/error],produces=[text/html]}" onto public org.springframework.web.servlet.ModelAndView org.springframework.boot.autoconfigure.web.BasicErrorController.errorHtml(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
2019-01-26 11:46:00.058 [main] INFO  o.s.web.servlet.handler.SimpleUrlHandlerMapping - Mapped URL path [/webjars/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-01-26 11:46:00.058 [main] INFO  o.s.web.servlet.handler.SimpleUrlHandlerMapping - Mapped URL path [/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-01-26 11:46:00.095 [main] INFO  o.s.web.servlet.handler.SimpleUrlHandlerMapping - Mapped URL path [/**/favicon.ico] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-01-26 11:46:00.387 [main] INFO  o.s.b.a.w.WebMvcAutoConfiguration$WelcomePageHandlerMapping - Adding welcome page: class path resource [static/index.html]
2019-01-26 11:46:00.640 [main] INFO  o.s.jmx.export.annotation.AnnotationMBeanExporter - Registering beans for JMX exposure on startup
2019-01-26 11:46:00.661 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2019-01-26 11:46:00.672 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2019-01-26 11:46:00.685 [main] INFO  org.apache.tomcat.util.net.NioSelectorPool - Using a shared selector for servlet write/read
2019-01-26 11:46:00.702 [main] INFO  o.s.b.c.e.tomcat.TomcatEmbeddedServletContainer - Tomcat started on port(s): 8080 (http)
2019-01-26 11:46:00.707 [main] INFO  com.yun.YunEbStockApplication - Started YunEbStockApplication in 4.326 seconds (JVM running for 5.514)
2019-01-26 11:46:07.980 [http-nio-8080-exec-1] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring FrameworkServlet 'dispatcherServlet'
2019-01-26 11:46:07.980 [http-nio-8080-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - FrameworkServlet 'dispatcherServlet': initialization started
2019-01-26 11:46:08.003 [http-nio-8080-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - FrameworkServlet 'dispatcherServlet': initialization completed in 23 ms
2019-01-26 11:46:13.358 [http-nio-8080-exec-9] DEBUG com.yun.stock.controller.ProductStockController - 跳转到物品库存查询控制器
2019-01-26 11:46:13.682 [http-nio-8080-exec-9] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==>  Preparing: select count(*) from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 
2019-01-26 11:46:13.702 [http-nio-8080-exec-9] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==> Parameters: 
2019-01-26 11:46:13.713 [http-nio-8080-exec-9] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - <==      Total: 1
2019-01-26 11:46:13.721 [http-nio-8080-exec-9] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==>  Preparing: select ps.prod_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 order by p.prod_id,pp.prod_param_id limit ?,? 
2019-01-26 11:46:13.722 [http-nio-8080-exec-9] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==> Parameters: 0(Integer), 5(Integer)
2019-01-26 11:46:13.723 [http-nio-8080-exec-9] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - <==      Total: 0
2019-01-26 11:46:13.723 [http-nio-8080-exec-9] DEBUG com.yun.stock.controller.ProductStockController - 转到物品库存页面
2019-01-26 11:46:16.665 [http-nio-8080-exec-2] DEBUG com.yun.product.dao.ProductDao.productListForStock - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where prod_id not in(select prod_id from product_stock) 
2019-01-26 11:46:16.666 [http-nio-8080-exec-2] DEBUG com.yun.product.dao.ProductDao.productListForStock - ==> Parameters: 
2019-01-26 11:46:16.671 [http-nio-8080-exec-2] DEBUG com.yun.product.dao.ProductDao.productListForStock - <==      Total: 5
2019-01-26 11:54:26.817 [http-nio-8080-exec-8] DEBUG com.yun.stock.controller.ProductStockController - 跳转到物品库存查询控制器
2019-01-26 11:54:26.820 [http-nio-8080-exec-8] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==>  Preparing: select count(*) from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 
2019-01-26 11:54:26.820 [http-nio-8080-exec-8] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==> Parameters: 
2019-01-26 11:54:26.823 [http-nio-8080-exec-8] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - <==      Total: 1
2019-01-26 11:54:26.824 [http-nio-8080-exec-8] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==>  Preparing: select ps.prod_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 order by p.prod_id,pp.prod_param_id limit ?,? 
2019-01-26 11:54:26.825 [http-nio-8080-exec-8] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==> Parameters: 0(Integer), 5(Integer)
2019-01-26 11:54:26.827 [http-nio-8080-exec-8] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - <==      Total: 0
2019-01-26 11:54:26.828 [http-nio-8080-exec-8] DEBUG com.yun.stock.controller.ProductStockController - 转到物品库存页面
2019-01-26 11:54:34.810 [http-nio-8080-exec-5] DEBUG com.yun.product.dao.ProductDao.productListForStock - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where prod_id not in(select prod_id from product_stock) 
2019-01-26 11:54:34.811 [http-nio-8080-exec-5] DEBUG com.yun.product.dao.ProductDao.productListForStock - ==> Parameters: 
2019-01-26 11:54:34.818 [http-nio-8080-exec-5] DEBUG com.yun.product.dao.ProductDao.productListForStock - <==      Total: 5
2019-01-26 11:54:41.661 [http-nio-8080-exec-2] DEBUG com.yun.product.dao.ProductDao.productListForStock - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where prod_id not in(select prod_id from product_stock) 
2019-01-26 11:54:41.661 [http-nio-8080-exec-2] DEBUG com.yun.product.dao.ProductDao.productListForStock - ==> Parameters: 
2019-01-26 11:54:41.663 [http-nio-8080-exec-2] DEBUG com.yun.product.dao.ProductDao.productListForStock - <==      Total: 5
2019-01-26 11:54:53.154 [http-nio-8080-exec-6] DEBUG com.yun.product.dao.ProductDao.productListForStock - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where prod_id not in(select prod_id from product_stock) 
2019-01-26 11:54:53.156 [http-nio-8080-exec-6] DEBUG com.yun.product.dao.ProductDao.productListForStock - ==> Parameters: 
2019-01-26 11:54:53.163 [http-nio-8080-exec-6] DEBUG com.yun.product.dao.ProductDao.productListForStock - <==      Total: 5
2019-01-26 11:55:08.571 [http-nio-8080-exec-7] DEBUG com.yun.product.dao.ProductDao.productListForStock - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where prod_id not in(select prod_id from product_stock) 
2019-01-26 11:55:08.572 [http-nio-8080-exec-7] DEBUG com.yun.product.dao.ProductDao.productListForStock - ==> Parameters: 
2019-01-26 11:55:08.575 [http-nio-8080-exec-7] DEBUG com.yun.product.dao.ProductDao.productListForStock - <==      Total: 5
2019-01-26 11:55:30.714 [http-nio-8080-exec-6] DEBUG com.yun.stock.controller.ProductStockController - 跳转到物品库存查询控制器
2019-01-26 11:55:30.717 [http-nio-8080-exec-6] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==>  Preparing: select count(*) from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 
2019-01-26 11:55:30.718 [http-nio-8080-exec-6] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==> Parameters: 
2019-01-26 11:55:30.719 [http-nio-8080-exec-6] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - <==      Total: 1
2019-01-26 11:55:30.720 [http-nio-8080-exec-6] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==>  Preparing: select ps.prod_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 order by p.prod_id,pp.prod_param_id limit ?,? 
2019-01-26 11:55:30.721 [http-nio-8080-exec-6] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==> Parameters: 0(Integer), 5(Integer)
2019-01-26 11:55:30.723 [http-nio-8080-exec-6] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - <==      Total: 0
2019-01-26 11:55:30.724 [http-nio-8080-exec-6] DEBUG com.yun.stock.controller.ProductStockController - 转到物品库存页面
2019-01-26 11:55:34.041 [http-nio-8080-exec-9] DEBUG com.yun.product.dao.ProductDao.productListForStock - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where prod_id not in(select prod_id from product_stock) 
2019-01-26 11:55:34.042 [http-nio-8080-exec-9] DEBUG com.yun.product.dao.ProductDao.productListForStock - ==> Parameters: 
2019-01-26 11:55:34.045 [http-nio-8080-exec-9] DEBUG com.yun.product.dao.ProductDao.productListForStock - <==      Total: 5
2019-01-26 11:55:36.672 [http-nio-8080-exec-3] DEBUG com.yun.product.dao.ProductDao.productListForStock - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where prod_id not in(select prod_id from product_stock) 
2019-01-26 11:55:36.672 [http-nio-8080-exec-3] DEBUG com.yun.product.dao.ProductDao.productListForStock - ==> Parameters: 
2019-01-26 11:55:36.675 [http-nio-8080-exec-3] DEBUG com.yun.product.dao.ProductDao.productListForStock - <==      Total: 5
2019-01-26 11:55:43.379 [http-nio-8080-exec-5] DEBUG com.yun.product.dao.ProductDao.productListForStock - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where prod_id not in(select prod_id from product_stock) 
2019-01-26 11:55:43.381 [http-nio-8080-exec-5] DEBUG com.yun.product.dao.ProductDao.productListForStock - ==> Parameters: 
2019-01-26 11:55:43.386 [http-nio-8080-exec-5] DEBUG com.yun.product.dao.ProductDao.productListForStock - <==      Total: 5
2019-01-26 11:56:31.594 [http-nio-8080-exec-7] DEBUG com.yun.product.dao.ProductDao.productListForStock - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where prod_id not in(select prod_id from product_stock) 
2019-01-26 11:56:31.594 [http-nio-8080-exec-7] DEBUG com.yun.product.dao.ProductDao.productListForStock - ==> Parameters: 
2019-01-26 11:56:31.596 [http-nio-8080-exec-7] DEBUG com.yun.product.dao.ProductDao.productListForStock - <==      Total: 5
2019-01-26 11:57:09.948 [http-nio-8080-exec-10] DEBUG com.yun.product.dao.ProductDao.productListForStock - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where prod_id not in(select prod_id from product_stock) 
2019-01-26 11:57:09.952 [http-nio-8080-exec-10] DEBUG com.yun.product.dao.ProductDao.productListForStock - ==> Parameters: 
2019-01-26 11:57:09.956 [http-nio-8080-exec-10] DEBUG com.yun.product.dao.ProductDao.productListForStock - <==      Total: 5
2019-01-26 11:57:21.644 [http-nio-8080-exec-4] DEBUG com.yun.stock.controller.ProductStockController - 跳转到物品库存查询控制器
2019-01-26 11:57:21.649 [http-nio-8080-exec-4] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==>  Preparing: select count(*) from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 
2019-01-26 11:57:21.652 [http-nio-8080-exec-4] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==> Parameters: 
2019-01-26 11:57:21.656 [http-nio-8080-exec-4] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - <==      Total: 1
2019-01-26 11:57:21.657 [http-nio-8080-exec-4] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==>  Preparing: select ps.prod_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 order by p.prod_id,pp.prod_param_id limit ?,? 
2019-01-26 11:57:21.658 [http-nio-8080-exec-4] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==> Parameters: 0(Integer), 5(Integer)
2019-01-26 11:57:21.659 [http-nio-8080-exec-4] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - <==      Total: 0
2019-01-26 11:57:21.660 [http-nio-8080-exec-4] DEBUG com.yun.stock.controller.ProductStockController - 转到物品库存页面
2019-01-26 11:57:39.469 [http-nio-8080-exec-1] INFO  com.yun.product.controller.ProductTypeController - 跳转到stock/productTypeList.html页面
2019-01-26 11:57:39.562 [http-nio-8080-exec-9] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - ==>  Preparing: select p1.prod_type_id,p1.prod_type_name,p1.parent_id,p2.prod_type_id parent_type_id,p2.prod_type_name parent_type_name from product_type p1 LEFT JOIN product_type p2 on p1.parent_id=p2.prod_type_id where p1.parent_id=? 
2019-01-26 11:57:39.562 [http-nio-8080-exec-9] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - ==> Parameters: 0(Integer)
2019-01-26 11:57:39.568 [http-nio-8080-exec-9] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - ====>  Preparing: select p1.prod_type_id,p1.prod_type_name,p1.parent_id,p2.prod_type_id parent_type_id,p2.prod_type_name parent_type_name from product_type p1 LEFT JOIN product_type p2 on p1.parent_id=p2.prod_type_id where p1.parent_id=? 
2019-01-26 11:57:39.568 [http-nio-8080-exec-9] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - ====> Parameters: 29(Integer)
2019-01-26 11:57:39.570 [http-nio-8080-exec-9] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - ======>  Preparing: select p1.prod_type_id,p1.prod_type_name,p1.parent_id,p2.prod_type_id parent_type_id,p2.prod_type_name parent_type_name from product_type p1 LEFT JOIN product_type p2 on p1.parent_id=p2.prod_type_id where p1.parent_id=? 
2019-01-26 11:57:39.570 [http-nio-8080-exec-9] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - ======> Parameters: 30(Integer)
2019-01-26 11:57:39.571 [http-nio-8080-exec-9] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - <======      Total: 0
2019-01-26 11:57:39.571 [http-nio-8080-exec-9] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - <====      Total: 1
2019-01-26 11:57:39.572 [http-nio-8080-exec-9] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - ====>  Preparing: select p1.prod_type_id,p1.prod_type_name,p1.parent_id,p2.prod_type_id parent_type_id,p2.prod_type_name parent_type_name from product_type p1 LEFT JOIN product_type p2 on p1.parent_id=p2.prod_type_id where p1.parent_id=? 
2019-01-26 11:57:39.572 [http-nio-8080-exec-9] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - ====> Parameters: 39(Integer)
2019-01-26 11:57:39.573 [http-nio-8080-exec-9] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - ======>  Preparing: select p1.prod_type_id,p1.prod_type_name,p1.parent_id,p2.prod_type_id parent_type_id,p2.prod_type_name parent_type_name from product_type p1 LEFT JOIN product_type p2 on p1.parent_id=p2.prod_type_id where p1.parent_id=? 
2019-01-26 11:57:39.573 [http-nio-8080-exec-9] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - ======> Parameters: 41(Integer)
2019-01-26 11:57:39.574 [http-nio-8080-exec-9] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - <======      Total: 0
2019-01-26 11:57:39.575 [http-nio-8080-exec-9] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - <====      Total: 1
2019-01-26 11:57:39.575 [http-nio-8080-exec-9] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - <==      Total: 2
2019-01-26 11:57:40.794 [http-nio-8080-exec-3] DEBUG c.yun.product.dao.ProductDao.findProductRowByParam - ==>  Preparing: select count(*) from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 
2019-01-26 11:57:40.794 [http-nio-8080-exec-3] DEBUG c.yun.product.dao.ProductDao.findProductRowByParam - ==> Parameters: 
2019-01-26 11:57:40.795 [http-nio-8080-exec-3] DEBUG c.yun.product.dao.ProductDao.findProductRowByParam - <==      Total: 1
2019-01-26 11:57:40.798 [http-nio-8080-exec-3] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 order by prod_id limit ?,? 
2019-01-26 11:57:40.798 [http-nio-8080-exec-3] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==> Parameters: 0(Integer), 5(Integer)
2019-01-26 11:57:40.800 [http-nio-8080-exec-3] DEBUG com.yun.product.dao.ProductDao.findProductByParam - <==      Total: 4
2019-01-26 11:57:40.801 [http-nio-8080-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 11:57:40.801 [http-nio-8080-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 2(Integer)
2019-01-26 11:57:40.802 [http-nio-8080-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 0
2019-01-26 11:57:40.802 [http-nio-8080-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 11:57:40.802 [http-nio-8080-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 3(Integer)
2019-01-26 11:57:40.803 [http-nio-8080-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 0
2019-01-26 11:57:40.803 [http-nio-8080-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 11:57:40.803 [http-nio-8080-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 4(Integer)
2019-01-26 11:57:40.804 [http-nio-8080-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 2
2019-01-26 11:57:40.805 [http-nio-8080-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 11:57:40.805 [http-nio-8080-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 5(Integer)
2019-01-26 11:57:40.806 [http-nio-8080-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-01-26 11:59:15.116 [http-nio-8080-exec-6] DEBUG com.yun.user.dao.UserInfoDao.findUserInfoList - ==>  Preparing: select * from user_info 
2019-01-26 11:59:15.117 [http-nio-8080-exec-6] DEBUG com.yun.user.dao.UserInfoDao.findUserInfoList - ==> Parameters: 
2019-01-26 11:59:15.121 [http-nio-8080-exec-6] DEBUG com.yun.user.dao.UserInfoDao.findUserInfoList - <==      Total: 2
2019-01-26 11:59:19.137 [http-nio-8080-exec-2] INFO  com.yun.product.controller.ProductTypeController - 跳转到stock/productTypeList.html页面
2019-01-26 11:59:19.205 [http-nio-8080-exec-8] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - ==>  Preparing: select p1.prod_type_id,p1.prod_type_name,p1.parent_id,p2.prod_type_id parent_type_id,p2.prod_type_name parent_type_name from product_type p1 LEFT JOIN product_type p2 on p1.parent_id=p2.prod_type_id where p1.parent_id=? 
2019-01-26 11:59:19.205 [http-nio-8080-exec-8] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - ==> Parameters: 0(Integer)
2019-01-26 11:59:19.207 [http-nio-8080-exec-8] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - ====>  Preparing: select p1.prod_type_id,p1.prod_type_name,p1.parent_id,p2.prod_type_id parent_type_id,p2.prod_type_name parent_type_name from product_type p1 LEFT JOIN product_type p2 on p1.parent_id=p2.prod_type_id where p1.parent_id=? 
2019-01-26 11:59:19.208 [http-nio-8080-exec-8] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - ====> Parameters: 29(Integer)
2019-01-26 11:59:19.209 [http-nio-8080-exec-8] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - ======>  Preparing: select p1.prod_type_id,p1.prod_type_name,p1.parent_id,p2.prod_type_id parent_type_id,p2.prod_type_name parent_type_name from product_type p1 LEFT JOIN product_type p2 on p1.parent_id=p2.prod_type_id where p1.parent_id=? 
2019-01-26 11:59:19.210 [http-nio-8080-exec-8] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - ======> Parameters: 30(Integer)
2019-01-26 11:59:19.212 [http-nio-8080-exec-8] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - <======      Total: 0
2019-01-26 11:59:19.213 [http-nio-8080-exec-8] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - <====      Total: 1
2019-01-26 11:59:19.215 [http-nio-8080-exec-8] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - ====>  Preparing: select p1.prod_type_id,p1.prod_type_name,p1.parent_id,p2.prod_type_id parent_type_id,p2.prod_type_name parent_type_name from product_type p1 LEFT JOIN product_type p2 on p1.parent_id=p2.prod_type_id where p1.parent_id=? 
2019-01-26 11:59:19.215 [http-nio-8080-exec-8] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - ====> Parameters: 39(Integer)
2019-01-26 11:59:19.218 [http-nio-8080-exec-8] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - ======>  Preparing: select p1.prod_type_id,p1.prod_type_name,p1.parent_id,p2.prod_type_id parent_type_id,p2.prod_type_name parent_type_name from product_type p1 LEFT JOIN product_type p2 on p1.parent_id=p2.prod_type_id where p1.parent_id=? 
2019-01-26 11:59:19.218 [http-nio-8080-exec-8] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - ======> Parameters: 41(Integer)
2019-01-26 11:59:19.219 [http-nio-8080-exec-8] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - <======      Total: 0
2019-01-26 11:59:19.220 [http-nio-8080-exec-8] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - <====      Total: 1
2019-01-26 11:59:19.220 [http-nio-8080-exec-8] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - <==      Total: 2
2019-01-26 11:59:21.336 [http-nio-8080-exec-7] DEBUG c.yun.product.dao.ProductDao.findProductRowByParam - ==>  Preparing: select count(*) from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 
2019-01-26 11:59:21.337 [http-nio-8080-exec-7] DEBUG c.yun.product.dao.ProductDao.findProductRowByParam - ==> Parameters: 
2019-01-26 11:59:21.341 [http-nio-8080-exec-7] DEBUG c.yun.product.dao.ProductDao.findProductRowByParam - <==      Total: 1
2019-01-26 11:59:21.351 [http-nio-8080-exec-7] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 order by prod_id limit ?,? 
2019-01-26 11:59:21.354 [http-nio-8080-exec-7] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==> Parameters: 0(Integer), 5(Integer)
2019-01-26 11:59:21.358 [http-nio-8080-exec-7] DEBUG com.yun.product.dao.ProductDao.findProductByParam - <==      Total: 4
2019-01-26 11:59:21.359 [http-nio-8080-exec-7] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 11:59:21.359 [http-nio-8080-exec-7] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 2(Integer)
2019-01-26 11:59:21.360 [http-nio-8080-exec-7] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 0
2019-01-26 11:59:21.361 [http-nio-8080-exec-7] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 11:59:21.361 [http-nio-8080-exec-7] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 3(Integer)
2019-01-26 11:59:21.362 [http-nio-8080-exec-7] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 0
2019-01-26 11:59:21.363 [http-nio-8080-exec-7] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 11:59:21.363 [http-nio-8080-exec-7] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 4(Integer)
2019-01-26 11:59:21.365 [http-nio-8080-exec-7] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 2
2019-01-26 11:59:21.365 [http-nio-8080-exec-7] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 11:59:21.365 [http-nio-8080-exec-7] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 5(Integer)
2019-01-26 11:59:21.366 [http-nio-8080-exec-7] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-01-26 11:59:24.870 [http-nio-8080-exec-10] DEBUG com.yun.stock.controller.ProductStockController - 跳转到物品库存查询控制器
2019-01-26 11:59:24.873 [http-nio-8080-exec-10] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==>  Preparing: select count(*) from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 
2019-01-26 11:59:24.874 [http-nio-8080-exec-10] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==> Parameters: 
2019-01-26 11:59:24.876 [http-nio-8080-exec-10] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - <==      Total: 1
2019-01-26 11:59:24.880 [http-nio-8080-exec-10] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==>  Preparing: select ps.prod_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 order by p.prod_id,pp.prod_param_id limit ?,? 
2019-01-26 11:59:24.881 [http-nio-8080-exec-10] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==> Parameters: 0(Integer), 5(Integer)
2019-01-26 11:59:24.884 [http-nio-8080-exec-10] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - <==      Total: 0
2019-01-26 11:59:24.884 [http-nio-8080-exec-10] DEBUG com.yun.stock.controller.ProductStockController - 转到物品库存页面
2019-01-26 11:59:37.120 [http-nio-8080-exec-4] INFO  com.yun.product.controller.ProductTypeController - 跳转到stock/productTypeList.html页面
2019-01-26 11:59:37.185 [http-nio-8080-exec-1] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - ==>  Preparing: select p1.prod_type_id,p1.prod_type_name,p1.parent_id,p2.prod_type_id parent_type_id,p2.prod_type_name parent_type_name from product_type p1 LEFT JOIN product_type p2 on p1.parent_id=p2.prod_type_id where p1.parent_id=? 
2019-01-26 11:59:37.185 [http-nio-8080-exec-1] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - ==> Parameters: 0(Integer)
2019-01-26 11:59:37.187 [http-nio-8080-exec-1] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - ====>  Preparing: select p1.prod_type_id,p1.prod_type_name,p1.parent_id,p2.prod_type_id parent_type_id,p2.prod_type_name parent_type_name from product_type p1 LEFT JOIN product_type p2 on p1.parent_id=p2.prod_type_id where p1.parent_id=? 
2019-01-26 11:59:37.187 [http-nio-8080-exec-1] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - ====> Parameters: 29(Integer)
2019-01-26 11:59:37.188 [http-nio-8080-exec-1] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - ======>  Preparing: select p1.prod_type_id,p1.prod_type_name,p1.parent_id,p2.prod_type_id parent_type_id,p2.prod_type_name parent_type_name from product_type p1 LEFT JOIN product_type p2 on p1.parent_id=p2.prod_type_id where p1.parent_id=? 
2019-01-26 11:59:37.188 [http-nio-8080-exec-1] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - ======> Parameters: 30(Integer)
2019-01-26 11:59:37.189 [http-nio-8080-exec-1] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - <======      Total: 0
2019-01-26 11:59:37.190 [http-nio-8080-exec-1] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - <====      Total: 1
2019-01-26 11:59:37.191 [http-nio-8080-exec-1] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - ====>  Preparing: select p1.prod_type_id,p1.prod_type_name,p1.parent_id,p2.prod_type_id parent_type_id,p2.prod_type_name parent_type_name from product_type p1 LEFT JOIN product_type p2 on p1.parent_id=p2.prod_type_id where p1.parent_id=? 
2019-01-26 11:59:37.191 [http-nio-8080-exec-1] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - ====> Parameters: 39(Integer)
2019-01-26 11:59:37.192 [http-nio-8080-exec-1] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - ======>  Preparing: select p1.prod_type_id,p1.prod_type_name,p1.parent_id,p2.prod_type_id parent_type_id,p2.prod_type_name parent_type_name from product_type p1 LEFT JOIN product_type p2 on p1.parent_id=p2.prod_type_id where p1.parent_id=? 
2019-01-26 11:59:37.193 [http-nio-8080-exec-1] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - ======> Parameters: 41(Integer)
2019-01-26 11:59:37.196 [http-nio-8080-exec-1] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - <======      Total: 0
2019-01-26 11:59:37.197 [http-nio-8080-exec-1] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - <====      Total: 1
2019-01-26 11:59:37.197 [http-nio-8080-exec-1] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - <==      Total: 2
2019-01-26 11:59:38.326 [http-nio-8080-exec-9] DEBUG c.yun.product.dao.ProductDao.findProductRowByParam - ==>  Preparing: select count(*) from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 
2019-01-26 11:59:38.327 [http-nio-8080-exec-9] DEBUG c.yun.product.dao.ProductDao.findProductRowByParam - ==> Parameters: 
2019-01-26 11:59:38.331 [http-nio-8080-exec-9] DEBUG c.yun.product.dao.ProductDao.findProductRowByParam - <==      Total: 1
2019-01-26 11:59:38.337 [http-nio-8080-exec-9] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 order by prod_id limit ?,? 
2019-01-26 11:59:38.338 [http-nio-8080-exec-9] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==> Parameters: 0(Integer), 5(Integer)
2019-01-26 11:59:38.340 [http-nio-8080-exec-9] DEBUG com.yun.product.dao.ProductDao.findProductByParam - <==      Total: 4
2019-01-26 11:59:38.340 [http-nio-8080-exec-9] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 11:59:38.340 [http-nio-8080-exec-9] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 2(Integer)
2019-01-26 11:59:38.342 [http-nio-8080-exec-9] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 0
2019-01-26 11:59:38.342 [http-nio-8080-exec-9] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 11:59:38.343 [http-nio-8080-exec-9] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 3(Integer)
2019-01-26 11:59:38.344 [http-nio-8080-exec-9] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 0
2019-01-26 11:59:38.345 [http-nio-8080-exec-9] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 11:59:38.345 [http-nio-8080-exec-9] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 4(Integer)
2019-01-26 11:59:38.347 [http-nio-8080-exec-9] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 2
2019-01-26 11:59:38.347 [http-nio-8080-exec-9] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 11:59:38.348 [http-nio-8080-exec-9] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 5(Integer)
2019-01-26 11:59:38.349 [http-nio-8080-exec-9] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-01-26 11:59:43.304 [http-nio-8080-exec-3] DEBUG com.yun.stock.controller.ProductStockController - 跳转到物品库存查询控制器
2019-01-26 11:59:43.308 [http-nio-8080-exec-3] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==>  Preparing: select count(*) from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 
2019-01-26 11:59:43.309 [http-nio-8080-exec-3] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==> Parameters: 
2019-01-26 11:59:43.311 [http-nio-8080-exec-3] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - <==      Total: 1
2019-01-26 11:59:43.313 [http-nio-8080-exec-3] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==>  Preparing: select ps.prod_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 order by p.prod_id,pp.prod_param_id limit ?,? 
2019-01-26 11:59:43.314 [http-nio-8080-exec-3] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==> Parameters: 0(Integer), 5(Integer)
2019-01-26 11:59:43.316 [http-nio-8080-exec-3] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - <==      Total: 0
2019-01-26 11:59:43.317 [http-nio-8080-exec-3] DEBUG com.yun.stock.controller.ProductStockController - 转到物品库存页面
2019-01-26 12:01:25.396 [http-nio-8080-exec-9] DEBUG com.yun.stock.controller.ProductStockController - 跳转到物品库存查询控制器
2019-01-26 12:01:25.403 [http-nio-8080-exec-9] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==>  Preparing: select count(*) from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 
2019-01-26 12:01:25.404 [http-nio-8080-exec-9] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==> Parameters: 
2019-01-26 12:01:25.407 [http-nio-8080-exec-9] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - <==      Total: 1
2019-01-26 12:01:25.407 [http-nio-8080-exec-9] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==>  Preparing: select ps.prod_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 order by p.prod_id,pp.prod_param_id limit ?,? 
2019-01-26 12:01:25.408 [http-nio-8080-exec-9] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==> Parameters: 0(Integer), 5(Integer)
2019-01-26 12:01:25.409 [http-nio-8080-exec-9] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - <==      Total: 0
2019-01-26 12:01:25.409 [http-nio-8080-exec-9] DEBUG com.yun.stock.controller.ProductStockController - 转到物品库存页面
2019-01-26 12:01:28.184 [http-nio-8080-exec-5] DEBUG com.yun.product.dao.ProductDao.productListForStock - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where prod_id not in(select prod_id from product_stock) 
2019-01-26 12:01:28.185 [http-nio-8080-exec-5] DEBUG com.yun.product.dao.ProductDao.productListForStock - ==> Parameters: 
2019-01-26 12:01:28.190 [http-nio-8080-exec-5] DEBUG com.yun.product.dao.ProductDao.productListForStock - <==      Total: 5
2019-01-26 12:15:22.121 [main] INFO  com.yun.YunEbStockApplication - Starting YunEbStockApplication on USER-20181202BJ with PID 2980 (E:\workspace\yun-eb-stock\target\classes started by Administrator in E:\workspace\yun-eb-stock)
2019-01-26 12:15:22.125 [main] DEBUG com.yun.YunEbStockApplication - Running with Spring Boot v1.5.9.RELEASE, Spring v4.3.13.RELEASE
2019-01-26 12:15:22.125 [main] INFO  com.yun.YunEbStockApplication - No active profile set, falling back to default profiles: default
2019-01-26 12:15:22.764 [main] INFO  o.s.b.c.e.AnnotationConfigEmbeddedWebApplicationContext - Refreshing org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@6a28ffa4: startup date [Sat Jan 26 12:15:22 CST 2019]; root of context hierarchy
2019-01-26 12:15:22.859 [background-preinit] INFO  org.hibernate.validator.internal.util.Version - HV000001: Hibernate Validator 5.3.6.Final
2019-01-26 12:15:24.291 [main] INFO  o.s.b.c.e.tomcat.TomcatEmbeddedServletContainer - Tomcat initialized with port(s): 8080 (http)
2019-01-26 12:15:24.301 [main] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2019-01-26 12:15:24.302 [main] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet Engine: Apache Tomcat/8.5.23
2019-01-26 12:15:24.414 [localhost-startStop-1] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2019-01-26 12:15:24.415 [localhost-startStop-1] INFO  org.springframework.web.context.ContextLoader - Root WebApplicationContext: initialization completed in 1651 ms
2019-01-26 12:15:24.567 [localhost-startStop-1] INFO  o.s.boot.web.servlet.ServletRegistrationBean - Mapping servlet: 'dispatcherServlet' to [/]
2019-01-26 12:15:24.574 [localhost-startStop-1] INFO  o.s.boot.web.servlet.FilterRegistrationBean - Mapping filter: 'characterEncodingFilter' to: [/*]
2019-01-26 12:15:24.574 [localhost-startStop-1] INFO  o.s.boot.web.servlet.FilterRegistrationBean - Mapping filter: 'hiddenHttpMethodFilter' to: [/*]
2019-01-26 12:15:24.575 [localhost-startStop-1] INFO  o.s.boot.web.servlet.FilterRegistrationBean - Mapping filter: 'httpPutFormContentFilter' to: [/*]
2019-01-26 12:15:24.575 [localhost-startStop-1] INFO  o.s.boot.web.servlet.FilterRegistrationBean - Mapping filter: 'requestContextFilter' to: [/*]
2019-01-26 12:15:25.331 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerAdapter - Looking for @ControllerAdvice: org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@6a28ffa4: startup date [Sat Jan 26 12:15:22 CST 2019]; root of context hierarchy
2019-01-26 12:15:25.390 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productSave]}" onto public java.lang.String com.yun.product.controller.ProductController.productSave(com.yun.product.model.Product)
2019-01-26 12:15:25.391 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productPreAdd]}" onto public java.lang.String com.yun.product.controller.ProductController.productPreAdd()
2019-01-26 12:15:25.392 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productList]}" onto public java.lang.String com.yun.product.controller.ProductController.productList(org.springframework.ui.Model,java.lang.String,java.lang.String,java.lang.String,java.lang.String)
2019-01-26 12:15:25.392 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productDelete]}" onto public java.lang.String com.yun.product.controller.ProductController.productDelete(int)
2019-01-26 12:15:25.392 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productPreUpdate]}" onto public java.lang.String com.yun.product.controller.ProductController.productPreUpdate(int,org.springframework.ui.Model)
2019-01-26 12:15:25.392 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productUpdate]}" onto public java.lang.String com.yun.product.controller.ProductController.productUpdate(com.yun.product.model.Product)
2019-01-26 12:15:25.393 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productListForAutoComplete]}" onto public java.util.List<com.yun.product.model.Product> com.yun.product.controller.ProductController.productListForAutoComplete(java.lang.String)
2019-01-26 12:15:25.393 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productListForStock]}" onto public java.util.List<com.yun.product.model.Product> com.yun.product.controller.ProductController.productListForStock()
2019-01-26 12:15:25.394 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/prodParamDelete]}" onto public java.lang.String com.yun.product.controller.ProductParamController.prodParamDelete(int)
2019-01-26 12:15:25.394 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/prodParamSave]}" onto public java.lang.String com.yun.product.controller.ProductParamController.prodParamSave(com.yun.product.model.ProductParameter)
2019-01-26 12:15:25.394 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/prodParamList]}" onto public java.lang.String com.yun.product.controller.ProductParamController.prodParamList(int)
2019-01-26 12:15:25.394 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/prodParamPreAdd]}" onto public java.lang.String com.yun.product.controller.ProductParamController.prodParamPreAdd(int,org.springframework.ui.Model)
2019-01-26 12:15:25.397 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeList]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeList(org.springframework.ui.Model)
2019-01-26 12:15:25.397 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeTree]}" onto public java.util.List<com.yun.product.model.ProductType> com.yun.product.controller.ProductTypeController.productTypeTree()
2019-01-26 12:15:25.398 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeUpdate]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeUpdate(java.lang.Integer,org.springframework.ui.Model)
2019-01-26 12:15:25.398 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeUpdateSave]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeUpdateSave(com.yun.product.model.ProductType)
2019-01-26 12:15:25.398 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeDelete]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeDelete(java.lang.Integer,javax.servlet.http.HttpServletResponse) throws java.io.IOException
2019-01-26 12:15:25.398 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeEdit]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeEdit()
2019-01-26 12:15:25.398 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeSave]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeSave(com.yun.product.model.ProductType)
2019-01-26 12:15:25.399 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockPreAdd]}" onto public java.lang.String com.yun.stock.controller.ProductStockController.productStockPreAdd()
2019-01-26 12:15:25.399 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockSave]}" onto public java.lang.String com.yun.stock.controller.ProductStockController.productStockSave(com.yun.stock.model.ProductStock)
2019-01-26 12:15:25.399 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockList]}" onto public java.lang.String com.yun.stock.controller.ProductStockController.productStocklist(java.lang.String,java.lang.String,org.springframework.ui.Model)
2019-01-26 12:15:25.400 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/main]}" onto public java.lang.String com.yun.user.controller.MainController.main()
2019-01-26 12:15:25.401 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/userList]}" onto public java.lang.String com.yun.user.controller.UserController.userList(org.springframework.ui.Model)
2019-01-26 12:15:25.401 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/login]}" onto public java.lang.String com.yun.user.controller.UserController.login(java.lang.String,java.lang.String,javax.servlet.http.HttpSession)
2019-01-26 12:15:25.401 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/userEdit]}" onto public java.lang.String com.yun.user.controller.UserController.userEdit()
2019-01-26 12:15:25.401 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/userSave]}" onto public java.lang.String com.yun.user.controller.UserController.userSave(com.yun.user.model.UserInfo)
2019-01-26 12:15:25.401 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/deleteUserInfo]}" onto public java.lang.String com.yun.user.controller.UserController.userDelete(int)
2019-01-26 12:15:25.404 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/error]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> org.springframework.boot.autoconfigure.web.BasicErrorController.error(javax.servlet.http.HttpServletRequest)
2019-01-26 12:15:25.405 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/error],produces=[text/html]}" onto public org.springframework.web.servlet.ModelAndView org.springframework.boot.autoconfigure.web.BasicErrorController.errorHtml(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
2019-01-26 12:15:25.441 [main] INFO  o.s.web.servlet.handler.SimpleUrlHandlerMapping - Mapped URL path [/webjars/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-01-26 12:15:25.441 [main] INFO  o.s.web.servlet.handler.SimpleUrlHandlerMapping - Mapped URL path [/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-01-26 12:15:25.489 [main] INFO  o.s.web.servlet.handler.SimpleUrlHandlerMapping - Mapped URL path [/**/favicon.ico] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-01-26 12:15:25.825 [main] INFO  o.s.b.a.w.WebMvcAutoConfiguration$WelcomePageHandlerMapping - Adding welcome page: class path resource [static/index.html]
2019-01-26 12:15:26.044 [main] INFO  o.s.jmx.export.annotation.AnnotationMBeanExporter - Registering beans for JMX exposure on startup
2019-01-26 12:15:26.063 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2019-01-26 12:15:26.073 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2019-01-26 12:15:26.087 [main] INFO  org.apache.tomcat.util.net.NioSelectorPool - Using a shared selector for servlet write/read
2019-01-26 12:15:26.104 [main] INFO  o.s.b.c.e.tomcat.TomcatEmbeddedServletContainer - Tomcat started on port(s): 8080 (http)
2019-01-26 12:15:26.110 [main] INFO  com.yun.YunEbStockApplication - Started YunEbStockApplication in 4.412 seconds (JVM running for 5.609)
2019-01-26 12:17:54.603 [http-nio-8080-exec-1] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring FrameworkServlet 'dispatcherServlet'
2019-01-26 12:17:54.603 [http-nio-8080-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - FrameworkServlet 'dispatcherServlet': initialization started
2019-01-26 12:17:54.622 [http-nio-8080-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - FrameworkServlet 'dispatcherServlet': initialization completed in 19 ms
2019-01-26 12:17:55.977 [http-nio-8080-exec-8] DEBUG c.yun.product.dao.ProductDao.findProductRowByParam - ==>  Preparing: select count(*) from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 
2019-01-26 12:17:55.997 [http-nio-8080-exec-8] DEBUG c.yun.product.dao.ProductDao.findProductRowByParam - ==> Parameters: 
2019-01-26 12:17:56.006 [http-nio-8080-exec-8] DEBUG c.yun.product.dao.ProductDao.findProductRowByParam - <==      Total: 1
2019-01-26 12:17:56.016 [http-nio-8080-exec-8] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 order by prod_id limit ?,? 
2019-01-26 12:17:56.017 [http-nio-8080-exec-8] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==> Parameters: 0(Integer), 5(Integer)
2019-01-26 12:17:56.020 [http-nio-8080-exec-8] DEBUG com.yun.product.dao.ProductDao.findProductByParam - <==      Total: 4
2019-01-26 12:17:56.021 [http-nio-8080-exec-8] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 12:17:56.022 [http-nio-8080-exec-8] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 2(Integer)
2019-01-26 12:17:56.022 [http-nio-8080-exec-8] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 0
2019-01-26 12:17:56.023 [http-nio-8080-exec-8] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 12:17:56.023 [http-nio-8080-exec-8] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 3(Integer)
2019-01-26 12:17:56.024 [http-nio-8080-exec-8] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 0
2019-01-26 12:17:56.024 [http-nio-8080-exec-8] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 12:17:56.025 [http-nio-8080-exec-8] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 4(Integer)
2019-01-26 12:17:56.026 [http-nio-8080-exec-8] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 2
2019-01-26 12:17:56.027 [http-nio-8080-exec-8] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 12:17:56.027 [http-nio-8080-exec-8] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 5(Integer)
2019-01-26 12:17:56.028 [http-nio-8080-exec-8] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-01-26 12:17:57.610 [http-nio-8080-exec-9] DEBUG com.yun.stock.controller.ProductStockController - 跳转到物品库存查询控制器
2019-01-26 12:17:57.612 [http-nio-8080-exec-9] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==>  Preparing: select count(*) from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 
2019-01-26 12:17:57.613 [http-nio-8080-exec-9] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==> Parameters: 
2019-01-26 12:17:57.617 [http-nio-8080-exec-9] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - <==      Total: 1
2019-01-26 12:17:57.618 [http-nio-8080-exec-9] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==>  Preparing: select ps.prod_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 order by p.prod_id,pp.prod_param_id limit ?,? 
2019-01-26 12:17:57.619 [http-nio-8080-exec-9] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==> Parameters: 0(Integer), 5(Integer)
2019-01-26 12:17:57.620 [http-nio-8080-exec-9] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - <==      Total: 0
2019-01-26 12:17:57.624 [http-nio-8080-exec-9] DEBUG com.yun.stock.controller.ProductStockController - 转到物品库存页面
2019-01-26 12:18:00.097 [http-nio-8080-exec-1] DEBUG com.yun.product.dao.ProductDao.productListForStock - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where p.prod_state=0 and prod_id not in(select prod_id from product_stock) 
2019-01-26 12:18:00.099 [http-nio-8080-exec-1] DEBUG com.yun.product.dao.ProductDao.productListForStock - ==> Parameters: 
2019-01-26 12:18:00.101 [http-nio-8080-exec-1] DEBUG com.yun.product.dao.ProductDao.productListForStock - <==      Total: 4
2019-01-26 12:19:44.777 [http-nio-8080-exec-4] DEBUG com.yun.stock.controller.ProductStockController - 跳转到物品库存查询控制器
2019-01-26 12:19:44.781 [http-nio-8080-exec-4] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==>  Preparing: select count(*) from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 
2019-01-26 12:19:44.784 [http-nio-8080-exec-4] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==> Parameters: 
2019-01-26 12:19:44.788 [http-nio-8080-exec-4] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - <==      Total: 1
2019-01-26 12:19:44.789 [http-nio-8080-exec-4] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==>  Preparing: select ps.prod_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 order by p.prod_id,pp.prod_param_id limit ?,? 
2019-01-26 12:19:44.790 [http-nio-8080-exec-4] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==> Parameters: 0(Integer), 5(Integer)
2019-01-26 12:19:44.791 [http-nio-8080-exec-4] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - <==      Total: 0
2019-01-26 12:19:44.792 [http-nio-8080-exec-4] DEBUG com.yun.stock.controller.ProductStockController - 转到物品库存页面
2019-01-26 12:23:47.286 [http-nio-8080-exec-1] DEBUG com.yun.stock.controller.ProductStockController - 跳转到物品库存查询控制器
2019-01-26 12:23:47.290 [http-nio-8080-exec-1] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==>  Preparing: select count(*) from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 
2019-01-26 12:23:47.293 [http-nio-8080-exec-1] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==> Parameters: 
2019-01-26 12:23:47.296 [http-nio-8080-exec-1] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - <==      Total: 1
2019-01-26 12:23:47.298 [http-nio-8080-exec-1] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==>  Preparing: select ps.prod_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 order by p.prod_id,pp.prod_param_id limit ?,? 
2019-01-26 12:23:47.299 [http-nio-8080-exec-1] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==> Parameters: 0(Integer), 5(Integer)
2019-01-26 12:23:47.303 [http-nio-8080-exec-1] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - <==      Total: 0
2019-01-26 12:23:47.307 [http-nio-8080-exec-1] DEBUG com.yun.stock.controller.ProductStockController - 转到物品库存页面
2019-01-26 12:23:49.214 [http-nio-8080-exec-10] DEBUG com.yun.product.dao.ProductDao.productListForStock - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where p.prod_state=0 and prod_id not in(select prod_id from product_stock) 
2019-01-26 12:23:49.215 [http-nio-8080-exec-10] DEBUG com.yun.product.dao.ProductDao.productListForStock - ==> Parameters: 
2019-01-26 12:23:49.218 [http-nio-8080-exec-10] DEBUG com.yun.product.dao.ProductDao.productListForStock - <==      Total: 4
2019-01-26 12:24:02.840 [http-nio-8080-exec-3] DEBUG com.yun.product.dao.ProductDao.productListForStock - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where p.prod_state=0 and prod_id not in(select prod_id from product_stock) 
2019-01-26 12:24:02.847 [http-nio-8080-exec-3] DEBUG com.yun.product.dao.ProductDao.productListForStock - ==> Parameters: 
2019-01-26 12:24:02.856 [http-nio-8080-exec-3] DEBUG com.yun.product.dao.ProductDao.productListForStock - <==      Total: 4
2019-01-26 12:24:46.585 [http-nio-8080-exec-10] DEBUG com.yun.stock.controller.ProductStockController - 跳转到物品库存查询控制器
2019-01-26 12:24:46.588 [http-nio-8080-exec-10] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==>  Preparing: select count(*) from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 
2019-01-26 12:24:46.590 [http-nio-8080-exec-10] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==> Parameters: 
2019-01-26 12:24:46.594 [http-nio-8080-exec-10] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - <==      Total: 1
2019-01-26 12:24:46.595 [http-nio-8080-exec-10] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==>  Preparing: select ps.prod_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 order by p.prod_id,pp.prod_param_id limit ?,? 
2019-01-26 12:24:46.596 [http-nio-8080-exec-10] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==> Parameters: 0(Integer), 5(Integer)
2019-01-26 12:24:46.598 [http-nio-8080-exec-10] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - <==      Total: 0
2019-01-26 12:24:46.599 [http-nio-8080-exec-10] DEBUG com.yun.stock.controller.ProductStockController - 转到物品库存页面
2019-01-26 12:24:48.967 [http-nio-8080-exec-2] DEBUG com.yun.product.dao.ProductDao.productListForStock - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where p.prod_state=0 and prod_id not in(select prod_id from product_stock) 
2019-01-26 12:24:48.968 [http-nio-8080-exec-2] DEBUG com.yun.product.dao.ProductDao.productListForStock - ==> Parameters: 
2019-01-26 12:24:48.971 [http-nio-8080-exec-2] DEBUG com.yun.product.dao.ProductDao.productListForStock - <==      Total: 4
2019-01-26 12:25:33.754 [http-nio-8080-exec-6] DEBUG com.yun.stock.controller.ProductStockController - 跳转到物品库存查询控制器
2019-01-26 12:25:33.757 [http-nio-8080-exec-6] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==>  Preparing: select count(*) from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 
2019-01-26 12:25:33.758 [http-nio-8080-exec-6] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==> Parameters: 
2019-01-26 12:25:33.762 [http-nio-8080-exec-6] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - <==      Total: 1
2019-01-26 12:25:33.764 [http-nio-8080-exec-6] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==>  Preparing: select ps.prod_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 order by p.prod_id,pp.prod_param_id limit ?,? 
2019-01-26 12:25:33.765 [http-nio-8080-exec-6] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==> Parameters: 0(Integer), 5(Integer)
2019-01-26 12:25:33.767 [http-nio-8080-exec-6] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - <==      Total: 0
2019-01-26 12:25:33.768 [http-nio-8080-exec-6] DEBUG com.yun.stock.controller.ProductStockController - 转到物品库存页面
2019-01-26 12:25:36.559 [http-nio-8080-exec-7] DEBUG com.yun.product.dao.ProductDao.productListForStock - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where p.prod_state=0 and prod_id not in(select prod_id from product_stock) 
2019-01-26 12:25:36.559 [http-nio-8080-exec-7] DEBUG com.yun.product.dao.ProductDao.productListForStock - ==> Parameters: 
2019-01-26 12:25:36.561 [http-nio-8080-exec-7] DEBUG com.yun.product.dao.ProductDao.productListForStock - <==      Total: 4
2019-01-26 12:26:15.261 [http-nio-8080-exec-9] DEBUG com.yun.stock.controller.ProductStockController - 跳转到物品库存查询控制器
2019-01-26 12:26:15.265 [http-nio-8080-exec-9] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==>  Preparing: select count(*) from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 
2019-01-26 12:26:15.266 [http-nio-8080-exec-9] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==> Parameters: 
2019-01-26 12:26:15.267 [http-nio-8080-exec-9] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - <==      Total: 1
2019-01-26 12:26:15.268 [http-nio-8080-exec-9] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==>  Preparing: select ps.prod_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 order by p.prod_id,pp.prod_param_id limit ?,? 
2019-01-26 12:26:15.269 [http-nio-8080-exec-9] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==> Parameters: 0(Integer), 5(Integer)
2019-01-26 12:26:15.270 [http-nio-8080-exec-9] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - <==      Total: 0
2019-01-26 12:26:15.270 [http-nio-8080-exec-9] DEBUG com.yun.stock.controller.ProductStockController - 转到物品库存页面
2019-01-26 12:26:34.291 [http-nio-8080-exec-2] DEBUG com.yun.product.dao.ProductDao.productListForStock - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where p.prod_state=0 and prod_id not in(select prod_id from product_stock) 
2019-01-26 12:26:34.292 [http-nio-8080-exec-2] DEBUG com.yun.product.dao.ProductDao.productListForStock - ==> Parameters: 
2019-01-26 12:26:34.294 [http-nio-8080-exec-2] DEBUG com.yun.product.dao.ProductDao.productListForStock - <==      Total: 4
2019-01-26 12:27:20.994 [http-nio-8080-exec-4] DEBUG com.yun.stock.controller.ProductStockController - 跳转到物品库存查询控制器
2019-01-26 12:27:20.997 [http-nio-8080-exec-4] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==>  Preparing: select count(*) from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 
2019-01-26 12:27:20.998 [http-nio-8080-exec-4] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==> Parameters: 
2019-01-26 12:27:20.999 [http-nio-8080-exec-4] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - <==      Total: 1
2019-01-26 12:27:21.000 [http-nio-8080-exec-4] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==>  Preparing: select ps.prod_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 order by p.prod_id,pp.prod_param_id limit ?,? 
2019-01-26 12:27:21.003 [http-nio-8080-exec-4] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==> Parameters: 0(Integer), 5(Integer)
2019-01-26 12:27:21.004 [http-nio-8080-exec-4] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - <==      Total: 0
2019-01-26 12:27:21.004 [http-nio-8080-exec-4] DEBUG com.yun.stock.controller.ProductStockController - 转到物品库存页面
2019-01-26 12:27:23.621 [http-nio-8080-exec-7] DEBUG com.yun.product.dao.ProductDao.productListForStock - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where p.prod_state=0 and prod_id not in(select prod_id from product_stock) 
2019-01-26 12:27:23.622 [http-nio-8080-exec-7] DEBUG com.yun.product.dao.ProductDao.productListForStock - ==> Parameters: 
2019-01-26 12:27:23.626 [http-nio-8080-exec-7] DEBUG com.yun.product.dao.ProductDao.productListForStock - <==      Total: 4
2019-01-26 12:27:29.420 [http-nio-8080-exec-6] DEBUG com.yun.product.dao.ProductDao.productListForStock - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where p.prod_state=0 and prod_id not in(select prod_id from product_stock) 
2019-01-26 12:27:29.421 [http-nio-8080-exec-6] DEBUG com.yun.product.dao.ProductDao.productListForStock - ==> Parameters: 
2019-01-26 12:27:29.425 [http-nio-8080-exec-6] DEBUG com.yun.product.dao.ProductDao.productListForStock - <==      Total: 4
2019-01-26 12:27:48.059 [http-nio-8080-exec-2] DEBUG com.yun.product.dao.ProductDao.productListForStock - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where p.prod_state=0 and prod_id not in(select prod_id from product_stock) 
2019-01-26 12:27:48.061 [http-nio-8080-exec-2] DEBUG com.yun.product.dao.ProductDao.productListForStock - ==> Parameters: 
2019-01-26 12:27:48.067 [http-nio-8080-exec-2] DEBUG com.yun.product.dao.ProductDao.productListForStock - <==      Total: 4
2019-01-26 12:56:40.438 [main] INFO  com.yun.YunEbStockApplication - Starting YunEbStockApplication on USER-20181202BJ with PID 4804 (E:\workspace\yun-eb-stock\target\classes started by Administrator in E:\workspace\yun-eb-stock)
2019-01-26 12:56:40.458 [main] DEBUG com.yun.YunEbStockApplication - Running with Spring Boot v1.5.9.RELEASE, Spring v4.3.13.RELEASE
2019-01-26 12:56:40.459 [main] INFO  com.yun.YunEbStockApplication - No active profile set, falling back to default profiles: default
2019-01-26 12:56:40.799 [main] INFO  o.s.b.c.e.AnnotationConfigEmbeddedWebApplicationContext - Refreshing org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@6a28ffa4: startup date [Sat Jan 26 12:56:40 CST 2019]; root of context hierarchy
2019-01-26 12:56:41.010 [background-preinit] INFO  org.hibernate.validator.internal.util.Version - HV000001: Hibernate Validator 5.3.6.Final
2019-01-26 12:56:42.574 [main] INFO  o.s.b.c.e.tomcat.TomcatEmbeddedServletContainer - Tomcat initialized with port(s): 8080 (http)
2019-01-26 12:56:42.584 [main] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2019-01-26 12:56:42.585 [main] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet Engine: Apache Tomcat/8.5.23
2019-01-26 12:56:42.726 [localhost-startStop-1] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2019-01-26 12:56:42.727 [localhost-startStop-1] INFO  org.springframework.web.context.ContextLoader - Root WebApplicationContext: initialization completed in 1928 ms
2019-01-26 12:56:42.932 [localhost-startStop-1] INFO  o.s.boot.web.servlet.ServletRegistrationBean - Mapping servlet: 'dispatcherServlet' to [/]
2019-01-26 12:56:42.939 [localhost-startStop-1] INFO  o.s.boot.web.servlet.FilterRegistrationBean - Mapping filter: 'characterEncodingFilter' to: [/*]
2019-01-26 12:56:42.940 [localhost-startStop-1] INFO  o.s.boot.web.servlet.FilterRegistrationBean - Mapping filter: 'hiddenHttpMethodFilter' to: [/*]
2019-01-26 12:56:42.940 [localhost-startStop-1] INFO  o.s.boot.web.servlet.FilterRegistrationBean - Mapping filter: 'httpPutFormContentFilter' to: [/*]
2019-01-26 12:56:42.940 [localhost-startStop-1] INFO  o.s.boot.web.servlet.FilterRegistrationBean - Mapping filter: 'requestContextFilter' to: [/*]
2019-01-26 12:56:43.796 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerAdapter - Looking for @ControllerAdvice: org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@6a28ffa4: startup date [Sat Jan 26 12:56:40 CST 2019]; root of context hierarchy
2019-01-26 12:56:43.853 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productListForAutoComplete]}" onto public java.util.List<com.yun.product.model.Product> com.yun.product.controller.ProductController.productListForAutoComplete(java.lang.String)
2019-01-26 12:56:43.854 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productListForStock]}" onto public java.util.List<com.yun.product.model.Product> com.yun.product.controller.ProductController.productListForStock()
2019-01-26 12:56:43.854 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productPreAdd]}" onto public java.lang.String com.yun.product.controller.ProductController.productPreAdd()
2019-01-26 12:56:43.855 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productList]}" onto public java.lang.String com.yun.product.controller.ProductController.productList(org.springframework.ui.Model,java.lang.String,java.lang.String,java.lang.String,java.lang.String)
2019-01-26 12:56:43.855 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productSave]}" onto public java.lang.String com.yun.product.controller.ProductController.productSave(com.yun.product.model.Product)
2019-01-26 12:56:43.855 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productDelete]}" onto public java.lang.String com.yun.product.controller.ProductController.productDelete(int)
2019-01-26 12:56:43.855 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productPreUpdate]}" onto public java.lang.String com.yun.product.controller.ProductController.productPreUpdate(int,org.springframework.ui.Model)
2019-01-26 12:56:43.856 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productUpdate]}" onto public java.lang.String com.yun.product.controller.ProductController.productUpdate(com.yun.product.model.Product)
2019-01-26 12:56:43.857 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/prodParamDelete]}" onto public java.lang.String com.yun.product.controller.ProductParamController.prodParamDelete(int)
2019-01-26 12:56:43.857 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/prodParamSave]}" onto public java.lang.String com.yun.product.controller.ProductParamController.prodParamSave(com.yun.product.model.ProductParameter)
2019-01-26 12:56:43.857 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/prodParamList]}" onto public java.lang.String com.yun.product.controller.ProductParamController.prodParamList(int)
2019-01-26 12:56:43.857 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/prodParamPreAdd]}" onto public java.lang.String com.yun.product.controller.ProductParamController.prodParamPreAdd(int,org.springframework.ui.Model)
2019-01-26 12:56:43.860 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeUpdate]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeUpdate(java.lang.Integer,org.springframework.ui.Model)
2019-01-26 12:56:43.860 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeUpdateSave]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeUpdateSave(com.yun.product.model.ProductType)
2019-01-26 12:56:43.860 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeDelete]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeDelete(java.lang.Integer,javax.servlet.http.HttpServletResponse) throws java.io.IOException
2019-01-26 12:56:43.860 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeList]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeList(org.springframework.ui.Model)
2019-01-26 12:56:43.861 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeTree]}" onto public java.util.List<com.yun.product.model.ProductType> com.yun.product.controller.ProductTypeController.productTypeTree()
2019-01-26 12:56:43.861 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeEdit]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeEdit()
2019-01-26 12:56:43.861 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeSave]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeSave(com.yun.product.model.ProductType)
2019-01-26 12:56:43.862 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockPreAdd]}" onto public java.lang.String com.yun.stock.controller.ProductStockController.productStockPreAdd()
2019-01-26 12:56:43.862 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockSave]}" onto public java.lang.String com.yun.stock.controller.ProductStockController.productStockSave(com.yun.stock.model.ProductStock)
2019-01-26 12:56:43.862 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockList]}" onto public java.lang.String com.yun.stock.controller.ProductStockController.productStocklist(java.lang.String,java.lang.String,org.springframework.ui.Model)
2019-01-26 12:56:43.863 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/main]}" onto public java.lang.String com.yun.user.controller.MainController.main()
2019-01-26 12:56:43.863 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/userList]}" onto public java.lang.String com.yun.user.controller.UserController.userList(org.springframework.ui.Model)
2019-01-26 12:56:43.864 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/login]}" onto public java.lang.String com.yun.user.controller.UserController.login(java.lang.String,java.lang.String,javax.servlet.http.HttpSession)
2019-01-26 12:56:43.864 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/userEdit]}" onto public java.lang.String com.yun.user.controller.UserController.userEdit()
2019-01-26 12:56:43.864 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/userSave]}" onto public java.lang.String com.yun.user.controller.UserController.userSave(com.yun.user.model.UserInfo)
2019-01-26 12:56:43.864 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/deleteUserInfo]}" onto public java.lang.String com.yun.user.controller.UserController.userDelete(int)
2019-01-26 12:56:43.867 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/error]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> org.springframework.boot.autoconfigure.web.BasicErrorController.error(javax.servlet.http.HttpServletRequest)
2019-01-26 12:56:43.868 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/error],produces=[text/html]}" onto public org.springframework.web.servlet.ModelAndView org.springframework.boot.autoconfigure.web.BasicErrorController.errorHtml(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
2019-01-26 12:56:43.904 [main] INFO  o.s.web.servlet.handler.SimpleUrlHandlerMapping - Mapped URL path [/webjars/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-01-26 12:56:43.904 [main] INFO  o.s.web.servlet.handler.SimpleUrlHandlerMapping - Mapped URL path [/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-01-26 12:56:43.942 [main] INFO  o.s.web.servlet.handler.SimpleUrlHandlerMapping - Mapped URL path [/**/favicon.ico] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-01-26 12:56:44.266 [main] INFO  o.s.b.a.w.WebMvcAutoConfiguration$WelcomePageHandlerMapping - Adding welcome page: class path resource [static/index.html]
2019-01-26 12:56:44.527 [main] INFO  o.s.jmx.export.annotation.AnnotationMBeanExporter - Registering beans for JMX exposure on startup
2019-01-26 12:56:44.547 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2019-01-26 12:56:44.558 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2019-01-26 12:56:44.572 [main] INFO  org.apache.tomcat.util.net.NioSelectorPool - Using a shared selector for servlet write/read
2019-01-26 12:56:44.589 [main] INFO  o.s.b.c.e.tomcat.TomcatEmbeddedServletContainer - Tomcat started on port(s): 8080 (http)
2019-01-26 12:56:44.594 [main] INFO  com.yun.YunEbStockApplication - Started YunEbStockApplication in 4.759 seconds (JVM running for 5.934)
2019-01-26 12:56:49.507 [http-nio-8080-exec-1] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring FrameworkServlet 'dispatcherServlet'
2019-01-26 12:56:49.507 [http-nio-8080-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - FrameworkServlet 'dispatcherServlet': initialization started
2019-01-26 12:56:49.526 [http-nio-8080-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - FrameworkServlet 'dispatcherServlet': initialization completed in 19 ms
2019-01-26 12:56:52.170 [http-nio-8080-exec-8] DEBUG com.yun.stock.controller.ProductStockController - 跳转到物品库存查询控制器
2019-01-26 12:56:52.485 [http-nio-8080-exec-8] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==>  Preparing: select count(*) from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 
2019-01-26 12:56:52.505 [http-nio-8080-exec-8] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==> Parameters: 
2019-01-26 12:56:52.515 [http-nio-8080-exec-8] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - <==      Total: 1
2019-01-26 12:56:52.522 [http-nio-8080-exec-8] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==>  Preparing: select ps.prod_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 order by p.prod_id,pp.prod_param_id limit ?,? 
2019-01-26 12:56:52.523 [http-nio-8080-exec-8] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==> Parameters: 0(Integer), 5(Integer)
2019-01-26 12:56:52.524 [http-nio-8080-exec-8] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - <==      Total: 0
2019-01-26 12:56:52.525 [http-nio-8080-exec-8] DEBUG com.yun.stock.controller.ProductStockController - 转到物品库存页面
2019-01-26 12:57:00.829 [http-nio-8080-exec-4] DEBUG com.yun.product.dao.ProductDao.productListForStock - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where p.prod_state=0 and prod_id not in(select prod_id from product_stock) 
2019-01-26 12:57:00.829 [http-nio-8080-exec-4] DEBUG com.yun.product.dao.ProductDao.productListForStock - ==> Parameters: 
2019-01-26 12:57:00.834 [http-nio-8080-exec-4] DEBUG com.yun.product.dao.ProductDao.productListForStock - <==      Total: 4
2019-01-26 12:57:08.443 [http-nio-8080-exec-6] DEBUG com.yun.product.dao.ProductDao.productListForStock - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where p.prod_state=0 and prod_id not in(select prod_id from product_stock) 
2019-01-26 12:57:08.443 [http-nio-8080-exec-6] DEBUG com.yun.product.dao.ProductDao.productListForStock - ==> Parameters: 
2019-01-26 12:57:08.448 [http-nio-8080-exec-6] DEBUG com.yun.product.dao.ProductDao.productListForStock - <==      Total: 4
2019-01-26 12:57:11.783 [http-nio-8080-exec-4] DEBUG com.yun.product.dao.ProductDao.productListForStock - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where p.prod_state=0 and prod_id not in(select prod_id from product_stock) 
2019-01-26 12:57:11.784 [http-nio-8080-exec-4] DEBUG com.yun.product.dao.ProductDao.productListForStock - ==> Parameters: 
2019-01-26 12:57:11.790 [http-nio-8080-exec-4] DEBUG com.yun.product.dao.ProductDao.productListForStock - <==      Total: 4
2019-01-26 12:58:13.971 [http-nio-8080-exec-9] INFO  com.yun.product.controller.ProductTypeController - 跳转到stock/productTypeList.html页面
2019-01-26 12:58:14.068 [http-nio-8080-exec-1] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - ==>  Preparing: select p1.prod_type_id,p1.prod_type_name,p1.parent_id,p2.prod_type_id parent_type_id,p2.prod_type_name parent_type_name from product_type p1 LEFT JOIN product_type p2 on p1.parent_id=p2.prod_type_id where p1.parent_id=? 
2019-01-26 12:58:14.069 [http-nio-8080-exec-1] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - ==> Parameters: 0(Integer)
2019-01-26 12:58:14.075 [http-nio-8080-exec-1] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - ====>  Preparing: select p1.prod_type_id,p1.prod_type_name,p1.parent_id,p2.prod_type_id parent_type_id,p2.prod_type_name parent_type_name from product_type p1 LEFT JOIN product_type p2 on p1.parent_id=p2.prod_type_id where p1.parent_id=? 
2019-01-26 12:58:14.075 [http-nio-8080-exec-1] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - ====> Parameters: 29(Integer)
2019-01-26 12:58:14.077 [http-nio-8080-exec-1] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - ======>  Preparing: select p1.prod_type_id,p1.prod_type_name,p1.parent_id,p2.prod_type_id parent_type_id,p2.prod_type_name parent_type_name from product_type p1 LEFT JOIN product_type p2 on p1.parent_id=p2.prod_type_id where p1.parent_id=? 
2019-01-26 12:58:14.078 [http-nio-8080-exec-1] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - ======> Parameters: 30(Integer)
2019-01-26 12:58:14.081 [http-nio-8080-exec-1] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - <======      Total: 0
2019-01-26 12:58:14.083 [http-nio-8080-exec-1] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - <====      Total: 1
2019-01-26 12:58:14.084 [http-nio-8080-exec-1] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - ====>  Preparing: select p1.prod_type_id,p1.prod_type_name,p1.parent_id,p2.prod_type_id parent_type_id,p2.prod_type_name parent_type_name from product_type p1 LEFT JOIN product_type p2 on p1.parent_id=p2.prod_type_id where p1.parent_id=? 
2019-01-26 12:58:14.085 [http-nio-8080-exec-1] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - ====> Parameters: 39(Integer)
2019-01-26 12:58:14.088 [http-nio-8080-exec-1] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - ======>  Preparing: select p1.prod_type_id,p1.prod_type_name,p1.parent_id,p2.prod_type_id parent_type_id,p2.prod_type_name parent_type_name from product_type p1 LEFT JOIN product_type p2 on p1.parent_id=p2.prod_type_id where p1.parent_id=? 
2019-01-26 12:58:14.089 [http-nio-8080-exec-1] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - ======> Parameters: 41(Integer)
2019-01-26 12:58:14.090 [http-nio-8080-exec-1] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - <======      Total: 0
2019-01-26 12:58:14.092 [http-nio-8080-exec-1] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - <====      Total: 1
2019-01-26 12:58:14.092 [http-nio-8080-exec-1] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - <==      Total: 2
2019-01-26 12:58:15.456 [http-nio-8080-exec-4] DEBUG c.yun.product.dao.ProductDao.findProductRowByParam - ==>  Preparing: select count(*) from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 
2019-01-26 12:58:15.457 [http-nio-8080-exec-4] DEBUG c.yun.product.dao.ProductDao.findProductRowByParam - ==> Parameters: 
2019-01-26 12:58:15.463 [http-nio-8080-exec-4] DEBUG c.yun.product.dao.ProductDao.findProductRowByParam - <==      Total: 1
2019-01-26 12:58:15.472 [http-nio-8080-exec-4] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 order by prod_id limit ?,? 
2019-01-26 12:58:15.476 [http-nio-8080-exec-4] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==> Parameters: 0(Integer), 5(Integer)
2019-01-26 12:58:15.479 [http-nio-8080-exec-4] DEBUG com.yun.product.dao.ProductDao.findProductByParam - <==      Total: 4
2019-01-26 12:58:15.480 [http-nio-8080-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 12:58:15.481 [http-nio-8080-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 2(Integer)
2019-01-26 12:58:15.482 [http-nio-8080-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 0
2019-01-26 12:58:15.482 [http-nio-8080-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 12:58:15.482 [http-nio-8080-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 3(Integer)
2019-01-26 12:58:15.484 [http-nio-8080-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 0
2019-01-26 12:58:15.485 [http-nio-8080-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 12:58:15.485 [http-nio-8080-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 4(Integer)
2019-01-26 12:58:15.486 [http-nio-8080-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 2
2019-01-26 12:58:15.487 [http-nio-8080-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 12:58:15.488 [http-nio-8080-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 5(Integer)
2019-01-26 12:58:15.490 [http-nio-8080-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-01-26 12:58:21.206 [http-nio-8080-exec-5] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 12:58:21.206 [http-nio-8080-exec-5] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 4(Integer)
2019-01-26 12:58:21.209 [http-nio-8080-exec-5] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 2
2019-01-26 12:58:24.065 [http-nio-8080-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 12:58:24.070 [http-nio-8080-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 5(Integer)
2019-01-26 12:58:24.076 [http-nio-8080-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-01-26 12:59:18.684 [main] INFO  com.yun.YunEbStockApplication - Starting YunEbStockApplication on USER-20181202BJ with PID 1388 (E:\workspace\yun-eb-stock\target\classes started by Administrator in E:\workspace\yun-eb-stock)
2019-01-26 12:59:18.691 [main] DEBUG com.yun.YunEbStockApplication - Running with Spring Boot v1.5.9.RELEASE, Spring v4.3.13.RELEASE
2019-01-26 12:59:18.691 [main] INFO  com.yun.YunEbStockApplication - No active profile set, falling back to default profiles: default
2019-01-26 12:59:19.189 [main] INFO  o.s.b.c.e.AnnotationConfigEmbeddedWebApplicationContext - Refreshing org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@6a28ffa4: startup date [Sat Jan 26 12:59:19 CST 2019]; root of context hierarchy
2019-01-26 12:59:19.335 [background-preinit] INFO  org.hibernate.validator.internal.util.Version - HV000001: Hibernate Validator 5.3.6.Final
2019-01-26 12:59:20.894 [main] INFO  o.s.b.c.e.tomcat.TomcatEmbeddedServletContainer - Tomcat initialized with port(s): 8080 (http)
2019-01-26 12:59:20.904 [main] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2019-01-26 12:59:20.905 [main] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet Engine: Apache Tomcat/8.5.23
2019-01-26 12:59:21.015 [localhost-startStop-1] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2019-01-26 12:59:21.016 [localhost-startStop-1] INFO  org.springframework.web.context.ContextLoader - Root WebApplicationContext: initialization completed in 1827 ms
2019-01-26 12:59:21.155 [localhost-startStop-1] INFO  o.s.boot.web.servlet.ServletRegistrationBean - Mapping servlet: 'dispatcherServlet' to [/]
2019-01-26 12:59:21.160 [localhost-startStop-1] INFO  o.s.boot.web.servlet.FilterRegistrationBean - Mapping filter: 'characterEncodingFilter' to: [/*]
2019-01-26 12:59:21.161 [localhost-startStop-1] INFO  o.s.boot.web.servlet.FilterRegistrationBean - Mapping filter: 'hiddenHttpMethodFilter' to: [/*]
2019-01-26 12:59:21.161 [localhost-startStop-1] INFO  o.s.boot.web.servlet.FilterRegistrationBean - Mapping filter: 'httpPutFormContentFilter' to: [/*]
2019-01-26 12:59:21.161 [localhost-startStop-1] INFO  o.s.boot.web.servlet.FilterRegistrationBean - Mapping filter: 'requestContextFilter' to: [/*]
2019-01-26 12:59:21.962 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerAdapter - Looking for @ControllerAdvice: org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@6a28ffa4: startup date [Sat Jan 26 12:59:19 CST 2019]; root of context hierarchy
2019-01-26 12:59:22.048 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productListForAutoComplete]}" onto public java.util.List<com.yun.product.model.Product> com.yun.product.controller.ProductController.productListForAutoComplete(java.lang.String)
2019-01-26 12:59:22.050 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productListForStock]}" onto public java.util.List<com.yun.product.model.Product> com.yun.product.controller.ProductController.productListForStock()
2019-01-26 12:59:22.051 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productSave]}" onto public java.lang.String com.yun.product.controller.ProductController.productSave(com.yun.product.model.Product)
2019-01-26 12:59:22.051 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productPreAdd]}" onto public java.lang.String com.yun.product.controller.ProductController.productPreAdd()
2019-01-26 12:59:22.051 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productList]}" onto public java.lang.String com.yun.product.controller.ProductController.productList(org.springframework.ui.Model,java.lang.String,java.lang.String,java.lang.String,java.lang.String)
2019-01-26 12:59:22.051 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productDelete]}" onto public java.lang.String com.yun.product.controller.ProductController.productDelete(int)
2019-01-26 12:59:22.052 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productPreUpdate]}" onto public java.lang.String com.yun.product.controller.ProductController.productPreUpdate(int,org.springframework.ui.Model)
2019-01-26 12:59:22.052 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productUpdate]}" onto public java.lang.String com.yun.product.controller.ProductController.productUpdate(com.yun.product.model.Product)
2019-01-26 12:59:22.053 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/prodParamDelete]}" onto public java.lang.String com.yun.product.controller.ProductParamController.prodParamDelete(int)
2019-01-26 12:59:22.054 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/prodParamSave]}" onto public java.lang.String com.yun.product.controller.ProductParamController.prodParamSave(com.yun.product.model.ProductParameter)
2019-01-26 12:59:22.054 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/prodParamList]}" onto public java.lang.String com.yun.product.controller.ProductParamController.prodParamList(int)
2019-01-26 12:59:22.054 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/prodParamPreAdd]}" onto public java.lang.String com.yun.product.controller.ProductParamController.prodParamPreAdd(int,org.springframework.ui.Model)
2019-01-26 12:59:22.058 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeUpdate]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeUpdate(java.lang.Integer,org.springframework.ui.Model)
2019-01-26 12:59:22.058 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeUpdateSave]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeUpdateSave(com.yun.product.model.ProductType)
2019-01-26 12:59:22.058 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeDelete]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeDelete(java.lang.Integer,javax.servlet.http.HttpServletResponse) throws java.io.IOException
2019-01-26 12:59:22.059 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeList]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeList(org.springframework.ui.Model)
2019-01-26 12:59:22.060 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeTree]}" onto public java.util.List<com.yun.product.model.ProductType> com.yun.product.controller.ProductTypeController.productTypeTree()
2019-01-26 12:59:22.060 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeEdit]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeEdit()
2019-01-26 12:59:22.061 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeSave]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeSave(com.yun.product.model.ProductType)
2019-01-26 12:59:22.062 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockPreAdd]}" onto public java.lang.String com.yun.stock.controller.ProductStockController.productStockPreAdd()
2019-01-26 12:59:22.062 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockSave]}" onto public java.lang.String com.yun.stock.controller.ProductStockController.productStockSave(com.yun.stock.model.ProductStock)
2019-01-26 12:59:22.063 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockList]}" onto public java.lang.String com.yun.stock.controller.ProductStockController.productStocklist(java.lang.String,java.lang.String,org.springframework.ui.Model)
2019-01-26 12:59:22.063 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/main]}" onto public java.lang.String com.yun.user.controller.MainController.main()
2019-01-26 12:59:22.064 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/userList]}" onto public java.lang.String com.yun.user.controller.UserController.userList(org.springframework.ui.Model)
2019-01-26 12:59:22.065 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/login]}" onto public java.lang.String com.yun.user.controller.UserController.login(java.lang.String,java.lang.String,javax.servlet.http.HttpSession)
2019-01-26 12:59:22.065 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/userEdit]}" onto public java.lang.String com.yun.user.controller.UserController.userEdit()
2019-01-26 12:59:22.065 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/userSave]}" onto public java.lang.String com.yun.user.controller.UserController.userSave(com.yun.user.model.UserInfo)
2019-01-26 12:59:22.066 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/deleteUserInfo]}" onto public java.lang.String com.yun.user.controller.UserController.userDelete(int)
2019-01-26 12:59:22.071 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/error]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> org.springframework.boot.autoconfigure.web.BasicErrorController.error(javax.servlet.http.HttpServletRequest)
2019-01-26 12:59:22.071 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/error],produces=[text/html]}" onto public org.springframework.web.servlet.ModelAndView org.springframework.boot.autoconfigure.web.BasicErrorController.errorHtml(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
2019-01-26 12:59:22.113 [main] INFO  o.s.web.servlet.handler.SimpleUrlHandlerMapping - Mapped URL path [/webjars/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-01-26 12:59:22.113 [main] INFO  o.s.web.servlet.handler.SimpleUrlHandlerMapping - Mapped URL path [/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-01-26 12:59:22.164 [main] INFO  o.s.web.servlet.handler.SimpleUrlHandlerMapping - Mapped URL path [/**/favicon.ico] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-01-26 12:59:22.584 [main] INFO  o.s.b.a.w.WebMvcAutoConfiguration$WelcomePageHandlerMapping - Adding welcome page: class path resource [static/index.html]
2019-01-26 12:59:22.876 [main] INFO  o.s.jmx.export.annotation.AnnotationMBeanExporter - Registering beans for JMX exposure on startup
2019-01-26 12:59:22.897 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2019-01-26 12:59:22.908 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2019-01-26 12:59:22.922 [main] INFO  org.apache.tomcat.util.net.NioSelectorPool - Using a shared selector for servlet write/read
2019-01-26 12:59:22.939 [main] INFO  o.s.b.c.e.tomcat.TomcatEmbeddedServletContainer - Tomcat started on port(s): 8080 (http)
2019-01-26 12:59:22.944 [main] INFO  com.yun.YunEbStockApplication - Started YunEbStockApplication in 4.602 seconds (JVM running for 5.763)
2019-01-26 12:59:32.234 [http-nio-8080-exec-1] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring FrameworkServlet 'dispatcherServlet'
2019-01-26 12:59:32.234 [http-nio-8080-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - FrameworkServlet 'dispatcherServlet': initialization started
2019-01-26 12:59:32.252 [http-nio-8080-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - FrameworkServlet 'dispatcherServlet': initialization completed in 18 ms
2019-01-26 12:59:35.082 [http-nio-8080-exec-8] DEBUG com.yun.stock.controller.ProductStockController - 跳转到物品库存查询控制器
2019-01-26 12:59:35.385 [http-nio-8080-exec-8] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==>  Preparing: select count(*) from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 
2019-01-26 12:59:35.405 [http-nio-8080-exec-8] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==> Parameters: 
2019-01-26 12:59:35.415 [http-nio-8080-exec-8] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - <==      Total: 1
2019-01-26 12:59:35.422 [http-nio-8080-exec-8] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==>  Preparing: select ps.prod_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 order by p.prod_id,pp.prod_param_id limit ?,? 
2019-01-26 12:59:35.423 [http-nio-8080-exec-8] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==> Parameters: 0(Integer), 5(Integer)
2019-01-26 12:59:35.425 [http-nio-8080-exec-8] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - <==      Total: 0
2019-01-26 12:59:35.425 [http-nio-8080-exec-8] DEBUG com.yun.stock.controller.ProductStockController - 转到物品库存页面
2019-01-26 12:59:40.497 [http-nio-8080-exec-10] DEBUG com.yun.product.dao.ProductDao.productListForStock - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where p.prod_state=0 and prod_id not in(select prod_id from product_stock) 
2019-01-26 12:59:40.498 [http-nio-8080-exec-10] DEBUG com.yun.product.dao.ProductDao.productListForStock - ==> Parameters: 
2019-01-26 12:59:40.502 [http-nio-8080-exec-10] DEBUG com.yun.product.dao.ProductDao.productListForStock - <==      Total: 4
2019-01-26 12:59:44.026 [http-nio-8080-exec-1] DEBUG com.yun.product.dao.ProductDao.productListForStock - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where p.prod_state=0 and prod_id not in(select prod_id from product_stock) 
2019-01-26 12:59:44.027 [http-nio-8080-exec-1] DEBUG com.yun.product.dao.ProductDao.productListForStock - ==> Parameters: 
2019-01-26 12:59:44.035 [http-nio-8080-exec-1] DEBUG com.yun.product.dao.ProductDao.productListForStock - <==      Total: 4
2019-01-26 13:02:15.278 [main] INFO  com.yun.YunEbStockApplication - Starting YunEbStockApplication on USER-20181202BJ with PID 5844 (E:\workspace\yun-eb-stock\target\classes started by Administrator in E:\workspace\yun-eb-stock)
2019-01-26 13:02:15.282 [main] DEBUG com.yun.YunEbStockApplication - Running with Spring Boot v1.5.9.RELEASE, Spring v4.3.13.RELEASE
2019-01-26 13:02:15.282 [main] INFO  com.yun.YunEbStockApplication - No active profile set, falling back to default profiles: default
2019-01-26 13:02:15.736 [background-preinit] INFO  org.hibernate.validator.internal.util.Version - HV000001: Hibernate Validator 5.3.6.Final
2019-01-26 13:02:15.884 [main] INFO  o.s.b.c.e.AnnotationConfigEmbeddedWebApplicationContext - Refreshing org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@6a28ffa4: startup date [Sat Jan 26 13:02:15 CST 2019]; root of context hierarchy
2019-01-26 13:02:17.375 [main] INFO  o.s.b.c.e.tomcat.TomcatEmbeddedServletContainer - Tomcat initialized with port(s): 8080 (http)
2019-01-26 13:02:17.386 [main] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2019-01-26 13:02:17.387 [main] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet Engine: Apache Tomcat/8.5.23
2019-01-26 13:02:17.502 [localhost-startStop-1] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2019-01-26 13:02:17.502 [localhost-startStop-1] INFO  org.springframework.web.context.ContextLoader - Root WebApplicationContext: initialization completed in 1618 ms
2019-01-26 13:02:17.648 [localhost-startStop-1] INFO  o.s.boot.web.servlet.ServletRegistrationBean - Mapping servlet: 'dispatcherServlet' to [/]
2019-01-26 13:02:17.654 [localhost-startStop-1] INFO  o.s.boot.web.servlet.FilterRegistrationBean - Mapping filter: 'characterEncodingFilter' to: [/*]
2019-01-26 13:02:17.655 [localhost-startStop-1] INFO  o.s.boot.web.servlet.FilterRegistrationBean - Mapping filter: 'hiddenHttpMethodFilter' to: [/*]
2019-01-26 13:02:17.655 [localhost-startStop-1] INFO  o.s.boot.web.servlet.FilterRegistrationBean - Mapping filter: 'httpPutFormContentFilter' to: [/*]
2019-01-26 13:02:17.655 [localhost-startStop-1] INFO  o.s.boot.web.servlet.FilterRegistrationBean - Mapping filter: 'requestContextFilter' to: [/*]
2019-01-26 13:02:18.488 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerAdapter - Looking for @ControllerAdvice: org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@6a28ffa4: startup date [Sat Jan 26 13:02:15 CST 2019]; root of context hierarchy
2019-01-26 13:02:18.547 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productListForAutoComplete]}" onto public java.util.List<com.yun.product.model.Product> com.yun.product.controller.ProductController.productListForAutoComplete(java.lang.String)
2019-01-26 13:02:18.548 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productListForStock]}" onto public java.util.List<com.yun.product.model.Product> com.yun.product.controller.ProductController.productListForStock()
2019-01-26 13:02:18.549 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productList]}" onto public java.lang.String com.yun.product.controller.ProductController.productList(org.springframework.ui.Model,java.lang.String,java.lang.String,java.lang.String,java.lang.String)
2019-01-26 13:02:18.549 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productPreAdd]}" onto public java.lang.String com.yun.product.controller.ProductController.productPreAdd()
2019-01-26 13:02:18.550 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productSave]}" onto public java.lang.String com.yun.product.controller.ProductController.productSave(com.yun.product.model.Product)
2019-01-26 13:02:18.550 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productDelete]}" onto public java.lang.String com.yun.product.controller.ProductController.productDelete(int)
2019-01-26 13:02:18.550 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productPreUpdate]}" onto public java.lang.String com.yun.product.controller.ProductController.productPreUpdate(int,org.springframework.ui.Model)
2019-01-26 13:02:18.550 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productUpdate]}" onto public java.lang.String com.yun.product.controller.ProductController.productUpdate(com.yun.product.model.Product)
2019-01-26 13:02:18.551 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/prodParamDelete]}" onto public java.lang.String com.yun.product.controller.ProductParamController.prodParamDelete(int)
2019-01-26 13:02:18.552 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/prodParamSave]}" onto public java.lang.String com.yun.product.controller.ProductParamController.prodParamSave(com.yun.product.model.ProductParameter)
2019-01-26 13:02:18.552 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/prodParamList]}" onto public java.lang.String com.yun.product.controller.ProductParamController.prodParamList(int)
2019-01-26 13:02:18.552 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/prodParamPreAdd]}" onto public java.lang.String com.yun.product.controller.ProductParamController.prodParamPreAdd(int,org.springframework.ui.Model)
2019-01-26 13:02:18.556 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeUpdate]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeUpdate(java.lang.Integer,org.springframework.ui.Model)
2019-01-26 13:02:18.556 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeUpdateSave]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeUpdateSave(com.yun.product.model.ProductType)
2019-01-26 13:02:18.556 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeDelete]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeDelete(java.lang.Integer,javax.servlet.http.HttpServletResponse) throws java.io.IOException
2019-01-26 13:02:18.557 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeList]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeList(org.springframework.ui.Model)
2019-01-26 13:02:18.557 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeTree]}" onto public java.util.List<com.yun.product.model.ProductType> com.yun.product.controller.ProductTypeController.productTypeTree()
2019-01-26 13:02:18.557 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeEdit]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeEdit()
2019-01-26 13:02:18.557 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeSave]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeSave(com.yun.product.model.ProductType)
2019-01-26 13:02:18.558 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockPreAdd]}" onto public java.lang.String com.yun.stock.controller.ProductStockController.productStockPreAdd()
2019-01-26 13:02:18.558 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockSave]}" onto public java.lang.String com.yun.stock.controller.ProductStockController.productStockSave(com.yun.stock.model.ProductStock)
2019-01-26 13:02:18.559 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockList]}" onto public java.lang.String com.yun.stock.controller.ProductStockController.productStocklist(java.lang.String,java.lang.String,org.springframework.ui.Model)
2019-01-26 13:02:18.559 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/main]}" onto public java.lang.String com.yun.user.controller.MainController.main()
2019-01-26 13:02:18.560 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/userList]}" onto public java.lang.String com.yun.user.controller.UserController.userList(org.springframework.ui.Model)
2019-01-26 13:02:18.560 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/login]}" onto public java.lang.String com.yun.user.controller.UserController.login(java.lang.String,java.lang.String,javax.servlet.http.HttpSession)
2019-01-26 13:02:18.560 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/userEdit]}" onto public java.lang.String com.yun.user.controller.UserController.userEdit()
2019-01-26 13:02:18.560 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/userSave]}" onto public java.lang.String com.yun.user.controller.UserController.userSave(com.yun.user.model.UserInfo)
2019-01-26 13:02:18.561 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/deleteUserInfo]}" onto public java.lang.String com.yun.user.controller.UserController.userDelete(int)
2019-01-26 13:02:18.564 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/error]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> org.springframework.boot.autoconfigure.web.BasicErrorController.error(javax.servlet.http.HttpServletRequest)
2019-01-26 13:02:18.565 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/error],produces=[text/html]}" onto public org.springframework.web.servlet.ModelAndView org.springframework.boot.autoconfigure.web.BasicErrorController.errorHtml(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
2019-01-26 13:02:18.603 [main] INFO  o.s.web.servlet.handler.SimpleUrlHandlerMapping - Mapped URL path [/webjars/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-01-26 13:02:18.603 [main] INFO  o.s.web.servlet.handler.SimpleUrlHandlerMapping - Mapped URL path [/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-01-26 13:02:18.644 [main] INFO  o.s.web.servlet.handler.SimpleUrlHandlerMapping - Mapped URL path [/**/favicon.ico] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-01-26 13:02:18.974 [main] INFO  o.s.b.a.w.WebMvcAutoConfiguration$WelcomePageHandlerMapping - Adding welcome page: class path resource [static/index.html]
2019-01-26 13:02:19.236 [main] INFO  o.s.jmx.export.annotation.AnnotationMBeanExporter - Registering beans for JMX exposure on startup
2019-01-26 13:02:19.255 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2019-01-26 13:02:19.266 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2019-01-26 13:02:19.280 [main] INFO  org.apache.tomcat.util.net.NioSelectorPool - Using a shared selector for servlet write/read
2019-01-26 13:02:19.299 [main] INFO  o.s.b.c.e.tomcat.TomcatEmbeddedServletContainer - Tomcat started on port(s): 8080 (http)
2019-01-26 13:02:19.306 [main] INFO  com.yun.YunEbStockApplication - Started YunEbStockApplication in 4.514 seconds (JVM running for 5.706)
2019-01-26 13:03:35.083 [main] INFO  com.yun.YunEbStockApplication - Starting YunEbStockApplication on USER-20181202BJ with PID 2792 (E:\workspace\yun-eb-stock\target\classes started by Administrator in E:\workspace\yun-eb-stock)
2019-01-26 13:03:35.087 [main] DEBUG com.yun.YunEbStockApplication - Running with Spring Boot v1.5.9.RELEASE, Spring v4.3.13.RELEASE
2019-01-26 13:03:35.087 [main] INFO  com.yun.YunEbStockApplication - No active profile set, falling back to default profiles: default
2019-01-26 13:03:35.410 [background-preinit] INFO  org.hibernate.validator.internal.util.Version - HV000001: Hibernate Validator 5.3.6.Final
2019-01-26 13:03:35.736 [main] INFO  o.s.b.c.e.AnnotationConfigEmbeddedWebApplicationContext - Refreshing org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@6a28ffa4: startup date [Sat Jan 26 13:03:35 CST 2019]; root of context hierarchy
2019-01-26 13:03:37.203 [main] INFO  o.s.b.c.e.tomcat.TomcatEmbeddedServletContainer - Tomcat initialized with port(s): 8080 (http)
2019-01-26 13:03:37.213 [main] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2019-01-26 13:03:37.214 [main] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet Engine: Apache Tomcat/8.5.23
2019-01-26 13:03:37.326 [localhost-startStop-1] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2019-01-26 13:03:37.326 [localhost-startStop-1] INFO  org.springframework.web.context.ContextLoader - Root WebApplicationContext: initialization completed in 1590 ms
2019-01-26 13:03:37.475 [localhost-startStop-1] INFO  o.s.boot.web.servlet.ServletRegistrationBean - Mapping servlet: 'dispatcherServlet' to [/]
2019-01-26 13:03:37.482 [localhost-startStop-1] INFO  o.s.boot.web.servlet.FilterRegistrationBean - Mapping filter: 'characterEncodingFilter' to: [/*]
2019-01-26 13:03:37.482 [localhost-startStop-1] INFO  o.s.boot.web.servlet.FilterRegistrationBean - Mapping filter: 'hiddenHttpMethodFilter' to: [/*]
2019-01-26 13:03:37.483 [localhost-startStop-1] INFO  o.s.boot.web.servlet.FilterRegistrationBean - Mapping filter: 'httpPutFormContentFilter' to: [/*]
2019-01-26 13:03:37.483 [localhost-startStop-1] INFO  o.s.boot.web.servlet.FilterRegistrationBean - Mapping filter: 'requestContextFilter' to: [/*]
2019-01-26 13:03:38.219 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerAdapter - Looking for @ControllerAdvice: org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@6a28ffa4: startup date [Sat Jan 26 13:03:35 CST 2019]; root of context hierarchy
2019-01-26 13:03:38.293 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productListForAutoComplete]}" onto public java.util.List<com.yun.product.model.Product> com.yun.product.controller.ProductController.productListForAutoComplete(java.lang.String)
2019-01-26 13:03:38.294 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productListForStock]}" onto public java.util.List<com.yun.product.model.Product> com.yun.product.controller.ProductController.productListForStock()
2019-01-26 13:03:38.295 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productSave]}" onto public java.lang.String com.yun.product.controller.ProductController.productSave(com.yun.product.model.Product)
2019-01-26 13:03:38.295 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productPreAdd]}" onto public java.lang.String com.yun.product.controller.ProductController.productPreAdd()
2019-01-26 13:03:38.295 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productList]}" onto public java.lang.String com.yun.product.controller.ProductController.productList(org.springframework.ui.Model,java.lang.String,java.lang.String,java.lang.String,java.lang.String)
2019-01-26 13:03:38.296 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productDelete]}" onto public java.lang.String com.yun.product.controller.ProductController.productDelete(int)
2019-01-26 13:03:38.296 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productPreUpdate]}" onto public java.lang.String com.yun.product.controller.ProductController.productPreUpdate(int,org.springframework.ui.Model)
2019-01-26 13:03:38.296 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productUpdate]}" onto public java.lang.String com.yun.product.controller.ProductController.productUpdate(com.yun.product.model.Product)
2019-01-26 13:03:38.298 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/prodParamDelete]}" onto public java.lang.String com.yun.product.controller.ProductParamController.prodParamDelete(int)
2019-01-26 13:03:38.298 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/prodParamSave]}" onto public java.lang.String com.yun.product.controller.ProductParamController.prodParamSave(com.yun.product.model.ProductParameter)
2019-01-26 13:03:38.298 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/prodParamList]}" onto public java.lang.String com.yun.product.controller.ProductParamController.prodParamList(int)
2019-01-26 13:03:38.299 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/prodParamPreAdd]}" onto public java.lang.String com.yun.product.controller.ProductParamController.prodParamPreAdd(int,org.springframework.ui.Model)
2019-01-26 13:03:38.303 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeUpdate]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeUpdate(java.lang.Integer,org.springframework.ui.Model)
2019-01-26 13:03:38.303 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeUpdateSave]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeUpdateSave(com.yun.product.model.ProductType)
2019-01-26 13:03:38.304 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeDelete]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeDelete(java.lang.Integer,javax.servlet.http.HttpServletResponse) throws java.io.IOException
2019-01-26 13:03:38.304 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeList]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeList(org.springframework.ui.Model)
2019-01-26 13:03:38.305 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeTree]}" onto public java.util.List<com.yun.product.model.ProductType> com.yun.product.controller.ProductTypeController.productTypeTree()
2019-01-26 13:03:38.305 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeEdit]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeEdit()
2019-01-26 13:03:38.306 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeSave]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeSave(com.yun.product.model.ProductType)
2019-01-26 13:03:38.307 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockPreAdd]}" onto public java.lang.String com.yun.stock.controller.ProductStockController.productStockPreAdd()
2019-01-26 13:03:38.307 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockSave]}" onto public java.lang.String com.yun.stock.controller.ProductStockController.productStockSave(com.yun.stock.model.ProductStock)
2019-01-26 13:03:38.307 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockList]}" onto public java.lang.String com.yun.stock.controller.ProductStockController.productStocklist(java.lang.String,java.lang.String,org.springframework.ui.Model)
2019-01-26 13:03:38.308 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/main]}" onto public java.lang.String com.yun.user.controller.MainController.main()
2019-01-26 13:03:38.309 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/userList]}" onto public java.lang.String com.yun.user.controller.UserController.userList(org.springframework.ui.Model)
2019-01-26 13:03:38.310 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/login]}" onto public java.lang.String com.yun.user.controller.UserController.login(java.lang.String,java.lang.String,javax.servlet.http.HttpSession)
2019-01-26 13:03:38.310 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/userEdit]}" onto public java.lang.String com.yun.user.controller.UserController.userEdit()
2019-01-26 13:03:38.310 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/userSave]}" onto public java.lang.String com.yun.user.controller.UserController.userSave(com.yun.user.model.UserInfo)
2019-01-26 13:03:38.311 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/deleteUserInfo]}" onto public java.lang.String com.yun.user.controller.UserController.userDelete(int)
2019-01-26 13:03:38.315 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/error]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> org.springframework.boot.autoconfigure.web.BasicErrorController.error(javax.servlet.http.HttpServletRequest)
2019-01-26 13:03:38.316 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/error],produces=[text/html]}" onto public org.springframework.web.servlet.ModelAndView org.springframework.boot.autoconfigure.web.BasicErrorController.errorHtml(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
2019-01-26 13:03:38.359 [main] INFO  o.s.web.servlet.handler.SimpleUrlHandlerMapping - Mapped URL path [/webjars/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-01-26 13:03:38.359 [main] INFO  o.s.web.servlet.handler.SimpleUrlHandlerMapping - Mapped URL path [/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-01-26 13:03:38.396 [main] INFO  o.s.web.servlet.handler.SimpleUrlHandlerMapping - Mapped URL path [/**/favicon.ico] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-01-26 13:03:38.686 [main] INFO  o.s.b.a.w.WebMvcAutoConfiguration$WelcomePageHandlerMapping - Adding welcome page: class path resource [static/index.html]
2019-01-26 13:03:38.943 [main] INFO  o.s.jmx.export.annotation.AnnotationMBeanExporter - Registering beans for JMX exposure on startup
2019-01-26 13:03:38.962 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2019-01-26 13:03:38.972 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2019-01-26 13:03:38.986 [main] INFO  org.apache.tomcat.util.net.NioSelectorPool - Using a shared selector for servlet write/read
2019-01-26 13:03:39.003 [main] INFO  o.s.b.c.e.tomcat.TomcatEmbeddedServletContainer - Tomcat started on port(s): 8080 (http)
2019-01-26 13:03:39.008 [main] INFO  com.yun.YunEbStockApplication - Started YunEbStockApplication in 4.404 seconds (JVM running for 5.527)
2019-01-26 13:03:55.488 [http-nio-8080-exec-1] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring FrameworkServlet 'dispatcherServlet'
2019-01-26 13:03:55.488 [http-nio-8080-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - FrameworkServlet 'dispatcherServlet': initialization started
2019-01-26 13:03:55.505 [http-nio-8080-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - FrameworkServlet 'dispatcherServlet': initialization completed in 17 ms
2019-01-26 13:04:01.393 [http-nio-8080-exec-9] DEBUG com.yun.stock.controller.ProductStockController - 跳转到物品库存查询控制器
2019-01-26 13:04:01.760 [http-nio-8080-exec-9] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==>  Preparing: select count(*) from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 
2019-01-26 13:04:01.791 [http-nio-8080-exec-9] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==> Parameters: 
2019-01-26 13:04:01.811 [http-nio-8080-exec-9] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - <==      Total: 1
2019-01-26 13:04:01.821 [http-nio-8080-exec-9] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==>  Preparing: select ps.prod_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 order by p.prod_id,pp.prod_param_id limit ?,? 
2019-01-26 13:04:01.823 [http-nio-8080-exec-9] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==> Parameters: 0(Integer), 5(Integer)
2019-01-26 13:04:01.825 [http-nio-8080-exec-9] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - <==      Total: 0
2019-01-26 13:04:01.826 [http-nio-8080-exec-9] DEBUG com.yun.stock.controller.ProductStockController - 转到物品库存页面
2019-01-26 13:04:09.406 [http-nio-8080-exec-3] DEBUG com.yun.product.dao.ProductDao.productListForStock - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where p.prod_state=0 and prod_id not in(select prod_id from product_stock) 
2019-01-26 13:04:09.406 [http-nio-8080-exec-3] DEBUG com.yun.product.dao.ProductDao.productListForStock - ==> Parameters: 
2019-01-26 13:04:09.410 [http-nio-8080-exec-3] DEBUG com.yun.product.dao.ProductDao.productListForStock - <==      Total: 4
2019-01-26 13:04:12.352 [http-nio-8080-exec-7] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 13:04:12.353 [http-nio-8080-exec-7] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 5(Integer)
2019-01-26 13:04:12.357 [http-nio-8080-exec-7] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-01-26 13:04:19.383 [http-nio-8080-exec-8] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 13:04:19.385 [http-nio-8080-exec-8] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 5(Integer)
2019-01-26 13:04:19.389 [http-nio-8080-exec-8] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-01-26 13:04:21.461 [http-nio-8080-exec-6] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 13:04:21.463 [http-nio-8080-exec-6] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 5(Integer)
2019-01-26 13:04:21.466 [http-nio-8080-exec-6] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-01-26 13:04:21.846 [http-nio-8080-exec-9] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 13:04:21.848 [http-nio-8080-exec-9] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 5(Integer)
2019-01-26 13:04:21.852 [http-nio-8080-exec-9] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-01-26 13:04:22.620 [http-nio-8080-exec-10] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 13:04:22.622 [http-nio-8080-exec-10] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 5(Integer)
2019-01-26 13:04:22.625 [http-nio-8080-exec-10] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-01-26 13:04:26.547 [http-nio-8080-exec-1] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 13:04:26.548 [http-nio-8080-exec-1] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 5(Integer)
2019-01-26 13:04:26.549 [http-nio-8080-exec-1] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-01-26 13:05:18.349 [http-nio-8080-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 13:05:18.351 [http-nio-8080-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 5(Integer)
2019-01-26 13:05:18.354 [http-nio-8080-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-01-26 13:05:18.930 [http-nio-8080-exec-7] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 13:05:18.932 [http-nio-8080-exec-7] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 5(Integer)
2019-01-26 13:05:18.934 [http-nio-8080-exec-7] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-01-26 13:05:19.513 [http-nio-8080-exec-8] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 13:05:19.514 [http-nio-8080-exec-8] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 5(Integer)
2019-01-26 13:05:19.518 [http-nio-8080-exec-8] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-01-26 13:05:20.114 [http-nio-8080-exec-6] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 13:05:20.115 [http-nio-8080-exec-6] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 5(Integer)
2019-01-26 13:05:20.116 [http-nio-8080-exec-6] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-01-26 13:06:00.629 [http-nio-8080-exec-8] DEBUG c.yun.product.dao.ProductDao.findProductRowByParam - ==>  Preparing: select count(*) from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 
2019-01-26 13:06:00.629 [http-nio-8080-exec-8] DEBUG c.yun.product.dao.ProductDao.findProductRowByParam - ==> Parameters: 
2019-01-26 13:06:00.630 [http-nio-8080-exec-8] DEBUG c.yun.product.dao.ProductDao.findProductRowByParam - <==      Total: 1
2019-01-26 13:06:00.634 [http-nio-8080-exec-8] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 order by prod_id limit ?,? 
2019-01-26 13:06:00.635 [http-nio-8080-exec-8] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==> Parameters: 0(Integer), 5(Integer)
2019-01-26 13:06:00.639 [http-nio-8080-exec-8] DEBUG com.yun.product.dao.ProductDao.findProductByParam - <==      Total: 4
2019-01-26 13:06:00.640 [http-nio-8080-exec-8] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 13:06:00.641 [http-nio-8080-exec-8] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 2(Integer)
2019-01-26 13:06:00.643 [http-nio-8080-exec-8] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 0
2019-01-26 13:06:00.644 [http-nio-8080-exec-8] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 13:06:00.644 [http-nio-8080-exec-8] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 3(Integer)
2019-01-26 13:06:00.645 [http-nio-8080-exec-8] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 0
2019-01-26 13:06:00.646 [http-nio-8080-exec-8] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 13:06:00.647 [http-nio-8080-exec-8] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 4(Integer)
2019-01-26 13:06:00.648 [http-nio-8080-exec-8] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 2
2019-01-26 13:06:00.649 [http-nio-8080-exec-8] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 13:06:00.649 [http-nio-8080-exec-8] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 5(Integer)
2019-01-26 13:06:00.651 [http-nio-8080-exec-8] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-01-26 13:06:02.608 [http-nio-8080-exec-10] DEBUG com.yun.stock.controller.ProductStockController - 跳转到物品库存查询控制器
2019-01-26 13:06:02.610 [http-nio-8080-exec-10] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==>  Preparing: select count(*) from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 
2019-01-26 13:06:02.612 [http-nio-8080-exec-10] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==> Parameters: 
2019-01-26 13:06:02.614 [http-nio-8080-exec-10] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - <==      Total: 1
2019-01-26 13:06:02.615 [http-nio-8080-exec-10] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==>  Preparing: select ps.prod_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 order by p.prod_id,pp.prod_param_id limit ?,? 
2019-01-26 13:06:02.616 [http-nio-8080-exec-10] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==> Parameters: 0(Integer), 5(Integer)
2019-01-26 13:06:02.619 [http-nio-8080-exec-10] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - <==      Total: 0
2019-01-26 13:06:02.620 [http-nio-8080-exec-10] DEBUG com.yun.stock.controller.ProductStockController - 转到物品库存页面
2019-01-26 13:06:05.617 [http-nio-8080-exec-7] DEBUG com.yun.product.dao.ProductDao.productListForStock - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where p.prod_state=0 and prod_id not in(select prod_id from product_stock) 
2019-01-26 13:06:05.618 [http-nio-8080-exec-7] DEBUG com.yun.product.dao.ProductDao.productListForStock - ==> Parameters: 
2019-01-26 13:06:05.629 [http-nio-8080-exec-7] DEBUG com.yun.product.dao.ProductDao.productListForStock - <==      Total: 4
2019-01-26 13:06:08.543 [http-nio-8080-exec-8] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 13:06:08.545 [http-nio-8080-exec-8] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 5(Integer)
2019-01-26 13:06:08.547 [http-nio-8080-exec-8] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-01-26 13:06:12.530 [http-nio-8080-exec-6] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 13:06:12.530 [http-nio-8080-exec-6] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 5(Integer)
2019-01-26 13:06:12.531 [http-nio-8080-exec-6] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-01-26 13:07:06.524 [http-nio-8080-exec-9] DEBUG com.yun.stock.controller.ProductStockController - 跳转到物品库存查询控制器
2019-01-26 13:07:06.527 [http-nio-8080-exec-9] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==>  Preparing: select count(*) from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 
2019-01-26 13:07:06.528 [http-nio-8080-exec-9] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==> Parameters: 
2019-01-26 13:07:06.530 [http-nio-8080-exec-9] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - <==      Total: 1
2019-01-26 13:07:06.532 [http-nio-8080-exec-9] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==>  Preparing: select ps.prod_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 order by p.prod_id,pp.prod_param_id limit ?,? 
2019-01-26 13:07:06.534 [http-nio-8080-exec-9] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==> Parameters: 0(Integer), 5(Integer)
2019-01-26 13:07:06.536 [http-nio-8080-exec-9] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - <==      Total: 0
2019-01-26 13:07:06.537 [http-nio-8080-exec-9] DEBUG com.yun.stock.controller.ProductStockController - 转到物品库存页面
2019-01-26 13:07:09.608 [http-nio-8080-exec-4] DEBUG com.yun.product.dao.ProductDao.productListForStock - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where p.prod_state=0 and prod_id not in(select prod_id from product_stock) 
2019-01-26 13:07:09.609 [http-nio-8080-exec-4] DEBUG com.yun.product.dao.ProductDao.productListForStock - ==> Parameters: 
2019-01-26 13:07:09.620 [http-nio-8080-exec-4] DEBUG com.yun.product.dao.ProductDao.productListForStock - <==      Total: 4
2019-01-26 13:07:13.083 [http-nio-8080-exec-7] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 13:07:13.085 [http-nio-8080-exec-7] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 5(Integer)
2019-01-26 13:07:13.090 [http-nio-8080-exec-7] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-01-26 13:09:22.944 [http-nio-8080-exec-9] DEBUG com.yun.stock.controller.ProductStockController - 跳转到物品库存查询控制器
2019-01-26 13:09:22.948 [http-nio-8080-exec-9] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==>  Preparing: select count(*) from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 
2019-01-26 13:09:22.949 [http-nio-8080-exec-9] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==> Parameters: 
2019-01-26 13:09:22.950 [http-nio-8080-exec-9] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - <==      Total: 1
2019-01-26 13:09:22.951 [http-nio-8080-exec-9] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==>  Preparing: select ps.prod_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 order by p.prod_id,pp.prod_param_id limit ?,? 
2019-01-26 13:09:22.952 [http-nio-8080-exec-9] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==> Parameters: 0(Integer), 5(Integer)
2019-01-26 13:09:22.954 [http-nio-8080-exec-9] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - <==      Total: 0
2019-01-26 13:09:22.954 [http-nio-8080-exec-9] DEBUG com.yun.stock.controller.ProductStockController - 转到物品库存页面
2019-01-26 13:09:26.399 [http-nio-8080-exec-4] DEBUG com.yun.product.dao.ProductDao.productListForStock - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where p.prod_state=0 and prod_id not in(select prod_id from product_stock) 
2019-01-26 13:09:26.399 [http-nio-8080-exec-4] DEBUG com.yun.product.dao.ProductDao.productListForStock - ==> Parameters: 
2019-01-26 13:09:26.402 [http-nio-8080-exec-4] DEBUG com.yun.product.dao.ProductDao.productListForStock - <==      Total: 4
2019-01-26 13:09:29.179 [http-nio-8080-exec-7] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 13:09:29.181 [http-nio-8080-exec-7] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 5(Integer)
2019-01-26 13:09:29.184 [http-nio-8080-exec-7] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-01-26 13:09:34.152 [http-nio-8080-exec-6] DEBUG c.yun.stock.dao.ProductStockDao.insertProductStock - ==>  Preparing: insert into product_stock(prod_id,prod_param_id,stock_num)values(?,?,?) 
2019-01-26 13:09:34.153 [http-nio-8080-exec-6] DEBUG c.yun.stock.dao.ProductStockDao.insertProductStock - ==> Parameters: 5(Integer), 7(Integer), 3(Integer)
2019-01-26 13:09:34.418 [http-nio-8080-exec-6] DEBUG c.yun.stock.dao.ProductStockDao.insertProductStock - <==    Updates: 1
2019-01-26 13:09:34.443 [http-nio-8080-exec-8] DEBUG com.yun.stock.controller.ProductStockController - 跳转到物品库存查询控制器
2019-01-26 13:09:34.444 [http-nio-8080-exec-8] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==>  Preparing: select count(*) from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 
2019-01-26 13:09:34.445 [http-nio-8080-exec-8] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==> Parameters: 
2019-01-26 13:09:34.446 [http-nio-8080-exec-8] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - <==      Total: 1
2019-01-26 13:09:34.447 [http-nio-8080-exec-8] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==>  Preparing: select ps.prod_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 order by p.prod_id,pp.prod_param_id limit ?,? 
2019-01-26 13:09:34.448 [http-nio-8080-exec-8] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==> Parameters: 0(Integer), 5(Integer)
2019-01-26 13:09:34.451 [http-nio-8080-exec-8] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - <==      Total: 1
2019-01-26 13:09:34.451 [http-nio-8080-exec-8] DEBUG com.yun.stock.controller.ProductStockController - 转到物品库存页面
2019-01-26 13:09:38.126 [http-nio-8080-exec-3] DEBUG com.yun.product.dao.ProductDao.productListForStock - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where p.prod_state=0 and prod_id not in(select prod_id from product_stock) 
2019-01-26 13:09:38.127 [http-nio-8080-exec-3] DEBUG com.yun.product.dao.ProductDao.productListForStock - ==> Parameters: 
2019-01-26 13:09:38.131 [http-nio-8080-exec-3] DEBUG com.yun.product.dao.ProductDao.productListForStock - <==      Total: 3
2019-01-26 13:09:41.491 [http-nio-8080-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 13:09:41.493 [http-nio-8080-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 2(Integer)
2019-01-26 13:09:41.495 [http-nio-8080-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 0
2019-01-26 13:09:42.478 [http-nio-8080-exec-7] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 13:09:42.478 [http-nio-8080-exec-7] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 2(Integer)
2019-01-26 13:09:42.479 [http-nio-8080-exec-7] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 0
2019-01-26 13:09:45.262 [http-nio-8080-exec-6] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 13:09:45.263 [http-nio-8080-exec-6] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 2(Integer)
2019-01-26 13:09:45.265 [http-nio-8080-exec-6] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 0
2019-01-26 13:09:45.985 [http-nio-8080-exec-8] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 13:09:45.986 [http-nio-8080-exec-8] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 2(Integer)
2019-01-26 13:09:45.987 [http-nio-8080-exec-8] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 0
2019-01-26 13:09:47.082 [http-nio-8080-exec-9] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 13:09:47.083 [http-nio-8080-exec-9] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 2(Integer)
2019-01-26 13:09:47.085 [http-nio-8080-exec-9] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 0
2019-01-26 13:09:51.932 [http-nio-8080-exec-10] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 13:09:51.933 [http-nio-8080-exec-10] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 2(Integer)
2019-01-26 13:09:51.935 [http-nio-8080-exec-10] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 0
2019-01-26 13:10:38.852 [http-nio-8080-exec-9] DEBUG com.yun.stock.controller.ProductStockController - 跳转到物品库存查询控制器
2019-01-26 13:10:38.854 [http-nio-8080-exec-9] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==>  Preparing: select count(*) from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 
2019-01-26 13:10:38.855 [http-nio-8080-exec-9] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==> Parameters: 
2019-01-26 13:10:38.857 [http-nio-8080-exec-9] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - <==      Total: 1
2019-01-26 13:10:38.858 [http-nio-8080-exec-9] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==>  Preparing: select ps.prod_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 order by p.prod_id,pp.prod_param_id limit ?,? 
2019-01-26 13:10:38.859 [http-nio-8080-exec-9] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==> Parameters: 0(Integer), 5(Integer)
2019-01-26 13:10:38.861 [http-nio-8080-exec-9] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - <==      Total: 1
2019-01-26 13:10:38.862 [http-nio-8080-exec-9] DEBUG com.yun.stock.controller.ProductStockController - 转到物品库存页面
2019-01-26 13:10:50.004 [http-nio-8080-exec-1] DEBUG com.yun.product.dao.ProductDao.productListForStock - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where p.prod_state=0 and prod_id not in(select prod_id from product_stock) 
2019-01-26 13:10:50.006 [http-nio-8080-exec-1] DEBUG com.yun.product.dao.ProductDao.productListForStock - ==> Parameters: 
2019-01-26 13:10:50.008 [http-nio-8080-exec-1] DEBUG com.yun.product.dao.ProductDao.productListForStock - <==      Total: 3
2019-01-26 13:10:52.662 [http-nio-8080-exec-6] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 13:10:52.663 [http-nio-8080-exec-6] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 2(Integer)
2019-01-26 13:10:52.665 [http-nio-8080-exec-6] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 0
2019-01-26 13:10:55.002 [http-nio-8080-exec-7] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 13:10:55.003 [http-nio-8080-exec-7] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 2(Integer)
2019-01-26 13:10:55.005 [http-nio-8080-exec-7] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 0
2019-01-26 13:10:56.386 [http-nio-8080-exec-8] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 13:10:56.387 [http-nio-8080-exec-8] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 2(Integer)
2019-01-26 13:10:56.389 [http-nio-8080-exec-8] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 0
2019-01-26 13:11:30.564 [http-nio-8080-exec-7] DEBUG com.yun.stock.controller.ProductStockController - 跳转到物品库存查询控制器
2019-01-26 13:11:30.566 [http-nio-8080-exec-7] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==>  Preparing: select count(*) from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 
2019-01-26 13:11:30.566 [http-nio-8080-exec-7] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==> Parameters: 
2019-01-26 13:11:30.568 [http-nio-8080-exec-7] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - <==      Total: 1
2019-01-26 13:11:30.568 [http-nio-8080-exec-7] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==>  Preparing: select ps.prod_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 order by p.prod_id,pp.prod_param_id limit ?,? 
2019-01-26 13:11:30.570 [http-nio-8080-exec-7] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==> Parameters: 0(Integer), 5(Integer)
2019-01-26 13:11:30.572 [http-nio-8080-exec-7] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - <==      Total: 1
2019-01-26 13:11:30.572 [http-nio-8080-exec-7] DEBUG com.yun.stock.controller.ProductStockController - 转到物品库存页面
2019-01-26 13:11:34.196 [http-nio-8080-exec-2] DEBUG com.yun.product.dao.ProductDao.productListForStock - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where p.prod_state=0 and prod_id not in(select prod_id from product_stock) 
2019-01-26 13:11:34.197 [http-nio-8080-exec-2] DEBUG com.yun.product.dao.ProductDao.productListForStock - ==> Parameters: 
2019-01-26 13:11:34.204 [http-nio-8080-exec-2] DEBUG com.yun.product.dao.ProductDao.productListForStock - <==      Total: 3
2019-01-26 13:11:36.239 [http-nio-8080-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 13:11:36.241 [http-nio-8080-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 2(Integer)
2019-01-26 13:11:36.243 [http-nio-8080-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 0
2019-01-26 13:12:59.166 [main] INFO  com.yun.YunEbStockApplication - Starting YunEbStockApplication on USER-20181202BJ with PID 5060 (E:\workspace\yun-eb-stock\target\classes started by Administrator in E:\workspace\yun-eb-stock)
2019-01-26 13:12:59.174 [main] DEBUG com.yun.YunEbStockApplication - Running with Spring Boot v1.5.9.RELEASE, Spring v4.3.13.RELEASE
2019-01-26 13:12:59.174 [main] INFO  com.yun.YunEbStockApplication - No active profile set, falling back to default profiles: default
2019-01-26 13:12:59.652 [background-preinit] INFO  org.hibernate.validator.internal.util.Version - HV000001: Hibernate Validator 5.3.6.Final
2019-01-26 13:12:59.659 [main] INFO  o.s.b.c.e.AnnotationConfigEmbeddedWebApplicationContext - Refreshing org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@6a28ffa4: startup date [Sat Jan 26 13:12:59 CST 2019]; root of context hierarchy
2019-01-26 13:13:01.188 [main] INFO  o.s.b.c.e.tomcat.TomcatEmbeddedServletContainer - Tomcat initialized with port(s): 8080 (http)
2019-01-26 13:13:01.202 [main] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2019-01-26 13:13:01.203 [main] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet Engine: Apache Tomcat/8.5.23
2019-01-26 13:13:01.318 [localhost-startStop-1] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2019-01-26 13:13:01.319 [localhost-startStop-1] INFO  org.springframework.web.context.ContextLoader - Root WebApplicationContext: initialization completed in 1660 ms
2019-01-26 13:13:01.464 [localhost-startStop-1] INFO  o.s.boot.web.servlet.ServletRegistrationBean - Mapping servlet: 'dispatcherServlet' to [/]
2019-01-26 13:13:01.469 [localhost-startStop-1] INFO  o.s.boot.web.servlet.FilterRegistrationBean - Mapping filter: 'characterEncodingFilter' to: [/*]
2019-01-26 13:13:01.470 [localhost-startStop-1] INFO  o.s.boot.web.servlet.FilterRegistrationBean - Mapping filter: 'hiddenHttpMethodFilter' to: [/*]
2019-01-26 13:13:01.470 [localhost-startStop-1] INFO  o.s.boot.web.servlet.FilterRegistrationBean - Mapping filter: 'httpPutFormContentFilter' to: [/*]
2019-01-26 13:13:01.470 [localhost-startStop-1] INFO  o.s.boot.web.servlet.FilterRegistrationBean - Mapping filter: 'requestContextFilter' to: [/*]
2019-01-26 13:13:02.230 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerAdapter - Looking for @ControllerAdvice: org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@6a28ffa4: startup date [Sat Jan 26 13:12:59 CST 2019]; root of context hierarchy
2019-01-26 13:13:02.286 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productList]}" onto public java.lang.String com.yun.product.controller.ProductController.productList(org.springframework.ui.Model,java.lang.String,java.lang.String,java.lang.String,java.lang.String)
2019-01-26 13:13:02.287 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productPreAdd]}" onto public java.lang.String com.yun.product.controller.ProductController.productPreAdd()
2019-01-26 13:13:02.288 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productSave]}" onto public java.lang.String com.yun.product.controller.ProductController.productSave(com.yun.product.model.Product)
2019-01-26 13:13:02.288 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productDelete]}" onto public java.lang.String com.yun.product.controller.ProductController.productDelete(int)
2019-01-26 13:13:02.288 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productPreUpdate]}" onto public java.lang.String com.yun.product.controller.ProductController.productPreUpdate(int,org.springframework.ui.Model)
2019-01-26 13:13:02.289 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productUpdate]}" onto public java.lang.String com.yun.product.controller.ProductController.productUpdate(com.yun.product.model.Product)
2019-01-26 13:13:02.289 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productListForAutoComplete]}" onto public java.util.List<com.yun.product.model.Product> com.yun.product.controller.ProductController.productListForAutoComplete(java.lang.String)
2019-01-26 13:13:02.289 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productListForStock]}" onto public java.util.List<com.yun.product.model.Product> com.yun.product.controller.ProductController.productListForStock()
2019-01-26 13:13:02.290 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/prodParamDelete]}" onto public java.lang.String com.yun.product.controller.ProductParamController.prodParamDelete(int)
2019-01-26 13:13:02.291 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/prodParamSave]}" onto public java.lang.String com.yun.product.controller.ProductParamController.prodParamSave(com.yun.product.model.ProductParameter)
2019-01-26 13:13:02.291 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/prodParamList]}" onto public java.lang.String com.yun.product.controller.ProductParamController.prodParamList(int)
2019-01-26 13:13:02.292 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/prodParamPreAdd]}" onto public java.lang.String com.yun.product.controller.ProductParamController.prodParamPreAdd(int,org.springframework.ui.Model)
2019-01-26 13:13:02.295 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeList]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeList(org.springframework.ui.Model)
2019-01-26 13:13:02.295 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeTree]}" onto public java.util.List<com.yun.product.model.ProductType> com.yun.product.controller.ProductTypeController.productTypeTree()
2019-01-26 13:13:02.295 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeEdit]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeEdit()
2019-01-26 13:13:02.295 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeSave]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeSave(com.yun.product.model.ProductType)
2019-01-26 13:13:02.296 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeUpdate]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeUpdate(java.lang.Integer,org.springframework.ui.Model)
2019-01-26 13:13:02.296 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeUpdateSave]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeUpdateSave(com.yun.product.model.ProductType)
2019-01-26 13:13:02.296 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeDelete]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeDelete(java.lang.Integer,javax.servlet.http.HttpServletResponse) throws java.io.IOException
2019-01-26 13:13:02.297 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockSave]}" onto public java.lang.String com.yun.stock.controller.ProductStockController.productStockSave(com.yun.stock.model.ProductStock)
2019-01-26 13:13:02.298 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockList]}" onto public java.lang.String com.yun.stock.controller.ProductStockController.productStocklist(java.lang.String,java.lang.String,org.springframework.ui.Model)
2019-01-26 13:13:02.298 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockPreAdd]}" onto public java.lang.String com.yun.stock.controller.ProductStockController.productStockPreAdd()
2019-01-26 13:13:02.299 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/main]}" onto public java.lang.String com.yun.user.controller.MainController.main()
2019-01-26 13:13:02.300 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/userList]}" onto public java.lang.String com.yun.user.controller.UserController.userList(org.springframework.ui.Model)
2019-01-26 13:13:02.301 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/login]}" onto public java.lang.String com.yun.user.controller.UserController.login(java.lang.String,java.lang.String,javax.servlet.http.HttpSession)
2019-01-26 13:13:02.301 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/userEdit]}" onto public java.lang.String com.yun.user.controller.UserController.userEdit()
2019-01-26 13:13:02.302 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/userSave]}" onto public java.lang.String com.yun.user.controller.UserController.userSave(com.yun.user.model.UserInfo)
2019-01-26 13:13:02.302 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/deleteUserInfo]}" onto public java.lang.String com.yun.user.controller.UserController.userDelete(int)
2019-01-26 13:13:02.307 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/error]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> org.springframework.boot.autoconfigure.web.BasicErrorController.error(javax.servlet.http.HttpServletRequest)
2019-01-26 13:13:02.308 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/error],produces=[text/html]}" onto public org.springframework.web.servlet.ModelAndView org.springframework.boot.autoconfigure.web.BasicErrorController.errorHtml(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
2019-01-26 13:13:02.356 [main] INFO  o.s.web.servlet.handler.SimpleUrlHandlerMapping - Mapped URL path [/webjars/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-01-26 13:13:02.357 [main] INFO  o.s.web.servlet.handler.SimpleUrlHandlerMapping - Mapped URL path [/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-01-26 13:13:02.409 [main] INFO  o.s.web.servlet.handler.SimpleUrlHandlerMapping - Mapped URL path [/**/favicon.ico] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-01-26 13:13:02.782 [main] INFO  o.s.b.a.w.WebMvcAutoConfiguration$WelcomePageHandlerMapping - Adding welcome page: class path resource [static/index.html]
2019-01-26 13:13:03.050 [main] INFO  o.s.jmx.export.annotation.AnnotationMBeanExporter - Registering beans for JMX exposure on startup
2019-01-26 13:13:03.069 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2019-01-26 13:13:03.080 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2019-01-26 13:13:03.094 [main] INFO  org.apache.tomcat.util.net.NioSelectorPool - Using a shared selector for servlet write/read
2019-01-26 13:13:03.112 [main] INFO  o.s.b.c.e.tomcat.TomcatEmbeddedServletContainer - Tomcat started on port(s): 8080 (http)
2019-01-26 13:13:03.117 [main] INFO  com.yun.YunEbStockApplication - Started YunEbStockApplication in 4.652 seconds (JVM running for 5.908)
2019-01-26 13:13:09.646 [http-nio-8080-exec-1] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring FrameworkServlet 'dispatcherServlet'
2019-01-26 13:13:09.646 [http-nio-8080-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - FrameworkServlet 'dispatcherServlet': initialization started
2019-01-26 13:13:09.664 [http-nio-8080-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - FrameworkServlet 'dispatcherServlet': initialization completed in 18 ms
2019-01-26 13:13:13.941 [http-nio-8080-exec-9] DEBUG com.yun.stock.controller.ProductStockController - 跳转到物品库存查询控制器
2019-01-26 13:13:14.251 [http-nio-8080-exec-9] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==>  Preparing: select count(*) from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 
2019-01-26 13:13:14.271 [http-nio-8080-exec-9] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==> Parameters: 
2019-01-26 13:13:14.281 [http-nio-8080-exec-9] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - <==      Total: 1
2019-01-26 13:13:14.288 [http-nio-8080-exec-9] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==>  Preparing: select ps.prod_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 order by p.prod_id,pp.prod_param_id limit ?,? 
2019-01-26 13:13:14.289 [http-nio-8080-exec-9] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==> Parameters: 0(Integer), 5(Integer)
2019-01-26 13:13:14.291 [http-nio-8080-exec-9] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - <==      Total: 1
2019-01-26 13:13:14.292 [http-nio-8080-exec-9] DEBUG com.yun.stock.controller.ProductStockController - 转到物品库存页面
2019-01-26 13:13:18.834 [http-nio-8080-exec-6] DEBUG com.yun.product.dao.ProductDao.productListForStock - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where p.prod_state=0 and prod_id not in(select prod_id from product_stock) 
2019-01-26 13:13:18.835 [http-nio-8080-exec-6] DEBUG com.yun.product.dao.ProductDao.productListForStock - ==> Parameters: 
2019-01-26 13:13:18.838 [http-nio-8080-exec-6] DEBUG com.yun.product.dao.ProductDao.productListForStock - <==      Total: 3
2019-01-26 13:13:21.495 [http-nio-8080-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 13:13:21.497 [http-nio-8080-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 2(Integer)
2019-01-26 13:13:21.500 [http-nio-8080-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 0
2019-01-26 13:13:25.232 [http-nio-8080-exec-7] DEBUG c.yun.stock.dao.ProductStockDao.insertProductStock - ==>  Preparing: insert into product_stock(prod_id,prod_param_id,stock_num)values(?,?,?) 
2019-01-26 13:13:25.233 [http-nio-8080-exec-7] DEBUG c.yun.stock.dao.ProductStockDao.insertProductStock - ==> Parameters: 2(Integer), null, 5(Integer)
2019-01-26 13:13:25.356 [http-nio-8080-exec-7] DEBUG c.yun.stock.dao.ProductStockDao.insertProductStock - <==    Updates: 1
2019-01-26 13:13:25.388 [http-nio-8080-exec-8] DEBUG com.yun.stock.controller.ProductStockController - 跳转到物品库存查询控制器
2019-01-26 13:13:25.389 [http-nio-8080-exec-8] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==>  Preparing: select count(*) from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 
2019-01-26 13:13:25.390 [http-nio-8080-exec-8] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==> Parameters: 
2019-01-26 13:13:25.394 [http-nio-8080-exec-8] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - <==      Total: 1
2019-01-26 13:13:25.395 [http-nio-8080-exec-8] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==>  Preparing: select ps.prod_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 order by p.prod_id,pp.prod_param_id limit ?,? 
2019-01-26 13:13:25.396 [http-nio-8080-exec-8] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==> Parameters: 0(Integer), 5(Integer)
2019-01-26 13:13:25.400 [http-nio-8080-exec-8] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - <==      Total: 2
2019-01-26 13:13:25.400 [http-nio-8080-exec-8] DEBUG com.yun.stock.controller.ProductStockController - 转到物品库存页面
2019-01-26 13:13:25.439 [http-nio-8080-exec-8] ERROR org.thymeleaf.TemplateEngine - [THYMELEAF][http-nio-8080-exec-8] Exception processing template "stock/productStockList": Exception evaluating SpringEL expression: "prodStock.productParameter.prodParamName" (stock/productStockList)
2019-01-26 13:13:25.446 [http-nio-8080-exec-8] ERROR o.a.c.c.C.[.[localhost].[/].[dispatcherServlet] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is org.thymeleaf.exceptions.TemplateProcessingException: Exception evaluating SpringEL expression: "prodStock.productParameter.prodParamName" (stock/productStockList)] with root cause
org.springframework.expression.spel.SpelEvaluationException: EL1007E: Property or field 'prodParamName' cannot be found on null
	at org.springframework.expression.spel.ast.PropertyOrFieldReference.readProperty(PropertyOrFieldReference.java:222)
	at org.springframework.expression.spel.ast.PropertyOrFieldReference.getValueInternal(PropertyOrFieldReference.java:94)
	at org.springframework.expression.spel.ast.PropertyOrFieldReference.access$000(PropertyOrFieldReference.java:46)
	at org.springframework.expression.spel.ast.PropertyOrFieldReference$AccessorLValue.getValue(PropertyOrFieldReference.java:379)
	at org.springframework.expression.spel.ast.CompoundExpression.getValueInternal(CompoundExpression.java:88)
	at org.springframework.expression.spel.ast.SpelNodeImpl.getValue(SpelNodeImpl.java:121)
	at org.springframework.expression.spel.standard.SpelExpression.getValue(SpelExpression.java:324)
	at org.thymeleaf.spring4.expression.SpelVariableExpressionEvaluator.evaluate(SpelVariableExpressionEvaluator.java:140)
	at org.thymeleaf.standard.expression.VariableExpression.executeVariable(VariableExpression.java:154)
	at org.thymeleaf.standard.expression.SimpleExpression.executeSimple(SimpleExpression.java:59)
	at org.thymeleaf.standard.expression.Expression.execute(Expression.java:103)
	at org.thymeleaf.standard.expression.Expression.execute(Expression.java:133)
	at org.thymeleaf.standard.expression.Expression.execute(Expression.java:120)
	at org.thymeleaf.standard.processor.attr.AbstractStandardTextChildModifierAttrProcessor.getText(AbstractStandardTextChildModifierAttrProcessor.java:68)
	at org.thymeleaf.processor.attr.AbstractTextChildModifierAttrProcessor.getModifiedChildren(AbstractTextChildModifierAttrProcessor.java:59)
	at org.thymeleaf.processor.attr.AbstractChildrenModifierAttrProcessor.processAttribute(AbstractChildrenModifierAttrProcessor.java:59)
	at org.thymeleaf.processor.attr.AbstractAttrProcessor.doProcess(AbstractAttrProcessor.java:87)
	at org.thymeleaf.processor.AbstractProcessor.process(AbstractProcessor.java:212)
	at org.thymeleaf.dom.Node.applyNextProcessor(Node.java:1017)
	at org.thymeleaf.dom.Node.processNode(Node.java:972)
	at org.thymeleaf.dom.NestableNode.computeNextChild(NestableNode.java:695)
	at org.thymeleaf.dom.NestableNode.doAdditionalProcess(NestableNode.java:668)
	at org.thymeleaf.dom.Node.processNode(Node.java:990)
	at org.thymeleaf.dom.NestableNode.computeNextChild(NestableNode.java:695)
	at org.thymeleaf.dom.NestableNode.doAdditionalProcess(NestableNode.java:668)
	at org.thymeleaf.dom.Node.processNode(Node.java:990)
	at org.thymeleaf.dom.NestableNode.computeNextChild(NestableNode.java:695)
	at org.thymeleaf.dom.NestableNode.doAdditionalProcess(NestableNode.java:668)
	at org.thymeleaf.dom.Node.processNode(Node.java:990)
	at org.thymeleaf.dom.NestableNode.computeNextChild(NestableNode.java:695)
	at org.thymeleaf.dom.NestableNode.doAdditionalProcess(NestableNode.java:668)
	at org.thymeleaf.dom.Node.processNode(Node.java:990)
	at org.thymeleaf.dom.NestableNode.computeNextChild(NestableNode.java:695)
	at org.thymeleaf.dom.NestableNode.doAdditionalProcess(NestableNode.java:668)
	at org.thymeleaf.dom.Node.processNode(Node.java:990)
	at org.thymeleaf.dom.NestableNode.computeNextChild(NestableNode.java:695)
	at org.thymeleaf.dom.NestableNode.doAdditionalProcess(NestableNode.java:668)
	at org.thymeleaf.dom.Node.processNode(Node.java:990)
	at org.thymeleaf.dom.NestableNode.computeNextChild(NestableNode.java:695)
	at org.thymeleaf.dom.NestableNode.doAdditionalProcess(NestableNode.java:668)
	at org.thymeleaf.dom.Node.processNode(Node.java:990)
	at org.thymeleaf.dom.NestableNode.computeNextChild(NestableNode.java:695)
	at org.thymeleaf.dom.NestableNode.doAdditionalProcess(NestableNode.java:668)
	at org.thymeleaf.dom.Node.processNode(Node.java:990)
	at org.thymeleaf.dom.Document.process(Document.java:93)
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1155)
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1060)
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1011)
	at org.thymeleaf.spring4.view.ThymeleafView.renderFragment(ThymeleafView.java:335)
	at org.thymeleaf.spring4.view.ThymeleafView.render(ThymeleafView.java:190)
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1286)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1041)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:984)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:901)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:970)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:861)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:635)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:846)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:742)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HttpPutFormContentFilter.doFilterInternal(HttpPutFormContentFilter.java:108)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:81)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:197)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:199)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:478)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:140)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:81)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:803)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1459)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:745)
2019-01-26 15:49:50.191 [main] INFO  com.yun.YunEbStockApplication - Starting YunEbStockApplication on USER-20181202BJ with PID 7016 (E:\workspace\yun-eb-stock\target\classes started by Administrator in E:\workspace\yun-eb-stock)
2019-01-26 15:49:50.195 [main] DEBUG com.yun.YunEbStockApplication - Running with Spring Boot v1.5.9.RELEASE, Spring v4.3.13.RELEASE
2019-01-26 15:49:50.196 [main] INFO  com.yun.YunEbStockApplication - No active profile set, falling back to default profiles: default
2019-01-26 15:49:50.734 [main] INFO  o.s.b.c.e.AnnotationConfigEmbeddedWebApplicationContext - Refreshing org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@6a28ffa4: startup date [Sat Jan 26 15:49:50 CST 2019]; root of context hierarchy
2019-01-26 15:49:50.838 [background-preinit] INFO  org.hibernate.validator.internal.util.Version - HV000001: Hibernate Validator 5.3.6.Final
2019-01-26 15:49:52.240 [main] INFO  o.s.b.c.e.tomcat.TomcatEmbeddedServletContainer - Tomcat initialized with port(s): 8080 (http)
2019-01-26 15:49:52.250 [main] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2019-01-26 15:49:52.251 [main] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet Engine: Apache Tomcat/8.5.23
2019-01-26 15:49:52.366 [localhost-startStop-1] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2019-01-26 15:49:52.366 [localhost-startStop-1] INFO  org.springframework.web.context.ContextLoader - Root WebApplicationContext: initialization completed in 1632 ms
2019-01-26 15:49:52.506 [localhost-startStop-1] INFO  o.s.boot.web.servlet.ServletRegistrationBean - Mapping servlet: 'dispatcherServlet' to [/]
2019-01-26 15:49:52.512 [localhost-startStop-1] INFO  o.s.boot.web.servlet.FilterRegistrationBean - Mapping filter: 'characterEncodingFilter' to: [/*]
2019-01-26 15:49:52.512 [localhost-startStop-1] INFO  o.s.boot.web.servlet.FilterRegistrationBean - Mapping filter: 'hiddenHttpMethodFilter' to: [/*]
2019-01-26 15:49:52.512 [localhost-startStop-1] INFO  o.s.boot.web.servlet.FilterRegistrationBean - Mapping filter: 'httpPutFormContentFilter' to: [/*]
2019-01-26 15:49:52.513 [localhost-startStop-1] INFO  o.s.boot.web.servlet.FilterRegistrationBean - Mapping filter: 'requestContextFilter' to: [/*]
2019-01-26 15:49:53.270 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerAdapter - Looking for @ControllerAdvice: org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@6a28ffa4: startup date [Sat Jan 26 15:49:50 CST 2019]; root of context hierarchy
2019-01-26 15:49:53.325 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productPreAdd]}" onto public java.lang.String com.yun.product.controller.ProductController.productPreAdd()
2019-01-26 15:49:53.328 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productList]}" onto public java.lang.String com.yun.product.controller.ProductController.productList(org.springframework.ui.Model,java.lang.String,java.lang.String,java.lang.String,java.lang.String)
2019-01-26 15:49:53.328 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productSave]}" onto public java.lang.String com.yun.product.controller.ProductController.productSave(com.yun.product.model.Product)
2019-01-26 15:49:53.328 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productDelete]}" onto public java.lang.String com.yun.product.controller.ProductController.productDelete(int)
2019-01-26 15:49:53.328 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productPreUpdate]}" onto public java.lang.String com.yun.product.controller.ProductController.productPreUpdate(int,org.springframework.ui.Model)
2019-01-26 15:49:53.329 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productUpdate]}" onto public java.lang.String com.yun.product.controller.ProductController.productUpdate(com.yun.product.model.Product)
2019-01-26 15:49:53.329 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productListForAutoComplete]}" onto public java.util.List<com.yun.product.model.Product> com.yun.product.controller.ProductController.productListForAutoComplete(java.lang.String)
2019-01-26 15:49:53.329 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productListForStock]}" onto public java.util.List<com.yun.product.model.Product> com.yun.product.controller.ProductController.productListForStock()
2019-01-26 15:49:53.330 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/prodParamDelete]}" onto public java.lang.String com.yun.product.controller.ProductParamController.prodParamDelete(int)
2019-01-26 15:49:53.331 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/prodParamSave]}" onto public java.lang.String com.yun.product.controller.ProductParamController.prodParamSave(com.yun.product.model.ProductParameter)
2019-01-26 15:49:53.331 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/prodParamList]}" onto public java.lang.String com.yun.product.controller.ProductParamController.prodParamList(int)
2019-01-26 15:49:53.331 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/prodParamPreAdd]}" onto public java.lang.String com.yun.product.controller.ProductParamController.prodParamPreAdd(int,org.springframework.ui.Model)
2019-01-26 15:49:53.334 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeList]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeList(org.springframework.ui.Model)
2019-01-26 15:49:53.334 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeTree]}" onto public java.util.List<com.yun.product.model.ProductType> com.yun.product.controller.ProductTypeController.productTypeTree()
2019-01-26 15:49:53.334 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeEdit]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeEdit()
2019-01-26 15:49:53.334 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeSave]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeSave(com.yun.product.model.ProductType)
2019-01-26 15:49:53.335 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeUpdate]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeUpdate(java.lang.Integer,org.springframework.ui.Model)
2019-01-26 15:49:53.335 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeUpdateSave]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeUpdateSave(com.yun.product.model.ProductType)
2019-01-26 15:49:53.335 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeDelete]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeDelete(java.lang.Integer,javax.servlet.http.HttpServletResponse) throws java.io.IOException
2019-01-26 15:49:53.336 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockSave]}" onto public java.lang.String com.yun.stock.controller.ProductStockController.productStockSave(com.yun.stock.model.ProductStock)
2019-01-26 15:49:53.336 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockList]}" onto public java.lang.String com.yun.stock.controller.ProductStockController.productStocklist(java.lang.String,java.lang.String,org.springframework.ui.Model)
2019-01-26 15:49:53.336 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockPreAdd]}" onto public java.lang.String com.yun.stock.controller.ProductStockController.productStockPreAdd()
2019-01-26 15:49:53.337 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/main]}" onto public java.lang.String com.yun.user.controller.MainController.main()
2019-01-26 15:49:53.337 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/userList]}" onto public java.lang.String com.yun.user.controller.UserController.userList(org.springframework.ui.Model)
2019-01-26 15:49:53.337 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/login]}" onto public java.lang.String com.yun.user.controller.UserController.login(java.lang.String,java.lang.String,javax.servlet.http.HttpSession)
2019-01-26 15:49:53.338 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/userEdit]}" onto public java.lang.String com.yun.user.controller.UserController.userEdit()
2019-01-26 15:49:53.338 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/userSave]}" onto public java.lang.String com.yun.user.controller.UserController.userSave(com.yun.user.model.UserInfo)
2019-01-26 15:49:53.338 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/deleteUserInfo]}" onto public java.lang.String com.yun.user.controller.UserController.userDelete(int)
2019-01-26 15:49:53.342 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/error]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> org.springframework.boot.autoconfigure.web.BasicErrorController.error(javax.servlet.http.HttpServletRequest)
2019-01-26 15:49:53.342 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/error],produces=[text/html]}" onto public org.springframework.web.servlet.ModelAndView org.springframework.boot.autoconfigure.web.BasicErrorController.errorHtml(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
2019-01-26 15:49:53.378 [main] INFO  o.s.web.servlet.handler.SimpleUrlHandlerMapping - Mapped URL path [/webjars/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-01-26 15:49:53.378 [main] INFO  o.s.web.servlet.handler.SimpleUrlHandlerMapping - Mapped URL path [/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-01-26 15:49:53.416 [main] INFO  o.s.web.servlet.handler.SimpleUrlHandlerMapping - Mapped URL path [/**/favicon.ico] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-01-26 15:49:53.731 [main] INFO  o.s.b.a.w.WebMvcAutoConfiguration$WelcomePageHandlerMapping - Adding welcome page: class path resource [static/index.html]
2019-01-26 15:49:53.995 [main] INFO  o.s.jmx.export.annotation.AnnotationMBeanExporter - Registering beans for JMX exposure on startup
2019-01-26 15:49:54.015 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2019-01-26 15:49:54.027 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2019-01-26 15:49:54.042 [main] INFO  org.apache.tomcat.util.net.NioSelectorPool - Using a shared selector for servlet write/read
2019-01-26 15:49:54.062 [main] INFO  o.s.b.c.e.tomcat.TomcatEmbeddedServletContainer - Tomcat started on port(s): 8080 (http)
2019-01-26 15:49:54.066 [main] INFO  com.yun.YunEbStockApplication - Started YunEbStockApplication in 4.3 seconds (JVM running for 5.678)
2019-01-26 15:49:58.200 [http-nio-8080-exec-1] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring FrameworkServlet 'dispatcherServlet'
2019-01-26 15:49:58.201 [http-nio-8080-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - FrameworkServlet 'dispatcherServlet': initialization started
2019-01-26 15:49:58.219 [http-nio-8080-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - FrameworkServlet 'dispatcherServlet': initialization completed in 18 ms
2019-01-26 15:50:05.549 [http-nio-8080-exec-9] DEBUG com.yun.stock.controller.ProductStockController - 跳转到物品库存查询控制器
2019-01-26 15:50:05.845 [http-nio-8080-exec-9] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==>  Preparing: select count(*) from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 
2019-01-26 15:50:05.866 [http-nio-8080-exec-9] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==> Parameters: 
2019-01-26 15:50:05.876 [http-nio-8080-exec-9] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - <==      Total: 1
2019-01-26 15:50:05.884 [http-nio-8080-exec-9] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==>  Preparing: select ps.prod_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 order by p.prod_id,pp.prod_param_id limit ?,? 
2019-01-26 15:50:05.885 [http-nio-8080-exec-9] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==> Parameters: 0(Integer), 5(Integer)
2019-01-26 15:50:05.887 [http-nio-8080-exec-9] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - <==      Total: 2
2019-01-26 15:50:05.888 [http-nio-8080-exec-9] DEBUG com.yun.stock.controller.ProductStockController - 转到物品库存页面
2019-01-26 15:50:05.936 [http-nio-8080-exec-9] ERROR org.thymeleaf.TemplateEngine - [THYMELEAF][http-nio-8080-exec-9] Exception processing template "stock/productStockList": Exception evaluating SpringEL expression: "prodStock.productParameter.prodParamName" (stock/productStockList)
2019-01-26 15:50:05.940 [http-nio-8080-exec-9] ERROR o.a.c.c.C.[.[localhost].[/].[dispatcherServlet] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is org.thymeleaf.exceptions.TemplateProcessingException: Exception evaluating SpringEL expression: "prodStock.productParameter.prodParamName" (stock/productStockList)] with root cause
org.springframework.expression.spel.SpelEvaluationException: EL1007E: Property or field 'prodParamName' cannot be found on null
	at org.springframework.expression.spel.ast.PropertyOrFieldReference.readProperty(PropertyOrFieldReference.java:222)
	at org.springframework.expression.spel.ast.PropertyOrFieldReference.getValueInternal(PropertyOrFieldReference.java:94)
	at org.springframework.expression.spel.ast.PropertyOrFieldReference.access$000(PropertyOrFieldReference.java:46)
	at org.springframework.expression.spel.ast.PropertyOrFieldReference$AccessorLValue.getValue(PropertyOrFieldReference.java:379)
	at org.springframework.expression.spel.ast.CompoundExpression.getValueInternal(CompoundExpression.java:88)
	at org.springframework.expression.spel.ast.SpelNodeImpl.getValue(SpelNodeImpl.java:121)
	at org.springframework.expression.spel.standard.SpelExpression.getValue(SpelExpression.java:324)
	at org.thymeleaf.spring4.expression.SpelVariableExpressionEvaluator.evaluate(SpelVariableExpressionEvaluator.java:140)
	at org.thymeleaf.standard.expression.VariableExpression.executeVariable(VariableExpression.java:154)
	at org.thymeleaf.standard.expression.SimpleExpression.executeSimple(SimpleExpression.java:59)
	at org.thymeleaf.standard.expression.Expression.execute(Expression.java:103)
	at org.thymeleaf.standard.expression.Expression.execute(Expression.java:133)
	at org.thymeleaf.standard.expression.Expression.execute(Expression.java:120)
	at org.thymeleaf.standard.processor.attr.AbstractStandardTextChildModifierAttrProcessor.getText(AbstractStandardTextChildModifierAttrProcessor.java:68)
	at org.thymeleaf.processor.attr.AbstractTextChildModifierAttrProcessor.getModifiedChildren(AbstractTextChildModifierAttrProcessor.java:59)
	at org.thymeleaf.processor.attr.AbstractChildrenModifierAttrProcessor.processAttribute(AbstractChildrenModifierAttrProcessor.java:59)
	at org.thymeleaf.processor.attr.AbstractAttrProcessor.doProcess(AbstractAttrProcessor.java:87)
	at org.thymeleaf.processor.AbstractProcessor.process(AbstractProcessor.java:212)
	at org.thymeleaf.dom.Node.applyNextProcessor(Node.java:1017)
	at org.thymeleaf.dom.Node.processNode(Node.java:972)
	at org.thymeleaf.dom.NestableNode.computeNextChild(NestableNode.java:695)
	at org.thymeleaf.dom.NestableNode.doAdditionalProcess(NestableNode.java:668)
	at org.thymeleaf.dom.Node.processNode(Node.java:990)
	at org.thymeleaf.dom.NestableNode.computeNextChild(NestableNode.java:695)
	at org.thymeleaf.dom.NestableNode.doAdditionalProcess(NestableNode.java:668)
	at org.thymeleaf.dom.Node.processNode(Node.java:990)
	at org.thymeleaf.dom.NestableNode.computeNextChild(NestableNode.java:695)
	at org.thymeleaf.dom.NestableNode.doAdditionalProcess(NestableNode.java:668)
	at org.thymeleaf.dom.Node.processNode(Node.java:990)
	at org.thymeleaf.dom.NestableNode.computeNextChild(NestableNode.java:695)
	at org.thymeleaf.dom.NestableNode.doAdditionalProcess(NestableNode.java:668)
	at org.thymeleaf.dom.Node.processNode(Node.java:990)
	at org.thymeleaf.dom.NestableNode.computeNextChild(NestableNode.java:695)
	at org.thymeleaf.dom.NestableNode.doAdditionalProcess(NestableNode.java:668)
	at org.thymeleaf.dom.Node.processNode(Node.java:990)
	at org.thymeleaf.dom.NestableNode.computeNextChild(NestableNode.java:695)
	at org.thymeleaf.dom.NestableNode.doAdditionalProcess(NestableNode.java:668)
	at org.thymeleaf.dom.Node.processNode(Node.java:990)
	at org.thymeleaf.dom.NestableNode.computeNextChild(NestableNode.java:695)
	at org.thymeleaf.dom.NestableNode.doAdditionalProcess(NestableNode.java:668)
	at org.thymeleaf.dom.Node.processNode(Node.java:990)
	at org.thymeleaf.dom.NestableNode.computeNextChild(NestableNode.java:695)
	at org.thymeleaf.dom.NestableNode.doAdditionalProcess(NestableNode.java:668)
	at org.thymeleaf.dom.Node.processNode(Node.java:990)
	at org.thymeleaf.dom.Document.process(Document.java:93)
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1155)
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1060)
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1011)
	at org.thymeleaf.spring4.view.ThymeleafView.renderFragment(ThymeleafView.java:335)
	at org.thymeleaf.spring4.view.ThymeleafView.render(ThymeleafView.java:190)
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1286)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1041)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:984)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:901)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:970)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:861)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:635)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:846)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:742)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HttpPutFormContentFilter.doFilterInternal(HttpPutFormContentFilter.java:108)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:81)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:197)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:199)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:478)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:140)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:81)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:803)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1459)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:745)
2019-01-26 15:56:18.362 [http-nio-8080-exec-10] DEBUG com.yun.stock.controller.ProductStockController - 跳转到物品库存查询控制器
2019-01-26 15:56:18.366 [http-nio-8080-exec-10] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==>  Preparing: select count(*) from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 
2019-01-26 15:56:18.367 [http-nio-8080-exec-10] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==> Parameters: 
2019-01-26 15:56:18.368 [http-nio-8080-exec-10] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - <==      Total: 1
2019-01-26 15:56:18.370 [http-nio-8080-exec-10] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==>  Preparing: select ps.prod_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 order by p.prod_id,pp.prod_param_id limit ?,? 
2019-01-26 15:56:18.371 [http-nio-8080-exec-10] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==> Parameters: 0(Integer), 5(Integer)
2019-01-26 15:56:18.377 [http-nio-8080-exec-10] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - <==      Total: 2
2019-01-26 15:56:18.378 [http-nio-8080-exec-10] DEBUG com.yun.stock.controller.ProductStockController - 转到物品库存页面
2019-01-26 15:56:18.393 [http-nio-8080-exec-10] ERROR org.thymeleaf.TemplateEngine - [THYMELEAF][http-nio-8080-exec-10] Exception processing template "stock/productStockList": Exception evaluating SpringEL expression: "prodStock.productParameter.prodParamName" (stock/productStockList)
2019-01-26 15:56:18.394 [http-nio-8080-exec-10] ERROR o.a.c.c.C.[.[localhost].[/].[dispatcherServlet] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is org.thymeleaf.exceptions.TemplateProcessingException: Exception evaluating SpringEL expression: "prodStock.productParameter.prodParamName" (stock/productStockList)] with root cause
org.springframework.expression.spel.SpelEvaluationException: EL1007E: Property or field 'prodParamName' cannot be found on null
	at org.springframework.expression.spel.ast.PropertyOrFieldReference.readProperty(PropertyOrFieldReference.java:222)
	at org.springframework.expression.spel.ast.PropertyOrFieldReference.getValueInternal(PropertyOrFieldReference.java:94)
	at org.springframework.expression.spel.ast.PropertyOrFieldReference.access$000(PropertyOrFieldReference.java:46)
	at org.springframework.expression.spel.ast.PropertyOrFieldReference$AccessorLValue.getValue(PropertyOrFieldReference.java:379)
	at org.springframework.expression.spel.ast.CompoundExpression.getValueInternal(CompoundExpression.java:88)
	at org.springframework.expression.spel.ast.SpelNodeImpl.getValue(SpelNodeImpl.java:121)
	at org.springframework.expression.spel.standard.SpelExpression.getValue(SpelExpression.java:324)
	at org.thymeleaf.spring4.expression.SpelVariableExpressionEvaluator.evaluate(SpelVariableExpressionEvaluator.java:140)
	at org.thymeleaf.standard.expression.VariableExpression.executeVariable(VariableExpression.java:154)
	at org.thymeleaf.standard.expression.SimpleExpression.executeSimple(SimpleExpression.java:59)
	at org.thymeleaf.standard.expression.Expression.execute(Expression.java:103)
	at org.thymeleaf.standard.expression.Expression.execute(Expression.java:133)
	at org.thymeleaf.standard.expression.Expression.execute(Expression.java:120)
	at org.thymeleaf.standard.processor.attr.AbstractStandardTextChildModifierAttrProcessor.getText(AbstractStandardTextChildModifierAttrProcessor.java:68)
	at org.thymeleaf.processor.attr.AbstractTextChildModifierAttrProcessor.getModifiedChildren(AbstractTextChildModifierAttrProcessor.java:59)
	at org.thymeleaf.processor.attr.AbstractChildrenModifierAttrProcessor.processAttribute(AbstractChildrenModifierAttrProcessor.java:59)
	at org.thymeleaf.processor.attr.AbstractAttrProcessor.doProcess(AbstractAttrProcessor.java:87)
	at org.thymeleaf.processor.AbstractProcessor.process(AbstractProcessor.java:212)
	at org.thymeleaf.dom.Node.applyNextProcessor(Node.java:1017)
	at org.thymeleaf.dom.Node.processNode(Node.java:972)
	at org.thymeleaf.dom.NestableNode.computeNextChild(NestableNode.java:695)
	at org.thymeleaf.dom.NestableNode.doAdditionalProcess(NestableNode.java:668)
	at org.thymeleaf.dom.Node.processNode(Node.java:990)
	at org.thymeleaf.dom.NestableNode.computeNextChild(NestableNode.java:695)
	at org.thymeleaf.dom.NestableNode.doAdditionalProcess(NestableNode.java:668)
	at org.thymeleaf.dom.Node.processNode(Node.java:990)
	at org.thymeleaf.dom.NestableNode.computeNextChild(NestableNode.java:695)
	at org.thymeleaf.dom.NestableNode.doAdditionalProcess(NestableNode.java:668)
	at org.thymeleaf.dom.Node.processNode(Node.java:990)
	at org.thymeleaf.dom.NestableNode.computeNextChild(NestableNode.java:695)
	at org.thymeleaf.dom.NestableNode.doAdditionalProcess(NestableNode.java:668)
	at org.thymeleaf.dom.Node.processNode(Node.java:990)
	at org.thymeleaf.dom.NestableNode.computeNextChild(NestableNode.java:695)
	at org.thymeleaf.dom.NestableNode.doAdditionalProcess(NestableNode.java:668)
	at org.thymeleaf.dom.Node.processNode(Node.java:990)
	at org.thymeleaf.dom.NestableNode.computeNextChild(NestableNode.java:695)
	at org.thymeleaf.dom.NestableNode.doAdditionalProcess(NestableNode.java:668)
	at org.thymeleaf.dom.Node.processNode(Node.java:990)
	at org.thymeleaf.dom.NestableNode.computeNextChild(NestableNode.java:695)
	at org.thymeleaf.dom.NestableNode.doAdditionalProcess(NestableNode.java:668)
	at org.thymeleaf.dom.Node.processNode(Node.java:990)
	at org.thymeleaf.dom.NestableNode.computeNextChild(NestableNode.java:695)
	at org.thymeleaf.dom.NestableNode.doAdditionalProcess(NestableNode.java:668)
	at org.thymeleaf.dom.Node.processNode(Node.java:990)
	at org.thymeleaf.dom.Document.process(Document.java:93)
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1155)
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1060)
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1011)
	at org.thymeleaf.spring4.view.ThymeleafView.renderFragment(ThymeleafView.java:335)
	at org.thymeleaf.spring4.view.ThymeleafView.render(ThymeleafView.java:190)
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1286)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1041)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:984)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:901)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:970)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:861)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:635)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:846)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:742)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HttpPutFormContentFilter.doFilterInternal(HttpPutFormContentFilter.java:108)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:81)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:197)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:199)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:478)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:140)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:81)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:803)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1459)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:745)
2019-01-26 15:56:52.586 [http-nio-8080-exec-4] DEBUG com.yun.stock.controller.ProductStockController - 跳转到物品库存查询控制器
2019-01-26 15:56:52.593 [http-nio-8080-exec-4] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==>  Preparing: select count(*) from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 
2019-01-26 15:56:52.594 [http-nio-8080-exec-4] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==> Parameters: 
2019-01-26 15:56:52.598 [http-nio-8080-exec-4] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - <==      Total: 1
2019-01-26 15:56:52.601 [http-nio-8080-exec-4] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==>  Preparing: select ps.prod_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 order by p.prod_id,pp.prod_param_id limit ?,? 
2019-01-26 15:56:52.602 [http-nio-8080-exec-4] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==> Parameters: 0(Integer), 5(Integer)
2019-01-26 15:56:52.609 [http-nio-8080-exec-4] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - <==      Total: 2
2019-01-26 15:56:52.610 [http-nio-8080-exec-4] DEBUG com.yun.stock.controller.ProductStockController - 转到物品库存页面
2019-01-26 15:56:52.625 [http-nio-8080-exec-4] ERROR org.thymeleaf.TemplateEngine - [THYMELEAF][http-nio-8080-exec-4] Exception processing template "stock/productStockList": Exception evaluating SpringEL expression: "prodStock.productParameter.prodParamName" (stock/productStockList)
2019-01-26 15:56:52.626 [http-nio-8080-exec-4] ERROR o.a.c.c.C.[.[localhost].[/].[dispatcherServlet] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is org.thymeleaf.exceptions.TemplateProcessingException: Exception evaluating SpringEL expression: "prodStock.productParameter.prodParamName" (stock/productStockList)] with root cause
org.springframework.expression.spel.SpelEvaluationException: EL1007E: Property or field 'prodParamName' cannot be found on null
	at org.springframework.expression.spel.ast.PropertyOrFieldReference.readProperty(PropertyOrFieldReference.java:222)
	at org.springframework.expression.spel.ast.PropertyOrFieldReference.getValueInternal(PropertyOrFieldReference.java:94)
	at org.springframework.expression.spel.ast.PropertyOrFieldReference.access$000(PropertyOrFieldReference.java:46)
	at org.springframework.expression.spel.ast.PropertyOrFieldReference$AccessorLValue.getValue(PropertyOrFieldReference.java:379)
	at org.springframework.expression.spel.ast.CompoundExpression.getValueInternal(CompoundExpression.java:88)
	at org.springframework.expression.spel.ast.SpelNodeImpl.getValue(SpelNodeImpl.java:121)
	at org.springframework.expression.spel.standard.SpelExpression.getValue(SpelExpression.java:324)
	at org.thymeleaf.spring4.expression.SpelVariableExpressionEvaluator.evaluate(SpelVariableExpressionEvaluator.java:140)
	at org.thymeleaf.standard.expression.VariableExpression.executeVariable(VariableExpression.java:154)
	at org.thymeleaf.standard.expression.SimpleExpression.executeSimple(SimpleExpression.java:59)
	at org.thymeleaf.standard.expression.Expression.execute(Expression.java:103)
	at org.thymeleaf.standard.expression.Expression.execute(Expression.java:133)
	at org.thymeleaf.standard.expression.Expression.execute(Expression.java:120)
	at org.thymeleaf.standard.processor.attr.AbstractStandardTextChildModifierAttrProcessor.getText(AbstractStandardTextChildModifierAttrProcessor.java:68)
	at org.thymeleaf.processor.attr.AbstractTextChildModifierAttrProcessor.getModifiedChildren(AbstractTextChildModifierAttrProcessor.java:59)
	at org.thymeleaf.processor.attr.AbstractChildrenModifierAttrProcessor.processAttribute(AbstractChildrenModifierAttrProcessor.java:59)
	at org.thymeleaf.processor.attr.AbstractAttrProcessor.doProcess(AbstractAttrProcessor.java:87)
	at org.thymeleaf.processor.AbstractProcessor.process(AbstractProcessor.java:212)
	at org.thymeleaf.dom.Node.applyNextProcessor(Node.java:1017)
	at org.thymeleaf.dom.Node.processNode(Node.java:972)
	at org.thymeleaf.dom.NestableNode.computeNextChild(NestableNode.java:695)
	at org.thymeleaf.dom.NestableNode.doAdditionalProcess(NestableNode.java:668)
	at org.thymeleaf.dom.Node.processNode(Node.java:990)
	at org.thymeleaf.dom.NestableNode.computeNextChild(NestableNode.java:695)
	at org.thymeleaf.dom.NestableNode.doAdditionalProcess(NestableNode.java:668)
	at org.thymeleaf.dom.Node.processNode(Node.java:990)
	at org.thymeleaf.dom.NestableNode.computeNextChild(NestableNode.java:695)
	at org.thymeleaf.dom.NestableNode.doAdditionalProcess(NestableNode.java:668)
	at org.thymeleaf.dom.Node.processNode(Node.java:990)
	at org.thymeleaf.dom.NestableNode.computeNextChild(NestableNode.java:695)
	at org.thymeleaf.dom.NestableNode.doAdditionalProcess(NestableNode.java:668)
	at org.thymeleaf.dom.Node.processNode(Node.java:990)
	at org.thymeleaf.dom.NestableNode.computeNextChild(NestableNode.java:695)
	at org.thymeleaf.dom.NestableNode.doAdditionalProcess(NestableNode.java:668)
	at org.thymeleaf.dom.Node.processNode(Node.java:990)
	at org.thymeleaf.dom.NestableNode.computeNextChild(NestableNode.java:695)
	at org.thymeleaf.dom.NestableNode.doAdditionalProcess(NestableNode.java:668)
	at org.thymeleaf.dom.Node.processNode(Node.java:990)
	at org.thymeleaf.dom.NestableNode.computeNextChild(NestableNode.java:695)
	at org.thymeleaf.dom.NestableNode.doAdditionalProcess(NestableNode.java:668)
	at org.thymeleaf.dom.Node.processNode(Node.java:990)
	at org.thymeleaf.dom.NestableNode.computeNextChild(NestableNode.java:695)
	at org.thymeleaf.dom.NestableNode.doAdditionalProcess(NestableNode.java:668)
	at org.thymeleaf.dom.Node.processNode(Node.java:990)
	at org.thymeleaf.dom.Document.process(Document.java:93)
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1155)
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1060)
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1011)
	at org.thymeleaf.spring4.view.ThymeleafView.renderFragment(ThymeleafView.java:335)
	at org.thymeleaf.spring4.view.ThymeleafView.render(ThymeleafView.java:190)
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1286)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1041)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:984)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:901)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:970)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:861)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:635)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:846)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:742)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HttpPutFormContentFilter.doFilterInternal(HttpPutFormContentFilter.java:108)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:81)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:197)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:199)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:478)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:140)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:81)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:803)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1459)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:745)
2019-01-26 15:56:57.937 [http-nio-8080-exec-2] DEBUG com.yun.stock.controller.ProductStockController - 跳转到物品库存查询控制器
2019-01-26 15:56:57.940 [http-nio-8080-exec-2] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==>  Preparing: select count(*) from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 
2019-01-26 15:56:57.941 [http-nio-8080-exec-2] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==> Parameters: 
2019-01-26 15:56:57.948 [http-nio-8080-exec-2] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - <==      Total: 1
2019-01-26 15:56:57.950 [http-nio-8080-exec-2] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==>  Preparing: select ps.prod_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 order by p.prod_id,pp.prod_param_id limit ?,? 
2019-01-26 15:56:57.951 [http-nio-8080-exec-2] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==> Parameters: 0(Integer), 5(Integer)
2019-01-26 15:56:57.955 [http-nio-8080-exec-2] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - <==      Total: 2
2019-01-26 15:56:57.957 [http-nio-8080-exec-2] DEBUG com.yun.stock.controller.ProductStockController - 转到物品库存页面
2019-01-26 15:57:49.854 [http-nio-8080-exec-3] DEBUG com.yun.stock.controller.ProductStockController - 跳转到物品库存查询控制器
2019-01-26 15:57:49.856 [http-nio-8080-exec-3] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==>  Preparing: select count(*) from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 
2019-01-26 15:57:49.857 [http-nio-8080-exec-3] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==> Parameters: 
2019-01-26 15:57:49.858 [http-nio-8080-exec-3] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - <==      Total: 1
2019-01-26 15:57:49.859 [http-nio-8080-exec-3] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==>  Preparing: select ps.prod_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 order by p.prod_id,pp.prod_param_id limit ?,? 
2019-01-26 15:57:49.860 [http-nio-8080-exec-3] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==> Parameters: 0(Integer), 5(Integer)
2019-01-26 15:57:49.862 [http-nio-8080-exec-3] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - <==      Total: 2
2019-01-26 15:57:49.863 [http-nio-8080-exec-3] DEBUG com.yun.stock.controller.ProductStockController - 转到物品库存页面
2019-01-26 15:58:21.360 [http-nio-8080-exec-7] DEBUG com.yun.stock.controller.ProductStockController - 跳转到物品库存查询控制器
2019-01-26 15:58:21.361 [http-nio-8080-exec-7] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==>  Preparing: select count(*) from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 
2019-01-26 15:58:21.362 [http-nio-8080-exec-7] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==> Parameters: 
2019-01-26 15:58:21.364 [http-nio-8080-exec-7] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - <==      Total: 1
2019-01-26 15:58:21.365 [http-nio-8080-exec-7] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==>  Preparing: select ps.prod_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 order by p.prod_id,pp.prod_param_id limit ?,? 
2019-01-26 15:58:21.365 [http-nio-8080-exec-7] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==> Parameters: 0(Integer), 5(Integer)
2019-01-26 15:58:21.367 [http-nio-8080-exec-7] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - <==      Total: 2
2019-01-26 15:58:21.368 [http-nio-8080-exec-7] DEBUG com.yun.stock.controller.ProductStockController - 转到物品库存页面
2019-01-26 15:58:55.254 [http-nio-8080-exec-6] DEBUG com.yun.stock.controller.ProductStockController - 跳转到物品库存查询控制器
2019-01-26 15:58:55.257 [http-nio-8080-exec-6] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==>  Preparing: select count(*) from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 
2019-01-26 15:58:55.258 [http-nio-8080-exec-6] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==> Parameters: 
2019-01-26 15:58:55.260 [http-nio-8080-exec-6] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - <==      Total: 1
2019-01-26 15:58:55.261 [http-nio-8080-exec-6] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==>  Preparing: select ps.prod_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 order by p.prod_id,pp.prod_param_id limit ?,? 
2019-01-26 15:58:55.262 [http-nio-8080-exec-6] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==> Parameters: 0(Integer), 5(Integer)
2019-01-26 15:58:55.265 [http-nio-8080-exec-6] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - <==      Total: 2
2019-01-26 15:58:55.266 [http-nio-8080-exec-6] DEBUG com.yun.stock.controller.ProductStockController - 转到物品库存页面
2019-01-26 15:59:33.921 [http-nio-8080-exec-9] DEBUG com.yun.stock.controller.ProductStockController - 跳转到物品库存查询控制器
2019-01-26 15:59:33.927 [http-nio-8080-exec-9] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==>  Preparing: select count(*) from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 
2019-01-26 15:59:33.927 [http-nio-8080-exec-9] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==> Parameters: 
2019-01-26 15:59:33.934 [http-nio-8080-exec-9] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - <==      Total: 1
2019-01-26 15:59:33.935 [http-nio-8080-exec-9] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==>  Preparing: select ps.prod_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 order by p.prod_id,pp.prod_param_id limit ?,? 
2019-01-26 15:59:33.938 [http-nio-8080-exec-9] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==> Parameters: 0(Integer), 5(Integer)
2019-01-26 15:59:33.946 [http-nio-8080-exec-9] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - <==      Total: 2
2019-01-26 15:59:33.947 [http-nio-8080-exec-9] DEBUG com.yun.stock.controller.ProductStockController - 转到物品库存页面
2019-01-26 15:59:37.503 [http-nio-8080-exec-10] DEBUG com.yun.stock.controller.ProductStockController - 跳转到物品库存查询控制器
2019-01-26 15:59:37.505 [http-nio-8080-exec-10] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==>  Preparing: select count(*) from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 
2019-01-26 15:59:37.505 [http-nio-8080-exec-10] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==> Parameters: 
2019-01-26 15:59:37.508 [http-nio-8080-exec-10] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - <==      Total: 1
2019-01-26 15:59:37.510 [http-nio-8080-exec-10] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==>  Preparing: select ps.prod_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 order by p.prod_id,pp.prod_param_id limit ?,? 
2019-01-26 15:59:37.510 [http-nio-8080-exec-10] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==> Parameters: 0(Integer), 5(Integer)
2019-01-26 15:59:37.512 [http-nio-8080-exec-10] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - <==      Total: 2
2019-01-26 15:59:37.512 [http-nio-8080-exec-10] DEBUG com.yun.stock.controller.ProductStockController - 转到物品库存页面
2019-01-26 15:59:38.080 [http-nio-8080-exec-5] DEBUG com.yun.stock.controller.ProductStockController - 跳转到物品库存查询控制器
2019-01-26 15:59:38.082 [http-nio-8080-exec-5] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==>  Preparing: select count(*) from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 
2019-01-26 15:59:38.083 [http-nio-8080-exec-5] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==> Parameters: 
2019-01-26 15:59:38.086 [http-nio-8080-exec-5] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - <==      Total: 1
2019-01-26 15:59:38.088 [http-nio-8080-exec-5] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==>  Preparing: select ps.prod_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 order by p.prod_id,pp.prod_param_id limit ?,? 
2019-01-26 15:59:38.089 [http-nio-8080-exec-5] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==> Parameters: 0(Integer), 5(Integer)
2019-01-26 15:59:38.094 [http-nio-8080-exec-5] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - <==      Total: 2
2019-01-26 15:59:38.095 [http-nio-8080-exec-5] DEBUG com.yun.stock.controller.ProductStockController - 转到物品库存页面
2019-01-26 15:59:45.428 [http-nio-8080-exec-1] DEBUG com.yun.stock.controller.ProductStockController - 跳转到物品库存查询控制器
2019-01-26 15:59:45.432 [http-nio-8080-exec-1] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==>  Preparing: select count(*) from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 and p.prod_name like ? 
2019-01-26 15:59:45.433 [http-nio-8080-exec-1] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==> Parameters: %香%(String)
2019-01-26 15:59:45.436 [http-nio-8080-exec-1] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - <==      Total: 1
2019-01-26 15:59:45.440 [http-nio-8080-exec-1] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==>  Preparing: select ps.prod_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 and p.prod_name like ? order by p.prod_id,pp.prod_param_id limit ?,? 
2019-01-26 15:59:45.443 [http-nio-8080-exec-1] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==> Parameters: %香%(String), 0(Integer), 5(Integer)
2019-01-26 15:59:45.447 [http-nio-8080-exec-1] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - <==      Total: 1
2019-01-26 15:59:45.448 [http-nio-8080-exec-1] DEBUG com.yun.stock.controller.ProductStockController - 转到物品库存页面
2019-01-26 15:59:48.137 [http-nio-8080-exec-4] DEBUG com.yun.stock.controller.ProductStockController - 跳转到物品库存查询控制器
2019-01-26 15:59:48.138 [http-nio-8080-exec-4] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==>  Preparing: select count(*) from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 and p.prod_name like ? 
2019-01-26 15:59:48.140 [http-nio-8080-exec-4] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==> Parameters: %香%(String)
2019-01-26 15:59:48.146 [http-nio-8080-exec-4] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - <==      Total: 1
2019-01-26 15:59:48.147 [http-nio-8080-exec-4] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==>  Preparing: select ps.prod_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 and p.prod_name like ? order by p.prod_id,pp.prod_param_id limit ?,? 
2019-01-26 15:59:48.147 [http-nio-8080-exec-4] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==> Parameters: %香%(String), 0(Integer), 5(Integer)
2019-01-26 15:59:48.149 [http-nio-8080-exec-4] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - <==      Total: 1
2019-01-26 15:59:48.150 [http-nio-8080-exec-4] DEBUG com.yun.stock.controller.ProductStockController - 转到物品库存页面
2019-01-26 15:59:49.112 [http-nio-8080-exec-2] DEBUG com.yun.stock.controller.ProductStockController - 跳转到物品库存查询控制器
2019-01-26 15:59:49.115 [http-nio-8080-exec-2] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==>  Preparing: select count(*) from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 and p.prod_name like ? 
2019-01-26 15:59:49.116 [http-nio-8080-exec-2] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==> Parameters: %香%(String)
2019-01-26 15:59:49.119 [http-nio-8080-exec-2] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - <==      Total: 1
2019-01-26 15:59:49.121 [http-nio-8080-exec-2] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==>  Preparing: select ps.prod_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 and p.prod_name like ? order by p.prod_id,pp.prod_param_id limit ?,? 
2019-01-26 15:59:49.122 [http-nio-8080-exec-2] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==> Parameters: %香%(String), 0(Integer), 5(Integer)
2019-01-26 15:59:49.127 [http-nio-8080-exec-2] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - <==      Total: 1
2019-01-26 15:59:49.128 [http-nio-8080-exec-2] DEBUG com.yun.stock.controller.ProductStockController - 转到物品库存页面
2019-01-26 15:59:53.581 [http-nio-8080-exec-8] DEBUG com.yun.stock.controller.ProductStockController - 跳转到物品库存查询控制器
2019-01-26 15:59:53.584 [http-nio-8080-exec-8] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==>  Preparing: select count(*) from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 
2019-01-26 15:59:53.586 [http-nio-8080-exec-8] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==> Parameters: 
2019-01-26 15:59:53.588 [http-nio-8080-exec-8] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - <==      Total: 1
2019-01-26 15:59:53.590 [http-nio-8080-exec-8] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==>  Preparing: select ps.prod_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 order by p.prod_id,pp.prod_param_id limit ?,? 
2019-01-26 15:59:53.591 [http-nio-8080-exec-8] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==> Parameters: 0(Integer), 5(Integer)
2019-01-26 15:59:53.595 [http-nio-8080-exec-8] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - <==      Total: 2
2019-01-26 15:59:53.597 [http-nio-8080-exec-8] DEBUG com.yun.stock.controller.ProductStockController - 转到物品库存页面
2019-01-26 15:59:58.438 [http-nio-8080-exec-7] DEBUG com.yun.product.dao.ProductDao.productListForStock - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where p.prod_state=0 and prod_id not in(select prod_id from product_stock) 
2019-01-26 15:59:58.438 [http-nio-8080-exec-7] DEBUG com.yun.product.dao.ProductDao.productListForStock - ==> Parameters: 
2019-01-26 15:59:58.440 [http-nio-8080-exec-7] DEBUG com.yun.product.dao.ProductDao.productListForStock - <==      Total: 2
2019-01-26 16:00:01.198 [http-nio-8080-exec-6] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 16:00:01.199 [http-nio-8080-exec-6] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 3(Integer)
2019-01-26 16:00:01.200 [http-nio-8080-exec-6] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 0
2019-01-26 16:00:06.291 [http-nio-8080-exec-9] DEBUG c.yun.stock.dao.ProductStockDao.insertProductStock - ==>  Preparing: insert into product_stock(prod_id,prod_param_id,stock_num)values(?,?,?) 
2019-01-26 16:00:06.292 [http-nio-8080-exec-9] DEBUG c.yun.stock.dao.ProductStockDao.insertProductStock - ==> Parameters: 3(Integer), null, 3(Integer)
2019-01-26 16:00:06.442 [http-nio-8080-exec-9] DEBUG c.yun.stock.dao.ProductStockDao.insertProductStock - <==    Updates: 1
2019-01-26 16:00:06.464 [http-nio-8080-exec-10] DEBUG com.yun.stock.controller.ProductStockController - 跳转到物品库存查询控制器
2019-01-26 16:00:06.464 [http-nio-8080-exec-10] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==>  Preparing: select count(*) from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 
2019-01-26 16:00:06.465 [http-nio-8080-exec-10] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==> Parameters: 
2019-01-26 16:00:06.467 [http-nio-8080-exec-10] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - <==      Total: 1
2019-01-26 16:00:06.468 [http-nio-8080-exec-10] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==>  Preparing: select ps.prod_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 order by p.prod_id,pp.prod_param_id limit ?,? 
2019-01-26 16:00:06.469 [http-nio-8080-exec-10] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==> Parameters: 0(Integer), 5(Integer)
2019-01-26 16:00:06.473 [http-nio-8080-exec-10] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - <==      Total: 3
2019-01-26 16:00:06.474 [http-nio-8080-exec-10] DEBUG com.yun.stock.controller.ProductStockController - 转到物品库存页面
2019-01-26 16:00:32.164 [http-nio-8080-exec-5] DEBUG com.yun.stock.controller.ProductStockController - 跳转到物品库存查询控制器
2019-01-26 16:00:32.166 [http-nio-8080-exec-5] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==>  Preparing: select count(*) from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 
2019-01-26 16:00:32.166 [http-nio-8080-exec-5] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==> Parameters: 
2019-01-26 16:00:32.168 [http-nio-8080-exec-5] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - <==      Total: 1
2019-01-26 16:00:32.169 [http-nio-8080-exec-5] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==>  Preparing: select ps.prod_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 order by p.prod_id,pp.prod_param_id limit ?,? 
2019-01-26 16:00:32.170 [http-nio-8080-exec-5] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==> Parameters: 0(Integer), 5(Integer)
2019-01-26 16:00:32.177 [http-nio-8080-exec-5] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - <==      Total: 3
2019-01-26 16:00:32.177 [http-nio-8080-exec-5] DEBUG com.yun.stock.controller.ProductStockController - 转到物品库存页面
2019-01-26 16:00:35.081 [http-nio-8080-exec-4] DEBUG com.yun.product.dao.ProductDao.productListForStock - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where p.prod_state=0 and prod_id not in(select prod_id from product_stock) 
2019-01-26 16:00:35.083 [http-nio-8080-exec-4] DEBUG com.yun.product.dao.ProductDao.productListForStock - ==> Parameters: 
2019-01-26 16:00:35.097 [http-nio-8080-exec-4] DEBUG com.yun.product.dao.ProductDao.productListForStock - <==      Total: 1
2019-01-26 16:00:37.629 [http-nio-8080-exec-2] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 16:00:37.629 [http-nio-8080-exec-2] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 4(Integer)
2019-01-26 16:00:37.630 [http-nio-8080-exec-2] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 2
2019-01-26 16:00:42.006 [http-nio-8080-exec-8] DEBUG c.yun.stock.dao.ProductStockDao.insertProductStock - ==>  Preparing: insert into product_stock(prod_id,prod_param_id,stock_num)values(?,?,?) 
2019-01-26 16:00:42.007 [http-nio-8080-exec-8] DEBUG c.yun.stock.dao.ProductStockDao.insertProductStock - ==> Parameters: 4(Integer), 6(Integer), 5(Integer)
2019-01-26 16:00:42.127 [http-nio-8080-exec-8] DEBUG c.yun.stock.dao.ProductStockDao.insertProductStock - <==    Updates: 1
2019-01-26 16:00:42.135 [http-nio-8080-exec-3] DEBUG com.yun.stock.controller.ProductStockController - 跳转到物品库存查询控制器
2019-01-26 16:00:42.135 [http-nio-8080-exec-3] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==>  Preparing: select count(*) from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 
2019-01-26 16:00:42.136 [http-nio-8080-exec-3] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==> Parameters: 
2019-01-26 16:00:42.137 [http-nio-8080-exec-3] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - <==      Total: 1
2019-01-26 16:00:42.137 [http-nio-8080-exec-3] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==>  Preparing: select ps.prod_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 order by p.prod_id,pp.prod_param_id limit ?,? 
2019-01-26 16:00:42.138 [http-nio-8080-exec-3] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==> Parameters: 0(Integer), 5(Integer)
2019-01-26 16:00:42.140 [http-nio-8080-exec-3] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - <==      Total: 4
2019-01-26 16:00:42.141 [http-nio-8080-exec-3] DEBUG com.yun.stock.controller.ProductStockController - 转到物品库存页面
2019-01-26 16:00:44.618 [http-nio-8080-exec-7] DEBUG com.yun.stock.controller.ProductStockController - 跳转到物品库存查询控制器
2019-01-26 16:00:44.622 [http-nio-8080-exec-7] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==>  Preparing: select count(*) from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 
2019-01-26 16:00:44.623 [http-nio-8080-exec-7] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==> Parameters: 
2019-01-26 16:00:44.629 [http-nio-8080-exec-7] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - <==      Total: 1
2019-01-26 16:00:44.632 [http-nio-8080-exec-7] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==>  Preparing: select ps.prod_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 order by p.prod_id,pp.prod_param_id limit ?,? 
2019-01-26 16:00:44.633 [http-nio-8080-exec-7] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==> Parameters: 0(Integer), 5(Integer)
2019-01-26 16:00:44.637 [http-nio-8080-exec-7] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - <==      Total: 4
2019-01-26 16:00:44.638 [http-nio-8080-exec-7] DEBUG com.yun.stock.controller.ProductStockController - 转到物品库存页面
2019-01-26 16:00:46.669 [http-nio-8080-exec-6] DEBUG com.yun.stock.controller.ProductStockController - 跳转到物品库存查询控制器
2019-01-26 16:00:46.674 [http-nio-8080-exec-6] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==>  Preparing: select count(*) from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 
2019-01-26 16:00:46.675 [http-nio-8080-exec-6] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==> Parameters: 
2019-01-26 16:00:46.677 [http-nio-8080-exec-6] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - <==      Total: 1
2019-01-26 16:00:46.678 [http-nio-8080-exec-6] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==>  Preparing: select ps.prod_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 order by p.prod_id,pp.prod_param_id limit ?,? 
2019-01-26 16:00:46.678 [http-nio-8080-exec-6] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==> Parameters: 0(Integer), 5(Integer)
2019-01-26 16:00:46.681 [http-nio-8080-exec-6] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - <==      Total: 4
2019-01-26 16:00:46.681 [http-nio-8080-exec-6] DEBUG com.yun.stock.controller.ProductStockController - 转到物品库存页面
2019-01-26 16:14:32.037 [main] INFO  com.yun.YunEbStockApplication - Starting YunEbStockApplication on USER-20181202BJ with PID 4520 (E:\workspace\yun-eb-stock\target\classes started by Administrator in E:\workspace\yun-eb-stock)
2019-01-26 16:14:32.056 [main] DEBUG com.yun.YunEbStockApplication - Running with Spring Boot v1.5.9.RELEASE, Spring v4.3.13.RELEASE
2019-01-26 16:14:32.057 [main] INFO  com.yun.YunEbStockApplication - No active profile set, falling back to default profiles: default
2019-01-26 16:14:32.403 [background-preinit] INFO  org.hibernate.validator.internal.util.Version - HV000001: Hibernate Validator 5.3.6.Final
2019-01-26 16:14:32.596 [main] INFO  o.s.b.c.e.AnnotationConfigEmbeddedWebApplicationContext - Refreshing org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@6a28ffa4: startup date [Sat Jan 26 16:14:32 CST 2019]; root of context hierarchy
2019-01-26 16:14:34.136 [main] INFO  o.s.b.c.e.tomcat.TomcatEmbeddedServletContainer - Tomcat initialized with port(s): 8080 (http)
2019-01-26 16:14:34.146 [main] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2019-01-26 16:14:34.147 [main] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet Engine: Apache Tomcat/8.5.23
2019-01-26 16:14:34.257 [localhost-startStop-1] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2019-01-26 16:14:34.257 [localhost-startStop-1] INFO  org.springframework.web.context.ContextLoader - Root WebApplicationContext: initialization completed in 1661 ms
2019-01-26 16:14:34.396 [localhost-startStop-1] INFO  o.s.boot.web.servlet.ServletRegistrationBean - Mapping servlet: 'dispatcherServlet' to [/]
2019-01-26 16:14:34.401 [localhost-startStop-1] INFO  o.s.boot.web.servlet.FilterRegistrationBean - Mapping filter: 'characterEncodingFilter' to: [/*]
2019-01-26 16:14:34.402 [localhost-startStop-1] INFO  o.s.boot.web.servlet.FilterRegistrationBean - Mapping filter: 'hiddenHttpMethodFilter' to: [/*]
2019-01-26 16:14:34.402 [localhost-startStop-1] INFO  o.s.boot.web.servlet.FilterRegistrationBean - Mapping filter: 'httpPutFormContentFilter' to: [/*]
2019-01-26 16:14:34.402 [localhost-startStop-1] INFO  o.s.boot.web.servlet.FilterRegistrationBean - Mapping filter: 'requestContextFilter' to: [/*]
2019-01-26 16:14:35.171 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerAdapter - Looking for @ControllerAdvice: org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@6a28ffa4: startup date [Sat Jan 26 16:14:32 CST 2019]; root of context hierarchy
2019-01-26 16:14:35.232 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productListForAutoComplete]}" onto public java.util.List<com.yun.product.model.Product> com.yun.product.controller.ProductController.productListForAutoComplete(java.lang.String)
2019-01-26 16:14:35.233 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productListForStock]}" onto public java.util.List<com.yun.product.model.Product> com.yun.product.controller.ProductController.productListForStock()
2019-01-26 16:14:35.234 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productSave]}" onto public java.lang.String com.yun.product.controller.ProductController.productSave(com.yun.product.model.Product)
2019-01-26 16:14:35.234 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productPreAdd]}" onto public java.lang.String com.yun.product.controller.ProductController.productPreAdd()
2019-01-26 16:14:35.234 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productList]}" onto public java.lang.String com.yun.product.controller.ProductController.productList(org.springframework.ui.Model,java.lang.String,java.lang.String,java.lang.String,java.lang.String)
2019-01-26 16:14:35.234 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productDelete]}" onto public java.lang.String com.yun.product.controller.ProductController.productDelete(int)
2019-01-26 16:14:35.234 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productPreUpdate]}" onto public java.lang.String com.yun.product.controller.ProductController.productPreUpdate(int,org.springframework.ui.Model)
2019-01-26 16:14:35.235 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productUpdate]}" onto public java.lang.String com.yun.product.controller.ProductController.productUpdate(com.yun.product.model.Product)
2019-01-26 16:14:35.236 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/prodParamDelete]}" onto public java.lang.String com.yun.product.controller.ProductParamController.prodParamDelete(int)
2019-01-26 16:14:35.236 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/prodParamSave]}" onto public java.lang.String com.yun.product.controller.ProductParamController.prodParamSave(com.yun.product.model.ProductParameter)
2019-01-26 16:14:35.236 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/prodParamList]}" onto public java.lang.String com.yun.product.controller.ProductParamController.prodParamList(int)
2019-01-26 16:14:35.236 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/prodParamPreAdd]}" onto public java.lang.String com.yun.product.controller.ProductParamController.prodParamPreAdd(int,org.springframework.ui.Model)
2019-01-26 16:14:35.239 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeUpdate]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeUpdate(java.lang.Integer,org.springframework.ui.Model)
2019-01-26 16:14:35.239 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeUpdateSave]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeUpdateSave(com.yun.product.model.ProductType)
2019-01-26 16:14:35.239 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeDelete]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeDelete(java.lang.Integer,javax.servlet.http.HttpServletResponse) throws java.io.IOException
2019-01-26 16:14:35.239 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeList]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeList(org.springframework.ui.Model)
2019-01-26 16:14:35.240 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeTree]}" onto public java.util.List<com.yun.product.model.ProductType> com.yun.product.controller.ProductTypeController.productTypeTree()
2019-01-26 16:14:35.240 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeEdit]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeEdit()
2019-01-26 16:14:35.240 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeSave]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeSave(com.yun.product.model.ProductType)
2019-01-26 16:14:35.241 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockPreAdd]}" onto public java.lang.String com.yun.stock.controller.ProductStockController.productStockPreAdd()
2019-01-26 16:14:35.241 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockDelete]}" onto public java.lang.String com.yun.stock.controller.ProductStockController.productStockDelete(int)
2019-01-26 16:14:35.242 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockPreUpdate]}" onto public java.lang.String com.yun.stock.controller.ProductStockController.productStockPreUpdate(int,org.springframework.ui.Model)
2019-01-26 16:14:35.242 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockUpdate]}" onto public java.lang.String com.yun.stock.controller.ProductStockController.productStockUpdate(com.yun.stock.model.ProductStock)
2019-01-26 16:14:35.242 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockSave]}" onto public java.lang.String com.yun.stock.controller.ProductStockController.productStockSave(com.yun.stock.model.ProductStock)
2019-01-26 16:14:35.242 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockList]}" onto public java.lang.String com.yun.stock.controller.ProductStockController.productStocklist(java.lang.String,java.lang.String,org.springframework.ui.Model)
2019-01-26 16:14:35.243 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/main]}" onto public java.lang.String com.yun.user.controller.MainController.main()
2019-01-26 16:14:35.243 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/userList]}" onto public java.lang.String com.yun.user.controller.UserController.userList(org.springframework.ui.Model)
2019-01-26 16:14:35.243 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/login]}" onto public java.lang.String com.yun.user.controller.UserController.login(java.lang.String,java.lang.String,javax.servlet.http.HttpSession)
2019-01-26 16:14:35.244 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/userEdit]}" onto public java.lang.String com.yun.user.controller.UserController.userEdit()
2019-01-26 16:14:35.244 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/userSave]}" onto public java.lang.String com.yun.user.controller.UserController.userSave(com.yun.user.model.UserInfo)
2019-01-26 16:14:35.244 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/deleteUserInfo]}" onto public java.lang.String com.yun.user.controller.UserController.userDelete(int)
2019-01-26 16:14:35.247 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/error]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> org.springframework.boot.autoconfigure.web.BasicErrorController.error(javax.servlet.http.HttpServletRequest)
2019-01-26 16:14:35.247 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/error],produces=[text/html]}" onto public org.springframework.web.servlet.ModelAndView org.springframework.boot.autoconfigure.web.BasicErrorController.errorHtml(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
2019-01-26 16:14:35.281 [main] INFO  o.s.web.servlet.handler.SimpleUrlHandlerMapping - Mapped URL path [/webjars/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-01-26 16:14:35.281 [main] INFO  o.s.web.servlet.handler.SimpleUrlHandlerMapping - Mapped URL path [/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-01-26 16:14:35.319 [main] INFO  o.s.web.servlet.handler.SimpleUrlHandlerMapping - Mapped URL path [/**/favicon.ico] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-01-26 16:14:35.617 [main] INFO  o.s.b.a.w.WebMvcAutoConfiguration$WelcomePageHandlerMapping - Adding welcome page: class path resource [static/index.html]
2019-01-26 16:14:35.881 [main] INFO  o.s.jmx.export.annotation.AnnotationMBeanExporter - Registering beans for JMX exposure on startup
2019-01-26 16:14:35.902 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2019-01-26 16:14:35.914 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2019-01-26 16:14:35.927 [main] INFO  org.apache.tomcat.util.net.NioSelectorPool - Using a shared selector for servlet write/read
2019-01-26 16:14:35.945 [main] INFO  o.s.b.c.e.tomcat.TomcatEmbeddedServletContainer - Tomcat started on port(s): 8080 (http)
2019-01-26 16:14:35.949 [main] INFO  com.yun.YunEbStockApplication - Started YunEbStockApplication in 4.447 seconds (JVM running for 5.598)
2019-01-26 16:14:56.632 [http-nio-8080-exec-1] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring FrameworkServlet 'dispatcherServlet'
2019-01-26 16:14:56.632 [http-nio-8080-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - FrameworkServlet 'dispatcherServlet': initialization started
2019-01-26 16:14:56.654 [http-nio-8080-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - FrameworkServlet 'dispatcherServlet': initialization completed in 22 ms
2019-01-26 16:14:59.609 [http-nio-8080-exec-8] DEBUG com.yun.stock.controller.ProductStockController - 跳转到物品库存查询控制器
2019-01-26 16:14:59.895 [http-nio-8080-exec-8] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==>  Preparing: select count(*) from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 
2019-01-26 16:14:59.915 [http-nio-8080-exec-8] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==> Parameters: 
2019-01-26 16:14:59.925 [http-nio-8080-exec-8] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - <==      Total: 1
2019-01-26 16:14:59.932 [http-nio-8080-exec-8] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==>  Preparing: select ps.prod_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 order by p.prod_id,pp.prod_param_id limit ?,? 
2019-01-26 16:14:59.933 [http-nio-8080-exec-8] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==> Parameters: 0(Integer), 5(Integer)
2019-01-26 16:14:59.937 [http-nio-8080-exec-8] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - <==      Total: 4
2019-01-26 16:14:59.938 [http-nio-8080-exec-8] DEBUG com.yun.stock.controller.ProductStockController - 转到物品库存页面
2019-01-26 16:22:26.736 [http-nio-8080-exec-5] DEBUG com.yun.stock.controller.ProductStockController - 跳转到物品库存查询控制器
2019-01-26 16:22:26.742 [http-nio-8080-exec-5] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==>  Preparing: select count(*) from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 
2019-01-26 16:22:26.744 [http-nio-8080-exec-5] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==> Parameters: 
2019-01-26 16:22:26.748 [http-nio-8080-exec-5] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - <==      Total: 1
2019-01-26 16:22:26.750 [http-nio-8080-exec-5] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==>  Preparing: select ps.prod_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 order by p.prod_id,pp.prod_param_id limit ?,? 
2019-01-26 16:22:26.751 [http-nio-8080-exec-5] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==> Parameters: 0(Integer), 5(Integer)
2019-01-26 16:22:26.757 [http-nio-8080-exec-5] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - <==      Total: 4
2019-01-26 16:22:26.758 [http-nio-8080-exec-5] DEBUG com.yun.stock.controller.ProductStockController - 转到物品库存页面
2019-01-26 16:22:28.231 [http-nio-8080-exec-1] DEBUG c.y.stock.dao.ProductStockDao.findProductStockById - ==>  Preparing: select ps.prod_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 and ps.prod_stock_id=? 
2019-01-26 16:22:28.231 [http-nio-8080-exec-1] DEBUG c.y.stock.dao.ProductStockDao.findProductStockById - ==> Parameters: 2(Integer)
2019-01-26 16:22:28.236 [http-nio-8080-exec-1] DEBUG c.y.stock.dao.ProductStockDao.findProductStockById - <==      Total: 1
2019-01-26 16:22:56.222 [http-nio-8080-exec-10] DEBUG com.yun.stock.controller.ProductStockController - 跳转到物品库存查询控制器
2019-01-26 16:22:56.226 [http-nio-8080-exec-10] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==>  Preparing: select count(*) from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 
2019-01-26 16:22:56.227 [http-nio-8080-exec-10] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==> Parameters: 
2019-01-26 16:22:56.229 [http-nio-8080-exec-10] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - <==      Total: 1
2019-01-26 16:22:56.231 [http-nio-8080-exec-10] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==>  Preparing: select ps.prod_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 order by p.prod_id,pp.prod_param_id limit ?,? 
2019-01-26 16:22:56.232 [http-nio-8080-exec-10] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==> Parameters: 0(Integer), 5(Integer)
2019-01-26 16:22:56.241 [http-nio-8080-exec-10] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - <==      Total: 4
2019-01-26 16:22:56.242 [http-nio-8080-exec-10] DEBUG com.yun.stock.controller.ProductStockController - 转到物品库存页面
2019-01-26 16:22:58.133 [http-nio-8080-exec-7] DEBUG c.y.stock.dao.ProductStockDao.findProductStockById - ==>  Preparing: select ps.prod_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 and ps.prod_stock_id=? 
2019-01-26 16:22:58.136 [http-nio-8080-exec-7] DEBUG c.y.stock.dao.ProductStockDao.findProductStockById - ==> Parameters: 2(Integer)
2019-01-26 16:22:58.140 [http-nio-8080-exec-7] DEBUG c.y.stock.dao.ProductStockDao.findProductStockById - <==      Total: 1
2019-01-26 16:23:03.809 [http-nio-8080-exec-8] DEBUG com.yun.stock.controller.ProductStockController - 跳转到物品库存查询控制器
2019-01-26 16:23:03.812 [http-nio-8080-exec-8] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==>  Preparing: select count(*) from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 
2019-01-26 16:23:03.813 [http-nio-8080-exec-8] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==> Parameters: 
2019-01-26 16:23:03.815 [http-nio-8080-exec-8] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - <==      Total: 1
2019-01-26 16:23:03.817 [http-nio-8080-exec-8] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==>  Preparing: select ps.prod_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 order by p.prod_id,pp.prod_param_id limit ?,? 
2019-01-26 16:23:03.818 [http-nio-8080-exec-8] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==> Parameters: 0(Integer), 5(Integer)
2019-01-26 16:23:03.830 [http-nio-8080-exec-8] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - <==      Total: 4
2019-01-26 16:23:03.831 [http-nio-8080-exec-8] DEBUG com.yun.stock.controller.ProductStockController - 转到物品库存页面
2019-01-26 16:23:07.443 [http-nio-8080-exec-6] DEBUG c.yun.stock.dao.ProductStockDao.deleteProductStock - ==>  Preparing: delete from product_stock where prod_stock_id=? 
2019-01-26 16:23:07.444 [http-nio-8080-exec-6] DEBUG c.yun.stock.dao.ProductStockDao.deleteProductStock - ==> Parameters: 2(Integer)
2019-01-26 16:23:07.511 [http-nio-8080-exec-6] DEBUG c.yun.stock.dao.ProductStockDao.deleteProductStock - <==    Updates: 1
2019-01-26 16:23:07.536 [http-nio-8080-exec-9] DEBUG com.yun.stock.controller.ProductStockController - 跳转到物品库存查询控制器
2019-01-26 16:23:07.537 [http-nio-8080-exec-9] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==>  Preparing: select count(*) from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 
2019-01-26 16:23:07.538 [http-nio-8080-exec-9] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==> Parameters: 
2019-01-26 16:23:07.540 [http-nio-8080-exec-9] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - <==      Total: 1
2019-01-26 16:23:07.541 [http-nio-8080-exec-9] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==>  Preparing: select ps.prod_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 order by p.prod_id,pp.prod_param_id limit ?,? 
2019-01-26 16:23:07.542 [http-nio-8080-exec-9] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==> Parameters: 0(Integer), 5(Integer)
2019-01-26 16:23:07.547 [http-nio-8080-exec-9] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - <==      Total: 3
2019-01-26 16:23:07.548 [http-nio-8080-exec-9] DEBUG com.yun.stock.controller.ProductStockController - 转到物品库存页面
2019-01-26 16:23:09.397 [http-nio-8080-exec-4] DEBUG c.y.stock.dao.ProductStockDao.findProductStockById - ==>  Preparing: select ps.prod_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 and ps.prod_stock_id=? 
2019-01-26 16:23:09.399 [http-nio-8080-exec-4] DEBUG c.y.stock.dao.ProductStockDao.findProductStockById - ==> Parameters: 4(Integer)
2019-01-26 16:23:09.401 [http-nio-8080-exec-4] DEBUG c.y.stock.dao.ProductStockDao.findProductStockById - <==      Total: 1
2019-01-26 16:23:10.777 [http-nio-8080-exec-5] DEBUG c.yun.stock.dao.ProductStockDao.updateProductStock - ==>  Preparing: update product_stock set prod_id=?,prod_param_id=?,stock_num=? where prod_stock_id=? 
2019-01-26 16:23:10.778 [http-nio-8080-exec-5] DEBUG c.yun.stock.dao.ProductStockDao.updateProductStock - ==> Parameters: 4(Integer), 6(Integer), 5(Integer), null
2019-01-26 16:23:10.780 [http-nio-8080-exec-5] DEBUG c.yun.stock.dao.ProductStockDao.updateProductStock - <==    Updates: 0
2019-01-26 16:23:10.784 [http-nio-8080-exec-1] DEBUG com.yun.stock.controller.ProductStockController - 跳转到物品库存查询控制器
2019-01-26 16:23:10.786 [http-nio-8080-exec-1] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==>  Preparing: select count(*) from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 
2019-01-26 16:23:10.787 [http-nio-8080-exec-1] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==> Parameters: 
2019-01-26 16:23:10.789 [http-nio-8080-exec-1] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - <==      Total: 1
2019-01-26 16:23:10.790 [http-nio-8080-exec-1] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==>  Preparing: select ps.prod_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 order by p.prod_id,pp.prod_param_id limit ?,? 
2019-01-26 16:23:10.790 [http-nio-8080-exec-1] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==> Parameters: 0(Integer), 5(Integer)
2019-01-26 16:23:10.793 [http-nio-8080-exec-1] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - <==      Total: 3
2019-01-26 16:23:10.793 [http-nio-8080-exec-1] DEBUG com.yun.stock.controller.ProductStockController - 转到物品库存页面
2019-01-26 16:23:12.887 [http-nio-8080-exec-3] DEBUG c.y.stock.dao.ProductStockDao.findProductStockById - ==>  Preparing: select ps.prod_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 and ps.prod_stock_id=? 
2019-01-26 16:23:12.888 [http-nio-8080-exec-3] DEBUG c.y.stock.dao.ProductStockDao.findProductStockById - ==> Parameters: 4(Integer)
2019-01-26 16:23:12.897 [http-nio-8080-exec-3] DEBUG c.y.stock.dao.ProductStockDao.findProductStockById - <==      Total: 1
2019-01-26 16:23:15.697 [http-nio-8080-exec-2] DEBUG c.yun.stock.dao.ProductStockDao.updateProductStock - ==>  Preparing: update product_stock set prod_id=?,prod_param_id=?,stock_num=? where prod_stock_id=? 
2019-01-26 16:23:15.697 [http-nio-8080-exec-2] DEBUG c.yun.stock.dao.ProductStockDao.updateProductStock - ==> Parameters: 4(Integer), 6(Integer), 8(Integer), null
2019-01-26 16:23:15.698 [http-nio-8080-exec-2] DEBUG c.yun.stock.dao.ProductStockDao.updateProductStock - <==    Updates: 0
2019-01-26 16:23:15.706 [http-nio-8080-exec-10] DEBUG com.yun.stock.controller.ProductStockController - 跳转到物品库存查询控制器
2019-01-26 16:23:15.707 [http-nio-8080-exec-10] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==>  Preparing: select count(*) from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 
2019-01-26 16:23:15.707 [http-nio-8080-exec-10] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==> Parameters: 
2019-01-26 16:23:15.711 [http-nio-8080-exec-10] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - <==      Total: 1
2019-01-26 16:23:15.712 [http-nio-8080-exec-10] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==>  Preparing: select ps.prod_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 order by p.prod_id,pp.prod_param_id limit ?,? 
2019-01-26 16:23:15.713 [http-nio-8080-exec-10] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==> Parameters: 0(Integer), 5(Integer)
2019-01-26 16:23:15.715 [http-nio-8080-exec-10] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - <==      Total: 3
2019-01-26 16:23:15.715 [http-nio-8080-exec-10] DEBUG com.yun.stock.controller.ProductStockController - 转到物品库存页面
2019-01-26 16:23:18.662 [http-nio-8080-exec-7] DEBUG c.y.stock.dao.ProductStockDao.findProductStockById - ==>  Preparing: select ps.prod_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 and ps.prod_stock_id=? 
2019-01-26 16:23:18.663 [http-nio-8080-exec-7] DEBUG c.y.stock.dao.ProductStockDao.findProductStockById - ==> Parameters: 4(Integer)
2019-01-26 16:23:18.665 [http-nio-8080-exec-7] DEBUG c.y.stock.dao.ProductStockDao.findProductStockById - <==      Total: 1
2019-01-26 16:23:23.855 [http-nio-8080-exec-8] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 16:23:23.855 [http-nio-8080-exec-8] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 4(Integer)
2019-01-26 16:23:23.857 [http-nio-8080-exec-8] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 2
2019-01-26 16:23:29.065 [http-nio-8080-exec-5] DEBUG c.yun.stock.dao.ProductStockDao.updateProductStock - ==>  Preparing: update product_stock set prod_id=?,prod_param_id=?,stock_num=? where prod_stock_id=? 
2019-01-26 16:23:29.066 [http-nio-8080-exec-5] DEBUG c.yun.stock.dao.ProductStockDao.updateProductStock - ==> Parameters: 4(Integer), 5(Integer), 8(Integer), null
2019-01-26 16:23:29.071 [http-nio-8080-exec-5] DEBUG c.yun.stock.dao.ProductStockDao.updateProductStock - <==    Updates: 0
2019-01-26 16:23:29.080 [http-nio-8080-exec-1] DEBUG com.yun.stock.controller.ProductStockController - 跳转到物品库存查询控制器
2019-01-26 16:23:29.081 [http-nio-8080-exec-1] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==>  Preparing: select count(*) from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 
2019-01-26 16:23:29.081 [http-nio-8080-exec-1] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==> Parameters: 
2019-01-26 16:23:29.083 [http-nio-8080-exec-1] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - <==      Total: 1
2019-01-26 16:23:29.084 [http-nio-8080-exec-1] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==>  Preparing: select ps.prod_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 order by p.prod_id,pp.prod_param_id limit ?,? 
2019-01-26 16:23:29.085 [http-nio-8080-exec-1] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==> Parameters: 0(Integer), 5(Integer)
2019-01-26 16:23:29.089 [http-nio-8080-exec-1] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - <==      Total: 3
2019-01-26 16:23:29.089 [http-nio-8080-exec-1] DEBUG com.yun.stock.controller.ProductStockController - 转到物品库存页面
2019-01-26 16:23:34.738 [http-nio-8080-exec-3] DEBUG c.yun.stock.dao.ProductStockDao.deleteProductStock - ==>  Preparing: delete from product_stock where prod_stock_id=? 
2019-01-26 16:23:34.739 [http-nio-8080-exec-3] DEBUG c.yun.stock.dao.ProductStockDao.deleteProductStock - ==> Parameters: 3(Integer)
2019-01-26 16:23:34.788 [http-nio-8080-exec-3] DEBUG c.yun.stock.dao.ProductStockDao.deleteProductStock - <==    Updates: 1
2019-01-26 16:23:34.795 [http-nio-8080-exec-2] DEBUG com.yun.stock.controller.ProductStockController - 跳转到物品库存查询控制器
2019-01-26 16:23:34.795 [http-nio-8080-exec-2] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==>  Preparing: select count(*) from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 
2019-01-26 16:23:34.795 [http-nio-8080-exec-2] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==> Parameters: 
2019-01-26 16:23:34.796 [http-nio-8080-exec-2] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - <==      Total: 1
2019-01-26 16:23:34.797 [http-nio-8080-exec-2] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==>  Preparing: select ps.prod_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 order by p.prod_id,pp.prod_param_id limit ?,? 
2019-01-26 16:23:34.797 [http-nio-8080-exec-2] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==> Parameters: 0(Integer), 5(Integer)
2019-01-26 16:23:34.799 [http-nio-8080-exec-2] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - <==      Total: 2
2019-01-26 16:23:34.799 [http-nio-8080-exec-2] DEBUG com.yun.stock.controller.ProductStockController - 转到物品库存页面
2019-01-26 16:24:30.038 [main] INFO  com.yun.YunEbStockApplication - Starting YunEbStockApplication on USER-20181202BJ with PID 4676 (E:\workspace\yun-eb-stock\target\classes started by Administrator in E:\workspace\yun-eb-stock)
2019-01-26 16:24:30.044 [main] DEBUG com.yun.YunEbStockApplication - Running with Spring Boot v1.5.9.RELEASE, Spring v4.3.13.RELEASE
2019-01-26 16:24:30.044 [main] INFO  com.yun.YunEbStockApplication - No active profile set, falling back to default profiles: default
2019-01-26 16:24:30.229 [background-preinit] INFO  org.hibernate.validator.internal.util.Version - HV000001: Hibernate Validator 5.3.6.Final
2019-01-26 16:24:30.486 [main] INFO  o.s.b.c.e.AnnotationConfigEmbeddedWebApplicationContext - Refreshing org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@27216cd: startup date [Sat Jan 26 16:24:30 CST 2019]; root of context hierarchy
2019-01-26 16:24:32.159 [main] INFO  o.s.b.c.e.tomcat.TomcatEmbeddedServletContainer - Tomcat initialized with port(s): 8080 (http)
2019-01-26 16:24:32.170 [main] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2019-01-26 16:24:32.172 [main] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet Engine: Apache Tomcat/8.5.23
2019-01-26 16:24:32.291 [localhost-startStop-1] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2019-01-26 16:24:32.292 [localhost-startStop-1] INFO  org.springframework.web.context.ContextLoader - Root WebApplicationContext: initialization completed in 1806 ms
2019-01-26 16:24:32.489 [localhost-startStop-1] INFO  o.s.boot.web.servlet.ServletRegistrationBean - Mapping servlet: 'dispatcherServlet' to [/]
2019-01-26 16:24:32.498 [localhost-startStop-1] INFO  o.s.boot.web.servlet.FilterRegistrationBean - Mapping filter: 'characterEncodingFilter' to: [/*]
2019-01-26 16:24:32.499 [localhost-startStop-1] INFO  o.s.boot.web.servlet.FilterRegistrationBean - Mapping filter: 'hiddenHttpMethodFilter' to: [/*]
2019-01-26 16:24:32.499 [localhost-startStop-1] INFO  o.s.boot.web.servlet.FilterRegistrationBean - Mapping filter: 'httpPutFormContentFilter' to: [/*]
2019-01-26 16:24:32.499 [localhost-startStop-1] INFO  o.s.boot.web.servlet.FilterRegistrationBean - Mapping filter: 'requestContextFilter' to: [/*]
2019-01-26 16:24:33.506 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerAdapter - Looking for @ControllerAdvice: org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@27216cd: startup date [Sat Jan 26 16:24:30 CST 2019]; root of context hierarchy
2019-01-26 16:24:33.591 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productPreAdd]}" onto public java.lang.String com.yun.product.controller.ProductController.productPreAdd()
2019-01-26 16:24:33.594 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productList]}" onto public java.lang.String com.yun.product.controller.ProductController.productList(org.springframework.ui.Model,java.lang.String,java.lang.String,java.lang.String,java.lang.String)
2019-01-26 16:24:33.594 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productSave]}" onto public java.lang.String com.yun.product.controller.ProductController.productSave(com.yun.product.model.Product)
2019-01-26 16:24:33.594 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productDelete]}" onto public java.lang.String com.yun.product.controller.ProductController.productDelete(int)
2019-01-26 16:24:33.595 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productPreUpdate]}" onto public java.lang.String com.yun.product.controller.ProductController.productPreUpdate(int,org.springframework.ui.Model)
2019-01-26 16:24:33.595 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productUpdate]}" onto public java.lang.String com.yun.product.controller.ProductController.productUpdate(com.yun.product.model.Product)
2019-01-26 16:24:33.595 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productListForAutoComplete]}" onto public java.util.List<com.yun.product.model.Product> com.yun.product.controller.ProductController.productListForAutoComplete(java.lang.String)
2019-01-26 16:24:33.596 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productListForStock]}" onto public java.util.List<com.yun.product.model.Product> com.yun.product.controller.ProductController.productListForStock()
2019-01-26 16:24:33.597 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/prodParamDelete]}" onto public java.lang.String com.yun.product.controller.ProductParamController.prodParamDelete(int)
2019-01-26 16:24:33.597 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/prodParamList]}" onto public java.lang.String com.yun.product.controller.ProductParamController.prodParamList(int)
2019-01-26 16:24:33.597 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/prodParamSave]}" onto public java.lang.String com.yun.product.controller.ProductParamController.prodParamSave(com.yun.product.model.ProductParameter)
2019-01-26 16:24:33.597 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/prodParamPreAdd]}" onto public java.lang.String com.yun.product.controller.ProductParamController.prodParamPreAdd(int,org.springframework.ui.Model)
2019-01-26 16:24:33.600 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeTree]}" onto public java.util.List<com.yun.product.model.ProductType> com.yun.product.controller.ProductTypeController.productTypeTree()
2019-01-26 16:24:33.601 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeList]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeList(org.springframework.ui.Model)
2019-01-26 16:24:33.601 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeEdit]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeEdit()
2019-01-26 16:24:33.601 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeSave]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeSave(com.yun.product.model.ProductType)
2019-01-26 16:24:33.602 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeUpdate]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeUpdate(java.lang.Integer,org.springframework.ui.Model)
2019-01-26 16:24:33.602 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeUpdateSave]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeUpdateSave(com.yun.product.model.ProductType)
2019-01-26 16:24:33.602 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeDelete]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeDelete(java.lang.Integer,javax.servlet.http.HttpServletResponse) throws java.io.IOException
2019-01-26 16:24:33.603 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockList]}" onto public java.lang.String com.yun.stock.controller.ProductStockController.productStocklist(java.lang.String,java.lang.String,org.springframework.ui.Model)
2019-01-26 16:24:33.603 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockSave]}" onto public java.lang.String com.yun.stock.controller.ProductStockController.productStockSave(com.yun.stock.model.ProductStock)
2019-01-26 16:24:33.603 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockPreAdd]}" onto public java.lang.String com.yun.stock.controller.ProductStockController.productStockPreAdd()
2019-01-26 16:24:33.603 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockDelete]}" onto public java.lang.String com.yun.stock.controller.ProductStockController.productStockDelete(int)
2019-01-26 16:24:33.604 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockPreUpdate]}" onto public java.lang.String com.yun.stock.controller.ProductStockController.productStockPreUpdate(int,org.springframework.ui.Model)
2019-01-26 16:24:33.604 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockUpdate]}" onto public java.lang.String com.yun.stock.controller.ProductStockController.productStockUpdate(com.yun.stock.model.ProductStock)
2019-01-26 16:24:33.604 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/main]}" onto public java.lang.String com.yun.user.controller.MainController.main()
2019-01-26 16:24:33.605 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/userList]}" onto public java.lang.String com.yun.user.controller.UserController.userList(org.springframework.ui.Model)
2019-01-26 16:24:33.605 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/login]}" onto public java.lang.String com.yun.user.controller.UserController.login(java.lang.String,java.lang.String,javax.servlet.http.HttpSession)
2019-01-26 16:24:33.605 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/userEdit]}" onto public java.lang.String com.yun.user.controller.UserController.userEdit()
2019-01-26 16:24:33.606 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/userSave]}" onto public java.lang.String com.yun.user.controller.UserController.userSave(com.yun.user.model.UserInfo)
2019-01-26 16:24:33.606 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/deleteUserInfo]}" onto public java.lang.String com.yun.user.controller.UserController.userDelete(int)
2019-01-26 16:24:33.609 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/error]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> org.springframework.boot.autoconfigure.web.BasicErrorController.error(javax.servlet.http.HttpServletRequest)
2019-01-26 16:24:33.610 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/error],produces=[text/html]}" onto public org.springframework.web.servlet.ModelAndView org.springframework.boot.autoconfigure.web.BasicErrorController.errorHtml(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
2019-01-26 16:24:33.661 [main] INFO  o.s.web.servlet.handler.SimpleUrlHandlerMapping - Mapped URL path [/webjars/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-01-26 16:24:33.661 [main] INFO  o.s.web.servlet.handler.SimpleUrlHandlerMapping - Mapped URL path [/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-01-26 16:24:33.718 [main] INFO  o.s.web.servlet.handler.SimpleUrlHandlerMapping - Mapped URL path [/**/favicon.ico] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-01-26 16:24:34.111 [main] INFO  o.s.b.a.w.WebMvcAutoConfiguration$WelcomePageHandlerMapping - Adding welcome page: class path resource [static/index.html]
2019-01-26 16:24:34.576 [main] INFO  o.s.jmx.export.annotation.AnnotationMBeanExporter - Registering beans for JMX exposure on startup
2019-01-26 16:24:34.599 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2019-01-26 16:24:34.613 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2019-01-26 16:24:34.805 [main] INFO  org.apache.tomcat.util.net.NioSelectorPool - Using a shared selector for servlet write/read
2019-01-26 16:24:34.831 [main] INFO  o.s.b.c.e.tomcat.TomcatEmbeddedServletContainer - Tomcat started on port(s): 8080 (http)
2019-01-26 16:24:34.837 [main] INFO  com.yun.YunEbStockApplication - Started YunEbStockApplication in 5.601 seconds (JVM running for 7.24)
2019-01-26 16:25:02.947 [http-nio-8080-exec-1] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring FrameworkServlet 'dispatcherServlet'
2019-01-26 16:25:02.948 [http-nio-8080-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - FrameworkServlet 'dispatcherServlet': initialization started
2019-01-26 16:25:02.976 [http-nio-8080-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - FrameworkServlet 'dispatcherServlet': initialization completed in 28 ms
2019-01-26 16:25:05.641 [http-nio-8080-exec-8] DEBUG com.yun.stock.controller.ProductStockController - 跳转到物品库存查询控制器
2019-01-26 16:25:05.990 [http-nio-8080-exec-8] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==>  Preparing: select count(*) from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 
2019-01-26 16:25:06.014 [http-nio-8080-exec-8] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==> Parameters: 
2019-01-26 16:25:06.026 [http-nio-8080-exec-8] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - <==      Total: 1
2019-01-26 16:25:06.038 [http-nio-8080-exec-8] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==>  Preparing: select ps.prod_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 order by p.prod_id,pp.prod_param_id limit ?,? 
2019-01-26 16:25:06.039 [http-nio-8080-exec-8] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==> Parameters: 0(Integer), 5(Integer)
2019-01-26 16:25:06.042 [http-nio-8080-exec-8] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - <==      Total: 2
2019-01-26 16:25:06.042 [http-nio-8080-exec-8] DEBUG com.yun.stock.controller.ProductStockController - 转到物品库存页面
2019-01-26 16:25:17.150 [http-nio-8080-exec-1] DEBUG c.y.stock.dao.ProductStockDao.findProductStockById - ==>  Preparing: select ps.prod_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 and ps.prod_stock_id=? 
2019-01-26 16:25:17.151 [http-nio-8080-exec-1] DEBUG c.y.stock.dao.ProductStockDao.findProductStockById - ==> Parameters: 4(Integer)
2019-01-26 16:25:17.157 [http-nio-8080-exec-1] DEBUG c.y.stock.dao.ProductStockDao.findProductStockById - <==      Total: 1
2019-01-26 16:25:20.247 [http-nio-8080-exec-4] DEBUG c.yun.stock.dao.ProductStockDao.updateProductStock - ==>  Preparing: update product_stock set prod_id=?,prod_param_id=?,stock_num=? where prod_stock_id=? 
2019-01-26 16:25:20.247 [http-nio-8080-exec-4] DEBUG c.yun.stock.dao.ProductStockDao.updateProductStock - ==> Parameters: 4(Integer), 6(Integer), 8(Integer), null
2019-01-26 16:25:20.249 [http-nio-8080-exec-4] DEBUG c.yun.stock.dao.ProductStockDao.updateProductStock - <==    Updates: 0
2019-01-26 16:25:57.034 [main] INFO  com.yun.YunEbStockApplication - Starting YunEbStockApplication on USER-20181202BJ with PID 5460 (E:\workspace\yun-eb-stock\target\classes started by Administrator in E:\workspace\yun-eb-stock)
2019-01-26 16:25:57.038 [main] DEBUG com.yun.YunEbStockApplication - Running with Spring Boot v1.5.9.RELEASE, Spring v4.3.13.RELEASE
2019-01-26 16:25:57.039 [main] INFO  com.yun.YunEbStockApplication - No active profile set, falling back to default profiles: default
2019-01-26 16:25:57.300 [background-preinit] INFO  org.hibernate.validator.internal.util.Version - HV000001: Hibernate Validator 5.3.6.Final
2019-01-26 16:25:57.588 [main] INFO  o.s.b.c.e.AnnotationConfigEmbeddedWebApplicationContext - Refreshing org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@6a28ffa4: startup date [Sat Jan 26 16:25:57 CST 2019]; root of context hierarchy
2019-01-26 16:25:59.156 [main] INFO  o.s.b.c.e.tomcat.TomcatEmbeddedServletContainer - Tomcat initialized with port(s): 8080 (http)
2019-01-26 16:25:59.169 [main] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2019-01-26 16:25:59.170 [main] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet Engine: Apache Tomcat/8.5.23
2019-01-26 16:25:59.276 [localhost-startStop-1] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2019-01-26 16:25:59.276 [localhost-startStop-1] INFO  org.springframework.web.context.ContextLoader - Root WebApplicationContext: initialization completed in 1688 ms
2019-01-26 16:25:59.420 [localhost-startStop-1] INFO  o.s.boot.web.servlet.ServletRegistrationBean - Mapping servlet: 'dispatcherServlet' to [/]
2019-01-26 16:25:59.425 [localhost-startStop-1] INFO  o.s.boot.web.servlet.FilterRegistrationBean - Mapping filter: 'characterEncodingFilter' to: [/*]
2019-01-26 16:25:59.426 [localhost-startStop-1] INFO  o.s.boot.web.servlet.FilterRegistrationBean - Mapping filter: 'hiddenHttpMethodFilter' to: [/*]
2019-01-26 16:25:59.426 [localhost-startStop-1] INFO  o.s.boot.web.servlet.FilterRegistrationBean - Mapping filter: 'httpPutFormContentFilter' to: [/*]
2019-01-26 16:25:59.426 [localhost-startStop-1] INFO  o.s.boot.web.servlet.FilterRegistrationBean - Mapping filter: 'requestContextFilter' to: [/*]
2019-01-26 16:26:00.239 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerAdapter - Looking for @ControllerAdvice: org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@6a28ffa4: startup date [Sat Jan 26 16:25:57 CST 2019]; root of context hierarchy
2019-01-26 16:26:00.298 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productListForAutoComplete]}" onto public java.util.List<com.yun.product.model.Product> com.yun.product.controller.ProductController.productListForAutoComplete(java.lang.String)
2019-01-26 16:26:00.300 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productListForStock]}" onto public java.util.List<com.yun.product.model.Product> com.yun.product.controller.ProductController.productListForStock()
2019-01-26 16:26:00.300 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productPreAdd]}" onto public java.lang.String com.yun.product.controller.ProductController.productPreAdd()
2019-01-26 16:26:00.300 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productList]}" onto public java.lang.String com.yun.product.controller.ProductController.productList(org.springframework.ui.Model,java.lang.String,java.lang.String,java.lang.String,java.lang.String)
2019-01-26 16:26:00.301 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productSave]}" onto public java.lang.String com.yun.product.controller.ProductController.productSave(com.yun.product.model.Product)
2019-01-26 16:26:00.301 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productDelete]}" onto public java.lang.String com.yun.product.controller.ProductController.productDelete(int)
2019-01-26 16:26:00.301 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productPreUpdate]}" onto public java.lang.String com.yun.product.controller.ProductController.productPreUpdate(int,org.springframework.ui.Model)
2019-01-26 16:26:00.302 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productUpdate]}" onto public java.lang.String com.yun.product.controller.ProductController.productUpdate(com.yun.product.model.Product)
2019-01-26 16:26:00.303 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/prodParamDelete]}" onto public java.lang.String com.yun.product.controller.ProductParamController.prodParamDelete(int)
2019-01-26 16:26:00.303 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/prodParamSave]}" onto public java.lang.String com.yun.product.controller.ProductParamController.prodParamSave(com.yun.product.model.ProductParameter)
2019-01-26 16:26:00.303 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/prodParamList]}" onto public java.lang.String com.yun.product.controller.ProductParamController.prodParamList(int)
2019-01-26 16:26:00.303 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/prodParamPreAdd]}" onto public java.lang.String com.yun.product.controller.ProductParamController.prodParamPreAdd(int,org.springframework.ui.Model)
2019-01-26 16:26:00.306 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeUpdate]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeUpdate(java.lang.Integer,org.springframework.ui.Model)
2019-01-26 16:26:00.307 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeUpdateSave]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeUpdateSave(com.yun.product.model.ProductType)
2019-01-26 16:26:00.308 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeDelete]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeDelete(java.lang.Integer,javax.servlet.http.HttpServletResponse) throws java.io.IOException
2019-01-26 16:26:00.308 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeList]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeList(org.springframework.ui.Model)
2019-01-26 16:26:00.308 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeTree]}" onto public java.util.List<com.yun.product.model.ProductType> com.yun.product.controller.ProductTypeController.productTypeTree()
2019-01-26 16:26:00.309 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeEdit]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeEdit()
2019-01-26 16:26:00.309 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeSave]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeSave(com.yun.product.model.ProductType)
2019-01-26 16:26:00.310 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockPreAdd]}" onto public java.lang.String com.yun.stock.controller.ProductStockController.productStockPreAdd()
2019-01-26 16:26:00.311 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockDelete]}" onto public java.lang.String com.yun.stock.controller.ProductStockController.productStockDelete(int)
2019-01-26 16:26:00.311 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockPreUpdate]}" onto public java.lang.String com.yun.stock.controller.ProductStockController.productStockPreUpdate(int,org.springframework.ui.Model)
2019-01-26 16:26:00.311 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockUpdate]}" onto public java.lang.String com.yun.stock.controller.ProductStockController.productStockUpdate(com.yun.stock.model.ProductStock)
2019-01-26 16:26:00.311 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockSave]}" onto public java.lang.String com.yun.stock.controller.ProductStockController.productStockSave(com.yun.stock.model.ProductStock)
2019-01-26 16:26:00.311 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockList]}" onto public java.lang.String com.yun.stock.controller.ProductStockController.productStocklist(java.lang.String,java.lang.String,org.springframework.ui.Model)
2019-01-26 16:26:00.312 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/main]}" onto public java.lang.String com.yun.user.controller.MainController.main()
2019-01-26 16:26:00.313 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/userList]}" onto public java.lang.String com.yun.user.controller.UserController.userList(org.springframework.ui.Model)
2019-01-26 16:26:00.314 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/login]}" onto public java.lang.String com.yun.user.controller.UserController.login(java.lang.String,java.lang.String,javax.servlet.http.HttpSession)
2019-01-26 16:26:00.314 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/userEdit]}" onto public java.lang.String com.yun.user.controller.UserController.userEdit()
2019-01-26 16:26:00.314 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/userSave]}" onto public java.lang.String com.yun.user.controller.UserController.userSave(com.yun.user.model.UserInfo)
2019-01-26 16:26:00.315 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/deleteUserInfo]}" onto public java.lang.String com.yun.user.controller.UserController.userDelete(int)
2019-01-26 16:26:00.319 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/error]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> org.springframework.boot.autoconfigure.web.BasicErrorController.error(javax.servlet.http.HttpServletRequest)
2019-01-26 16:26:00.320 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/error],produces=[text/html]}" onto public org.springframework.web.servlet.ModelAndView org.springframework.boot.autoconfigure.web.BasicErrorController.errorHtml(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
2019-01-26 16:26:00.356 [main] INFO  o.s.web.servlet.handler.SimpleUrlHandlerMapping - Mapped URL path [/webjars/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-01-26 16:26:00.356 [main] INFO  o.s.web.servlet.handler.SimpleUrlHandlerMapping - Mapped URL path [/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-01-26 16:26:00.396 [main] INFO  o.s.web.servlet.handler.SimpleUrlHandlerMapping - Mapped URL path [/**/favicon.ico] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-01-26 16:26:00.710 [main] INFO  o.s.b.a.w.WebMvcAutoConfiguration$WelcomePageHandlerMapping - Adding welcome page: class path resource [static/index.html]
2019-01-26 16:26:00.975 [main] INFO  o.s.jmx.export.annotation.AnnotationMBeanExporter - Registering beans for JMX exposure on startup
2019-01-26 16:26:01.006 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2019-01-26 16:26:01.024 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2019-01-26 16:26:01.044 [main] INFO  org.apache.tomcat.util.net.NioSelectorPool - Using a shared selector for servlet write/read
2019-01-26 16:26:01.066 [main] INFO  o.s.b.c.e.tomcat.TomcatEmbeddedServletContainer - Tomcat started on port(s): 8080 (http)
2019-01-26 16:26:01.072 [main] INFO  com.yun.YunEbStockApplication - Started YunEbStockApplication in 4.47 seconds (JVM running for 5.593)
2019-01-26 16:26:10.631 [http-nio-8080-exec-1] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring FrameworkServlet 'dispatcherServlet'
2019-01-26 16:26:10.632 [http-nio-8080-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - FrameworkServlet 'dispatcherServlet': initialization started
2019-01-26 16:26:10.651 [http-nio-8080-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - FrameworkServlet 'dispatcherServlet': initialization completed in 19 ms
2019-01-26 16:26:13.386 [http-nio-8080-exec-8] DEBUG com.yun.stock.controller.ProductStockController - 跳转到物品库存查询控制器
2019-01-26 16:26:13.673 [http-nio-8080-exec-8] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==>  Preparing: select count(*) from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 
2019-01-26 16:26:13.693 [http-nio-8080-exec-8] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==> Parameters: 
2019-01-26 16:26:13.704 [http-nio-8080-exec-8] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - <==      Total: 1
2019-01-26 16:26:13.712 [http-nio-8080-exec-8] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==>  Preparing: select ps.prod_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 order by p.prod_id,pp.prod_param_id limit ?,? 
2019-01-26 16:26:13.712 [http-nio-8080-exec-8] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==> Parameters: 0(Integer), 5(Integer)
2019-01-26 16:26:13.715 [http-nio-8080-exec-8] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - <==      Total: 2
2019-01-26 16:26:13.715 [http-nio-8080-exec-8] DEBUG com.yun.stock.controller.ProductStockController - 转到物品库存页面
2019-01-26 16:26:17.404 [http-nio-8080-exec-9] DEBUG c.y.stock.dao.ProductStockDao.findProductStockById - ==>  Preparing: select ps.prod_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 and ps.prod_stock_id=? 
2019-01-26 16:26:17.405 [http-nio-8080-exec-9] DEBUG c.y.stock.dao.ProductStockDao.findProductStockById - ==> Parameters: 4(Integer)
2019-01-26 16:26:17.408 [http-nio-8080-exec-9] DEBUG c.y.stock.dao.ProductStockDao.findProductStockById - <==      Total: 1
2019-01-26 16:26:21.079 [http-nio-8080-exec-10] DEBUG c.yun.stock.dao.ProductStockDao.updateProductStock - ==>  Preparing: update product_stock set prod_id=?,prod_param_id=?,stock_num=? where prod_stock_id=? 
2019-01-26 16:26:21.079 [http-nio-8080-exec-10] DEBUG c.yun.stock.dao.ProductStockDao.updateProductStock - ==> Parameters: 4(Integer), 6(Integer), 8(Integer), 4(Integer)
2019-01-26 16:26:21.202 [http-nio-8080-exec-10] DEBUG c.yun.stock.dao.ProductStockDao.updateProductStock - <==    Updates: 1
2019-01-26 16:26:21.223 [http-nio-8080-exec-1] DEBUG com.yun.stock.controller.ProductStockController - 跳转到物品库存查询控制器
2019-01-26 16:26:21.224 [http-nio-8080-exec-1] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==>  Preparing: select count(*) from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 
2019-01-26 16:26:21.225 [http-nio-8080-exec-1] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==> Parameters: 
2019-01-26 16:26:21.226 [http-nio-8080-exec-1] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - <==      Total: 1
2019-01-26 16:26:21.228 [http-nio-8080-exec-1] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==>  Preparing: select ps.prod_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 order by p.prod_id,pp.prod_param_id limit ?,? 
2019-01-26 16:26:21.229 [http-nio-8080-exec-1] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==> Parameters: 0(Integer), 5(Integer)
2019-01-26 16:26:21.234 [http-nio-8080-exec-1] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - <==      Total: 2
2019-01-26 16:26:21.235 [http-nio-8080-exec-1] DEBUG com.yun.stock.controller.ProductStockController - 转到物品库存页面
2019-01-26 16:28:08.062 [http-nio-8080-exec-8] DEBUG com.yun.stock.controller.ProductStockController - 跳转到物品库存查询控制器
2019-01-26 16:28:08.069 [http-nio-8080-exec-8] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==>  Preparing: select count(*) from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 
2019-01-26 16:28:08.070 [http-nio-8080-exec-8] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==> Parameters: 
2019-01-26 16:28:08.074 [http-nio-8080-exec-8] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - <==      Total: 1
2019-01-26 16:28:08.076 [http-nio-8080-exec-8] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==>  Preparing: select ps.prod_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 order by p.prod_id,pp.prod_param_id limit ?,? 
2019-01-26 16:28:08.077 [http-nio-8080-exec-8] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==> Parameters: 0(Integer), 5(Integer)
2019-01-26 16:28:08.082 [http-nio-8080-exec-8] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - <==      Total: 2
2019-01-26 16:28:08.084 [http-nio-8080-exec-8] DEBUG com.yun.stock.controller.ProductStockController - 转到物品库存页面
2019-01-26 16:28:43.126 [http-nio-8080-exec-9] DEBUG com.yun.stock.controller.ProductStockController - 跳转到物品库存查询控制器
2019-01-26 16:28:43.130 [http-nio-8080-exec-9] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==>  Preparing: select count(*) from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 
2019-01-26 16:28:43.132 [http-nio-8080-exec-9] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==> Parameters: 
2019-01-26 16:28:43.135 [http-nio-8080-exec-9] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - <==      Total: 1
2019-01-26 16:28:43.138 [http-nio-8080-exec-9] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==>  Preparing: select ps.prod_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 order by p.prod_id,pp.prod_param_id limit ?,? 
2019-01-26 16:28:43.139 [http-nio-8080-exec-9] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==> Parameters: 0(Integer), 5(Integer)
2019-01-26 16:28:43.141 [http-nio-8080-exec-9] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - <==      Total: 2
2019-01-26 16:28:43.142 [http-nio-8080-exec-9] DEBUG com.yun.stock.controller.ProductStockController - 转到物品库存页面
2019-01-26 16:28:48.703 [http-nio-8080-exec-10] INFO  com.yun.product.controller.ProductTypeController - 跳转到stock/productTypeList.html页面
2019-01-26 16:28:48.802 [http-nio-8080-exec-5] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - ==>  Preparing: select p1.prod_type_id,p1.prod_type_name,p1.parent_id,p2.prod_type_id parent_type_id,p2.prod_type_name parent_type_name from product_type p1 LEFT JOIN product_type p2 on p1.parent_id=p2.prod_type_id where p1.parent_id=? 
2019-01-26 16:28:48.802 [http-nio-8080-exec-5] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - ==> Parameters: 0(Integer)
2019-01-26 16:28:48.806 [http-nio-8080-exec-5] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - ====>  Preparing: select p1.prod_type_id,p1.prod_type_name,p1.parent_id,p2.prod_type_id parent_type_id,p2.prod_type_name parent_type_name from product_type p1 LEFT JOIN product_type p2 on p1.parent_id=p2.prod_type_id where p1.parent_id=? 
2019-01-26 16:28:48.806 [http-nio-8080-exec-5] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - ====> Parameters: 29(Integer)
2019-01-26 16:28:48.807 [http-nio-8080-exec-5] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - ======>  Preparing: select p1.prod_type_id,p1.prod_type_name,p1.parent_id,p2.prod_type_id parent_type_id,p2.prod_type_name parent_type_name from product_type p1 LEFT JOIN product_type p2 on p1.parent_id=p2.prod_type_id where p1.parent_id=? 
2019-01-26 16:28:48.808 [http-nio-8080-exec-5] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - ======> Parameters: 30(Integer)
2019-01-26 16:28:48.809 [http-nio-8080-exec-5] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - <======      Total: 0
2019-01-26 16:28:48.809 [http-nio-8080-exec-5] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - <====      Total: 1
2019-01-26 16:28:48.810 [http-nio-8080-exec-5] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - ====>  Preparing: select p1.prod_type_id,p1.prod_type_name,p1.parent_id,p2.prod_type_id parent_type_id,p2.prod_type_name parent_type_name from product_type p1 LEFT JOIN product_type p2 on p1.parent_id=p2.prod_type_id where p1.parent_id=? 
2019-01-26 16:28:48.811 [http-nio-8080-exec-5] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - ====> Parameters: 39(Integer)
2019-01-26 16:28:48.812 [http-nio-8080-exec-5] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - ======>  Preparing: select p1.prod_type_id,p1.prod_type_name,p1.parent_id,p2.prod_type_id parent_type_id,p2.prod_type_name parent_type_name from product_type p1 LEFT JOIN product_type p2 on p1.parent_id=p2.prod_type_id where p1.parent_id=? 
2019-01-26 16:28:48.813 [http-nio-8080-exec-5] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - ======> Parameters: 41(Integer)
2019-01-26 16:28:48.814 [http-nio-8080-exec-5] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - <======      Total: 0
2019-01-26 16:28:48.814 [http-nio-8080-exec-5] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - <====      Total: 1
2019-01-26 16:28:48.814 [http-nio-8080-exec-5] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - <==      Total: 2
2019-01-26 16:28:49.888 [http-nio-8080-exec-3] DEBUG c.yun.product.dao.ProductDao.findProductRowByParam - ==>  Preparing: select count(*) from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 
2019-01-26 16:28:49.890 [http-nio-8080-exec-3] DEBUG c.yun.product.dao.ProductDao.findProductRowByParam - ==> Parameters: 
2019-01-26 16:28:49.891 [http-nio-8080-exec-3] DEBUG c.yun.product.dao.ProductDao.findProductRowByParam - <==      Total: 1
2019-01-26 16:28:49.896 [http-nio-8080-exec-3] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 order by prod_id limit ?,? 
2019-01-26 16:28:49.897 [http-nio-8080-exec-3] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==> Parameters: 0(Integer), 5(Integer)
2019-01-26 16:28:49.900 [http-nio-8080-exec-3] DEBUG com.yun.product.dao.ProductDao.findProductByParam - <==      Total: 4
2019-01-26 16:28:49.901 [http-nio-8080-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 16:28:49.902 [http-nio-8080-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 2(Integer)
2019-01-26 16:28:49.903 [http-nio-8080-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 0
2019-01-26 16:28:49.904 [http-nio-8080-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 16:28:49.904 [http-nio-8080-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 3(Integer)
2019-01-26 16:28:49.905 [http-nio-8080-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 0
2019-01-26 16:28:49.906 [http-nio-8080-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 16:28:49.906 [http-nio-8080-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 4(Integer)
2019-01-26 16:28:49.908 [http-nio-8080-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 2
2019-01-26 16:28:49.909 [http-nio-8080-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 16:28:49.909 [http-nio-8080-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 5(Integer)
2019-01-26 16:28:49.910 [http-nio-8080-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-01-26 16:28:51.957 [http-nio-8080-exec-6] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 16:28:51.957 [http-nio-8080-exec-6] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 2(Integer)
2019-01-26 16:28:51.958 [http-nio-8080-exec-6] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 0
2019-01-26 16:28:57.163 [http-nio-8080-exec-7] DEBUG com.yun.stock.controller.ProductStockController - 跳转到物品库存查询控制器
2019-01-26 16:28:57.170 [http-nio-8080-exec-7] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==>  Preparing: select count(*) from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 
2019-01-26 16:28:57.171 [http-nio-8080-exec-7] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==> Parameters: 
2019-01-26 16:28:57.175 [http-nio-8080-exec-7] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - <==      Total: 1
2019-01-26 16:28:57.177 [http-nio-8080-exec-7] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==>  Preparing: select ps.prod_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 order by p.prod_id,pp.prod_param_id limit ?,? 
2019-01-26 16:28:57.178 [http-nio-8080-exec-7] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==> Parameters: 0(Integer), 5(Integer)
2019-01-26 16:28:57.180 [http-nio-8080-exec-7] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - <==      Total: 2
2019-01-26 16:28:57.181 [http-nio-8080-exec-7] DEBUG com.yun.stock.controller.ProductStockController - 转到物品库存页面
2019-01-26 16:50:51.624 [main] INFO  com.yun.YunEbStockApplication - Starting YunEbStockApplication on USER-20181202BJ with PID 5580 (E:\workspace\yun-eb-stock\target\classes started by Administrator in E:\workspace\yun-eb-stock)
2019-01-26 16:50:51.628 [main] DEBUG com.yun.YunEbStockApplication - Running with Spring Boot v1.5.9.RELEASE, Spring v4.3.13.RELEASE
2019-01-26 16:50:51.629 [main] INFO  com.yun.YunEbStockApplication - No active profile set, falling back to default profiles: default
2019-01-26 16:50:52.054 [main] INFO  o.s.b.c.e.AnnotationConfigEmbeddedWebApplicationContext - Refreshing org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@6a28ffa4: startup date [Sat Jan 26 16:50:52 CST 2019]; root of context hierarchy
2019-01-26 16:50:52.143 [background-preinit] INFO  org.hibernate.validator.internal.util.Version - HV000001: Hibernate Validator 5.3.6.Final
2019-01-26 16:50:53.943 [main] INFO  o.s.b.c.e.tomcat.TomcatEmbeddedServletContainer - Tomcat initialized with port(s): 8080 (http)
2019-01-26 16:50:53.954 [main] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2019-01-26 16:50:53.955 [main] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet Engine: Apache Tomcat/8.5.23
2019-01-26 16:50:54.073 [localhost-startStop-1] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2019-01-26 16:50:54.073 [localhost-startStop-1] INFO  org.springframework.web.context.ContextLoader - Root WebApplicationContext: initialization completed in 2019 ms
2019-01-26 16:50:54.238 [localhost-startStop-1] INFO  o.s.boot.web.servlet.ServletRegistrationBean - Mapping servlet: 'dispatcherServlet' to [/]
2019-01-26 16:50:54.244 [localhost-startStop-1] INFO  o.s.boot.web.servlet.FilterRegistrationBean - Mapping filter: 'characterEncodingFilter' to: [/*]
2019-01-26 16:50:54.245 [localhost-startStop-1] INFO  o.s.boot.web.servlet.FilterRegistrationBean - Mapping filter: 'hiddenHttpMethodFilter' to: [/*]
2019-01-26 16:50:54.246 [localhost-startStop-1] INFO  o.s.boot.web.servlet.FilterRegistrationBean - Mapping filter: 'httpPutFormContentFilter' to: [/*]
2019-01-26 16:50:54.246 [localhost-startStop-1] INFO  o.s.boot.web.servlet.FilterRegistrationBean - Mapping filter: 'requestContextFilter' to: [/*]
2019-01-26 16:50:55.045 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerAdapter - Looking for @ControllerAdvice: org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@6a28ffa4: startup date [Sat Jan 26 16:50:52 CST 2019]; root of context hierarchy
2019-01-26 16:50:55.101 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productPreAdd]}" onto public java.lang.String com.yun.product.controller.ProductController.productPreAdd()
2019-01-26 16:50:55.103 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productList]}" onto public java.lang.String com.yun.product.controller.ProductController.productList(org.springframework.ui.Model,java.lang.String,java.lang.String,java.lang.String,java.lang.String)
2019-01-26 16:50:55.103 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productSave]}" onto public java.lang.String com.yun.product.controller.ProductController.productSave(com.yun.product.model.Product)
2019-01-26 16:50:55.104 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productDelete]}" onto public java.lang.String com.yun.product.controller.ProductController.productDelete(int)
2019-01-26 16:50:55.104 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productPreUpdate]}" onto public java.lang.String com.yun.product.controller.ProductController.productPreUpdate(int,org.springframework.ui.Model)
2019-01-26 16:50:55.104 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productUpdate]}" onto public java.lang.String com.yun.product.controller.ProductController.productUpdate(com.yun.product.model.Product)
2019-01-26 16:50:55.104 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productListForAutoComplete]}" onto public java.util.List<com.yun.product.model.Product> com.yun.product.controller.ProductController.productListForAutoComplete(java.lang.String)
2019-01-26 16:50:55.105 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productListForStock]}" onto public java.util.List<com.yun.product.model.Product> com.yun.product.controller.ProductController.productListForStock()
2019-01-26 16:50:55.106 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/prodParamDelete]}" onto public java.lang.String com.yun.product.controller.ProductParamController.prodParamDelete(int)
2019-01-26 16:50:55.106 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/prodParamSave]}" onto public java.lang.String com.yun.product.controller.ProductParamController.prodParamSave(com.yun.product.model.ProductParameter)
2019-01-26 16:50:55.106 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/prodParamList]}" onto public java.lang.String com.yun.product.controller.ProductParamController.prodParamList(int)
2019-01-26 16:50:55.106 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/prodParamPreAdd]}" onto public java.lang.String com.yun.product.controller.ProductParamController.prodParamPreAdd(int,org.springframework.ui.Model)
2019-01-26 16:50:55.112 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeList]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeList(org.springframework.ui.Model)
2019-01-26 16:50:55.114 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeTree]}" onto public java.util.List<com.yun.product.model.ProductType> com.yun.product.controller.ProductTypeController.productTypeTree()
2019-01-26 16:50:55.114 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeEdit]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeEdit()
2019-01-26 16:50:55.114 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeSave]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeSave(com.yun.product.model.ProductType)
2019-01-26 16:50:55.115 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeUpdate]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeUpdate(java.lang.Integer,org.springframework.ui.Model)
2019-01-26 16:50:55.116 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeUpdateSave]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeUpdateSave(com.yun.product.model.ProductType)
2019-01-26 16:50:55.116 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeDelete]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeDelete(java.lang.Integer,javax.servlet.http.HttpServletResponse) throws java.io.IOException
2019-01-26 16:50:55.118 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceviceStockList]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveStockController.productReceiveStocklist(java.lang.String,java.lang.String,org.springframework.ui.Model)
2019-01-26 16:50:55.118 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveStockPreAdd]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveStockController.productReceiveStockPreAdd()
2019-01-26 16:50:55.118 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveStockSave]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveStockController.productReceiveStockSave(com.yun.stock.model.ProductReceiveStock)
2019-01-26 16:50:55.119 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveStockDelete]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveStockController.productReceiveStockDelete(int)
2019-01-26 16:50:55.119 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveStockPreUpdate]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveStockController.productReceiveStockPreUpdate(int,org.springframework.ui.Model)
2019-01-26 16:50:55.119 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveStockUpdate]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveStockController.productReceiveStockUpdate(com.yun.stock.model.ProductReceiveStock)
2019-01-26 16:50:55.120 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockSave]}" onto public java.lang.String com.yun.stock.controller.ProductStockController.productStockSave(com.yun.stock.model.ProductStock)
2019-01-26 16:50:55.120 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockList]}" onto public java.lang.String com.yun.stock.controller.ProductStockController.productStocklist(java.lang.String,java.lang.String,org.springframework.ui.Model)
2019-01-26 16:50:55.120 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockPreAdd]}" onto public java.lang.String com.yun.stock.controller.ProductStockController.productStockPreAdd()
2019-01-26 16:50:55.120 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockDelete]}" onto public java.lang.String com.yun.stock.controller.ProductStockController.productStockDelete(int)
2019-01-26 16:50:55.121 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockPreUpdate]}" onto public java.lang.String com.yun.stock.controller.ProductStockController.productStockPreUpdate(int,org.springframework.ui.Model)
2019-01-26 16:50:55.121 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockUpdate]}" onto public java.lang.String com.yun.stock.controller.ProductStockController.productStockUpdate(com.yun.stock.model.ProductStock)
2019-01-26 16:50:55.121 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/main]}" onto public java.lang.String com.yun.user.controller.MainController.main()
2019-01-26 16:50:55.122 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/userList]}" onto public java.lang.String com.yun.user.controller.UserController.userList(org.springframework.ui.Model)
2019-01-26 16:50:55.122 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/login]}" onto public java.lang.String com.yun.user.controller.UserController.login(java.lang.String,java.lang.String,javax.servlet.http.HttpSession)
2019-01-26 16:50:55.122 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/userEdit]}" onto public java.lang.String com.yun.user.controller.UserController.userEdit()
2019-01-26 16:50:55.122 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/userSave]}" onto public java.lang.String com.yun.user.controller.UserController.userSave(com.yun.user.model.UserInfo)
2019-01-26 16:50:55.123 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/deleteUserInfo]}" onto public java.lang.String com.yun.user.controller.UserController.userDelete(int)
2019-01-26 16:50:55.126 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/error]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> org.springframework.boot.autoconfigure.web.BasicErrorController.error(javax.servlet.http.HttpServletRequest)
2019-01-26 16:50:55.126 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/error],produces=[text/html]}" onto public org.springframework.web.servlet.ModelAndView org.springframework.boot.autoconfigure.web.BasicErrorController.errorHtml(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
2019-01-26 16:50:55.159 [main] INFO  o.s.web.servlet.handler.SimpleUrlHandlerMapping - Mapped URL path [/webjars/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-01-26 16:50:55.159 [main] INFO  o.s.web.servlet.handler.SimpleUrlHandlerMapping - Mapped URL path [/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-01-26 16:50:55.200 [main] INFO  o.s.web.servlet.handler.SimpleUrlHandlerMapping - Mapped URL path [/**/favicon.ico] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-01-26 16:50:55.536 [main] INFO  o.s.b.a.w.WebMvcAutoConfiguration$WelcomePageHandlerMapping - Adding welcome page: class path resource [static/index.html]
2019-01-26 16:50:55.786 [main] INFO  o.s.jmx.export.annotation.AnnotationMBeanExporter - Registering beans for JMX exposure on startup
2019-01-26 16:50:55.812 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2019-01-26 16:50:55.828 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2019-01-26 16:50:55.848 [main] INFO  org.apache.tomcat.util.net.NioSelectorPool - Using a shared selector for servlet write/read
2019-01-26 16:50:55.873 [main] INFO  o.s.b.c.e.tomcat.TomcatEmbeddedServletContainer - Tomcat started on port(s): 8080 (http)
2019-01-26 16:50:55.881 [main] INFO  com.yun.YunEbStockApplication - Started YunEbStockApplication in 4.668 seconds (JVM running for 5.91)
2019-01-26 16:51:03.322 [http-nio-8080-exec-1] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring FrameworkServlet 'dispatcherServlet'
2019-01-26 16:51:03.322 [http-nio-8080-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - FrameworkServlet 'dispatcherServlet': initialization started
2019-01-26 16:51:03.340 [http-nio-8080-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - FrameworkServlet 'dispatcherServlet': initialization completed in 18 ms
2019-01-26 16:51:40.495 [http-nio-8080-exec-6] DEBUG com.yun.stock.controller.ProductStockController - 跳转到物品库存查询控制器
2019-01-26 16:51:40.781 [http-nio-8080-exec-6] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==>  Preparing: select count(*) from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 
2019-01-26 16:51:40.800 [http-nio-8080-exec-6] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==> Parameters: 
2019-01-26 16:51:40.810 [http-nio-8080-exec-6] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - <==      Total: 1
2019-01-26 16:51:40.818 [http-nio-8080-exec-6] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==>  Preparing: select ps.prod_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 order by p.prod_id,pp.prod_param_id limit ?,? 
2019-01-26 16:51:40.819 [http-nio-8080-exec-6] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==> Parameters: 0(Integer), 5(Integer)
2019-01-26 16:51:40.821 [http-nio-8080-exec-6] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - <==      Total: 2
2019-01-26 16:51:40.821 [http-nio-8080-exec-6] DEBUG com.yun.stock.controller.ProductStockController - 转到物品库存页面
2019-01-26 17:10:11.888 [http-nio-8080-exec-1] DEBUG com.yun.stock.controller.ProductStockController - 跳转到物品库存查询控制器
2019-01-26 17:10:11.894 [http-nio-8080-exec-1] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==>  Preparing: select count(*) from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 
2019-01-26 17:10:11.896 [http-nio-8080-exec-1] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==> Parameters: 
2019-01-26 17:10:11.899 [http-nio-8080-exec-1] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - <==      Total: 1
2019-01-26 17:10:11.903 [http-nio-8080-exec-1] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==>  Preparing: select ps.prod_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 order by p.prod_id,pp.prod_param_id limit ?,? 
2019-01-26 17:10:11.905 [http-nio-8080-exec-1] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==> Parameters: 0(Integer), 5(Integer)
2019-01-26 17:10:11.910 [http-nio-8080-exec-1] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - <==      Total: 2
2019-01-26 17:10:11.910 [http-nio-8080-exec-1] DEBUG com.yun.stock.controller.ProductStockController - 转到物品库存页面
2019-01-26 17:11:28.489 [http-nio-8080-exec-5] DEBUG c.y.stock.controller.ProductReceiveStockController - 跳转到待收库存查询控制器
2019-01-26 17:11:28.496 [http-nio-8080-exec-5] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - ==>  Preparing: select count(*) from product_receive_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 
2019-01-26 17:11:28.497 [http-nio-8080-exec-5] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - ==> Parameters: 
2019-01-26 17:11:28.500 [http-nio-8080-exec-5] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - <==      Total: 1
2019-01-26 17:11:28.502 [http-nio-8080-exec-5] DEBUG c.y.s.d.P.findProductReceiveStockList - ==>  Preparing: select ps.prod_rece_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_receive_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 order by p.prod_id,pp.prod_param_id limit ?,? 
2019-01-26 17:11:28.503 [http-nio-8080-exec-5] DEBUG c.y.s.d.P.findProductReceiveStockList - ==> Parameters: 0(Integer), 5(Integer)
2019-01-26 17:11:28.505 [http-nio-8080-exec-5] DEBUG c.y.s.d.P.findProductReceiveStockList - <==      Total: 0
2019-01-26 17:11:28.506 [http-nio-8080-exec-5] DEBUG c.y.stock.controller.ProductReceiveStockController - 转到待收库存页面
2019-01-26 17:13:03.688 [http-nio-8080-exec-10] DEBUG c.y.stock.controller.ProductReceiveStockController - 跳转到待收库存查询控制器
2019-01-26 17:13:03.690 [http-nio-8080-exec-10] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - ==>  Preparing: select count(*) from product_receive_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 
2019-01-26 17:13:03.691 [http-nio-8080-exec-10] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - ==> Parameters: 
2019-01-26 17:13:03.692 [http-nio-8080-exec-10] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - <==      Total: 1
2019-01-26 17:13:03.694 [http-nio-8080-exec-10] DEBUG c.y.s.d.P.findProductReceiveStockList - ==>  Preparing: select ps.prod_rece_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_receive_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 order by p.prod_id,pp.prod_param_id limit ?,? 
2019-01-26 17:13:03.695 [http-nio-8080-exec-10] DEBUG c.y.s.d.P.findProductReceiveStockList - ==> Parameters: 0(Integer), 5(Integer)
2019-01-26 17:13:03.699 [http-nio-8080-exec-10] DEBUG c.y.s.d.P.findProductReceiveStockList - <==      Total: 0
2019-01-26 17:13:03.701 [http-nio-8080-exec-10] DEBUG c.y.stock.controller.ProductReceiveStockController - 转到待收库存页面
2019-01-26 17:13:05.203 [http-nio-8080-exec-5] DEBUG com.yun.stock.controller.ProductStockController - 跳转到物品库存查询控制器
2019-01-26 17:13:05.205 [http-nio-8080-exec-5] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==>  Preparing: select count(*) from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 
2019-01-26 17:13:05.207 [http-nio-8080-exec-5] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==> Parameters: 
2019-01-26 17:13:05.210 [http-nio-8080-exec-5] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - <==      Total: 1
2019-01-26 17:13:05.213 [http-nio-8080-exec-5] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==>  Preparing: select ps.prod_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 order by p.prod_id,pp.prod_param_id limit ?,? 
2019-01-26 17:13:05.214 [http-nio-8080-exec-5] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==> Parameters: 0(Integer), 5(Integer)
2019-01-26 17:13:05.221 [http-nio-8080-exec-5] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - <==      Total: 2
2019-01-26 17:13:05.222 [http-nio-8080-exec-5] DEBUG com.yun.stock.controller.ProductStockController - 转到物品库存页面
2019-01-26 17:13:06.492 [http-nio-8080-exec-3] DEBUG com.yun.stock.controller.ProductStockController - 跳转到物品库存查询控制器
2019-01-26 17:13:06.494 [http-nio-8080-exec-3] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==>  Preparing: select count(*) from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 
2019-01-26 17:13:06.496 [http-nio-8080-exec-3] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==> Parameters: 
2019-01-26 17:13:06.499 [http-nio-8080-exec-3] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - <==      Total: 1
2019-01-26 17:13:06.501 [http-nio-8080-exec-3] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==>  Preparing: select ps.prod_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 order by p.prod_id,pp.prod_param_id limit ?,? 
2019-01-26 17:13:06.502 [http-nio-8080-exec-3] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==> Parameters: 0(Integer), 5(Integer)
2019-01-26 17:13:06.507 [http-nio-8080-exec-3] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - <==      Total: 2
2019-01-26 17:13:06.508 [http-nio-8080-exec-3] DEBUG com.yun.stock.controller.ProductStockController - 转到物品库存页面
2019-01-26 17:13:10.028 [http-nio-8080-exec-2] DEBUG c.y.stock.controller.ProductReceiveStockController - 跳转到待收库存查询控制器
2019-01-26 17:13:10.033 [http-nio-8080-exec-2] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - ==>  Preparing: select count(*) from product_receive_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 
2019-01-26 17:13:10.034 [http-nio-8080-exec-2] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - ==> Parameters: 
2019-01-26 17:13:10.037 [http-nio-8080-exec-2] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - <==      Total: 1
2019-01-26 17:13:10.040 [http-nio-8080-exec-2] DEBUG c.y.s.d.P.findProductReceiveStockList - ==>  Preparing: select ps.prod_rece_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_receive_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 order by p.prod_id,pp.prod_param_id limit ?,? 
2019-01-26 17:13:10.041 [http-nio-8080-exec-2] DEBUG c.y.s.d.P.findProductReceiveStockList - ==> Parameters: 0(Integer), 5(Integer)
2019-01-26 17:13:10.044 [http-nio-8080-exec-2] DEBUG c.y.s.d.P.findProductReceiveStockList - <==      Total: 0
2019-01-26 17:13:10.045 [http-nio-8080-exec-2] DEBUG c.y.stock.controller.ProductReceiveStockController - 转到待收库存页面
2019-01-26 17:14:28.372 [http-nio-8080-exec-6] DEBUG c.y.stock.controller.ProductReceiveStockController - 跳转到待收库存查询控制器
2019-01-26 17:14:28.376 [http-nio-8080-exec-6] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - ==>  Preparing: select count(*) from product_receive_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 
2019-01-26 17:14:28.377 [http-nio-8080-exec-6] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - ==> Parameters: 
2019-01-26 17:14:28.379 [http-nio-8080-exec-6] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - <==      Total: 1
2019-01-26 17:14:28.381 [http-nio-8080-exec-6] DEBUG c.y.s.d.P.findProductReceiveStockList - ==>  Preparing: select ps.prod_rece_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_receive_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 order by p.prod_id,pp.prod_param_id limit ?,? 
2019-01-26 17:14:28.383 [http-nio-8080-exec-6] DEBUG c.y.s.d.P.findProductReceiveStockList - ==> Parameters: 0(Integer), 5(Integer)
2019-01-26 17:14:28.386 [http-nio-8080-exec-6] DEBUG c.y.s.d.P.findProductReceiveStockList - <==      Total: 0
2019-01-26 17:14:28.387 [http-nio-8080-exec-6] DEBUG c.y.stock.controller.ProductReceiveStockController - 转到待收库存页面
2019-01-26 17:16:18.835 [main] INFO  com.yun.YunEbStockApplication - Starting YunEbStockApplication on USER-20181202BJ with PID 6792 (E:\workspace\yun-eb-stock\target\classes started by Administrator in E:\workspace\yun-eb-stock)
2019-01-26 17:16:18.848 [main] DEBUG com.yun.YunEbStockApplication - Running with Spring Boot v1.5.9.RELEASE, Spring v4.3.13.RELEASE
2019-01-26 17:16:18.848 [main] INFO  com.yun.YunEbStockApplication - No active profile set, falling back to default profiles: default
2019-01-26 17:16:19.336 [main] INFO  o.s.b.c.e.AnnotationConfigEmbeddedWebApplicationContext - Refreshing org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@6a28ffa4: startup date [Sat Jan 26 17:16:19 CST 2019]; root of context hierarchy
2019-01-26 17:16:19.768 [background-preinit] INFO  org.hibernate.validator.internal.util.Version - HV000001: Hibernate Validator 5.3.6.Final
2019-01-26 17:16:21.037 [main] INFO  o.s.b.c.e.tomcat.TomcatEmbeddedServletContainer - Tomcat initialized with port(s): 8080 (http)
2019-01-26 17:16:21.047 [main] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2019-01-26 17:16:21.048 [main] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet Engine: Apache Tomcat/8.5.23
2019-01-26 17:16:21.159 [localhost-startStop-1] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2019-01-26 17:16:21.159 [localhost-startStop-1] INFO  org.springframework.web.context.ContextLoader - Root WebApplicationContext: initialization completed in 1823 ms
2019-01-26 17:16:21.306 [localhost-startStop-1] INFO  o.s.boot.web.servlet.ServletRegistrationBean - Mapping servlet: 'dispatcherServlet' to [/]
2019-01-26 17:16:21.313 [localhost-startStop-1] INFO  o.s.boot.web.servlet.FilterRegistrationBean - Mapping filter: 'characterEncodingFilter' to: [/*]
2019-01-26 17:16:21.314 [localhost-startStop-1] INFO  o.s.boot.web.servlet.FilterRegistrationBean - Mapping filter: 'hiddenHttpMethodFilter' to: [/*]
2019-01-26 17:16:21.315 [localhost-startStop-1] INFO  o.s.boot.web.servlet.FilterRegistrationBean - Mapping filter: 'httpPutFormContentFilter' to: [/*]
2019-01-26 17:16:21.315 [localhost-startStop-1] INFO  o.s.boot.web.servlet.FilterRegistrationBean - Mapping filter: 'requestContextFilter' to: [/*]
2019-01-26 17:16:22.072 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerAdapter - Looking for @ControllerAdvice: org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@6a28ffa4: startup date [Sat Jan 26 17:16:19 CST 2019]; root of context hierarchy
2019-01-26 17:16:22.126 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productListForAutoComplete]}" onto public java.util.List<com.yun.product.model.Product> com.yun.product.controller.ProductController.productListForAutoComplete(java.lang.String)
2019-01-26 17:16:22.127 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productListForStock]}" onto public java.util.List<com.yun.product.model.Product> com.yun.product.controller.ProductController.productListForStock()
2019-01-26 17:16:22.127 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productPreAdd]}" onto public java.lang.String com.yun.product.controller.ProductController.productPreAdd()
2019-01-26 17:16:22.128 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productList]}" onto public java.lang.String com.yun.product.controller.ProductController.productList(org.springframework.ui.Model,java.lang.String,java.lang.String,java.lang.String,java.lang.String)
2019-01-26 17:16:22.128 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productSave]}" onto public java.lang.String com.yun.product.controller.ProductController.productSave(com.yun.product.model.Product)
2019-01-26 17:16:22.128 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productDelete]}" onto public java.lang.String com.yun.product.controller.ProductController.productDelete(int)
2019-01-26 17:16:22.128 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productPreUpdate]}" onto public java.lang.String com.yun.product.controller.ProductController.productPreUpdate(int,org.springframework.ui.Model)
2019-01-26 17:16:22.128 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productUpdate]}" onto public java.lang.String com.yun.product.controller.ProductController.productUpdate(com.yun.product.model.Product)
2019-01-26 17:16:22.129 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/prodParamDelete]}" onto public java.lang.String com.yun.product.controller.ProductParamController.prodParamDelete(int)
2019-01-26 17:16:22.130 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/prodParamSave]}" onto public java.lang.String com.yun.product.controller.ProductParamController.prodParamSave(com.yun.product.model.ProductParameter)
2019-01-26 17:16:22.130 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/prodParamList]}" onto public java.lang.String com.yun.product.controller.ProductParamController.prodParamList(int)
2019-01-26 17:16:22.130 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/prodParamPreAdd]}" onto public java.lang.String com.yun.product.controller.ProductParamController.prodParamPreAdd(int,org.springframework.ui.Model)
2019-01-26 17:16:22.132 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeUpdate]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeUpdate(java.lang.Integer,org.springframework.ui.Model)
2019-01-26 17:16:22.133 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeUpdateSave]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeUpdateSave(com.yun.product.model.ProductType)
2019-01-26 17:16:22.133 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeDelete]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeDelete(java.lang.Integer,javax.servlet.http.HttpServletResponse) throws java.io.IOException
2019-01-26 17:16:22.133 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeList]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeList(org.springframework.ui.Model)
2019-01-26 17:16:22.134 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeTree]}" onto public java.util.List<com.yun.product.model.ProductType> com.yun.product.controller.ProductTypeController.productTypeTree()
2019-01-26 17:16:22.134 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeEdit]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeEdit()
2019-01-26 17:16:22.134 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeSave]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeSave(com.yun.product.model.ProductType)
2019-01-26 17:16:22.135 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveStockList]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveStockController.productReceiveStocklist(java.lang.String,java.lang.String,org.springframework.ui.Model)
2019-01-26 17:16:22.135 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveStockPreAdd]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveStockController.productReceiveStockPreAdd()
2019-01-26 17:16:22.135 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveStockSave]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveStockController.productReceiveStockSave(com.yun.stock.model.ProductReceiveStock)
2019-01-26 17:16:22.135 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveStockDelete]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveStockController.productReceiveStockDelete(int)
2019-01-26 17:16:22.136 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveStockPreUpdate]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveStockController.productReceiveStockPreUpdate(int,org.springframework.ui.Model)
2019-01-26 17:16:22.136 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveStockUpdate]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveStockController.productReceiveStockUpdate(com.yun.stock.model.ProductReceiveStock)
2019-01-26 17:16:22.137 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockPreAdd]}" onto public java.lang.String com.yun.stock.controller.ProductStockController.productStockPreAdd()
2019-01-26 17:16:22.137 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockDelete]}" onto public java.lang.String com.yun.stock.controller.ProductStockController.productStockDelete(int)
2019-01-26 17:16:22.137 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockPreUpdate]}" onto public java.lang.String com.yun.stock.controller.ProductStockController.productStockPreUpdate(int,org.springframework.ui.Model)
2019-01-26 17:16:22.137 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockUpdate]}" onto public java.lang.String com.yun.stock.controller.ProductStockController.productStockUpdate(com.yun.stock.model.ProductStock)
2019-01-26 17:16:22.138 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockSave]}" onto public java.lang.String com.yun.stock.controller.ProductStockController.productStockSave(com.yun.stock.model.ProductStock)
2019-01-26 17:16:22.138 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockList]}" onto public java.lang.String com.yun.stock.controller.ProductStockController.productStocklist(java.lang.String,java.lang.String,org.springframework.ui.Model)
2019-01-26 17:16:22.138 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/main]}" onto public java.lang.String com.yun.user.controller.MainController.main()
2019-01-26 17:16:22.139 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/userList]}" onto public java.lang.String com.yun.user.controller.UserController.userList(org.springframework.ui.Model)
2019-01-26 17:16:22.139 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/login]}" onto public java.lang.String com.yun.user.controller.UserController.login(java.lang.String,java.lang.String,javax.servlet.http.HttpSession)
2019-01-26 17:16:22.139 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/userEdit]}" onto public java.lang.String com.yun.user.controller.UserController.userEdit()
2019-01-26 17:16:22.139 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/userSave]}" onto public java.lang.String com.yun.user.controller.UserController.userSave(com.yun.user.model.UserInfo)
2019-01-26 17:16:22.139 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/deleteUserInfo]}" onto public java.lang.String com.yun.user.controller.UserController.userDelete(int)
2019-01-26 17:16:22.142 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/error]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> org.springframework.boot.autoconfigure.web.BasicErrorController.error(javax.servlet.http.HttpServletRequest)
2019-01-26 17:16:22.143 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/error],produces=[text/html]}" onto public org.springframework.web.servlet.ModelAndView org.springframework.boot.autoconfigure.web.BasicErrorController.errorHtml(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
2019-01-26 17:16:22.174 [main] INFO  o.s.web.servlet.handler.SimpleUrlHandlerMapping - Mapped URL path [/webjars/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-01-26 17:16:22.174 [main] INFO  o.s.web.servlet.handler.SimpleUrlHandlerMapping - Mapped URL path [/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-01-26 17:16:22.216 [main] INFO  o.s.web.servlet.handler.SimpleUrlHandlerMapping - Mapped URL path [/**/favicon.ico] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-01-26 17:16:22.525 [main] INFO  o.s.b.a.w.WebMvcAutoConfiguration$WelcomePageHandlerMapping - Adding welcome page: class path resource [static/index.html]
2019-01-26 17:16:22.750 [main] INFO  o.s.jmx.export.annotation.AnnotationMBeanExporter - Registering beans for JMX exposure on startup
2019-01-26 17:16:22.769 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2019-01-26 17:16:22.780 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2019-01-26 17:16:22.794 [main] INFO  org.apache.tomcat.util.net.NioSelectorPool - Using a shared selector for servlet write/read
2019-01-26 17:16:22.811 [main] INFO  o.s.b.c.e.tomcat.TomcatEmbeddedServletContainer - Tomcat started on port(s): 8080 (http)
2019-01-26 17:16:22.816 [main] INFO  com.yun.YunEbStockApplication - Started YunEbStockApplication in 4.31 seconds (JVM running for 5.5)
2019-01-26 17:16:28.570 [http-nio-8080-exec-1] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring FrameworkServlet 'dispatcherServlet'
2019-01-26 17:16:28.571 [http-nio-8080-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - FrameworkServlet 'dispatcherServlet': initialization started
2019-01-26 17:16:28.590 [http-nio-8080-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - FrameworkServlet 'dispatcherServlet': initialization completed in 19 ms
2019-01-26 17:16:30.998 [http-nio-8080-exec-8] DEBUG c.y.stock.controller.ProductReceiveStockController - 跳转到待收库存查询控制器
2019-01-26 17:16:31.279 [http-nio-8080-exec-8] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - ==>  Preparing: select count(*) from product_receive_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 
2019-01-26 17:16:31.298 [http-nio-8080-exec-8] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - ==> Parameters: 
2019-01-26 17:16:31.309 [http-nio-8080-exec-8] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - <==      Total: 1
2019-01-26 17:16:31.317 [http-nio-8080-exec-8] DEBUG c.y.s.d.P.findProductReceiveStockList - ==>  Preparing: select ps.prod_rece_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_receive_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 order by p.prod_id,pp.prod_param_id limit ?,? 
2019-01-26 17:16:31.317 [http-nio-8080-exec-8] DEBUG c.y.s.d.P.findProductReceiveStockList - ==> Parameters: 0(Integer), 5(Integer)
2019-01-26 17:16:31.318 [http-nio-8080-exec-8] DEBUG c.y.s.d.P.findProductReceiveStockList - <==      Total: 0
2019-01-26 17:16:31.319 [http-nio-8080-exec-8] DEBUG c.y.stock.controller.ProductReceiveStockController - 转到待收库存页面
2019-01-26 17:16:33.653 [http-nio-8080-exec-9] DEBUG c.y.stock.controller.ProductReceiveStockController - 跳转到待收库存查询控制器
2019-01-26 17:16:33.657 [http-nio-8080-exec-9] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - ==>  Preparing: select count(*) from product_receive_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 
2019-01-26 17:16:33.658 [http-nio-8080-exec-9] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - ==> Parameters: 
2019-01-26 17:16:33.661 [http-nio-8080-exec-9] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - <==      Total: 1
2019-01-26 17:16:33.663 [http-nio-8080-exec-9] DEBUG c.y.s.d.P.findProductReceiveStockList - ==>  Preparing: select ps.prod_rece_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_receive_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 order by p.prod_id,pp.prod_param_id limit ?,? 
2019-01-26 17:16:33.664 [http-nio-8080-exec-9] DEBUG c.y.s.d.P.findProductReceiveStockList - ==> Parameters: 0(Integer), 5(Integer)
2019-01-26 17:16:33.665 [http-nio-8080-exec-9] DEBUG c.y.s.d.P.findProductReceiveStockList - <==      Total: 0
2019-01-26 17:16:33.666 [http-nio-8080-exec-9] DEBUG c.y.stock.controller.ProductReceiveStockController - 转到待收库存页面
2019-01-26 17:16:34.945 [http-nio-8080-exec-10] DEBUG c.y.stock.controller.ProductReceiveStockController - 跳转到待收库存查询控制器
2019-01-26 17:16:34.948 [http-nio-8080-exec-10] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - ==>  Preparing: select count(*) from product_receive_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 
2019-01-26 17:16:34.949 [http-nio-8080-exec-10] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - ==> Parameters: 
2019-01-26 17:16:34.951 [http-nio-8080-exec-10] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - <==      Total: 1
2019-01-26 17:16:34.953 [http-nio-8080-exec-10] DEBUG c.y.s.d.P.findProductReceiveStockList - ==>  Preparing: select ps.prod_rece_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_receive_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 order by p.prod_id,pp.prod_param_id limit ?,? 
2019-01-26 17:16:34.953 [http-nio-8080-exec-10] DEBUG c.y.s.d.P.findProductReceiveStockList - ==> Parameters: 0(Integer), 5(Integer)
2019-01-26 17:16:34.955 [http-nio-8080-exec-10] DEBUG c.y.s.d.P.findProductReceiveStockList - <==      Total: 0
2019-01-26 17:16:34.956 [http-nio-8080-exec-10] DEBUG c.y.stock.controller.ProductReceiveStockController - 转到待收库存页面
2019-01-26 17:16:35.811 [http-nio-8080-exec-1] DEBUG c.y.stock.controller.ProductReceiveStockController - 跳转到待收库存查询控制器
2019-01-26 17:16:35.814 [http-nio-8080-exec-1] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - ==>  Preparing: select count(*) from product_receive_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 
2019-01-26 17:16:35.817 [http-nio-8080-exec-1] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - ==> Parameters: 
2019-01-26 17:16:35.818 [http-nio-8080-exec-1] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - <==      Total: 1
2019-01-26 17:16:35.820 [http-nio-8080-exec-1] DEBUG c.y.s.d.P.findProductReceiveStockList - ==>  Preparing: select ps.prod_rece_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_receive_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 order by p.prod_id,pp.prod_param_id limit ?,? 
2019-01-26 17:16:35.821 [http-nio-8080-exec-1] DEBUG c.y.s.d.P.findProductReceiveStockList - ==> Parameters: 0(Integer), 5(Integer)
2019-01-26 17:16:35.823 [http-nio-8080-exec-1] DEBUG c.y.s.d.P.findProductReceiveStockList - <==      Total: 0
2019-01-26 17:16:35.825 [http-nio-8080-exec-1] DEBUG c.y.stock.controller.ProductReceiveStockController - 转到待收库存页面
2019-01-26 17:16:36.807 [http-nio-8080-exec-5] DEBUG c.y.stock.controller.ProductReceiveStockController - 跳转到待收库存查询控制器
2019-01-26 17:16:36.808 [http-nio-8080-exec-5] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - ==>  Preparing: select count(*) from product_receive_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 
2019-01-26 17:16:36.809 [http-nio-8080-exec-5] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - ==> Parameters: 
2019-01-26 17:16:36.810 [http-nio-8080-exec-5] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - <==      Total: 1
2019-01-26 17:16:36.812 [http-nio-8080-exec-5] DEBUG c.y.s.d.P.findProductReceiveStockList - ==>  Preparing: select ps.prod_rece_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_receive_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 order by p.prod_id,pp.prod_param_id limit ?,? 
2019-01-26 17:16:36.813 [http-nio-8080-exec-5] DEBUG c.y.s.d.P.findProductReceiveStockList - ==> Parameters: 0(Integer), 5(Integer)
2019-01-26 17:16:36.815 [http-nio-8080-exec-5] DEBUG c.y.s.d.P.findProductReceiveStockList - <==      Total: 0
2019-01-26 17:16:36.816 [http-nio-8080-exec-5] DEBUG c.y.stock.controller.ProductReceiveStockController - 转到待收库存页面
2019-01-26 17:16:37.843 [http-nio-8080-exec-4] DEBUG c.y.stock.controller.ProductReceiveStockController - 跳转到待收库存查询控制器
2019-01-26 17:16:37.845 [http-nio-8080-exec-4] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - ==>  Preparing: select count(*) from product_receive_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 
2019-01-26 17:16:37.850 [http-nio-8080-exec-4] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - ==> Parameters: 
2019-01-26 17:16:37.857 [http-nio-8080-exec-4] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - <==      Total: 1
2019-01-26 17:16:37.858 [http-nio-8080-exec-4] DEBUG c.y.s.d.P.findProductReceiveStockList - ==>  Preparing: select ps.prod_rece_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_receive_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 order by p.prod_id,pp.prod_param_id limit ?,? 
2019-01-26 17:16:37.858 [http-nio-8080-exec-4] DEBUG c.y.s.d.P.findProductReceiveStockList - ==> Parameters: 0(Integer), 5(Integer)
2019-01-26 17:16:37.860 [http-nio-8080-exec-4] DEBUG c.y.s.d.P.findProductReceiveStockList - <==      Total: 0
2019-01-26 17:16:37.860 [http-nio-8080-exec-4] DEBUG c.y.stock.controller.ProductReceiveStockController - 转到待收库存页面
2019-01-26 17:16:40.081 [http-nio-8080-exec-2] DEBUG c.y.stock.controller.ProductReceiveStockController - 跳转到待收库存查询控制器
2019-01-26 17:16:40.085 [http-nio-8080-exec-2] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - ==>  Preparing: select count(*) from product_receive_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 and p.prod_name like ? 
2019-01-26 17:16:40.086 [http-nio-8080-exec-2] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - ==> Parameters: %s%(String)
2019-01-26 17:16:40.088 [http-nio-8080-exec-2] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - <==      Total: 1
2019-01-26 17:16:40.091 [http-nio-8080-exec-2] DEBUG c.y.s.d.P.findProductReceiveStockList - ==>  Preparing: select ps.prod_rece_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_receive_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 and p.prod_name like ? order by p.prod_id,pp.prod_param_id limit ?,? 
2019-01-26 17:16:40.092 [http-nio-8080-exec-2] DEBUG c.y.s.d.P.findProductReceiveStockList - ==> Parameters: %s%(String), 0(Integer), 5(Integer)
2019-01-26 17:16:40.097 [http-nio-8080-exec-2] DEBUG c.y.s.d.P.findProductReceiveStockList - <==      Total: 0
2019-01-26 17:16:40.100 [http-nio-8080-exec-2] DEBUG c.y.stock.controller.ProductReceiveStockController - 转到待收库存页面
2019-01-26 17:16:40.404 [http-nio-8080-exec-3] DEBUG c.y.stock.controller.ProductReceiveStockController - 跳转到待收库存查询控制器
2019-01-26 17:16:40.405 [http-nio-8080-exec-3] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - ==>  Preparing: select count(*) from product_receive_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 and p.prod_name like ? 
2019-01-26 17:16:40.406 [http-nio-8080-exec-3] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - ==> Parameters: %s%(String)
2019-01-26 17:16:40.407 [http-nio-8080-exec-3] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - <==      Total: 1
2019-01-26 17:16:40.412 [http-nio-8080-exec-3] DEBUG c.y.s.d.P.findProductReceiveStockList - ==>  Preparing: select ps.prod_rece_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_receive_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 and p.prod_name like ? order by p.prod_id,pp.prod_param_id limit ?,? 
2019-01-26 17:16:40.414 [http-nio-8080-exec-3] DEBUG c.y.s.d.P.findProductReceiveStockList - ==> Parameters: %s%(String), 0(Integer), 5(Integer)
2019-01-26 17:16:40.416 [http-nio-8080-exec-3] DEBUG c.y.s.d.P.findProductReceiveStockList - <==      Total: 0
2019-01-26 17:16:40.417 [http-nio-8080-exec-3] DEBUG c.y.stock.controller.ProductReceiveStockController - 转到待收库存页面
2019-01-26 17:16:43.701 [http-nio-8080-exec-7] DEBUG c.y.stock.controller.ProductReceiveStockController - 跳转到待收库存查询控制器
2019-01-26 17:16:43.713 [http-nio-8080-exec-7] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - ==>  Preparing: select count(*) from product_receive_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 
2019-01-26 17:16:43.714 [http-nio-8080-exec-7] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - ==> Parameters: 
2019-01-26 17:16:43.716 [http-nio-8080-exec-7] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - <==      Total: 1
2019-01-26 17:16:43.719 [http-nio-8080-exec-7] DEBUG c.y.s.d.P.findProductReceiveStockList - ==>  Preparing: select ps.prod_rece_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_receive_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 order by p.prod_id,pp.prod_param_id limit ?,? 
2019-01-26 17:16:43.719 [http-nio-8080-exec-7] DEBUG c.y.s.d.P.findProductReceiveStockList - ==> Parameters: 0(Integer), 5(Integer)
2019-01-26 17:16:43.722 [http-nio-8080-exec-7] DEBUG c.y.s.d.P.findProductReceiveStockList - <==      Total: 0
2019-01-26 17:16:43.722 [http-nio-8080-exec-7] DEBUG c.y.stock.controller.ProductReceiveStockController - 转到待收库存页面
2019-01-26 17:16:45.345 [http-nio-8080-exec-8] DEBUG c.y.stock.controller.ProductReceiveStockController - 跳转到待收库存查询控制器
2019-01-26 17:16:45.346 [http-nio-8080-exec-8] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - ==>  Preparing: select count(*) from product_receive_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 
2019-01-26 17:16:45.348 [http-nio-8080-exec-8] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - ==> Parameters: 
2019-01-26 17:16:45.352 [http-nio-8080-exec-8] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - <==      Total: 1
2019-01-26 17:16:45.355 [http-nio-8080-exec-8] DEBUG c.y.s.d.P.findProductReceiveStockList - ==>  Preparing: select ps.prod_rece_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_receive_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 order by p.prod_id,pp.prod_param_id limit ?,? 
2019-01-26 17:16:45.356 [http-nio-8080-exec-8] DEBUG c.y.s.d.P.findProductReceiveStockList - ==> Parameters: 0(Integer), 5(Integer)
2019-01-26 17:16:45.358 [http-nio-8080-exec-8] DEBUG c.y.s.d.P.findProductReceiveStockList - <==      Total: 0
2019-01-26 17:16:45.359 [http-nio-8080-exec-8] DEBUG c.y.stock.controller.ProductReceiveStockController - 转到待收库存页面
2019-01-26 17:16:46.060 [http-nio-8080-exec-9] DEBUG c.y.stock.controller.ProductReceiveStockController - 跳转到待收库存查询控制器
2019-01-26 17:16:46.061 [http-nio-8080-exec-9] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - ==>  Preparing: select count(*) from product_receive_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 
2019-01-26 17:16:46.062 [http-nio-8080-exec-9] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - ==> Parameters: 
2019-01-26 17:16:46.065 [http-nio-8080-exec-9] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - <==      Total: 1
2019-01-26 17:16:46.068 [http-nio-8080-exec-9] DEBUG c.y.s.d.P.findProductReceiveStockList - ==>  Preparing: select ps.prod_rece_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_receive_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 order by p.prod_id,pp.prod_param_id limit ?,? 
2019-01-26 17:16:46.069 [http-nio-8080-exec-9] DEBUG c.y.s.d.P.findProductReceiveStockList - ==> Parameters: 0(Integer), 5(Integer)
2019-01-26 17:16:46.071 [http-nio-8080-exec-9] DEBUG c.y.s.d.P.findProductReceiveStockList - <==      Total: 0
2019-01-26 17:16:46.072 [http-nio-8080-exec-9] DEBUG c.y.stock.controller.ProductReceiveStockController - 转到待收库存页面
2019-01-26 17:16:48.002 [http-nio-8080-exec-10] DEBUG c.y.stock.controller.ProductReceiveStockController - 跳转到待收库存查询控制器
2019-01-26 17:16:48.006 [http-nio-8080-exec-10] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - ==>  Preparing: select count(*) from product_receive_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 
2019-01-26 17:16:48.007 [http-nio-8080-exec-10] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - ==> Parameters: 
2019-01-26 17:16:48.009 [http-nio-8080-exec-10] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - <==      Total: 1
2019-01-26 17:16:48.011 [http-nio-8080-exec-10] DEBUG c.y.s.d.P.findProductReceiveStockList - ==>  Preparing: select ps.prod_rece_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_receive_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 order by p.prod_id,pp.prod_param_id limit ?,? 
2019-01-26 17:16:48.014 [http-nio-8080-exec-10] DEBUG c.y.s.d.P.findProductReceiveStockList - ==> Parameters: 0(Integer), 5(Integer)
2019-01-26 17:16:48.017 [http-nio-8080-exec-10] DEBUG c.y.s.d.P.findProductReceiveStockList - <==      Total: 0
2019-01-26 17:16:48.018 [http-nio-8080-exec-10] DEBUG c.y.stock.controller.ProductReceiveStockController - 转到待收库存页面
2019-01-26 17:16:49.470 [http-nio-8080-exec-1] DEBUG c.y.stock.controller.ProductReceiveStockController - 跳转到待收库存查询控制器
2019-01-26 17:16:49.471 [http-nio-8080-exec-1] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - ==>  Preparing: select count(*) from product_receive_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 
2019-01-26 17:16:49.471 [http-nio-8080-exec-1] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - ==> Parameters: 
2019-01-26 17:16:49.473 [http-nio-8080-exec-1] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - <==      Total: 1
2019-01-26 17:16:49.474 [http-nio-8080-exec-1] DEBUG c.y.s.d.P.findProductReceiveStockList - ==>  Preparing: select ps.prod_rece_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_receive_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 order by p.prod_id,pp.prod_param_id limit ?,? 
2019-01-26 17:16:49.475 [http-nio-8080-exec-1] DEBUG c.y.s.d.P.findProductReceiveStockList - ==> Parameters: 0(Integer), 5(Integer)
2019-01-26 17:16:49.477 [http-nio-8080-exec-1] DEBUG c.y.s.d.P.findProductReceiveStockList - <==      Total: 0
2019-01-26 17:16:49.479 [http-nio-8080-exec-1] DEBUG c.y.stock.controller.ProductReceiveStockController - 转到待收库存页面
2019-01-26 17:17:22.371 [http-nio-8080-exec-4] DEBUG c.y.stock.controller.ProductReceiveStockController - 跳转到待收库存查询控制器
2019-01-26 17:17:22.372 [http-nio-8080-exec-4] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - ==>  Preparing: select count(*) from product_receive_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 
2019-01-26 17:17:22.373 [http-nio-8080-exec-4] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - ==> Parameters: 
2019-01-26 17:17:22.374 [http-nio-8080-exec-4] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - <==      Total: 1
2019-01-26 17:17:22.375 [http-nio-8080-exec-4] DEBUG c.y.s.d.P.findProductReceiveStockList - ==>  Preparing: select ps.prod_rece_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_receive_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 order by p.prod_id,pp.prod_param_id limit ?,? 
2019-01-26 17:17:22.376 [http-nio-8080-exec-4] DEBUG c.y.s.d.P.findProductReceiveStockList - ==> Parameters: 0(Integer), 5(Integer)
2019-01-26 17:17:22.377 [http-nio-8080-exec-4] DEBUG c.y.s.d.P.findProductReceiveStockList - <==      Total: 0
2019-01-26 17:17:22.377 [http-nio-8080-exec-4] DEBUG c.y.stock.controller.ProductReceiveStockController - 转到待收库存页面
2019-01-26 17:17:23.662 [http-nio-8080-exec-2] ERROR org.thymeleaf.TemplateEngine - [THYMELEAF][http-nio-8080-exec-2] Exception processing template "stock/productReceiveStockAdd": Error resolving template "stock/productReceiveStockAdd", template might not exist or might not be accessible by any of the configured Template Resolvers
2019-01-26 17:17:23.669 [http-nio-8080-exec-2] ERROR o.a.c.c.C.[.[localhost].[/].[dispatcherServlet] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is org.thymeleaf.exceptions.TemplateInputException: Error resolving template "stock/productReceiveStockAdd", template might not exist or might not be accessible by any of the configured Template Resolvers] with root cause
org.thymeleaf.exceptions.TemplateInputException: Error resolving template "stock/productReceiveStockAdd", template might not exist or might not be accessible by any of the configured Template Resolvers
	at org.thymeleaf.TemplateRepository.getTemplate(TemplateRepository.java:246)
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1104)
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1060)
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1011)
	at org.thymeleaf.spring4.view.ThymeleafView.renderFragment(ThymeleafView.java:335)
	at org.thymeleaf.spring4.view.ThymeleafView.render(ThymeleafView.java:190)
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1286)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1041)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:984)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:901)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:970)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:861)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:635)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:846)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:742)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HttpPutFormContentFilter.doFilterInternal(HttpPutFormContentFilter.java:108)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:81)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:197)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:199)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:478)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:140)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:81)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:803)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1459)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:745)
2019-01-26 17:19:41.799 [http-nio-8080-exec-8] DEBUG c.y.stock.controller.ProductReceiveStockController - 跳转到待收库存查询控制器
2019-01-26 17:19:41.803 [http-nio-8080-exec-8] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - ==>  Preparing: select count(*) from product_receive_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 
2019-01-26 17:19:41.804 [http-nio-8080-exec-8] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - ==> Parameters: 
2019-01-26 17:19:41.806 [http-nio-8080-exec-8] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - <==      Total: 1
2019-01-26 17:19:41.808 [http-nio-8080-exec-8] DEBUG c.y.s.d.P.findProductReceiveStockList - ==>  Preparing: select ps.prod_rece_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_receive_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 order by p.prod_id,pp.prod_param_id limit ?,? 
2019-01-26 17:19:41.808 [http-nio-8080-exec-8] DEBUG c.y.s.d.P.findProductReceiveStockList - ==> Parameters: 0(Integer), 5(Integer)
2019-01-26 17:19:41.811 [http-nio-8080-exec-8] DEBUG c.y.s.d.P.findProductReceiveStockList - <==      Total: 0
2019-01-26 17:19:41.811 [http-nio-8080-exec-8] DEBUG c.y.stock.controller.ProductReceiveStockController - 转到待收库存页面
2019-01-26 17:22:11.932 [main] INFO  com.yun.YunEbStockApplication - Starting YunEbStockApplication on USER-20181202BJ with PID 5036 (E:\workspace\yun-eb-stock\target\classes started by Administrator in E:\workspace\yun-eb-stock)
2019-01-26 17:22:11.936 [main] DEBUG com.yun.YunEbStockApplication - Running with Spring Boot v1.5.9.RELEASE, Spring v4.3.13.RELEASE
2019-01-26 17:22:11.937 [main] INFO  com.yun.YunEbStockApplication - No active profile set, falling back to default profiles: default
2019-01-26 17:22:12.357 [background-preinit] INFO  org.hibernate.validator.internal.util.Version - HV000001: Hibernate Validator 5.3.6.Final
2019-01-26 17:22:12.510 [main] INFO  o.s.b.c.e.AnnotationConfigEmbeddedWebApplicationContext - Refreshing org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@6a28ffa4: startup date [Sat Jan 26 17:22:12 CST 2019]; root of context hierarchy
2019-01-26 17:22:14.009 [main] INFO  o.s.b.c.e.tomcat.TomcatEmbeddedServletContainer - Tomcat initialized with port(s): 8080 (http)
2019-01-26 17:22:14.020 [main] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2019-01-26 17:22:14.022 [main] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet Engine: Apache Tomcat/8.5.23
2019-01-26 17:22:14.135 [localhost-startStop-1] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2019-01-26 17:22:14.135 [localhost-startStop-1] INFO  org.springframework.web.context.ContextLoader - Root WebApplicationContext: initialization completed in 1625 ms
2019-01-26 17:22:14.294 [localhost-startStop-1] INFO  o.s.boot.web.servlet.ServletRegistrationBean - Mapping servlet: 'dispatcherServlet' to [/]
2019-01-26 17:22:14.299 [localhost-startStop-1] INFO  o.s.boot.web.servlet.FilterRegistrationBean - Mapping filter: 'characterEncodingFilter' to: [/*]
2019-01-26 17:22:14.301 [localhost-startStop-1] INFO  o.s.boot.web.servlet.FilterRegistrationBean - Mapping filter: 'hiddenHttpMethodFilter' to: [/*]
2019-01-26 17:22:14.301 [localhost-startStop-1] INFO  o.s.boot.web.servlet.FilterRegistrationBean - Mapping filter: 'httpPutFormContentFilter' to: [/*]
2019-01-26 17:22:14.301 [localhost-startStop-1] INFO  o.s.boot.web.servlet.FilterRegistrationBean - Mapping filter: 'requestContextFilter' to: [/*]
2019-01-26 17:22:15.154 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerAdapter - Looking for @ControllerAdvice: org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@6a28ffa4: startup date [Sat Jan 26 17:22:12 CST 2019]; root of context hierarchy
2019-01-26 17:22:15.208 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productList]}" onto public java.lang.String com.yun.product.controller.ProductController.productList(org.springframework.ui.Model,java.lang.String,java.lang.String,java.lang.String,java.lang.String)
2019-01-26 17:22:15.209 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productPreAdd]}" onto public java.lang.String com.yun.product.controller.ProductController.productPreAdd()
2019-01-26 17:22:15.209 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productSave]}" onto public java.lang.String com.yun.product.controller.ProductController.productSave(com.yun.product.model.Product)
2019-01-26 17:22:15.209 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productDelete]}" onto public java.lang.String com.yun.product.controller.ProductController.productDelete(int)
2019-01-26 17:22:15.210 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productPreUpdate]}" onto public java.lang.String com.yun.product.controller.ProductController.productPreUpdate(int,org.springframework.ui.Model)
2019-01-26 17:22:15.210 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productUpdate]}" onto public java.lang.String com.yun.product.controller.ProductController.productUpdate(com.yun.product.model.Product)
2019-01-26 17:22:15.210 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productListForAutoComplete]}" onto public java.util.List<com.yun.product.model.Product> com.yun.product.controller.ProductController.productListForAutoComplete(java.lang.String)
2019-01-26 17:22:15.210 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productListForStock]}" onto public java.util.List<com.yun.product.model.Product> com.yun.product.controller.ProductController.productListForStock()
2019-01-26 17:22:15.211 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/prodParamDelete]}" onto public java.lang.String com.yun.product.controller.ProductParamController.prodParamDelete(int)
2019-01-26 17:22:15.212 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/prodParamSave]}" onto public java.lang.String com.yun.product.controller.ProductParamController.prodParamSave(com.yun.product.model.ProductParameter)
2019-01-26 17:22:15.212 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/prodParamList]}" onto public java.lang.String com.yun.product.controller.ProductParamController.prodParamList(int)
2019-01-26 17:22:15.212 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/prodParamPreAdd]}" onto public java.lang.String com.yun.product.controller.ProductParamController.prodParamPreAdd(int,org.springframework.ui.Model)
2019-01-26 17:22:15.214 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeList]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeList(org.springframework.ui.Model)
2019-01-26 17:22:15.215 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeTree]}" onto public java.util.List<com.yun.product.model.ProductType> com.yun.product.controller.ProductTypeController.productTypeTree()
2019-01-26 17:22:15.215 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeEdit]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeEdit()
2019-01-26 17:22:15.215 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeSave]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeSave(com.yun.product.model.ProductType)
2019-01-26 17:22:15.216 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeUpdate]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeUpdate(java.lang.Integer,org.springframework.ui.Model)
2019-01-26 17:22:15.216 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeUpdateSave]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeUpdateSave(com.yun.product.model.ProductType)
2019-01-26 17:22:15.216 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeDelete]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeDelete(java.lang.Integer,javax.servlet.http.HttpServletResponse) throws java.io.IOException
2019-01-26 17:22:15.217 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveStockList]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveStockController.productReceiveStocklist(java.lang.String,java.lang.String,org.springframework.ui.Model)
2019-01-26 17:22:15.217 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveStockPreAdd]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveStockController.productReceiveStockPreAdd()
2019-01-26 17:22:15.217 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveStockSave]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveStockController.productReceiveStockSave(com.yun.stock.model.ProductReceiveStock)
2019-01-26 17:22:15.218 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveStockDelete]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveStockController.productReceiveStockDelete(int)
2019-01-26 17:22:15.218 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveStockPreUpdate]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveStockController.productReceiveStockPreUpdate(int,org.springframework.ui.Model)
2019-01-26 17:22:15.218 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveStockUpdate]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveStockController.productReceiveStockUpdate(com.yun.stock.model.ProductReceiveStock)
2019-01-26 17:22:15.219 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockSave]}" onto public java.lang.String com.yun.stock.controller.ProductStockController.productStockSave(com.yun.stock.model.ProductStock)
2019-01-26 17:22:15.219 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockList]}" onto public java.lang.String com.yun.stock.controller.ProductStockController.productStocklist(java.lang.String,java.lang.String,org.springframework.ui.Model)
2019-01-26 17:22:15.219 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockPreAdd]}" onto public java.lang.String com.yun.stock.controller.ProductStockController.productStockPreAdd()
2019-01-26 17:22:15.219 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockDelete]}" onto public java.lang.String com.yun.stock.controller.ProductStockController.productStockDelete(int)
2019-01-26 17:22:15.220 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockPreUpdate]}" onto public java.lang.String com.yun.stock.controller.ProductStockController.productStockPreUpdate(int,org.springframework.ui.Model)
2019-01-26 17:22:15.220 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockUpdate]}" onto public java.lang.String com.yun.stock.controller.ProductStockController.productStockUpdate(com.yun.stock.model.ProductStock)
2019-01-26 17:22:15.220 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/main]}" onto public java.lang.String com.yun.user.controller.MainController.main()
2019-01-26 17:22:15.221 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/userList]}" onto public java.lang.String com.yun.user.controller.UserController.userList(org.springframework.ui.Model)
2019-01-26 17:22:15.221 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/login]}" onto public java.lang.String com.yun.user.controller.UserController.login(java.lang.String,java.lang.String,javax.servlet.http.HttpSession)
2019-01-26 17:22:15.221 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/userEdit]}" onto public java.lang.String com.yun.user.controller.UserController.userEdit()
2019-01-26 17:22:15.221 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/userSave]}" onto public java.lang.String com.yun.user.controller.UserController.userSave(com.yun.user.model.UserInfo)
2019-01-26 17:22:15.221 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/deleteUserInfo]}" onto public java.lang.String com.yun.user.controller.UserController.userDelete(int)
2019-01-26 17:22:15.224 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/error]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> org.springframework.boot.autoconfigure.web.BasicErrorController.error(javax.servlet.http.HttpServletRequest)
2019-01-26 17:22:15.225 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/error],produces=[text/html]}" onto public org.springframework.web.servlet.ModelAndView org.springframework.boot.autoconfigure.web.BasicErrorController.errorHtml(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
2019-01-26 17:22:15.260 [main] INFO  o.s.web.servlet.handler.SimpleUrlHandlerMapping - Mapped URL path [/webjars/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-01-26 17:22:15.260 [main] INFO  o.s.web.servlet.handler.SimpleUrlHandlerMapping - Mapped URL path [/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-01-26 17:22:15.302 [main] INFO  o.s.web.servlet.handler.SimpleUrlHandlerMapping - Mapped URL path [/**/favicon.ico] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-01-26 17:22:15.595 [main] INFO  o.s.b.a.w.WebMvcAutoConfiguration$WelcomePageHandlerMapping - Adding welcome page: class path resource [static/index.html]
2019-01-26 17:22:15.841 [main] INFO  o.s.jmx.export.annotation.AnnotationMBeanExporter - Registering beans for JMX exposure on startup
2019-01-26 17:22:15.860 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2019-01-26 17:22:15.871 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2019-01-26 17:22:15.885 [main] INFO  org.apache.tomcat.util.net.NioSelectorPool - Using a shared selector for servlet write/read
2019-01-26 17:22:15.903 [main] INFO  o.s.b.c.e.tomcat.TomcatEmbeddedServletContainer - Tomcat started on port(s): 8080 (http)
2019-01-26 17:22:16.032 [main] INFO  com.yun.YunEbStockApplication - Started YunEbStockApplication in 4.574 seconds (JVM running for 5.727)
2019-01-26 17:22:32.639 [http-nio-8080-exec-1] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring FrameworkServlet 'dispatcherServlet'
2019-01-26 17:22:32.639 [http-nio-8080-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - FrameworkServlet 'dispatcherServlet': initialization started
2019-01-26 17:22:32.658 [http-nio-8080-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - FrameworkServlet 'dispatcherServlet': initialization completed in 19 ms
2019-01-26 17:22:35.256 [http-nio-8080-exec-8] DEBUG c.y.stock.controller.ProductReceiveStockController - 跳转到待收库存查询控制器
2019-01-26 17:22:35.536 [http-nio-8080-exec-8] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - ==>  Preparing: select count(*) from product_receive_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 
2019-01-26 17:22:35.555 [http-nio-8080-exec-8] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - ==> Parameters: 
2019-01-26 17:22:35.568 [http-nio-8080-exec-8] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - <==      Total: 1
2019-01-26 17:22:35.576 [http-nio-8080-exec-8] DEBUG c.y.s.d.P.findProductReceiveStockList - ==>  Preparing: select ps.prod_rece_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_receive_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 order by p.prod_id,pp.prod_param_id limit ?,? 
2019-01-26 17:22:35.577 [http-nio-8080-exec-8] DEBUG c.y.s.d.P.findProductReceiveStockList - ==> Parameters: 0(Integer), 5(Integer)
2019-01-26 17:22:35.578 [http-nio-8080-exec-8] DEBUG c.y.s.d.P.findProductReceiveStockList - <==      Total: 0
2019-01-26 17:22:35.578 [http-nio-8080-exec-8] DEBUG c.y.stock.controller.ProductReceiveStockController - 转到待收库存页面
2019-01-26 17:22:39.189 [http-nio-8080-exec-10] DEBUG com.yun.product.dao.ProductDao.productListForStock - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where p.prod_state=0 and prod_id not in(select prod_id from product_stock) 
2019-01-26 17:22:39.190 [http-nio-8080-exec-10] DEBUG com.yun.product.dao.ProductDao.productListForStock - ==> Parameters: 
2019-01-26 17:22:39.192 [http-nio-8080-exec-10] DEBUG com.yun.product.dao.ProductDao.productListForStock - <==      Total: 2
2019-01-26 17:22:43.137 [http-nio-8080-exec-1] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 17:22:43.138 [http-nio-8080-exec-1] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 2(Integer)
2019-01-26 17:22:43.139 [http-nio-8080-exec-1] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 0
2019-01-26 17:22:46.403 [http-nio-8080-exec-4] DEBUG c.y.s.d.P.insertProductReceiveStock - ==>  Preparing: insert into product_receive_stock(prod_id,prod_param_id,stock_num)values(?,?,?) 
2019-01-26 17:22:46.404 [http-nio-8080-exec-4] DEBUG c.y.s.d.P.insertProductReceiveStock - ==> Parameters: 2(Integer), null, 2(Integer)
2019-01-26 17:22:46.491 [http-nio-8080-exec-4] DEBUG c.y.s.d.P.insertProductReceiveStock - <==    Updates: 1
2019-01-26 17:22:46.502 [http-nio-8080-exec-5] DEBUG c.y.stock.controller.ProductReceiveStockController - 跳转到待收库存查询控制器
2019-01-26 17:22:46.503 [http-nio-8080-exec-5] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - ==>  Preparing: select count(*) from product_receive_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 
2019-01-26 17:22:46.503 [http-nio-8080-exec-5] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - ==> Parameters: 
2019-01-26 17:22:46.504 [http-nio-8080-exec-5] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - <==      Total: 1
2019-01-26 17:22:46.505 [http-nio-8080-exec-5] DEBUG c.y.s.d.P.findProductReceiveStockList - ==>  Preparing: select ps.prod_rece_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_receive_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 order by p.prod_id,pp.prod_param_id limit ?,? 
2019-01-26 17:22:46.505 [http-nio-8080-exec-5] DEBUG c.y.s.d.P.findProductReceiveStockList - ==> Parameters: 0(Integer), 5(Integer)
2019-01-26 17:22:46.507 [http-nio-8080-exec-5] DEBUG c.y.s.d.P.findProductReceiveStockList - <==      Total: 1
2019-01-26 17:22:46.508 [http-nio-8080-exec-5] DEBUG c.y.stock.controller.ProductReceiveStockController - 转到待收库存页面
2019-01-26 17:23:04.221 [http-nio-8080-exec-3] DEBUG c.y.s.d.P.findProductReceiveStockById - ==>  Preparing: select ps.prod_rece_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_receive_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 and ps.prod_rece_stock_id=? 
2019-01-26 17:23:04.225 [http-nio-8080-exec-3] DEBUG c.y.s.d.P.findProductReceiveStockById - ==> Parameters: 1(Integer)
2019-01-26 17:23:04.229 [http-nio-8080-exec-3] DEBUG c.y.s.d.P.findProductReceiveStockById - <==      Total: 1
2019-01-26 17:23:04.261 [http-nio-8080-exec-3] ERROR org.thymeleaf.TemplateEngine - [THYMELEAF][http-nio-8080-exec-3] Exception processing template "stock/productReceiveStockUpdate": Exception evaluating SpringEL expression: "productStock.prodStockId" (stock/productReceiveStockUpdate)
2019-01-26 17:23:04.264 [http-nio-8080-exec-3] ERROR o.a.c.c.C.[.[localhost].[/].[dispatcherServlet] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is org.thymeleaf.exceptions.TemplateProcessingException: Exception evaluating SpringEL expression: "productStock.prodStockId" (stock/productReceiveStockUpdate)] with root cause
org.springframework.expression.spel.SpelEvaluationException: EL1007E: Property or field 'prodStockId' cannot be found on null
	at org.springframework.expression.spel.ast.PropertyOrFieldReference.readProperty(PropertyOrFieldReference.java:222)
	at org.springframework.expression.spel.ast.PropertyOrFieldReference.getValueInternal(PropertyOrFieldReference.java:94)
	at org.springframework.expression.spel.ast.PropertyOrFieldReference.access$000(PropertyOrFieldReference.java:46)
	at org.springframework.expression.spel.ast.PropertyOrFieldReference$AccessorLValue.getValue(PropertyOrFieldReference.java:379)
	at org.springframework.expression.spel.ast.CompoundExpression.getValueInternal(CompoundExpression.java:88)
	at org.springframework.expression.spel.ast.SpelNodeImpl.getValue(SpelNodeImpl.java:121)
	at org.springframework.expression.spel.standard.SpelExpression.getValue(SpelExpression.java:324)
	at org.thymeleaf.spring4.expression.SpelVariableExpressionEvaluator.evaluate(SpelVariableExpressionEvaluator.java:140)
	at org.thymeleaf.standard.expression.VariableExpression.executeVariable(VariableExpression.java:154)
	at org.thymeleaf.standard.expression.SimpleExpression.executeSimple(SimpleExpression.java:59)
	at org.thymeleaf.standard.expression.Expression.execute(Expression.java:103)
	at org.thymeleaf.standard.expression.Expression.execute(Expression.java:133)
	at org.thymeleaf.standard.processor.attr.AbstractStandardSingleAttributeModifierAttrProcessor.getTargetAttributeValue(AbstractStandardSingleAttributeModifierAttrProcessor.java:86)
	at org.thymeleaf.spring4.processor.attr.SpringValueAttrProcessor.getTargetAttributeValue(SpringValueAttrProcessor.java:71)
	at org.thymeleaf.processor.attr.AbstractSingleAttributeModifierAttrProcessor.getModifiedAttributeValues(AbstractSingleAttributeModifierAttrProcessor.java:59)
	at org.thymeleaf.processor.attr.AbstractAttributeModifierAttrProcessor.processAttribute(AbstractAttributeModifierAttrProcessor.java:62)
	at org.thymeleaf.processor.attr.AbstractAttrProcessor.doProcess(AbstractAttrProcessor.java:87)
	at org.thymeleaf.processor.AbstractProcessor.process(AbstractProcessor.java:212)
	at org.thymeleaf.dom.Node.applyNextProcessor(Node.java:1017)
	at org.thymeleaf.dom.Node.processNode(Node.java:972)
	at org.thymeleaf.dom.NestableNode.computeNextChild(NestableNode.java:695)
	at org.thymeleaf.dom.NestableNode.doAdditionalProcess(NestableNode.java:668)
	at org.thymeleaf.dom.Node.processNode(Node.java:990)
	at org.thymeleaf.dom.NestableNode.computeNextChild(NestableNode.java:695)
	at org.thymeleaf.dom.NestableNode.doAdditionalProcess(NestableNode.java:668)
	at org.thymeleaf.dom.Node.processNode(Node.java:990)
	at org.thymeleaf.dom.NestableNode.computeNextChild(NestableNode.java:695)
	at org.thymeleaf.dom.NestableNode.doAdditionalProcess(NestableNode.java:668)
	at org.thymeleaf.dom.Node.processNode(Node.java:990)
	at org.thymeleaf.dom.NestableNode.computeNextChild(NestableNode.java:695)
	at org.thymeleaf.dom.NestableNode.doAdditionalProcess(NestableNode.java:668)
	at org.thymeleaf.dom.Node.processNode(Node.java:990)
	at org.thymeleaf.dom.NestableNode.computeNextChild(NestableNode.java:695)
	at org.thymeleaf.dom.NestableNode.doAdditionalProcess(NestableNode.java:668)
	at org.thymeleaf.dom.Node.processNode(Node.java:990)
	at org.thymeleaf.dom.NestableNode.computeNextChild(NestableNode.java:695)
	at org.thymeleaf.dom.NestableNode.doAdditionalProcess(NestableNode.java:668)
	at org.thymeleaf.dom.Node.processNode(Node.java:990)
	at org.thymeleaf.dom.Document.process(Document.java:93)
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1155)
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1060)
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1011)
	at org.thymeleaf.spring4.view.ThymeleafView.renderFragment(ThymeleafView.java:335)
	at org.thymeleaf.spring4.view.ThymeleafView.render(ThymeleafView.java:190)
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1286)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1041)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:984)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:901)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:970)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:861)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:635)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:846)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:742)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HttpPutFormContentFilter.doFilterInternal(HttpPutFormContentFilter.java:108)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:81)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:197)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:199)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:478)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:140)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:81)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:803)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1459)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:745)
2019-01-26 17:23:13.246 [http-nio-8080-exec-2] ERROR o.a.c.c.C.[.[localhost].[/].[dispatcherServlet] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is java.lang.IllegalStateException: Optional int parameter 'prodReceiveStockId' is present but cannot be translated into a null value due to being declared as a primitive type. Consider declaring it as object wrapper for the corresponding primitive type.] with root cause
java.lang.IllegalStateException: Optional int parameter 'prodReceiveStockId' is present but cannot be translated into a null value due to being declared as a primitive type. Consider declaring it as object wrapper for the corresponding primitive type.
	at org.springframework.web.method.annotation.AbstractNamedValueMethodArgumentResolver.handleNullValue(AbstractNamedValueMethodArgumentResolver.java:238)
	at org.springframework.web.method.annotation.AbstractNamedValueMethodArgumentResolver.resolveArgument(AbstractNamedValueMethodArgumentResolver.java:111)
	at org.springframework.web.method.support.HandlerMethodArgumentResolverComposite.resolveArgument(HandlerMethodArgumentResolverComposite.java:121)
	at org.springframework.web.method.support.InvocableHandlerMethod.getMethodArgumentValues(InvocableHandlerMethod.java:158)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:128)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:97)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:827)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:738)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:85)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:967)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:901)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:970)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:861)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:635)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:846)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:742)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HttpPutFormContentFilter.doFilterInternal(HttpPutFormContentFilter.java:108)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:81)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:197)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:199)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:478)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:140)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:81)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:803)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1459)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:745)
2019-01-26 17:23:40.663 [http-nio-8080-exec-2] DEBUG c.y.stock.controller.ProductReceiveStockController - 跳转到待收库存查询控制器
2019-01-26 17:23:40.667 [http-nio-8080-exec-2] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - ==>  Preparing: select count(*) from product_receive_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 
2019-01-26 17:23:40.668 [http-nio-8080-exec-2] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - ==> Parameters: 
2019-01-26 17:23:40.673 [http-nio-8080-exec-2] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - <==      Total: 1
2019-01-26 17:23:40.676 [http-nio-8080-exec-2] DEBUG c.y.s.d.P.findProductReceiveStockList - ==>  Preparing: select ps.prod_rece_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_receive_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 order by p.prod_id,pp.prod_param_id limit ?,? 
2019-01-26 17:23:40.677 [http-nio-8080-exec-2] DEBUG c.y.s.d.P.findProductReceiveStockList - ==> Parameters: 0(Integer), 5(Integer)
2019-01-26 17:23:40.679 [http-nio-8080-exec-2] DEBUG c.y.s.d.P.findProductReceiveStockList - <==      Total: 1
2019-01-26 17:23:40.679 [http-nio-8080-exec-2] DEBUG c.y.stock.controller.ProductReceiveStockController - 转到待收库存页面
2019-01-26 17:23:43.439 [http-nio-8080-exec-6] ERROR o.a.c.c.C.[.[localhost].[/].[dispatcherServlet] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is java.lang.IllegalStateException: Optional int parameter 'prodReceiveStockId' is present but cannot be translated into a null value due to being declared as a primitive type. Consider declaring it as object wrapper for the corresponding primitive type.] with root cause
java.lang.IllegalStateException: Optional int parameter 'prodReceiveStockId' is present but cannot be translated into a null value due to being declared as a primitive type. Consider declaring it as object wrapper for the corresponding primitive type.
	at org.springframework.web.method.annotation.AbstractNamedValueMethodArgumentResolver.handleNullValue(AbstractNamedValueMethodArgumentResolver.java:238)
	at org.springframework.web.method.annotation.AbstractNamedValueMethodArgumentResolver.resolveArgument(AbstractNamedValueMethodArgumentResolver.java:111)
	at org.springframework.web.method.support.HandlerMethodArgumentResolverComposite.resolveArgument(HandlerMethodArgumentResolverComposite.java:121)
	at org.springframework.web.method.support.InvocableHandlerMethod.getMethodArgumentValues(InvocableHandlerMethod.java:158)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:128)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:97)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:827)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:738)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:85)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:967)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:901)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:970)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:861)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:635)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:846)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:742)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HttpPutFormContentFilter.doFilterInternal(HttpPutFormContentFilter.java:108)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:81)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:197)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:199)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:478)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:140)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:81)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:803)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1459)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:745)
2019-01-26 17:23:53.033 [main] INFO  com.yun.YunEbStockApplication - Starting YunEbStockApplication on USER-20181202BJ with PID 4864 (E:\workspace\yun-eb-stock\target\classes started by Administrator in E:\workspace\yun-eb-stock)
2019-01-26 17:23:53.038 [main] DEBUG com.yun.YunEbStockApplication - Running with Spring Boot v1.5.9.RELEASE, Spring v4.3.13.RELEASE
2019-01-26 17:23:53.038 [main] INFO  com.yun.YunEbStockApplication - No active profile set, falling back to default profiles: default
2019-01-26 17:23:53.340 [background-preinit] INFO  org.hibernate.validator.internal.util.Version - HV000001: Hibernate Validator 5.3.6.Final
2019-01-26 17:23:53.411 [main] INFO  o.s.b.c.e.AnnotationConfigEmbeddedWebApplicationContext - Refreshing org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@6a28ffa4: startup date [Sat Jan 26 17:23:53 CST 2019]; root of context hierarchy
2019-01-26 17:23:55.056 [main] INFO  o.s.b.c.e.tomcat.TomcatEmbeddedServletContainer - Tomcat initialized with port(s): 8080 (http)
2019-01-26 17:23:55.069 [main] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2019-01-26 17:23:55.070 [main] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet Engine: Apache Tomcat/8.5.23
2019-01-26 17:23:55.200 [localhost-startStop-1] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2019-01-26 17:23:55.200 [localhost-startStop-1] INFO  org.springframework.web.context.ContextLoader - Root WebApplicationContext: initialization completed in 1789 ms
2019-01-26 17:23:55.373 [localhost-startStop-1] INFO  o.s.boot.web.servlet.ServletRegistrationBean - Mapping servlet: 'dispatcherServlet' to [/]
2019-01-26 17:23:55.380 [localhost-startStop-1] INFO  o.s.boot.web.servlet.FilterRegistrationBean - Mapping filter: 'characterEncodingFilter' to: [/*]
2019-01-26 17:23:55.381 [localhost-startStop-1] INFO  o.s.boot.web.servlet.FilterRegistrationBean - Mapping filter: 'hiddenHttpMethodFilter' to: [/*]
2019-01-26 17:23:55.381 [localhost-startStop-1] INFO  o.s.boot.web.servlet.FilterRegistrationBean - Mapping filter: 'httpPutFormContentFilter' to: [/*]
2019-01-26 17:23:55.381 [localhost-startStop-1] INFO  o.s.boot.web.servlet.FilterRegistrationBean - Mapping filter: 'requestContextFilter' to: [/*]
2019-01-26 17:23:56.207 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerAdapter - Looking for @ControllerAdvice: org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@6a28ffa4: startup date [Sat Jan 26 17:23:53 CST 2019]; root of context hierarchy
2019-01-26 17:23:56.265 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productListForAutoComplete]}" onto public java.util.List<com.yun.product.model.Product> com.yun.product.controller.ProductController.productListForAutoComplete(java.lang.String)
2019-01-26 17:23:56.265 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productListForStock]}" onto public java.util.List<com.yun.product.model.Product> com.yun.product.controller.ProductController.productListForStock()
2019-01-26 17:23:56.266 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productPreAdd]}" onto public java.lang.String com.yun.product.controller.ProductController.productPreAdd()
2019-01-26 17:23:56.266 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productList]}" onto public java.lang.String com.yun.product.controller.ProductController.productList(org.springframework.ui.Model,java.lang.String,java.lang.String,java.lang.String,java.lang.String)
2019-01-26 17:23:56.266 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productSave]}" onto public java.lang.String com.yun.product.controller.ProductController.productSave(com.yun.product.model.Product)
2019-01-26 17:23:56.266 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productDelete]}" onto public java.lang.String com.yun.product.controller.ProductController.productDelete(int)
2019-01-26 17:23:56.266 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productPreUpdate]}" onto public java.lang.String com.yun.product.controller.ProductController.productPreUpdate(int,org.springframework.ui.Model)
2019-01-26 17:23:56.267 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productUpdate]}" onto public java.lang.String com.yun.product.controller.ProductController.productUpdate(com.yun.product.model.Product)
2019-01-26 17:23:56.268 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/prodParamDelete]}" onto public java.lang.String com.yun.product.controller.ProductParamController.prodParamDelete(int)
2019-01-26 17:23:56.268 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/prodParamSave]}" onto public java.lang.String com.yun.product.controller.ProductParamController.prodParamSave(com.yun.product.model.ProductParameter)
2019-01-26 17:23:56.269 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/prodParamList]}" onto public java.lang.String com.yun.product.controller.ProductParamController.prodParamList(int)
2019-01-26 17:23:56.269 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/prodParamPreAdd]}" onto public java.lang.String com.yun.product.controller.ProductParamController.prodParamPreAdd(int,org.springframework.ui.Model)
2019-01-26 17:23:56.272 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeUpdate]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeUpdate(java.lang.Integer,org.springframework.ui.Model)
2019-01-26 17:23:56.272 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeList]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeList(org.springframework.ui.Model)
2019-01-26 17:23:56.273 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeTree]}" onto public java.util.List<com.yun.product.model.ProductType> com.yun.product.controller.ProductTypeController.productTypeTree()
2019-01-26 17:23:56.273 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeEdit]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeEdit()
2019-01-26 17:23:56.273 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeSave]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeSave(com.yun.product.model.ProductType)
2019-01-26 17:23:56.273 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeUpdateSave]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeUpdateSave(com.yun.product.model.ProductType)
2019-01-26 17:23:56.274 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeDelete]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeDelete(java.lang.Integer,javax.servlet.http.HttpServletResponse) throws java.io.IOException
2019-01-26 17:23:56.275 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveStockList]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveStockController.productReceiveStocklist(java.lang.String,java.lang.String,org.springframework.ui.Model)
2019-01-26 17:23:56.275 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveStockPreAdd]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveStockController.productReceiveStockPreAdd()
2019-01-26 17:23:56.275 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveStockSave]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveStockController.productReceiveStockSave(com.yun.stock.model.ProductReceiveStock)
2019-01-26 17:23:56.275 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveStockDelete]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveStockController.productReceiveStockDelete(int)
2019-01-26 17:23:56.276 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveStockPreUpdate]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveStockController.productReceiveStockPreUpdate(int,org.springframework.ui.Model)
2019-01-26 17:23:56.276 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveStockUpdate]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveStockController.productReceiveStockUpdate(com.yun.stock.model.ProductReceiveStock)
2019-01-26 17:23:56.277 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockSave]}" onto public java.lang.String com.yun.stock.controller.ProductStockController.productStockSave(com.yun.stock.model.ProductStock)
2019-01-26 17:23:56.278 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockList]}" onto public java.lang.String com.yun.stock.controller.ProductStockController.productStocklist(java.lang.String,java.lang.String,org.springframework.ui.Model)
2019-01-26 17:23:56.278 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockPreAdd]}" onto public java.lang.String com.yun.stock.controller.ProductStockController.productStockPreAdd()
2019-01-26 17:23:56.278 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockDelete]}" onto public java.lang.String com.yun.stock.controller.ProductStockController.productStockDelete(int)
2019-01-26 17:23:56.278 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockPreUpdate]}" onto public java.lang.String com.yun.stock.controller.ProductStockController.productStockPreUpdate(int,org.springframework.ui.Model)
2019-01-26 17:23:56.279 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockUpdate]}" onto public java.lang.String com.yun.stock.controller.ProductStockController.productStockUpdate(com.yun.stock.model.ProductStock)
2019-01-26 17:23:56.279 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/main]}" onto public java.lang.String com.yun.user.controller.MainController.main()
2019-01-26 17:23:56.280 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/userList]}" onto public java.lang.String com.yun.user.controller.UserController.userList(org.springframework.ui.Model)
2019-01-26 17:23:56.281 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/login]}" onto public java.lang.String com.yun.user.controller.UserController.login(java.lang.String,java.lang.String,javax.servlet.http.HttpSession)
2019-01-26 17:23:56.281 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/userEdit]}" onto public java.lang.String com.yun.user.controller.UserController.userEdit()
2019-01-26 17:23:56.281 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/userSave]}" onto public java.lang.String com.yun.user.controller.UserController.userSave(com.yun.user.model.UserInfo)
2019-01-26 17:23:56.282 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/deleteUserInfo]}" onto public java.lang.String com.yun.user.controller.UserController.userDelete(int)
2019-01-26 17:23:56.285 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/error]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> org.springframework.boot.autoconfigure.web.BasicErrorController.error(javax.servlet.http.HttpServletRequest)
2019-01-26 17:23:56.286 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/error],produces=[text/html]}" onto public org.springframework.web.servlet.ModelAndView org.springframework.boot.autoconfigure.web.BasicErrorController.errorHtml(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
2019-01-26 17:23:56.319 [main] INFO  o.s.web.servlet.handler.SimpleUrlHandlerMapping - Mapped URL path [/webjars/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-01-26 17:23:56.320 [main] INFO  o.s.web.servlet.handler.SimpleUrlHandlerMapping - Mapped URL path [/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-01-26 17:23:56.363 [main] INFO  o.s.web.servlet.handler.SimpleUrlHandlerMapping - Mapped URL path [/**/favicon.ico] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-01-26 17:23:56.681 [main] INFO  o.s.b.a.w.WebMvcAutoConfiguration$WelcomePageHandlerMapping - Adding welcome page: class path resource [static/index.html]
2019-01-26 17:23:56.921 [main] INFO  o.s.jmx.export.annotation.AnnotationMBeanExporter - Registering beans for JMX exposure on startup
2019-01-26 17:23:56.945 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2019-01-26 17:23:56.957 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2019-01-26 17:23:56.970 [main] INFO  org.apache.tomcat.util.net.NioSelectorPool - Using a shared selector for servlet write/read
2019-01-26 17:23:56.988 [main] INFO  o.s.b.c.e.tomcat.TomcatEmbeddedServletContainer - Tomcat started on port(s): 8080 (http)
2019-01-26 17:23:56.993 [main] INFO  com.yun.YunEbStockApplication - Started YunEbStockApplication in 4.528 seconds (JVM running for 5.697)
2019-01-26 17:24:16.060 [http-nio-8080-exec-1] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring FrameworkServlet 'dispatcherServlet'
2019-01-26 17:24:16.060 [http-nio-8080-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - FrameworkServlet 'dispatcherServlet': initialization started
2019-01-26 17:24:16.083 [http-nio-8080-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - FrameworkServlet 'dispatcherServlet': initialization completed in 23 ms
2019-01-26 17:24:18.449 [http-nio-8080-exec-8] DEBUG c.y.stock.controller.ProductReceiveStockController - 跳转到待收库存查询控制器
2019-01-26 17:24:18.735 [http-nio-8080-exec-8] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - ==>  Preparing: select count(*) from product_receive_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 
2019-01-26 17:24:18.754 [http-nio-8080-exec-8] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - ==> Parameters: 
2019-01-26 17:24:18.763 [http-nio-8080-exec-8] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - <==      Total: 1
2019-01-26 17:24:18.771 [http-nio-8080-exec-8] DEBUG c.y.s.d.P.findProductReceiveStockList - ==>  Preparing: select ps.prod_rece_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_receive_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 order by p.prod_id,pp.prod_param_id limit ?,? 
2019-01-26 17:24:18.771 [http-nio-8080-exec-8] DEBUG c.y.s.d.P.findProductReceiveStockList - ==> Parameters: 0(Integer), 5(Integer)
2019-01-26 17:24:18.773 [http-nio-8080-exec-8] DEBUG c.y.s.d.P.findProductReceiveStockList - <==      Total: 1
2019-01-26 17:24:18.774 [http-nio-8080-exec-8] DEBUG c.y.stock.controller.ProductReceiveStockController - 转到待收库存页面
2019-01-26 17:24:21.964 [http-nio-8080-exec-9] DEBUG c.y.s.d.P.deleteProductReceiveStock - ==>  Preparing: delete from product_receice_stock where prod_rece_stock_id=? 
2019-01-26 17:24:21.965 [http-nio-8080-exec-9] DEBUG c.y.s.d.P.deleteProductReceiveStock - ==> Parameters: 1(Integer)
2019-01-26 17:24:21.981 [http-nio-8080-exec-9] INFO  o.s.beans.factory.xml.XmlBeanDefinitionReader - Loading XML bean definitions from class path resource [org/springframework/jdbc/support/sql-error-codes.xml]
2019-01-26 17:24:22.031 [http-nio-8080-exec-9] INFO  o.s.jdbc.support.SQLErrorCodesFactory - SQLErrorCodes loaded: [DB2, Derby, H2, HSQL, Informix, MS-SQL, MySQL, Oracle, PostgreSQL, Sybase, Hana]
2019-01-26 17:24:22.047 [http-nio-8080-exec-9] ERROR o.a.c.c.C.[.[localhost].[/].[dispatcherServlet] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is org.springframework.jdbc.BadSqlGrammarException: 
### Error updating database.  Cause: com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Table 'ebstock.product_receice_stock' doesn't exist
### The error may involve com.yun.stock.dao.ProductReceiveStockDao.deleteProductReceiveStock-Inline
### The error occurred while setting parameters
### SQL: delete from product_receice_stock where prod_rece_stock_id=?
### Cause: com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Table 'ebstock.product_receice_stock' doesn't exist
; bad SQL grammar []; nested exception is com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Table 'ebstock.product_receice_stock' doesn't exist] with root cause
com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Table 'ebstock.product_receice_stock' doesn't exist
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:408)
	at com.mysql.jdbc.Util.handleNewInstance(Util.java:425)
	at com.mysql.jdbc.Util.getInstance(Util.java:408)
	at com.mysql.jdbc.SQLError.createSQLException(SQLError.java:943)
	at com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:3973)
	at com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:3909)
	at com.mysql.jdbc.MysqlIO.sendCommand(MysqlIO.java:2527)
	at com.mysql.jdbc.MysqlIO.sqlQueryDirect(MysqlIO.java:2680)
	at com.mysql.jdbc.ConnectionImpl.execSQL(ConnectionImpl.java:2487)
	at com.mysql.jdbc.PreparedStatement.executeInternal(PreparedStatement.java:1858)
	at com.mysql.jdbc.PreparedStatement.execute(PreparedStatement.java:1197)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:483)
	at org.apache.tomcat.jdbc.pool.StatementFacade$StatementProxy.invoke(StatementFacade.java:114)
	at com.sun.proxy.$Proxy93.execute(Unknown Source)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:483)
	at org.apache.ibatis.logging.jdbc.PreparedStatementLogger.invoke(PreparedStatementLogger.java:59)
	at com.sun.proxy.$Proxy94.execute(Unknown Source)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.update(PreparedStatementHandler.java:46)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.update(RoutingStatementHandler.java:74)
	at org.apache.ibatis.executor.SimpleExecutor.doUpdate(SimpleExecutor.java:50)
	at org.apache.ibatis.executor.BaseExecutor.update(BaseExecutor.java:117)
	at org.apache.ibatis.executor.CachingExecutor.update(CachingExecutor.java:76)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.update(DefaultSqlSession.java:198)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.delete(DefaultSqlSession.java:213)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:483)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:433)
	at com.sun.proxy.$Proxy59.delete(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.delete(SqlSessionTemplate.java:310)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:68)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:59)
	at com.sun.proxy.$Proxy81.deleteProductReceiveStock(Unknown Source)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:483)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:333)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:190)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:157)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:136)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:213)
	at com.sun.proxy.$Proxy82.deleteProductReceiveStock(Unknown Source)
	at com.yun.stock.service.ProductStockService.deleteProductReceiveStock(ProductStockService.java:63)
	at com.yun.stock.controller.ProductReceiveStockController.productReceiveStockDelete(ProductReceiveStockController.java:62)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:483)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:133)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:97)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:827)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:738)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:85)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:967)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:901)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:970)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:861)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:635)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:846)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:742)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HttpPutFormContentFilter.doFilterInternal(HttpPutFormContentFilter.java:108)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:81)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:197)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:199)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:478)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:140)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:81)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:803)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1459)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:745)
2019-01-26 17:29:04.103 [main] INFO  com.yun.YunEbStockApplication - Starting YunEbStockApplication on USER-20181202BJ with PID 7080 (E:\workspace\yun-eb-stock\target\classes started by Administrator in E:\workspace\yun-eb-stock)
2019-01-26 17:29:04.110 [main] DEBUG com.yun.YunEbStockApplication - Running with Spring Boot v1.5.9.RELEASE, Spring v4.3.13.RELEASE
2019-01-26 17:29:04.111 [main] INFO  com.yun.YunEbStockApplication - No active profile set, falling back to default profiles: default
2019-01-26 17:29:04.527 [background-preinit] INFO  org.hibernate.validator.internal.util.Version - HV000001: Hibernate Validator 5.3.6.Final
2019-01-26 17:29:04.575 [main] INFO  o.s.b.c.e.AnnotationConfigEmbeddedWebApplicationContext - Refreshing org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@6a28ffa4: startup date [Sat Jan 26 17:29:04 CST 2019]; root of context hierarchy
2019-01-26 17:29:06.137 [main] INFO  o.s.b.c.e.tomcat.TomcatEmbeddedServletContainer - Tomcat initialized with port(s): 8080 (http)
2019-01-26 17:29:06.147 [main] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2019-01-26 17:29:06.148 [main] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet Engine: Apache Tomcat/8.5.23
2019-01-26 17:29:06.255 [localhost-startStop-1] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2019-01-26 17:29:06.255 [localhost-startStop-1] INFO  org.springframework.web.context.ContextLoader - Root WebApplicationContext: initialization completed in 1680 ms
2019-01-26 17:29:06.395 [localhost-startStop-1] INFO  o.s.boot.web.servlet.ServletRegistrationBean - Mapping servlet: 'dispatcherServlet' to [/]
2019-01-26 17:29:06.399 [localhost-startStop-1] INFO  o.s.boot.web.servlet.FilterRegistrationBean - Mapping filter: 'characterEncodingFilter' to: [/*]
2019-01-26 17:29:06.400 [localhost-startStop-1] INFO  o.s.boot.web.servlet.FilterRegistrationBean - Mapping filter: 'hiddenHttpMethodFilter' to: [/*]
2019-01-26 17:29:06.401 [localhost-startStop-1] INFO  o.s.boot.web.servlet.FilterRegistrationBean - Mapping filter: 'httpPutFormContentFilter' to: [/*]
2019-01-26 17:29:06.401 [localhost-startStop-1] INFO  o.s.boot.web.servlet.FilterRegistrationBean - Mapping filter: 'requestContextFilter' to: [/*]
2019-01-26 17:29:07.167 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerAdapter - Looking for @ControllerAdvice: org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@6a28ffa4: startup date [Sat Jan 26 17:29:04 CST 2019]; root of context hierarchy
2019-01-26 17:29:07.224 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productList]}" onto public java.lang.String com.yun.product.controller.ProductController.productList(org.springframework.ui.Model,java.lang.String,java.lang.String,java.lang.String,java.lang.String)
2019-01-26 17:29:07.225 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productSave]}" onto public java.lang.String com.yun.product.controller.ProductController.productSave(com.yun.product.model.Product)
2019-01-26 17:29:07.225 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productPreAdd]}" onto public java.lang.String com.yun.product.controller.ProductController.productPreAdd()
2019-01-26 17:29:07.225 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productDelete]}" onto public java.lang.String com.yun.product.controller.ProductController.productDelete(int)
2019-01-26 17:29:07.225 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productPreUpdate]}" onto public java.lang.String com.yun.product.controller.ProductController.productPreUpdate(int,org.springframework.ui.Model)
2019-01-26 17:29:07.225 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productUpdate]}" onto public java.lang.String com.yun.product.controller.ProductController.productUpdate(com.yun.product.model.Product)
2019-01-26 17:29:07.226 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productListForAutoComplete]}" onto public java.util.List<com.yun.product.model.Product> com.yun.product.controller.ProductController.productListForAutoComplete(java.lang.String)
2019-01-26 17:29:07.226 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productListForStock]}" onto public java.util.List<com.yun.product.model.Product> com.yun.product.controller.ProductController.productListForStock()
2019-01-26 17:29:07.227 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/prodParamDelete]}" onto public java.lang.String com.yun.product.controller.ProductParamController.prodParamDelete(int)
2019-01-26 17:29:07.227 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/prodParamSave]}" onto public java.lang.String com.yun.product.controller.ProductParamController.prodParamSave(com.yun.product.model.ProductParameter)
2019-01-26 17:29:07.227 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/prodParamList]}" onto public java.lang.String com.yun.product.controller.ProductParamController.prodParamList(int)
2019-01-26 17:29:07.228 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/prodParamPreAdd]}" onto public java.lang.String com.yun.product.controller.ProductParamController.prodParamPreAdd(int,org.springframework.ui.Model)
2019-01-26 17:29:07.230 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeList]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeList(org.springframework.ui.Model)
2019-01-26 17:29:07.231 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeTree]}" onto public java.util.List<com.yun.product.model.ProductType> com.yun.product.controller.ProductTypeController.productTypeTree()
2019-01-26 17:29:07.231 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeEdit]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeEdit()
2019-01-26 17:29:07.231 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeSave]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeSave(com.yun.product.model.ProductType)
2019-01-26 17:29:07.231 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeUpdate]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeUpdate(java.lang.Integer,org.springframework.ui.Model)
2019-01-26 17:29:07.232 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeUpdateSave]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeUpdateSave(com.yun.product.model.ProductType)
2019-01-26 17:29:07.232 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeDelete]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeDelete(java.lang.Integer,javax.servlet.http.HttpServletResponse) throws java.io.IOException
2019-01-26 17:29:07.233 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveStockList]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveStockController.productReceiveStocklist(java.lang.String,java.lang.String,org.springframework.ui.Model)
2019-01-26 17:29:07.233 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveStockPreAdd]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveStockController.productReceiveStockPreAdd()
2019-01-26 17:29:07.233 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveStockSave]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveStockController.productReceiveStockSave(com.yun.stock.model.ProductReceiveStock)
2019-01-26 17:29:07.234 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveStockDelete]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveStockController.productReceiveStockDelete(int)
2019-01-26 17:29:07.234 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveStockPreUpdate]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveStockController.productReceiveStockPreUpdate(int,org.springframework.ui.Model)
2019-01-26 17:29:07.234 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveStockUpdate]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveStockController.productReceiveStockUpdate(com.yun.stock.model.ProductReceiveStock)
2019-01-26 17:29:07.235 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockSave]}" onto public java.lang.String com.yun.stock.controller.ProductStockController.productStockSave(com.yun.stock.model.ProductStock)
2019-01-26 17:29:07.235 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockList]}" onto public java.lang.String com.yun.stock.controller.ProductStockController.productStocklist(java.lang.String,java.lang.String,org.springframework.ui.Model)
2019-01-26 17:29:07.235 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockPreAdd]}" onto public java.lang.String com.yun.stock.controller.ProductStockController.productStockPreAdd()
2019-01-26 17:29:07.235 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockDelete]}" onto public java.lang.String com.yun.stock.controller.ProductStockController.productStockDelete(int)
2019-01-26 17:29:07.235 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockPreUpdate]}" onto public java.lang.String com.yun.stock.controller.ProductStockController.productStockPreUpdate(int,org.springframework.ui.Model)
2019-01-26 17:29:07.236 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockUpdate]}" onto public java.lang.String com.yun.stock.controller.ProductStockController.productStockUpdate(com.yun.stock.model.ProductStock)
2019-01-26 17:29:07.236 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/main]}" onto public java.lang.String com.yun.user.controller.MainController.main()
2019-01-26 17:29:07.237 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/userList]}" onto public java.lang.String com.yun.user.controller.UserController.userList(org.springframework.ui.Model)
2019-01-26 17:29:07.237 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/login]}" onto public java.lang.String com.yun.user.controller.UserController.login(java.lang.String,java.lang.String,javax.servlet.http.HttpSession)
2019-01-26 17:29:07.237 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/userEdit]}" onto public java.lang.String com.yun.user.controller.UserController.userEdit()
2019-01-26 17:29:07.237 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/userSave]}" onto public java.lang.String com.yun.user.controller.UserController.userSave(com.yun.user.model.UserInfo)
2019-01-26 17:29:07.237 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/deleteUserInfo]}" onto public java.lang.String com.yun.user.controller.UserController.userDelete(int)
2019-01-26 17:29:07.240 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/error]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> org.springframework.boot.autoconfigure.web.BasicErrorController.error(javax.servlet.http.HttpServletRequest)
2019-01-26 17:29:07.241 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/error],produces=[text/html]}" onto public org.springframework.web.servlet.ModelAndView org.springframework.boot.autoconfigure.web.BasicErrorController.errorHtml(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
2019-01-26 17:29:07.278 [main] INFO  o.s.web.servlet.handler.SimpleUrlHandlerMapping - Mapped URL path [/webjars/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-01-26 17:29:07.278 [main] INFO  o.s.web.servlet.handler.SimpleUrlHandlerMapping - Mapped URL path [/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-01-26 17:29:07.319 [main] INFO  o.s.web.servlet.handler.SimpleUrlHandlerMapping - Mapped URL path [/**/favicon.ico] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-01-26 17:29:07.611 [main] INFO  o.s.b.a.w.WebMvcAutoConfiguration$WelcomePageHandlerMapping - Adding welcome page: class path resource [static/index.html]
2019-01-26 17:29:07.861 [main] INFO  o.s.jmx.export.annotation.AnnotationMBeanExporter - Registering beans for JMX exposure on startup
2019-01-26 17:29:07.880 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2019-01-26 17:29:07.891 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2019-01-26 17:29:07.905 [main] INFO  org.apache.tomcat.util.net.NioSelectorPool - Using a shared selector for servlet write/read
2019-01-26 17:29:07.922 [main] INFO  o.s.b.c.e.tomcat.TomcatEmbeddedServletContainer - Tomcat started on port(s): 8080 (http)
2019-01-26 17:29:07.928 [main] INFO  com.yun.YunEbStockApplication - Started YunEbStockApplication in 4.385 seconds (JVM running for 5.52)
2019-01-26 17:29:20.304 [http-nio-8080-exec-1] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring FrameworkServlet 'dispatcherServlet'
2019-01-26 17:29:20.304 [http-nio-8080-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - FrameworkServlet 'dispatcherServlet': initialization started
2019-01-26 17:29:20.322 [http-nio-8080-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - FrameworkServlet 'dispatcherServlet': initialization completed in 18 ms
2019-01-26 17:29:22.802 [http-nio-8080-exec-8] DEBUG c.y.stock.controller.ProductReceiveStockController - 跳转到待收库存查询控制器
2019-01-26 17:29:23.078 [http-nio-8080-exec-8] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - ==>  Preparing: select count(*) from product_receive_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 
2019-01-26 17:29:23.097 [http-nio-8080-exec-8] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - ==> Parameters: 
2019-01-26 17:29:23.108 [http-nio-8080-exec-8] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - <==      Total: 1
2019-01-26 17:29:23.115 [http-nio-8080-exec-8] DEBUG c.y.s.d.P.findProductReceiveStockList - ==>  Preparing: select ps.prod_rece_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_receive_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 order by p.prod_id,pp.prod_param_id limit ?,? 
2019-01-26 17:29:23.116 [http-nio-8080-exec-8] DEBUG c.y.s.d.P.findProductReceiveStockList - ==> Parameters: 0(Integer), 5(Integer)
2019-01-26 17:29:23.118 [http-nio-8080-exec-8] DEBUG c.y.s.d.P.findProductReceiveStockList - <==      Total: 1
2019-01-26 17:29:23.119 [http-nio-8080-exec-8] DEBUG c.y.stock.controller.ProductReceiveStockController - 转到待收库存页面
2019-01-26 17:29:26.837 [http-nio-8080-exec-9] DEBUG c.y.s.d.P.deleteProductReceiveStock - ==>  Preparing: delete from product_receive_stock where prod_rece_stock_id=? 
2019-01-26 17:29:26.838 [http-nio-8080-exec-9] DEBUG c.y.s.d.P.deleteProductReceiveStock - ==> Parameters: 1(Integer)
2019-01-26 17:29:26.939 [http-nio-8080-exec-9] DEBUG c.y.s.d.P.deleteProductReceiveStock - <==    Updates: 1
2019-01-26 17:29:26.954 [http-nio-8080-exec-10] DEBUG com.yun.stock.controller.ProductStockController - 跳转到物品库存查询控制器
2019-01-26 17:29:26.956 [http-nio-8080-exec-10] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==>  Preparing: select count(*) from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 
2019-01-26 17:29:26.959 [http-nio-8080-exec-10] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==> Parameters: 
2019-01-26 17:29:26.962 [http-nio-8080-exec-10] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - <==      Total: 1
2019-01-26 17:29:26.964 [http-nio-8080-exec-10] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==>  Preparing: select ps.prod_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 order by p.prod_id,pp.prod_param_id limit ?,? 
2019-01-26 17:29:26.966 [http-nio-8080-exec-10] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==> Parameters: 0(Integer), 5(Integer)
2019-01-26 17:29:26.970 [http-nio-8080-exec-10] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - <==      Total: 2
2019-01-26 17:29:26.970 [http-nio-8080-exec-10] DEBUG com.yun.stock.controller.ProductStockController - 转到物品库存页面
2019-01-26 17:29:50.849 [http-nio-8080-exec-1] DEBUG c.y.stock.controller.ProductReceiveStockController - 跳转到待收库存查询控制器
2019-01-26 17:29:50.851 [http-nio-8080-exec-1] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - ==>  Preparing: select count(*) from product_receive_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 
2019-01-26 17:29:50.851 [http-nio-8080-exec-1] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - ==> Parameters: 
2019-01-26 17:29:50.852 [http-nio-8080-exec-1] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - <==      Total: 1
2019-01-26 17:29:50.853 [http-nio-8080-exec-1] DEBUG c.y.s.d.P.findProductReceiveStockList - ==>  Preparing: select ps.prod_rece_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_receive_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 order by p.prod_id,pp.prod_param_id limit ?,? 
2019-01-26 17:29:50.854 [http-nio-8080-exec-1] DEBUG c.y.s.d.P.findProductReceiveStockList - ==> Parameters: 0(Integer), 5(Integer)
2019-01-26 17:29:50.855 [http-nio-8080-exec-1] DEBUG c.y.s.d.P.findProductReceiveStockList - <==      Total: 0
2019-01-26 17:29:50.856 [http-nio-8080-exec-1] DEBUG c.y.stock.controller.ProductReceiveStockController - 转到待收库存页面
2019-01-26 17:29:53.598 [http-nio-8080-exec-3] DEBUG com.yun.product.dao.ProductDao.productListForStock - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where p.prod_state=0 and prod_id not in(select prod_id from product_stock) 
2019-01-26 17:29:53.600 [http-nio-8080-exec-3] DEBUG com.yun.product.dao.ProductDao.productListForStock - ==> Parameters: 
2019-01-26 17:29:53.603 [http-nio-8080-exec-3] DEBUG com.yun.product.dao.ProductDao.productListForStock - <==      Total: 2
2019-01-26 17:29:56.867 [http-nio-8080-exec-5] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 17:29:56.869 [http-nio-8080-exec-5] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 2(Integer)
2019-01-26 17:29:56.873 [http-nio-8080-exec-5] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 0
2019-01-26 17:30:00.408 [http-nio-8080-exec-4] DEBUG c.y.s.d.P.insertProductReceiveStock - ==>  Preparing: insert into product_receive_stock(prod_id,prod_param_id,stock_num)values(?,?,?) 
2019-01-26 17:30:00.409 [http-nio-8080-exec-4] DEBUG c.y.s.d.P.insertProductReceiveStock - ==> Parameters: 2(Integer), null, 33(Integer)
2019-01-26 17:30:00.504 [http-nio-8080-exec-4] DEBUG c.y.s.d.P.insertProductReceiveStock - <==    Updates: 1
2019-01-26 17:30:00.517 [http-nio-8080-exec-6] DEBUG c.y.stock.controller.ProductReceiveStockController - 跳转到待收库存查询控制器
2019-01-26 17:30:00.519 [http-nio-8080-exec-6] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - ==>  Preparing: select count(*) from product_receive_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 
2019-01-26 17:30:00.520 [http-nio-8080-exec-6] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - ==> Parameters: 
2019-01-26 17:30:00.523 [http-nio-8080-exec-6] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - <==      Total: 1
2019-01-26 17:30:00.525 [http-nio-8080-exec-6] DEBUG c.y.s.d.P.findProductReceiveStockList - ==>  Preparing: select ps.prod_rece_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_receive_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 order by p.prod_id,pp.prod_param_id limit ?,? 
2019-01-26 17:30:00.527 [http-nio-8080-exec-6] DEBUG c.y.s.d.P.findProductReceiveStockList - ==> Parameters: 0(Integer), 5(Integer)
2019-01-26 17:30:00.532 [http-nio-8080-exec-6] DEBUG c.y.s.d.P.findProductReceiveStockList - <==      Total: 1
2019-01-26 17:30:00.533 [http-nio-8080-exec-6] DEBUG c.y.stock.controller.ProductReceiveStockController - 转到待收库存页面
2019-01-26 17:30:02.967 [http-nio-8080-exec-7] DEBUG c.y.s.d.P.deleteProductReceiveStock - ==>  Preparing: delete from product_receive_stock where prod_rece_stock_id=? 
2019-01-26 17:30:02.968 [http-nio-8080-exec-7] DEBUG c.y.s.d.P.deleteProductReceiveStock - ==> Parameters: 2(Integer)
2019-01-26 17:30:03.046 [http-nio-8080-exec-7] DEBUG c.y.s.d.P.deleteProductReceiveStock - <==    Updates: 1
2019-01-26 17:30:03.051 [http-nio-8080-exec-8] DEBUG com.yun.stock.controller.ProductStockController - 跳转到物品库存查询控制器
2019-01-26 17:30:03.052 [http-nio-8080-exec-8] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==>  Preparing: select count(*) from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 
2019-01-26 17:30:03.053 [http-nio-8080-exec-8] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==> Parameters: 
2019-01-26 17:30:03.054 [http-nio-8080-exec-8] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - <==      Total: 1
2019-01-26 17:30:03.055 [http-nio-8080-exec-8] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==>  Preparing: select ps.prod_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 order by p.prod_id,pp.prod_param_id limit ?,? 
2019-01-26 17:30:03.055 [http-nio-8080-exec-8] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==> Parameters: 0(Integer), 5(Integer)
2019-01-26 17:30:03.057 [http-nio-8080-exec-8] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - <==      Total: 2
2019-01-26 17:30:03.058 [http-nio-8080-exec-8] DEBUG com.yun.stock.controller.ProductStockController - 转到物品库存页面
2019-01-26 17:30:06.913 [http-nio-8080-exec-9] DEBUG c.yun.stock.dao.ProductStockDao.deleteProductStock - ==>  Preparing: delete from product_stock where prod_stock_id=? 
2019-01-26 17:30:06.915 [http-nio-8080-exec-9] DEBUG c.yun.stock.dao.ProductStockDao.deleteProductStock - ==> Parameters: 1(Integer)
2019-01-26 17:30:07.006 [http-nio-8080-exec-9] DEBUG c.yun.stock.dao.ProductStockDao.deleteProductStock - <==    Updates: 1
2019-01-26 17:30:07.017 [http-nio-8080-exec-10] DEBUG com.yun.stock.controller.ProductStockController - 跳转到物品库存查询控制器
2019-01-26 17:30:07.018 [http-nio-8080-exec-10] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==>  Preparing: select count(*) from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 
2019-01-26 17:30:07.019 [http-nio-8080-exec-10] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==> Parameters: 
2019-01-26 17:30:07.021 [http-nio-8080-exec-10] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - <==      Total: 1
2019-01-26 17:30:07.023 [http-nio-8080-exec-10] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==>  Preparing: select ps.prod_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 order by p.prod_id,pp.prod_param_id limit ?,? 
2019-01-26 17:30:07.024 [http-nio-8080-exec-10] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==> Parameters: 0(Integer), 5(Integer)
2019-01-26 17:30:07.028 [http-nio-8080-exec-10] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - <==      Total: 1
2019-01-26 17:30:07.029 [http-nio-8080-exec-10] DEBUG com.yun.stock.controller.ProductStockController - 转到物品库存页面
2019-01-26 17:30:11.518 [http-nio-8080-exec-1] DEBUG c.y.stock.dao.ProductStockDao.findProductStockById - ==>  Preparing: select ps.prod_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 and ps.prod_stock_id=? 
2019-01-26 17:30:11.519 [http-nio-8080-exec-1] DEBUG c.y.stock.dao.ProductStockDao.findProductStockById - ==> Parameters: 4(Integer)
2019-01-26 17:30:11.521 [http-nio-8080-exec-1] DEBUG c.y.stock.dao.ProductStockDao.findProductStockById - <==      Total: 1
2019-01-26 17:30:12.670 [http-nio-8080-exec-2] DEBUG c.yun.stock.dao.ProductStockDao.updateProductStock - ==>  Preparing: update product_stock set prod_id=?,prod_param_id=?,stock_num=? where prod_stock_id=? 
2019-01-26 17:30:12.671 [http-nio-8080-exec-2] DEBUG c.yun.stock.dao.ProductStockDao.updateProductStock - ==> Parameters: 4(Integer), 6(Integer), 8(Integer), 4(Integer)
2019-01-26 17:30:12.751 [http-nio-8080-exec-2] DEBUG c.yun.stock.dao.ProductStockDao.updateProductStock - <==    Updates: 1
2019-01-26 17:30:12.765 [http-nio-8080-exec-3] DEBUG com.yun.stock.controller.ProductStockController - 跳转到物品库存查询控制器
2019-01-26 17:30:12.766 [http-nio-8080-exec-3] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==>  Preparing: select count(*) from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 
2019-01-26 17:30:12.767 [http-nio-8080-exec-3] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==> Parameters: 
2019-01-26 17:30:12.772 [http-nio-8080-exec-3] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - <==      Total: 1
2019-01-26 17:30:12.776 [http-nio-8080-exec-3] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==>  Preparing: select ps.prod_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 order by p.prod_id,pp.prod_param_id limit ?,? 
2019-01-26 17:30:12.777 [http-nio-8080-exec-3] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==> Parameters: 0(Integer), 5(Integer)
2019-01-26 17:30:12.780 [http-nio-8080-exec-3] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - <==      Total: 1
2019-01-26 17:30:12.781 [http-nio-8080-exec-3] DEBUG com.yun.stock.controller.ProductStockController - 转到物品库存页面
2019-01-26 17:30:14.203 [http-nio-8080-exec-5] DEBUG c.y.stock.dao.ProductStockDao.findProductStockById - ==>  Preparing: select ps.prod_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 and ps.prod_stock_id=? 
2019-01-26 17:30:14.205 [http-nio-8080-exec-5] DEBUG c.y.stock.dao.ProductStockDao.findProductStockById - ==> Parameters: 4(Integer)
2019-01-26 17:30:14.211 [http-nio-8080-exec-5] DEBUG c.y.stock.dao.ProductStockDao.findProductStockById - <==      Total: 1
2019-01-26 17:30:16.357 [http-nio-8080-exec-4] DEBUG c.yun.stock.dao.ProductStockDao.updateProductStock - ==>  Preparing: update product_stock set prod_id=?,prod_param_id=?,stock_num=? where prod_stock_id=? 
2019-01-26 17:30:16.357 [http-nio-8080-exec-4] DEBUG c.yun.stock.dao.ProductStockDao.updateProductStock - ==> Parameters: 4(Integer), 6(Integer), 12(Integer), 4(Integer)
2019-01-26 17:30:16.417 [http-nio-8080-exec-4] DEBUG c.yun.stock.dao.ProductStockDao.updateProductStock - <==    Updates: 1
2019-01-26 17:30:16.423 [http-nio-8080-exec-6] DEBUG com.yun.stock.controller.ProductStockController - 跳转到物品库存查询控制器
2019-01-26 17:30:16.423 [http-nio-8080-exec-6] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==>  Preparing: select count(*) from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 
2019-01-26 17:30:16.423 [http-nio-8080-exec-6] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==> Parameters: 
2019-01-26 17:30:16.424 [http-nio-8080-exec-6] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - <==      Total: 1
2019-01-26 17:30:16.425 [http-nio-8080-exec-6] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==>  Preparing: select ps.prod_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 order by p.prod_id,pp.prod_param_id limit ?,? 
2019-01-26 17:30:16.425 [http-nio-8080-exec-6] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==> Parameters: 0(Integer), 5(Integer)
2019-01-26 17:30:16.427 [http-nio-8080-exec-6] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - <==      Total: 1
2019-01-26 17:30:16.427 [http-nio-8080-exec-6] DEBUG com.yun.stock.controller.ProductStockController - 转到物品库存页面
2019-01-26 17:30:19.330 [http-nio-8080-exec-7] DEBUG c.y.stock.controller.ProductReceiveStockController - 跳转到待收库存查询控制器
2019-01-26 17:30:19.332 [http-nio-8080-exec-7] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - ==>  Preparing: select count(*) from product_receive_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 
2019-01-26 17:30:19.335 [http-nio-8080-exec-7] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - ==> Parameters: 
2019-01-26 17:30:19.339 [http-nio-8080-exec-7] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - <==      Total: 1
2019-01-26 17:30:19.341 [http-nio-8080-exec-7] DEBUG c.y.s.d.P.findProductReceiveStockList - ==>  Preparing: select ps.prod_rece_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_receive_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 order by p.prod_id,pp.prod_param_id limit ?,? 
2019-01-26 17:30:19.342 [http-nio-8080-exec-7] DEBUG c.y.s.d.P.findProductReceiveStockList - ==> Parameters: 0(Integer), 5(Integer)
2019-01-26 17:30:19.346 [http-nio-8080-exec-7] DEBUG c.y.s.d.P.findProductReceiveStockList - <==      Total: 0
2019-01-26 17:30:19.346 [http-nio-8080-exec-7] DEBUG c.y.stock.controller.ProductReceiveStockController - 转到待收库存页面
2019-01-26 17:30:26.741 [main] INFO  com.yun.YunEbStockApplication - Starting YunEbStockApplication on USER-20181202BJ with PID 6820 (E:\workspace\yun-eb-stock\target\classes started by Administrator in E:\workspace\yun-eb-stock)
2019-01-26 17:30:26.744 [main] DEBUG com.yun.YunEbStockApplication - Running with Spring Boot v1.5.9.RELEASE, Spring v4.3.13.RELEASE
2019-01-26 17:30:26.745 [main] INFO  com.yun.YunEbStockApplication - No active profile set, falling back to default profiles: default
2019-01-26 17:30:27.124 [main] INFO  o.s.b.c.e.AnnotationConfigEmbeddedWebApplicationContext - Refreshing org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@6a28ffa4: startup date [Sat Jan 26 17:30:27 CST 2019]; root of context hierarchy
2019-01-26 17:30:27.586 [background-preinit] INFO  org.hibernate.validator.internal.util.Version - HV000001: Hibernate Validator 5.3.6.Final
2019-01-26 17:30:28.724 [main] INFO  o.s.b.c.e.tomcat.TomcatEmbeddedServletContainer - Tomcat initialized with port(s): 8080 (http)
2019-01-26 17:30:28.734 [main] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2019-01-26 17:30:28.735 [main] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet Engine: Apache Tomcat/8.5.23
2019-01-26 17:30:28.842 [localhost-startStop-1] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2019-01-26 17:30:28.842 [localhost-startStop-1] INFO  org.springframework.web.context.ContextLoader - Root WebApplicationContext: initialization completed in 1718 ms
2019-01-26 17:30:28.982 [localhost-startStop-1] INFO  o.s.boot.web.servlet.ServletRegistrationBean - Mapping servlet: 'dispatcherServlet' to [/]
2019-01-26 17:30:28.987 [localhost-startStop-1] INFO  o.s.boot.web.servlet.FilterRegistrationBean - Mapping filter: 'characterEncodingFilter' to: [/*]
2019-01-26 17:30:28.988 [localhost-startStop-1] INFO  o.s.boot.web.servlet.FilterRegistrationBean - Mapping filter: 'hiddenHttpMethodFilter' to: [/*]
2019-01-26 17:30:28.988 [localhost-startStop-1] INFO  o.s.boot.web.servlet.FilterRegistrationBean - Mapping filter: 'httpPutFormContentFilter' to: [/*]
2019-01-26 17:30:28.988 [localhost-startStop-1] INFO  o.s.boot.web.servlet.FilterRegistrationBean - Mapping filter: 'requestContextFilter' to: [/*]
2019-01-26 17:30:29.751 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerAdapter - Looking for @ControllerAdvice: org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@6a28ffa4: startup date [Sat Jan 26 17:30:27 CST 2019]; root of context hierarchy
2019-01-26 17:30:29.809 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productListForAutoComplete]}" onto public java.util.List<com.yun.product.model.Product> com.yun.product.controller.ProductController.productListForAutoComplete(java.lang.String)
2019-01-26 17:30:29.810 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productListForStock]}" onto public java.util.List<com.yun.product.model.Product> com.yun.product.controller.ProductController.productListForStock()
2019-01-26 17:30:29.810 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productList]}" onto public java.lang.String com.yun.product.controller.ProductController.productList(org.springframework.ui.Model,java.lang.String,java.lang.String,java.lang.String,java.lang.String)
2019-01-26 17:30:29.810 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productSave]}" onto public java.lang.String com.yun.product.controller.ProductController.productSave(com.yun.product.model.Product)
2019-01-26 17:30:29.811 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productPreAdd]}" onto public java.lang.String com.yun.product.controller.ProductController.productPreAdd()
2019-01-26 17:30:29.811 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productDelete]}" onto public java.lang.String com.yun.product.controller.ProductController.productDelete(int)
2019-01-26 17:30:29.811 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productPreUpdate]}" onto public java.lang.String com.yun.product.controller.ProductController.productPreUpdate(int,org.springframework.ui.Model)
2019-01-26 17:30:29.811 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productUpdate]}" onto public java.lang.String com.yun.product.controller.ProductController.productUpdate(com.yun.product.model.Product)
2019-01-26 17:30:29.812 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/prodParamDelete]}" onto public java.lang.String com.yun.product.controller.ProductParamController.prodParamDelete(int)
2019-01-26 17:30:29.812 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/prodParamSave]}" onto public java.lang.String com.yun.product.controller.ProductParamController.prodParamSave(com.yun.product.model.ProductParameter)
2019-01-26 17:30:29.813 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/prodParamList]}" onto public java.lang.String com.yun.product.controller.ProductParamController.prodParamList(int)
2019-01-26 17:30:29.813 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/prodParamPreAdd]}" onto public java.lang.String com.yun.product.controller.ProductParamController.prodParamPreAdd(int,org.springframework.ui.Model)
2019-01-26 17:30:29.815 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeUpdate]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeUpdate(java.lang.Integer,org.springframework.ui.Model)
2019-01-26 17:30:29.816 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeUpdateSave]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeUpdateSave(com.yun.product.model.ProductType)
2019-01-26 17:30:29.816 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeDelete]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeDelete(java.lang.Integer,javax.servlet.http.HttpServletResponse) throws java.io.IOException
2019-01-26 17:30:29.816 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeList]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeList(org.springframework.ui.Model)
2019-01-26 17:30:29.817 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeTree]}" onto public java.util.List<com.yun.product.model.ProductType> com.yun.product.controller.ProductTypeController.productTypeTree()
2019-01-26 17:30:29.817 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeEdit]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeEdit()
2019-01-26 17:30:29.817 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeSave]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeSave(com.yun.product.model.ProductType)
2019-01-26 17:30:29.818 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveStockList]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveStockController.productReceiveStocklist(java.lang.String,java.lang.String,org.springframework.ui.Model)
2019-01-26 17:30:29.818 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveStockPreAdd]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveStockController.productReceiveStockPreAdd()
2019-01-26 17:30:29.819 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveStockSave]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveStockController.productReceiveStockSave(com.yun.stock.model.ProductReceiveStock)
2019-01-26 17:30:29.819 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveStockDelete]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveStockController.productReceiveStockDelete(int)
2019-01-26 17:30:29.819 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveStockPreUpdate]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveStockController.productReceiveStockPreUpdate(int,org.springframework.ui.Model)
2019-01-26 17:30:29.819 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveStockUpdate]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveStockController.productReceiveStockUpdate(com.yun.stock.model.ProductReceiveStock)
2019-01-26 17:30:29.820 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockPreAdd]}" onto public java.lang.String com.yun.stock.controller.ProductStockController.productStockPreAdd()
2019-01-26 17:30:29.820 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockDelete]}" onto public java.lang.String com.yun.stock.controller.ProductStockController.productStockDelete(int)
2019-01-26 17:30:29.820 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockPreUpdate]}" onto public java.lang.String com.yun.stock.controller.ProductStockController.productStockPreUpdate(int,org.springframework.ui.Model)
2019-01-26 17:30:29.820 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockUpdate]}" onto public java.lang.String com.yun.stock.controller.ProductStockController.productStockUpdate(com.yun.stock.model.ProductStock)
2019-01-26 17:30:29.821 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockSave]}" onto public java.lang.String com.yun.stock.controller.ProductStockController.productStockSave(com.yun.stock.model.ProductStock)
2019-01-26 17:30:29.821 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockList]}" onto public java.lang.String com.yun.stock.controller.ProductStockController.productStocklist(java.lang.String,java.lang.String,org.springframework.ui.Model)
2019-01-26 17:30:29.821 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/main]}" onto public java.lang.String com.yun.user.controller.MainController.main()
2019-01-26 17:30:29.822 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/userList]}" onto public java.lang.String com.yun.user.controller.UserController.userList(org.springframework.ui.Model)
2019-01-26 17:30:29.822 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/login]}" onto public java.lang.String com.yun.user.controller.UserController.login(java.lang.String,java.lang.String,javax.servlet.http.HttpSession)
2019-01-26 17:30:29.822 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/userEdit]}" onto public java.lang.String com.yun.user.controller.UserController.userEdit()
2019-01-26 17:30:29.822 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/userSave]}" onto public java.lang.String com.yun.user.controller.UserController.userSave(com.yun.user.model.UserInfo)
2019-01-26 17:30:29.822 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/deleteUserInfo]}" onto public java.lang.String com.yun.user.controller.UserController.userDelete(int)
2019-01-26 17:30:29.825 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/error]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> org.springframework.boot.autoconfigure.web.BasicErrorController.error(javax.servlet.http.HttpServletRequest)
2019-01-26 17:30:29.826 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/error],produces=[text/html]}" onto public org.springframework.web.servlet.ModelAndView org.springframework.boot.autoconfigure.web.BasicErrorController.errorHtml(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
2019-01-26 17:30:29.859 [main] INFO  o.s.web.servlet.handler.SimpleUrlHandlerMapping - Mapped URL path [/webjars/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-01-26 17:30:29.859 [main] INFO  o.s.web.servlet.handler.SimpleUrlHandlerMapping - Mapped URL path [/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-01-26 17:30:29.901 [main] INFO  o.s.web.servlet.handler.SimpleUrlHandlerMapping - Mapped URL path [/**/favicon.ico] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-01-26 17:30:30.198 [main] INFO  o.s.b.a.w.WebMvcAutoConfiguration$WelcomePageHandlerMapping - Adding welcome page: class path resource [static/index.html]
2019-01-26 17:30:30.457 [main] INFO  o.s.jmx.export.annotation.AnnotationMBeanExporter - Registering beans for JMX exposure on startup
2019-01-26 17:30:30.481 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2019-01-26 17:30:30.495 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2019-01-26 17:30:30.516 [main] INFO  org.apache.tomcat.util.net.NioSelectorPool - Using a shared selector for servlet write/read
2019-01-26 17:30:30.542 [main] INFO  o.s.b.c.e.tomcat.TomcatEmbeddedServletContainer - Tomcat started on port(s): 8080 (http)
2019-01-26 17:30:30.550 [main] INFO  com.yun.YunEbStockApplication - Started YunEbStockApplication in 4.261 seconds (JVM running for 5.49)
2019-01-26 17:30:36.768 [http-nio-8080-exec-1] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring FrameworkServlet 'dispatcherServlet'
2019-01-26 17:30:36.768 [http-nio-8080-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - FrameworkServlet 'dispatcherServlet': initialization started
2019-01-26 17:30:36.785 [http-nio-8080-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - FrameworkServlet 'dispatcherServlet': initialization completed in 17 ms
2019-01-26 17:30:39.688 [http-nio-8080-exec-8] DEBUG c.y.stock.controller.ProductReceiveStockController - 跳转到待收库存查询控制器
2019-01-26 17:30:39.973 [http-nio-8080-exec-8] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - ==>  Preparing: select count(*) from product_receive_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 
2019-01-26 17:30:39.993 [http-nio-8080-exec-8] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - ==> Parameters: 
2019-01-26 17:30:40.004 [http-nio-8080-exec-8] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - <==      Total: 1
2019-01-26 17:30:40.012 [http-nio-8080-exec-8] DEBUG c.y.s.d.P.findProductReceiveStockList - ==>  Preparing: select ps.prod_rece_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_receive_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 order by p.prod_id,pp.prod_param_id limit ?,? 
2019-01-26 17:30:40.012 [http-nio-8080-exec-8] DEBUG c.y.s.d.P.findProductReceiveStockList - ==> Parameters: 0(Integer), 5(Integer)
2019-01-26 17:30:40.014 [http-nio-8080-exec-8] DEBUG c.y.s.d.P.findProductReceiveStockList - <==      Total: 0
2019-01-26 17:30:40.014 [http-nio-8080-exec-8] DEBUG c.y.stock.controller.ProductReceiveStockController - 转到待收库存页面
2019-01-26 17:30:42.802 [http-nio-8080-exec-10] DEBUG com.yun.product.dao.ProductDao.productListForStock - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where p.prod_state=0 and prod_id not in(select prod_id from product_stock) 
2019-01-26 17:30:42.803 [http-nio-8080-exec-10] DEBUG com.yun.product.dao.ProductDao.productListForStock - ==> Parameters: 
2019-01-26 17:30:42.808 [http-nio-8080-exec-10] DEBUG com.yun.product.dao.ProductDao.productListForStock - <==      Total: 3
2019-01-26 17:30:46.705 [http-nio-8080-exec-1] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 17:30:46.706 [http-nio-8080-exec-1] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 2(Integer)
2019-01-26 17:30:46.708 [http-nio-8080-exec-1] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 0
2019-01-26 17:30:53.605 [http-nio-8080-exec-4] DEBUG c.y.s.d.P.insertProductReceiveStock - ==>  Preparing: insert into product_receive_stock(prod_id,prod_param_id,stock_num)values(?,?,?) 
2019-01-26 17:30:53.605 [http-nio-8080-exec-4] DEBUG c.y.s.d.P.insertProductReceiveStock - ==> Parameters: 2(Integer), null, 3(Integer)
2019-01-26 17:30:53.708 [http-nio-8080-exec-4] DEBUG c.y.s.d.P.insertProductReceiveStock - <==    Updates: 1
2019-01-26 17:30:53.737 [http-nio-8080-exec-2] DEBUG c.y.stock.controller.ProductReceiveStockController - 跳转到待收库存查询控制器
2019-01-26 17:30:53.738 [http-nio-8080-exec-2] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - ==>  Preparing: select count(*) from product_receive_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 
2019-01-26 17:30:53.738 [http-nio-8080-exec-2] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - ==> Parameters: 
2019-01-26 17:30:53.740 [http-nio-8080-exec-2] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - <==      Total: 1
2019-01-26 17:30:53.742 [http-nio-8080-exec-2] DEBUG c.y.s.d.P.findProductReceiveStockList - ==>  Preparing: select ps.prod_rece_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_receive_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 order by p.prod_id,pp.prod_param_id limit ?,? 
2019-01-26 17:30:53.743 [http-nio-8080-exec-2] DEBUG c.y.s.d.P.findProductReceiveStockList - ==> Parameters: 0(Integer), 5(Integer)
2019-01-26 17:30:53.747 [http-nio-8080-exec-2] DEBUG c.y.s.d.P.findProductReceiveStockList - <==      Total: 1
2019-01-26 17:30:53.748 [http-nio-8080-exec-2] DEBUG c.y.stock.controller.ProductReceiveStockController - 转到待收库存页面
2019-01-26 17:30:56.074 [http-nio-8080-exec-3] DEBUG c.y.s.d.P.deleteProductReceiveStock - ==>  Preparing: delete from product_receive_stock where prod_rece_stock_id=? 
2019-01-26 17:30:56.079 [http-nio-8080-exec-3] DEBUG c.y.s.d.P.deleteProductReceiveStock - ==> Parameters: 3(Integer)
2019-01-26 17:30:56.140 [http-nio-8080-exec-3] DEBUG c.y.s.d.P.deleteProductReceiveStock - <==    Updates: 1
2019-01-26 17:30:56.147 [http-nio-8080-exec-5] DEBUG c.y.stock.controller.ProductReceiveStockController - 跳转到待收库存查询控制器
2019-01-26 17:30:56.148 [http-nio-8080-exec-5] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - ==>  Preparing: select count(*) from product_receive_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 
2019-01-26 17:30:56.148 [http-nio-8080-exec-5] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - ==> Parameters: 
2019-01-26 17:30:56.149 [http-nio-8080-exec-5] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - <==      Total: 1
2019-01-26 17:30:56.150 [http-nio-8080-exec-5] DEBUG c.y.s.d.P.findProductReceiveStockList - ==>  Preparing: select ps.prod_rece_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_receive_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 order by p.prod_id,pp.prod_param_id limit ?,? 
2019-01-26 17:30:56.151 [http-nio-8080-exec-5] DEBUG c.y.s.d.P.findProductReceiveStockList - ==> Parameters: 0(Integer), 5(Integer)
2019-01-26 17:30:56.152 [http-nio-8080-exec-5] DEBUG c.y.s.d.P.findProductReceiveStockList - <==      Total: 0
2019-01-26 17:30:56.152 [http-nio-8080-exec-5] DEBUG c.y.stock.controller.ProductReceiveStockController - 转到待收库存页面
2019-01-26 17:31:02.065 [http-nio-8080-exec-7] DEBUG com.yun.product.dao.ProductDao.productListForStock - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where p.prod_state=0 and prod_id not in(select prod_id from product_stock) 
2019-01-26 17:31:02.066 [http-nio-8080-exec-7] DEBUG com.yun.product.dao.ProductDao.productListForStock - ==> Parameters: 
2019-01-26 17:31:02.070 [http-nio-8080-exec-7] DEBUG com.yun.product.dao.ProductDao.productListForStock - <==      Total: 3
2019-01-26 17:31:04.985 [http-nio-8080-exec-8] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-26 17:31:04.985 [http-nio-8080-exec-8] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 3(Integer)
2019-01-26 17:31:04.986 [http-nio-8080-exec-8] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 0
2019-01-26 17:31:07.392 [http-nio-8080-exec-9] DEBUG c.y.s.d.P.insertProductReceiveStock - ==>  Preparing: insert into product_receive_stock(prod_id,prod_param_id,stock_num)values(?,?,?) 
2019-01-26 17:31:07.393 [http-nio-8080-exec-9] DEBUG c.y.s.d.P.insertProductReceiveStock - ==> Parameters: 3(Integer), null, null
2019-01-26 17:31:07.440 [http-nio-8080-exec-9] DEBUG c.y.s.d.P.insertProductReceiveStock - <==    Updates: 1
2019-01-26 17:31:07.445 [http-nio-8080-exec-10] DEBUG c.y.stock.controller.ProductReceiveStockController - 跳转到待收库存查询控制器
2019-01-26 17:31:07.446 [http-nio-8080-exec-10] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - ==>  Preparing: select count(*) from product_receive_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 
2019-01-26 17:31:07.447 [http-nio-8080-exec-10] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - ==> Parameters: 
2019-01-26 17:31:07.449 [http-nio-8080-exec-10] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - <==      Total: 1
2019-01-26 17:31:07.450 [http-nio-8080-exec-10] DEBUG c.y.s.d.P.findProductReceiveStockList - ==>  Preparing: select ps.prod_rece_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_receive_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 order by p.prod_id,pp.prod_param_id limit ?,? 
2019-01-26 17:31:07.451 [http-nio-8080-exec-10] DEBUG c.y.s.d.P.findProductReceiveStockList - ==> Parameters: 0(Integer), 5(Integer)
2019-01-26 17:31:07.454 [http-nio-8080-exec-10] DEBUG c.y.s.d.P.findProductReceiveStockList - <==      Total: 1
2019-01-26 17:31:07.454 [http-nio-8080-exec-10] DEBUG c.y.stock.controller.ProductReceiveStockController - 转到待收库存页面
2019-01-26 17:31:10.290 [http-nio-8080-exec-1] DEBUG c.y.s.d.P.findProductReceiveStockById - ==>  Preparing: select ps.prod_rece_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_receive_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 and ps.prod_rece_stock_id=? 
2019-01-26 17:31:10.292 [http-nio-8080-exec-1] DEBUG c.y.s.d.P.findProductReceiveStockById - ==> Parameters: 4(Integer)
2019-01-26 17:31:10.295 [http-nio-8080-exec-1] DEBUG c.y.s.d.P.findProductReceiveStockById - <==      Total: 1
2019-01-26 17:31:17.824 [http-nio-8080-exec-4] DEBUG c.yun.stock.dao.ProductStockDao.updateProductStock - ==>  Preparing: update product_stock set prod_id=?,prod_param_id=?,stock_num=? where prod_stock_id=? 
2019-01-26 17:31:17.826 [http-nio-8080-exec-4] DEBUG c.yun.stock.dao.ProductStockDao.updateProductStock - ==> Parameters: 3(Integer), null, 22(Integer), null
2019-01-26 17:31:17.828 [http-nio-8080-exec-4] DEBUG c.yun.stock.dao.ProductStockDao.updateProductStock - <==    Updates: 0
2019-01-26 17:31:17.836 [http-nio-8080-exec-2] DEBUG com.yun.stock.controller.ProductStockController - 跳转到物品库存查询控制器
2019-01-26 17:31:17.838 [http-nio-8080-exec-2] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==>  Preparing: select count(*) from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 
2019-01-26 17:31:17.838 [http-nio-8080-exec-2] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==> Parameters: 
2019-01-26 17:31:17.839 [http-nio-8080-exec-2] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - <==      Total: 1
2019-01-26 17:31:17.841 [http-nio-8080-exec-2] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==>  Preparing: select ps.prod_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 order by p.prod_id,pp.prod_param_id limit ?,? 
2019-01-26 17:31:17.842 [http-nio-8080-exec-2] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==> Parameters: 0(Integer), 5(Integer)
2019-01-26 17:31:17.844 [http-nio-8080-exec-2] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - <==      Total: 1
2019-01-26 17:31:17.845 [http-nio-8080-exec-2] DEBUG com.yun.stock.controller.ProductStockController - 转到物品库存页面
2019-01-26 17:31:38.730 [http-nio-8080-exec-7] DEBUG c.y.stock.controller.ProductReceiveStockController - 跳转到待收库存查询控制器
2019-01-26 17:31:38.734 [http-nio-8080-exec-7] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - ==>  Preparing: select count(*) from product_receive_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 
2019-01-26 17:31:38.735 [http-nio-8080-exec-7] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - ==> Parameters: 
2019-01-26 17:31:38.740 [http-nio-8080-exec-7] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - <==      Total: 1
2019-01-26 17:31:38.742 [http-nio-8080-exec-7] DEBUG c.y.s.d.P.findProductReceiveStockList - ==>  Preparing: select ps.prod_rece_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_receive_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 order by p.prod_id,pp.prod_param_id limit ?,? 
2019-01-26 17:31:38.743 [http-nio-8080-exec-7] DEBUG c.y.s.d.P.findProductReceiveStockList - ==> Parameters: 0(Integer), 5(Integer)
2019-01-26 17:31:38.748 [http-nio-8080-exec-7] DEBUG c.y.s.d.P.findProductReceiveStockList - <==      Total: 1
2019-01-26 17:31:38.749 [http-nio-8080-exec-7] DEBUG c.y.stock.controller.ProductReceiveStockController - 转到待收库存页面
2019-01-26 17:31:40.784 [http-nio-8080-exec-8] DEBUG c.y.s.d.P.findProductReceiveStockById - ==>  Preparing: select ps.prod_rece_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_receive_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 and ps.prod_rece_stock_id=? 
2019-01-26 17:31:40.787 [http-nio-8080-exec-8] DEBUG c.y.s.d.P.findProductReceiveStockById - ==> Parameters: 4(Integer)
2019-01-26 17:31:40.791 [http-nio-8080-exec-8] DEBUG c.y.s.d.P.findProductReceiveStockById - <==      Total: 1
2019-01-26 17:31:46.658 [http-nio-8080-exec-9] DEBUG c.yun.stock.dao.ProductStockDao.updateProductStock - ==>  Preparing: update product_stock set prod_id=?,prod_param_id=?,stock_num=? where prod_stock_id=? 
2019-01-26 17:31:46.659 [http-nio-8080-exec-9] DEBUG c.yun.stock.dao.ProductStockDao.updateProductStock - ==> Parameters: 3(Integer), null, 223(Integer), null
2019-01-26 17:31:46.661 [http-nio-8080-exec-9] DEBUG c.yun.stock.dao.ProductStockDao.updateProductStock - <==    Updates: 0
2019-01-26 17:31:46.665 [http-nio-8080-exec-10] DEBUG com.yun.stock.controller.ProductStockController - 跳转到物品库存查询控制器
2019-01-26 17:31:46.666 [http-nio-8080-exec-10] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==>  Preparing: select count(*) from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 
2019-01-26 17:31:46.666 [http-nio-8080-exec-10] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==> Parameters: 
2019-01-26 17:31:46.668 [http-nio-8080-exec-10] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - <==      Total: 1
2019-01-26 17:31:46.669 [http-nio-8080-exec-10] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==>  Preparing: select ps.prod_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 order by p.prod_id,pp.prod_param_id limit ?,? 
2019-01-26 17:31:46.670 [http-nio-8080-exec-10] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==> Parameters: 0(Integer), 5(Integer)
2019-01-26 17:31:46.671 [http-nio-8080-exec-10] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - <==      Total: 1
2019-01-26 17:31:46.672 [http-nio-8080-exec-10] DEBUG com.yun.stock.controller.ProductStockController - 转到物品库存页面
2019-01-26 17:32:07.489 [http-nio-8080-exec-1] DEBUG com.yun.stock.controller.ProductStockController - 跳转到物品库存查询控制器
2019-01-26 17:32:07.490 [http-nio-8080-exec-1] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==>  Preparing: select count(*) from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 
2019-01-26 17:32:07.491 [http-nio-8080-exec-1] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==> Parameters: 
2019-01-26 17:32:07.492 [http-nio-8080-exec-1] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - <==      Total: 1
2019-01-26 17:32:07.493 [http-nio-8080-exec-1] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==>  Preparing: select ps.prod_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 order by p.prod_id,pp.prod_param_id limit ?,? 
2019-01-26 17:32:07.494 [http-nio-8080-exec-1] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==> Parameters: 0(Integer), 5(Integer)
2019-01-26 17:32:07.498 [http-nio-8080-exec-1] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - <==      Total: 1
2019-01-26 17:32:07.499 [http-nio-8080-exec-1] DEBUG com.yun.stock.controller.ProductStockController - 转到物品库存页面
2019-01-26 17:32:10.842 [http-nio-8080-exec-4] DEBUG c.y.stock.controller.ProductReceiveStockController - 跳转到待收库存查询控制器
2019-01-26 17:32:10.856 [http-nio-8080-exec-4] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - ==>  Preparing: select count(*) from product_receive_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 
2019-01-26 17:32:10.857 [http-nio-8080-exec-4] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - ==> Parameters: 
2019-01-26 17:32:10.859 [http-nio-8080-exec-4] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - <==      Total: 1
2019-01-26 17:32:10.860 [http-nio-8080-exec-4] DEBUG c.y.s.d.P.findProductReceiveStockList - ==>  Preparing: select ps.prod_rece_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_receive_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 order by p.prod_id,pp.prod_param_id limit ?,? 
2019-01-26 17:32:10.860 [http-nio-8080-exec-4] DEBUG c.y.s.d.P.findProductReceiveStockList - ==> Parameters: 0(Integer), 5(Integer)
2019-01-26 17:32:10.862 [http-nio-8080-exec-4] DEBUG c.y.s.d.P.findProductReceiveStockList - <==      Total: 1
2019-01-26 17:32:10.863 [http-nio-8080-exec-4] DEBUG c.y.stock.controller.ProductReceiveStockController - 转到待收库存页面
2019-01-26 17:32:12.374 [http-nio-8080-exec-2] DEBUG c.y.s.d.P.findProductReceiveStockById - ==>  Preparing: select ps.prod_rece_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_receive_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 and ps.prod_rece_stock_id=? 
2019-01-26 17:32:12.375 [http-nio-8080-exec-2] DEBUG c.y.s.d.P.findProductReceiveStockById - ==> Parameters: 4(Integer)
2019-01-26 17:32:12.382 [http-nio-8080-exec-2] DEBUG c.y.s.d.P.findProductReceiveStockById - <==      Total: 1
2019-01-26 17:32:14.312 [http-nio-8080-exec-5] DEBUG c.y.s.d.P.updateProductReceiveStock - ==>  Preparing: update product_receive_stock set prod_id=?,prod_param_id=?,stock_num=? where prod_rece_stock_id=? 
2019-01-26 17:32:14.313 [http-nio-8080-exec-5] DEBUG c.y.s.d.P.updateProductReceiveStock - ==> Parameters: 3(Integer), null, 232(Integer), 4(Integer)
2019-01-26 17:32:14.408 [http-nio-8080-exec-5] DEBUG c.y.s.d.P.updateProductReceiveStock - <==    Updates: 1
2019-01-26 17:32:14.428 [http-nio-8080-exec-3] DEBUG c.y.stock.controller.ProductReceiveStockController - 跳转到待收库存查询控制器
2019-01-26 17:32:14.429 [http-nio-8080-exec-3] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - ==>  Preparing: select count(*) from product_receive_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 
2019-01-26 17:32:14.429 [http-nio-8080-exec-3] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - ==> Parameters: 
2019-01-26 17:32:14.430 [http-nio-8080-exec-3] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - <==      Total: 1
2019-01-26 17:32:14.431 [http-nio-8080-exec-3] DEBUG c.y.s.d.P.findProductReceiveStockList - ==>  Preparing: select ps.prod_rece_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_receive_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 order by p.prod_id,pp.prod_param_id limit ?,? 
2019-01-26 17:32:14.432 [http-nio-8080-exec-3] DEBUG c.y.s.d.P.findProductReceiveStockList - ==> Parameters: 0(Integer), 5(Integer)
2019-01-26 17:32:14.433 [http-nio-8080-exec-3] DEBUG c.y.s.d.P.findProductReceiveStockList - <==      Total: 1
2019-01-26 17:32:14.433 [http-nio-8080-exec-3] DEBUG c.y.stock.controller.ProductReceiveStockController - 转到待收库存页面
2019-01-26 17:32:16.093 [http-nio-8080-exec-6] DEBUG c.y.s.d.P.findProductReceiveStockById - ==>  Preparing: select ps.prod_rece_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_receive_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 and ps.prod_rece_stock_id=? 
2019-01-26 17:32:16.096 [http-nio-8080-exec-6] DEBUG c.y.s.d.P.findProductReceiveStockById - ==> Parameters: 4(Integer)
2019-01-26 17:32:16.099 [http-nio-8080-exec-6] DEBUG c.y.s.d.P.findProductReceiveStockById - <==      Total: 1
2019-01-26 17:32:19.975 [http-nio-8080-exec-7] DEBUG c.y.s.d.P.updateProductReceiveStock - ==>  Preparing: update product_receive_stock set prod_id=?,prod_param_id=?,stock_num=? where prod_rece_stock_id=? 
2019-01-26 17:32:19.976 [http-nio-8080-exec-7] DEBUG c.y.s.d.P.updateProductReceiveStock - ==> Parameters: 3(Integer), null, 2(Integer), 4(Integer)
2019-01-26 17:32:20.041 [http-nio-8080-exec-7] DEBUG c.y.s.d.P.updateProductReceiveStock - <==    Updates: 1
2019-01-26 17:32:20.048 [http-nio-8080-exec-8] DEBUG c.y.stock.controller.ProductReceiveStockController - 跳转到待收库存查询控制器
2019-01-26 17:32:20.049 [http-nio-8080-exec-8] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - ==>  Preparing: select count(*) from product_receive_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 
2019-01-26 17:32:20.050 [http-nio-8080-exec-8] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - ==> Parameters: 
2019-01-26 17:32:20.052 [http-nio-8080-exec-8] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - <==      Total: 1
2019-01-26 17:32:20.053 [http-nio-8080-exec-8] DEBUG c.y.s.d.P.findProductReceiveStockList - ==>  Preparing: select ps.prod_rece_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_receive_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 order by p.prod_id,pp.prod_param_id limit ?,? 
2019-01-26 17:32:20.054 [http-nio-8080-exec-8] DEBUG c.y.s.d.P.findProductReceiveStockList - ==> Parameters: 0(Integer), 5(Integer)
2019-01-26 17:32:20.056 [http-nio-8080-exec-8] DEBUG c.y.s.d.P.findProductReceiveStockList - <==      Total: 1
2019-01-26 17:32:20.056 [http-nio-8080-exec-8] DEBUG c.y.stock.controller.ProductReceiveStockController - 转到待收库存页面
2019-01-26 17:32:29.807 [http-nio-8080-exec-9] DEBUG c.y.stock.controller.ProductReceiveStockController - 跳转到待收库存查询控制器
2019-01-26 17:32:29.813 [http-nio-8080-exec-9] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - ==>  Preparing: select count(*) from product_receive_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 and p.prod_name like ? 
2019-01-26 17:32:29.815 [http-nio-8080-exec-9] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - ==> Parameters: %w%(String)
2019-01-26 17:32:29.818 [http-nio-8080-exec-9] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - <==      Total: 1
2019-01-26 17:32:29.819 [http-nio-8080-exec-9] DEBUG c.y.s.d.P.findProductReceiveStockList - ==>  Preparing: select ps.prod_rece_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_receive_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 and p.prod_name like ? order by p.prod_id,pp.prod_param_id limit ?,? 
2019-01-26 17:32:29.820 [http-nio-8080-exec-9] DEBUG c.y.s.d.P.findProductReceiveStockList - ==> Parameters: %w%(String), 0(Integer), 5(Integer)
2019-01-26 17:32:29.822 [http-nio-8080-exec-9] DEBUG c.y.s.d.P.findProductReceiveStockList - <==      Total: 0
2019-01-26 17:32:29.823 [http-nio-8080-exec-9] DEBUG c.y.stock.controller.ProductReceiveStockController - 转到待收库存页面
2019-01-26 17:32:37.373 [http-nio-8080-exec-10] DEBUG c.y.stock.controller.ProductReceiveStockController - 跳转到待收库存查询控制器
2019-01-26 17:32:37.376 [http-nio-8080-exec-10] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - ==>  Preparing: select count(*) from product_receive_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 
2019-01-26 17:32:37.376 [http-nio-8080-exec-10] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - ==> Parameters: 
2019-01-26 17:32:37.378 [http-nio-8080-exec-10] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - <==      Total: 1
2019-01-26 17:32:37.379 [http-nio-8080-exec-10] DEBUG c.y.s.d.P.findProductReceiveStockList - ==>  Preparing: select ps.prod_rece_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_receive_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 order by p.prod_id,pp.prod_param_id limit ?,? 
2019-01-26 17:32:37.379 [http-nio-8080-exec-10] DEBUG c.y.s.d.P.findProductReceiveStockList - ==> Parameters: 0(Integer), 5(Integer)
2019-01-26 17:32:37.381 [http-nio-8080-exec-10] DEBUG c.y.s.d.P.findProductReceiveStockList - <==      Total: 1
2019-01-26 17:32:37.382 [http-nio-8080-exec-10] DEBUG c.y.stock.controller.ProductReceiveStockController - 转到待收库存页面
2019-01-26 17:32:40.299 [http-nio-8080-exec-1] DEBUG com.yun.stock.controller.ProductStockController - 跳转到物品库存查询控制器
2019-01-26 17:32:40.301 [http-nio-8080-exec-1] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==>  Preparing: select count(*) from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 
2019-01-26 17:32:40.302 [http-nio-8080-exec-1] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==> Parameters: 
2019-01-26 17:32:40.305 [http-nio-8080-exec-1] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - <==      Total: 1
2019-01-26 17:32:40.306 [http-nio-8080-exec-1] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==>  Preparing: select ps.prod_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 order by p.prod_id,pp.prod_param_id limit ?,? 
2019-01-26 17:32:40.307 [http-nio-8080-exec-1] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==> Parameters: 0(Integer), 5(Integer)
2019-01-26 17:32:40.312 [http-nio-8080-exec-1] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - <==      Total: 1
2019-01-26 17:32:40.313 [http-nio-8080-exec-1] DEBUG com.yun.stock.controller.ProductStockController - 转到物品库存页面
2019-01-26 17:32:41.319 [http-nio-8080-exec-4] DEBUG c.y.stock.controller.ProductReceiveStockController - 跳转到待收库存查询控制器
2019-01-26 17:32:41.324 [http-nio-8080-exec-4] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - ==>  Preparing: select count(*) from product_receive_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 
2019-01-26 17:32:41.325 [http-nio-8080-exec-4] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - ==> Parameters: 
2019-01-26 17:32:41.328 [http-nio-8080-exec-4] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - <==      Total: 1
2019-01-26 17:32:41.330 [http-nio-8080-exec-4] DEBUG c.y.s.d.P.findProductReceiveStockList - ==>  Preparing: select ps.prod_rece_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_receive_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 order by p.prod_id,pp.prod_param_id limit ?,? 
2019-01-26 17:32:41.335 [http-nio-8080-exec-4] DEBUG c.y.s.d.P.findProductReceiveStockList - ==> Parameters: 0(Integer), 5(Integer)
2019-01-26 17:32:41.338 [http-nio-8080-exec-4] DEBUG c.y.s.d.P.findProductReceiveStockList - <==      Total: 1
2019-01-26 17:32:41.338 [http-nio-8080-exec-4] DEBUG c.y.stock.controller.ProductReceiveStockController - 转到待收库存页面
2019-01-26 17:32:42.984 [http-nio-8080-exec-2] DEBUG com.yun.stock.controller.ProductStockController - 跳转到物品库存查询控制器
2019-01-26 17:32:42.990 [http-nio-8080-exec-2] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==>  Preparing: select count(*) from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 
2019-01-26 17:32:42.991 [http-nio-8080-exec-2] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==> Parameters: 
2019-01-26 17:32:42.994 [http-nio-8080-exec-2] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - <==      Total: 1
2019-01-26 17:32:42.996 [http-nio-8080-exec-2] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==>  Preparing: select ps.prod_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 order by p.prod_id,pp.prod_param_id limit ?,? 
2019-01-26 17:32:42.997 [http-nio-8080-exec-2] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==> Parameters: 0(Integer), 5(Integer)
2019-01-26 17:32:43.001 [http-nio-8080-exec-2] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - <==      Total: 1
2019-01-26 17:32:43.002 [http-nio-8080-exec-2] DEBUG com.yun.stock.controller.ProductStockController - 转到物品库存页面
2019-01-26 17:33:40.393 [http-nio-8080-exec-5] DEBUG com.yun.stock.controller.ProductStockController - 跳转到物品库存查询控制器
2019-01-26 17:33:40.397 [http-nio-8080-exec-5] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==>  Preparing: select count(*) from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 
2019-01-26 17:33:40.397 [http-nio-8080-exec-5] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==> Parameters: 
2019-01-26 17:33:40.400 [http-nio-8080-exec-5] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - <==      Total: 1
2019-01-26 17:33:40.402 [http-nio-8080-exec-5] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==>  Preparing: select ps.prod_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 order by p.prod_id,pp.prod_param_id limit ?,? 
2019-01-26 17:33:40.402 [http-nio-8080-exec-5] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==> Parameters: 0(Integer), 5(Integer)
2019-01-26 17:33:40.406 [http-nio-8080-exec-5] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - <==      Total: 1
2019-01-26 17:33:40.407 [http-nio-8080-exec-5] DEBUG com.yun.stock.controller.ProductStockController - 转到物品库存页面
2019-01-26 17:33:41.515 [http-nio-8080-exec-3] DEBUG c.y.stock.controller.ProductReceiveStockController - 跳转到待收库存查询控制器
2019-01-26 17:33:41.517 [http-nio-8080-exec-3] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - ==>  Preparing: select count(*) from product_receive_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 
2019-01-26 17:33:41.517 [http-nio-8080-exec-3] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - ==> Parameters: 
2019-01-26 17:33:41.520 [http-nio-8080-exec-3] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - <==      Total: 1
2019-01-26 17:33:41.521 [http-nio-8080-exec-3] DEBUG c.y.s.d.P.findProductReceiveStockList - ==>  Preparing: select ps.prod_rece_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_receive_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 order by p.prod_id,pp.prod_param_id limit ?,? 
2019-01-26 17:33:41.521 [http-nio-8080-exec-3] DEBUG c.y.s.d.P.findProductReceiveStockList - ==> Parameters: 0(Integer), 5(Integer)
2019-01-26 17:33:41.523 [http-nio-8080-exec-3] DEBUG c.y.s.d.P.findProductReceiveStockList - <==      Total: 1
2019-01-26 17:33:41.524 [http-nio-8080-exec-3] DEBUG c.y.stock.controller.ProductReceiveStockController - 转到待收库存页面
2019-01-26 17:33:43.340 [http-nio-8080-exec-6] DEBUG com.yun.stock.controller.ProductStockController - 跳转到物品库存查询控制器
2019-01-26 17:33:43.341 [http-nio-8080-exec-6] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==>  Preparing: select count(*) from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 
2019-01-26 17:33:43.342 [http-nio-8080-exec-6] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==> Parameters: 
2019-01-26 17:33:43.346 [http-nio-8080-exec-6] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - <==      Total: 1
2019-01-26 17:33:43.347 [http-nio-8080-exec-6] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==>  Preparing: select ps.prod_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 order by p.prod_id,pp.prod_param_id limit ?,? 
2019-01-26 17:33:43.348 [http-nio-8080-exec-6] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==> Parameters: 0(Integer), 5(Integer)
2019-01-26 17:33:43.351 [http-nio-8080-exec-6] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - <==      Total: 1
2019-01-26 17:33:43.351 [http-nio-8080-exec-6] DEBUG com.yun.stock.controller.ProductStockController - 转到物品库存页面
2019-01-26 17:33:50.724 [http-nio-8080-exec-7] DEBUG c.y.stock.controller.ProductReceiveStockController - 跳转到待收库存查询控制器
2019-01-26 17:33:50.726 [http-nio-8080-exec-7] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - ==>  Preparing: select count(*) from product_receive_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 
2019-01-26 17:33:50.727 [http-nio-8080-exec-7] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - ==> Parameters: 
2019-01-26 17:33:50.728 [http-nio-8080-exec-7] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - <==      Total: 1
2019-01-26 17:33:50.729 [http-nio-8080-exec-7] DEBUG c.y.s.d.P.findProductReceiveStockList - ==>  Preparing: select ps.prod_rece_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_receive_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 order by p.prod_id,pp.prod_param_id limit ?,? 
2019-01-26 17:33:50.730 [http-nio-8080-exec-7] DEBUG c.y.s.d.P.findProductReceiveStockList - ==> Parameters: 0(Integer), 5(Integer)
2019-01-26 17:33:50.732 [http-nio-8080-exec-7] DEBUG c.y.s.d.P.findProductReceiveStockList - <==      Total: 1
2019-01-26 17:33:50.732 [http-nio-8080-exec-7] DEBUG c.y.stock.controller.ProductReceiveStockController - 转到待收库存页面
2019-01-26 17:33:52.435 [http-nio-8080-exec-8] DEBUG com.yun.stock.controller.ProductStockController - 跳转到物品库存查询控制器
2019-01-26 17:33:52.437 [http-nio-8080-exec-8] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==>  Preparing: select count(*) from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 
2019-01-26 17:33:52.437 [http-nio-8080-exec-8] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==> Parameters: 
2019-01-26 17:33:52.438 [http-nio-8080-exec-8] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - <==      Total: 1
2019-01-26 17:33:52.440 [http-nio-8080-exec-8] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==>  Preparing: select ps.prod_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 order by p.prod_id,pp.prod_param_id limit ?,? 
2019-01-26 17:33:52.440 [http-nio-8080-exec-8] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==> Parameters: 0(Integer), 5(Integer)
2019-01-26 17:33:52.442 [http-nio-8080-exec-8] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - <==      Total: 1
2019-01-26 17:33:52.443 [http-nio-8080-exec-8] DEBUG com.yun.stock.controller.ProductStockController - 转到物品库存页面
2019-01-26 17:34:02.534 [http-nio-8080-exec-9] DEBUG c.y.stock.controller.ProductReceiveStockController - 跳转到待收库存查询控制器
2019-01-26 17:34:02.538 [http-nio-8080-exec-9] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - ==>  Preparing: select count(*) from product_receive_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 
2019-01-26 17:34:02.539 [http-nio-8080-exec-9] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - ==> Parameters: 
2019-01-26 17:34:02.542 [http-nio-8080-exec-9] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - <==      Total: 1
2019-01-26 17:34:02.543 [http-nio-8080-exec-9] DEBUG c.y.s.d.P.findProductReceiveStockList - ==>  Preparing: select ps.prod_rece_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_receive_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 order by p.prod_id,pp.prod_param_id limit ?,? 
2019-01-26 17:34:02.544 [http-nio-8080-exec-9] DEBUG c.y.s.d.P.findProductReceiveStockList - ==> Parameters: 0(Integer), 5(Integer)
2019-01-26 17:34:02.547 [http-nio-8080-exec-9] DEBUG c.y.s.d.P.findProductReceiveStockList - <==      Total: 1
2019-01-26 17:34:02.548 [http-nio-8080-exec-9] DEBUG c.y.stock.controller.ProductReceiveStockController - 转到待收库存页面
