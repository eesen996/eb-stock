2019-01-31 09:43:20.265 [main] INFO  com.yun.YunEbStockApplication - Starting YunEbStockApplication on USER-20181202BJ with PID 6864 (E:\workspace\yun-eb-stock\target\classes started by Administrator in E:\workspace\yun-eb-stock)
2019-01-31 09:43:20.269 [main] DEBUG com.yun.YunEbStockApplication - Running with Spring Boot v1.5.9.RELEASE, Spring v4.3.13.RELEASE
2019-01-31 09:43:20.270 [main] INFO  com.yun.YunEbStockApplication - No active profile set, falling back to default profiles: default
2019-01-31 09:43:20.896 [background-preinit] INFO  org.hibernate.validator.internal.util.Version - HV000001: Hibernate Validator 5.3.6.Final
2019-01-31 09:43:21.011 [main] INFO  o.s.b.c.e.AnnotationConfigEmbeddedWebApplicationContext - Refreshing org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@6a28ffa4: startup date [Thu Jan 31 09:43:21 CST 2019]; root of context hierarchy
2019-01-31 09:43:22.694 [main] INFO  o.s.b.c.e.tomcat.TomcatEmbeddedServletContainer - Tomcat initialized with port(s): 8080 (http)
2019-01-31 09:43:22.705 [main] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2019-01-31 09:43:22.706 [main] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet Engine: Apache Tomcat/8.5.23
2019-01-31 09:43:22.811 [localhost-startStop-1] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2019-01-31 09:43:22.811 [localhost-startStop-1] INFO  org.springframework.web.context.ContextLoader - Root WebApplicationContext: initialization completed in 1801 ms
2019-01-31 09:43:22.973 [localhost-startStop-1] INFO  o.s.boot.web.servlet.FilterRegistrationBean - Mapping filter: 'characterEncodingFilter' to: [/*]
2019-01-31 09:43:22.973 [localhost-startStop-1] INFO  o.s.boot.web.servlet.FilterRegistrationBean - Mapping filter: 'hiddenHttpMethodFilter' to: [/*]
2019-01-31 09:43:22.973 [localhost-startStop-1] INFO  o.s.boot.web.servlet.FilterRegistrationBean - Mapping filter: 'httpPutFormContentFilter' to: [/*]
2019-01-31 09:43:22.974 [localhost-startStop-1] INFO  o.s.boot.web.servlet.FilterRegistrationBean - Mapping filter: 'requestContextFilter' to: [/*]
2019-01-31 09:43:22.974 [localhost-startStop-1] INFO  o.s.boot.web.servlet.FilterRegistrationBean - Mapping filter: 'loginFilter' to urls: [/*]
2019-01-31 09:43:22.974 [localhost-startStop-1] INFO  o.s.boot.web.servlet.ServletRegistrationBean - Mapping servlet: 'dispatcherServlet' to [/]
2019-01-31 09:43:23.779 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerAdapter - Looking for @ControllerAdvice: org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@6a28ffa4: startup date [Thu Jan 31 09:43:21 CST 2019]; root of context hierarchy
2019-01-31 09:43:23.840 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productListForAutoComplete]}" onto public java.util.List<com.yun.product.model.Product> com.yun.product.controller.ProductController.productListForAutoComplete(java.lang.String)
2019-01-31 09:43:23.841 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productListForStock]}" onto public java.util.List<com.yun.product.model.Product> com.yun.product.controller.ProductController.productListForStock()
2019-01-31 09:43:23.842 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productListForTrade]}" onto public java.util.List<com.yun.product.model.Product> com.yun.product.controller.ProductController.productListForTrade(java.lang.String)
2019-01-31 09:43:23.842 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productList]}" onto public java.lang.String com.yun.product.controller.ProductController.productList(org.springframework.ui.Model,java.lang.String,java.lang.String,java.lang.String,java.lang.String)
2019-01-31 09:43:23.842 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productPreAdd]}" onto public java.lang.String com.yun.product.controller.ProductController.productPreAdd()
2019-01-31 09:43:23.843 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productSave]}" onto public java.lang.String com.yun.product.controller.ProductController.productSave(com.yun.product.model.Product)
2019-01-31 09:43:23.843 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productDelete]}" onto public java.lang.String com.yun.product.controller.ProductController.productDelete(int)
2019-01-31 09:43:23.843 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productPreUpdate]}" onto public java.lang.String com.yun.product.controller.ProductController.productPreUpdate(int,org.springframework.ui.Model)
2019-01-31 09:43:23.843 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productUpdate]}" onto public java.lang.String com.yun.product.controller.ProductController.productUpdate(com.yun.product.model.Product)
2019-01-31 09:43:23.845 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/prodParamDelete]}" onto public java.lang.String com.yun.product.controller.ProductParamController.prodParamDelete(int)
2019-01-31 09:43:23.845 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/prodParamPreAdd]}" onto public java.lang.String com.yun.product.controller.ProductParamController.prodParamPreAdd(int,org.springframework.ui.Model)
2019-01-31 09:43:23.846 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/prodParamSave]}" onto public java.lang.String com.yun.product.controller.ProductParamController.prodParamSave(com.yun.product.model.ProductParameter)
2019-01-31 09:43:23.846 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/prodParamList]}" onto public java.lang.String com.yun.product.controller.ProductParamController.prodParamList(int)
2019-01-31 09:43:23.849 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeUpdate]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeUpdate(java.lang.Integer,org.springframework.ui.Model)
2019-01-31 09:43:23.849 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeUpdateSave]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeUpdateSave(com.yun.product.model.ProductType)
2019-01-31 09:43:23.850 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeDelete]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeDelete(java.lang.Integer,javax.servlet.http.HttpServletResponse) throws java.io.IOException
2019-01-31 09:43:23.850 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeList]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeList(org.springframework.ui.Model)
2019-01-31 09:43:23.850 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeTree]}" onto public java.util.List<com.yun.product.model.ProductType> com.yun.product.controller.ProductTypeController.productTypeTree()
2019-01-31 09:43:23.850 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeEdit]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeEdit()
2019-01-31 09:43:23.851 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeSave]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeSave(com.yun.product.model.ProductType)
2019-01-31 09:43:23.851 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveStockList]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveStockController.productReceiveStocklist(java.lang.String,java.lang.String,org.springframework.ui.Model)
2019-01-31 09:43:23.852 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveStockPreAdd]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveStockController.productReceiveStockPreAdd()
2019-01-31 09:43:23.852 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveStockSave]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveStockController.productReceiveStockSave(com.yun.stock.model.ProductReceiveStock)
2019-01-31 09:43:23.852 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveStockDelete]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveStockController.productReceiveStockDelete(int)
2019-01-31 09:43:23.852 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveStockPreUpdate]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveStockController.productReceiveStockPreUpdate(int,org.springframework.ui.Model)
2019-01-31 09:43:23.852 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveStockUpdate]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveStockController.productReceiveStockUpdate(com.yun.stock.model.ProductReceiveStock)
2019-01-31 09:43:23.853 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveRejectSave]}" onto public void com.yun.stock.controller.ProductReceiveTradeController.receiveRejectSave(com.yun.stock.model.ProductReceiveTrade,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse) throws java.io.IOException
2019-01-31 09:43:23.854 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveToCurrentSave]}" onto public void com.yun.stock.controller.ProductReceiveTradeController.productReceiveToCurrentSave(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse) throws java.lang.Exception
2019-01-31 09:43:23.854 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveStockToCurrentStock]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveTradeController.productReceiveStockToCurrentStock(int,org.springframework.ui.Model)
2019-01-31 09:43:23.854 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveInSave]}" onto public void com.yun.stock.controller.ProductReceiveTradeController.receiveInSave(com.yun.stock.model.ProductReceiveTrade,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse) throws java.io.IOException
2019-01-31 09:43:23.855 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveIn]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveTradeController.receiveIn(org.springframework.ui.Model)
2019-01-31 09:43:23.855 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveReject]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveTradeController.receiveReject(org.springframework.ui.Model)
2019-01-31 09:43:23.856 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockPreAdd]}" onto public java.lang.String com.yun.stock.controller.ProductStockController.productStockPreAdd()
2019-01-31 09:43:23.856 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockDelete]}" onto public java.lang.String com.yun.stock.controller.ProductStockController.productStockDelete(int)
2019-01-31 09:43:23.856 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockPreUpdate]}" onto public java.lang.String com.yun.stock.controller.ProductStockController.productStockPreUpdate(int,org.springframework.ui.Model)
2019-01-31 09:43:23.856 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockUpdate]}" onto public java.lang.String com.yun.stock.controller.ProductStockController.productStockUpdate(com.yun.stock.model.ProductStock)
2019-01-31 09:43:23.856 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockList]}" onto public java.lang.String com.yun.stock.controller.ProductStockController.productStocklist(java.lang.String,java.lang.String,org.springframework.ui.Model)
2019-01-31 09:43:23.856 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockSave]}" onto public java.lang.String com.yun.stock.controller.ProductStockController.productStockSave(com.yun.stock.model.ProductStock)
2019-01-31 09:43:23.857 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/main]}" onto public java.lang.String com.yun.user.controller.MainController.main()
2019-01-31 09:43:23.858 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/userList]}" onto public java.lang.String com.yun.user.controller.UserController.userList(org.springframework.ui.Model)
2019-01-31 09:43:23.858 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/userSave]}" onto public java.lang.String com.yun.user.controller.UserController.userSave(com.yun.user.model.UserInfo)
2019-01-31 09:43:23.858 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/userEdit]}" onto public java.lang.String com.yun.user.controller.UserController.userEdit()
2019-01-31 09:43:23.858 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/deleteUserInfo]}" onto public java.lang.String com.yun.user.controller.UserController.userDelete(int)
2019-01-31 09:43:23.858 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/login]}" onto public void com.yun.user.controller.UserController.login(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse) throws java.io.IOException
2019-01-31 09:43:23.861 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/error]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> org.springframework.boot.autoconfigure.web.BasicErrorController.error(javax.servlet.http.HttpServletRequest)
2019-01-31 09:43:23.862 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/error],produces=[text/html]}" onto public org.springframework.web.servlet.ModelAndView org.springframework.boot.autoconfigure.web.BasicErrorController.errorHtml(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
2019-01-31 09:43:23.894 [main] INFO  o.s.web.servlet.handler.SimpleUrlHandlerMapping - Mapped URL path [/webjars/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-01-31 09:43:23.895 [main] INFO  o.s.web.servlet.handler.SimpleUrlHandlerMapping - Mapped URL path [/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-01-31 09:43:23.937 [main] INFO  o.s.web.servlet.handler.SimpleUrlHandlerMapping - Mapped URL path [/**/favicon.ico] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-01-31 09:43:24.241 [main] INFO  o.s.b.a.w.WebMvcAutoConfiguration$WelcomePageHandlerMapping - Adding welcome page: class path resource [static/index.html]
2019-01-31 09:43:24.488 [main] INFO  o.s.jmx.export.annotation.AnnotationMBeanExporter - Registering beans for JMX exposure on startup
2019-01-31 09:43:24.507 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2019-01-31 09:43:24.519 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2019-01-31 09:43:24.533 [main] INFO  org.apache.tomcat.util.net.NioSelectorPool - Using a shared selector for servlet write/read
2019-01-31 09:43:24.721 [main] INFO  o.s.b.c.e.tomcat.TomcatEmbeddedServletContainer - Tomcat started on port(s): 8080 (http)
2019-01-31 09:43:24.727 [main] INFO  com.yun.YunEbStockApplication - Started YunEbStockApplication in 4.77 seconds (JVM running for 5.971)
2019-01-31 09:43:40.350 [http-nio-8080-exec-1] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring FrameworkServlet 'dispatcherServlet'
2019-01-31 09:43:40.351 [http-nio-8080-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - FrameworkServlet 'dispatcherServlet': initialization started
2019-01-31 09:43:40.370 [http-nio-8080-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - FrameworkServlet 'dispatcherServlet': initialization completed in 18 ms
2019-01-31 09:43:40.380 [http-nio-8080-exec-1] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/main
2019-01-31 09:43:41.543 [http-nio-8080-exec-2] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/
2019-01-31 09:43:42.879 [http-nio-8080-exec-3] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/
2019-01-31 09:43:43.825 [http-nio-8080-exec-4] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/
2019-01-31 09:43:44.552 [http-nio-8080-exec-5] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/
2019-01-31 09:43:45.296 [http-nio-8080-exec-6] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/
2019-01-31 09:43:45.948 [http-nio-8080-exec-7] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/
2019-01-31 09:43:46.648 [http-nio-8080-exec-8] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/
2019-01-31 09:43:47.275 [http-nio-8080-exec-9] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/
2019-01-31 09:43:47.872 [http-nio-8080-exec-10] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/
2019-01-31 09:43:48.420 [http-nio-8080-exec-1] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/
2019-01-31 09:43:48.983 [http-nio-8080-exec-2] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/
2019-01-31 09:43:49.523 [http-nio-8080-exec-3] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/
2019-01-31 09:43:50.095 [http-nio-8080-exec-4] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/
2019-01-31 09:43:50.638 [http-nio-8080-exec-5] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/
2019-01-31 09:43:51.223 [http-nio-8080-exec-6] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/
2019-01-31 09:43:51.857 [http-nio-8080-exec-7] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/
2019-01-31 09:43:52.483 [http-nio-8080-exec-8] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/
2019-01-31 09:43:53.060 [http-nio-8080-exec-9] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/
2019-01-31 09:43:53.604 [http-nio-8080-exec-10] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/
2019-01-31 09:43:54.080 [http-nio-8080-exec-1] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/
2019-01-31 09:43:54.448 [http-nio-8080-exec-2] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/
2019-01-31 09:43:54.839 [http-nio-8080-exec-3] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/
2019-01-31 09:43:55.390 [http-nio-8080-exec-4] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/
2019-01-31 09:43:55.734 [http-nio-8080-exec-5] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/
2019-01-31 09:43:56.079 [http-nio-8080-exec-6] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/
2019-01-31 09:43:56.514 [http-nio-8080-exec-7] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/
2019-01-31 09:43:56.943 [http-nio-8080-exec-8] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/
2019-01-31 09:43:57.354 [http-nio-8080-exec-9] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/
2019-01-31 09:43:57.986 [http-nio-8080-exec-10] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/
2019-01-31 09:43:58.505 [http-nio-8080-exec-1] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/
2019-01-31 09:43:58.950 [http-nio-8080-exec-2] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/
2019-01-31 09:43:59.462 [http-nio-8080-exec-3] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/
2019-01-31 09:43:59.908 [http-nio-8080-exec-4] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/
2019-01-31 09:44:00.365 [http-nio-8080-exec-5] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/
2019-01-31 09:44:00.837 [http-nio-8080-exec-6] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/
2019-01-31 09:44:01.205 [http-nio-8080-exec-7] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/
2019-01-31 09:44:01.546 [http-nio-8080-exec-8] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/
2019-01-31 09:44:31.528 [main] INFO  com.yun.YunEbStockApplication - Starting YunEbStockApplication on USER-20181202BJ with PID 5380 (E:\workspace\yun-eb-stock\target\classes started by Administrator in E:\workspace\yun-eb-stock)
2019-01-31 09:44:31.533 [main] DEBUG com.yun.YunEbStockApplication - Running with Spring Boot v1.5.9.RELEASE, Spring v4.3.13.RELEASE
2019-01-31 09:44:31.533 [main] INFO  com.yun.YunEbStockApplication - No active profile set, falling back to default profiles: default
2019-01-31 09:44:31.699 [background-preinit] INFO  org.hibernate.validator.internal.util.Version - HV000001: Hibernate Validator 5.3.6.Final
2019-01-31 09:44:32.062 [main] INFO  o.s.b.c.e.AnnotationConfigEmbeddedWebApplicationContext - Refreshing org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@6a28ffa4: startup date [Thu Jan 31 09:44:32 CST 2019]; root of context hierarchy
2019-01-31 09:44:33.797 [main] INFO  o.s.b.c.e.tomcat.TomcatEmbeddedServletContainer - Tomcat initialized with port(s): 8080 (http)
2019-01-31 09:44:33.808 [main] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2019-01-31 09:44:33.809 [main] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet Engine: Apache Tomcat/8.5.23
2019-01-31 09:44:33.920 [localhost-startStop-1] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2019-01-31 09:44:33.920 [localhost-startStop-1] INFO  org.springframework.web.context.ContextLoader - Root WebApplicationContext: initialization completed in 1858 ms
2019-01-31 09:44:34.112 [localhost-startStop-1] INFO  o.s.boot.web.servlet.FilterRegistrationBean - Mapping filter: 'characterEncodingFilter' to: [/*]
2019-01-31 09:44:34.112 [localhost-startStop-1] INFO  o.s.boot.web.servlet.FilterRegistrationBean - Mapping filter: 'hiddenHttpMethodFilter' to: [/*]
2019-01-31 09:44:34.113 [localhost-startStop-1] INFO  o.s.boot.web.servlet.FilterRegistrationBean - Mapping filter: 'httpPutFormContentFilter' to: [/*]
2019-01-31 09:44:34.113 [localhost-startStop-1] INFO  o.s.boot.web.servlet.FilterRegistrationBean - Mapping filter: 'requestContextFilter' to: [/*]
2019-01-31 09:44:34.113 [localhost-startStop-1] INFO  o.s.boot.web.servlet.FilterRegistrationBean - Mapping filter: 'loginFilter' to urls: [/*]
2019-01-31 09:44:34.113 [localhost-startStop-1] INFO  o.s.boot.web.servlet.ServletRegistrationBean - Mapping servlet: 'dispatcherServlet' to [/]
2019-01-31 09:44:35.059 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerAdapter - Looking for @ControllerAdvice: org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@6a28ffa4: startup date [Thu Jan 31 09:44:32 CST 2019]; root of context hierarchy
2019-01-31 09:44:35.121 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productListForAutoComplete]}" onto public java.util.List<com.yun.product.model.Product> com.yun.product.controller.ProductController.productListForAutoComplete(java.lang.String)
2019-01-31 09:44:35.122 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productListForStock]}" onto public java.util.List<com.yun.product.model.Product> com.yun.product.controller.ProductController.productListForStock()
2019-01-31 09:44:35.123 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productListForTrade]}" onto public java.util.List<com.yun.product.model.Product> com.yun.product.controller.ProductController.productListForTrade(java.lang.String)
2019-01-31 09:44:35.123 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productPreAdd]}" onto public java.lang.String com.yun.product.controller.ProductController.productPreAdd()
2019-01-31 09:44:35.123 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productList]}" onto public java.lang.String com.yun.product.controller.ProductController.productList(org.springframework.ui.Model,java.lang.String,java.lang.String,java.lang.String,java.lang.String)
2019-01-31 09:44:35.124 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productSave]}" onto public java.lang.String com.yun.product.controller.ProductController.productSave(com.yun.product.model.Product)
2019-01-31 09:44:35.124 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productDelete]}" onto public java.lang.String com.yun.product.controller.ProductController.productDelete(int)
2019-01-31 09:44:35.124 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productPreUpdate]}" onto public java.lang.String com.yun.product.controller.ProductController.productPreUpdate(int,org.springframework.ui.Model)
2019-01-31 09:44:35.124 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productUpdate]}" onto public java.lang.String com.yun.product.controller.ProductController.productUpdate(com.yun.product.model.Product)
2019-01-31 09:44:35.125 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/prodParamDelete]}" onto public java.lang.String com.yun.product.controller.ProductParamController.prodParamDelete(int)
2019-01-31 09:44:35.125 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/prodParamPreAdd]}" onto public java.lang.String com.yun.product.controller.ProductParamController.prodParamPreAdd(int,org.springframework.ui.Model)
2019-01-31 09:44:35.125 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/prodParamSave]}" onto public java.lang.String com.yun.product.controller.ProductParamController.prodParamSave(com.yun.product.model.ProductParameter)
2019-01-31 09:44:35.126 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/prodParamList]}" onto public java.lang.String com.yun.product.controller.ProductParamController.prodParamList(int)
2019-01-31 09:44:35.129 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeUpdate]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeUpdate(java.lang.Integer,org.springframework.ui.Model)
2019-01-31 09:44:35.129 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeUpdateSave]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeUpdateSave(com.yun.product.model.ProductType)
2019-01-31 09:44:35.129 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeDelete]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeDelete(java.lang.Integer,javax.servlet.http.HttpServletResponse) throws java.io.IOException
2019-01-31 09:44:35.129 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeList]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeList(org.springframework.ui.Model)
2019-01-31 09:44:35.130 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeTree]}" onto public java.util.List<com.yun.product.model.ProductType> com.yun.product.controller.ProductTypeController.productTypeTree()
2019-01-31 09:44:35.130 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeEdit]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeEdit()
2019-01-31 09:44:35.130 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeSave]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeSave(com.yun.product.model.ProductType)
2019-01-31 09:44:35.131 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveStockList]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveStockController.productReceiveStocklist(java.lang.String,java.lang.String,org.springframework.ui.Model)
2019-01-31 09:44:35.132 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveStockPreAdd]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveStockController.productReceiveStockPreAdd()
2019-01-31 09:44:35.132 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveStockSave]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveStockController.productReceiveStockSave(com.yun.stock.model.ProductReceiveStock)
2019-01-31 09:44:35.132 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveStockDelete]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveStockController.productReceiveStockDelete(int)
2019-01-31 09:44:35.132 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveStockPreUpdate]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveStockController.productReceiveStockPreUpdate(int,org.springframework.ui.Model)
2019-01-31 09:44:35.132 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveStockUpdate]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveStockController.productReceiveStockUpdate(com.yun.stock.model.ProductReceiveStock)
2019-01-31 09:44:35.133 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveStockToCurrentStock]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveTradeController.productReceiveStockToCurrentStock(int,org.springframework.ui.Model)
2019-01-31 09:44:35.134 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveRejectSave]}" onto public void com.yun.stock.controller.ProductReceiveTradeController.receiveRejectSave(com.yun.stock.model.ProductReceiveTrade,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse) throws java.io.IOException
2019-01-31 09:44:35.134 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveToCurrentSave]}" onto public void com.yun.stock.controller.ProductReceiveTradeController.productReceiveToCurrentSave(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse) throws java.lang.Exception
2019-01-31 09:44:35.134 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveInSave]}" onto public void com.yun.stock.controller.ProductReceiveTradeController.receiveInSave(com.yun.stock.model.ProductReceiveTrade,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse) throws java.io.IOException
2019-01-31 09:44:35.134 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveIn]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveTradeController.receiveIn(org.springframework.ui.Model)
2019-01-31 09:44:35.135 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveReject]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveTradeController.receiveReject(org.springframework.ui.Model)
2019-01-31 09:44:35.136 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockPreAdd]}" onto public java.lang.String com.yun.stock.controller.ProductStockController.productStockPreAdd()
2019-01-31 09:44:35.136 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockDelete]}" onto public java.lang.String com.yun.stock.controller.ProductStockController.productStockDelete(int)
2019-01-31 09:44:35.136 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockPreUpdate]}" onto public java.lang.String com.yun.stock.controller.ProductStockController.productStockPreUpdate(int,org.springframework.ui.Model)
2019-01-31 09:44:35.137 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockUpdate]}" onto public java.lang.String com.yun.stock.controller.ProductStockController.productStockUpdate(com.yun.stock.model.ProductStock)
2019-01-31 09:44:35.137 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockList]}" onto public java.lang.String com.yun.stock.controller.ProductStockController.productStocklist(java.lang.String,java.lang.String,org.springframework.ui.Model)
2019-01-31 09:44:35.137 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockSave]}" onto public java.lang.String com.yun.stock.controller.ProductStockController.productStockSave(com.yun.stock.model.ProductStock)
2019-01-31 09:44:35.138 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/main]}" onto public java.lang.String com.yun.user.controller.MainController.main()
2019-01-31 09:44:35.138 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/userList]}" onto public java.lang.String com.yun.user.controller.UserController.userList(org.springframework.ui.Model)
2019-01-31 09:44:35.138 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/userSave]}" onto public java.lang.String com.yun.user.controller.UserController.userSave(com.yun.user.model.UserInfo)
2019-01-31 09:44:35.139 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/userEdit]}" onto public java.lang.String com.yun.user.controller.UserController.userEdit()
2019-01-31 09:44:35.139 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/deleteUserInfo]}" onto public java.lang.String com.yun.user.controller.UserController.userDelete(int)
2019-01-31 09:44:35.139 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/login]}" onto public void com.yun.user.controller.UserController.login(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse) throws java.io.IOException
2019-01-31 09:44:35.143 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/error]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> org.springframework.boot.autoconfigure.web.BasicErrorController.error(javax.servlet.http.HttpServletRequest)
2019-01-31 09:44:35.144 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/error],produces=[text/html]}" onto public org.springframework.web.servlet.ModelAndView org.springframework.boot.autoconfigure.web.BasicErrorController.errorHtml(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
2019-01-31 09:44:35.180 [main] INFO  o.s.web.servlet.handler.SimpleUrlHandlerMapping - Mapped URL path [/webjars/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-01-31 09:44:35.180 [main] INFO  o.s.web.servlet.handler.SimpleUrlHandlerMapping - Mapped URL path [/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-01-31 09:44:35.233 [main] INFO  o.s.web.servlet.handler.SimpleUrlHandlerMapping - Mapped URL path [/**/favicon.ico] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-01-31 09:44:35.568 [main] INFO  o.s.b.a.w.WebMvcAutoConfiguration$WelcomePageHandlerMapping - Adding welcome page: class path resource [static/index.html]
2019-01-31 09:44:35.837 [main] INFO  o.s.jmx.export.annotation.AnnotationMBeanExporter - Registering beans for JMX exposure on startup
2019-01-31 09:44:35.859 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2019-01-31 09:44:35.870 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2019-01-31 09:44:35.884 [main] INFO  org.apache.tomcat.util.net.NioSelectorPool - Using a shared selector for servlet write/read
2019-01-31 09:44:35.902 [main] INFO  o.s.b.c.e.tomcat.TomcatEmbeddedServletContainer - Tomcat started on port(s): 8080 (http)
2019-01-31 09:44:35.907 [main] INFO  com.yun.YunEbStockApplication - Started YunEbStockApplication in 4.903 seconds (JVM running for 6.162)
2019-01-31 09:44:36.179 [http-nio-8080-exec-1] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring FrameworkServlet 'dispatcherServlet'
2019-01-31 09:44:36.180 [http-nio-8080-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - FrameworkServlet 'dispatcherServlet': initialization started
2019-01-31 09:44:36.211 [http-nio-8080-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - FrameworkServlet 'dispatcherServlet': initialization completed in 31 ms
2019-01-31 09:44:36.230 [http-nio-8080-exec-1] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/
2019-01-31 09:44:36.261 [http-nio-8080-exec-1] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/index.html
2019-01-31 09:44:36.318 [http-nio-8080-exec-2] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/css/bootstrap.min.css
2019-01-31 09:44:36.319 [http-nio-8080-exec-3] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/js/jquery.min.js
2019-01-31 09:44:36.319 [http-nio-8080-exec-4] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/js/bootstrap.min.js
2019-01-31 09:44:38.100 [http-nio-8080-exec-5] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/
2019-01-31 09:44:38.108 [http-nio-8080-exec-5] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/index.html
2019-01-31 09:44:38.153 [http-nio-8080-exec-8] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/js/jquery.min.js
2019-01-31 09:44:38.154 [http-nio-8080-exec-7] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/js/bootstrap.min.js
2019-01-31 09:44:38.154 [http-nio-8080-exec-6] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/css/bootstrap.min.css
2019-01-31 09:44:38.230 [http-nio-8080-exec-9] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/favicon.ico
2019-01-31 09:45:03.625 [http-nio-8080-exec-10] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/login
2019-01-31 09:45:03.945 [http-nio-8080-exec-10] DEBUG c.y.user.dao.UserInfoDao.findUserInfoByNameAndPass - ==>  Preparing: select * from user_info where login_name=? and login_pass=? 
2019-01-31 09:45:03.964 [http-nio-8080-exec-10] DEBUG c.y.user.dao.UserInfoDao.findUserInfoByNameAndPass - ==> Parameters: admin(String), 123(String)
2019-01-31 09:45:03.975 [http-nio-8080-exec-10] DEBUG c.y.user.dao.UserInfoDao.findUserInfoByNameAndPass - <==      Total: 1
2019-01-31 09:45:03.984 [http-nio-8080-exec-1] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/main
2019-01-31 09:45:04.382 [http-nio-8080-exec-3] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/css/site.css
2019-01-31 09:45:04.404 [http-nio-8080-exec-4] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/default.html
2019-01-31 09:45:07.278 [http-nio-8080-exec-2] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productReceiveIn
2019-01-31 09:45:07.350 [http-nio-8080-exec-5] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/js/My97DatePicker/WdatePicker.js
2019-01-31 09:45:07.385 [http-nio-8080-exec-6] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/js/My97DatePicker/skin/WdatePicker.css
2019-01-31 09:45:07.402 [http-nio-8080-exec-7] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/js/My97DatePicker/My97DatePicker.html
2019-01-31 09:45:07.415 [http-nio-8080-exec-9] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/js/My97DatePicker/config.js
2019-01-31 09:45:07.423 [http-nio-8080-exec-8] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/js/My97DatePicker/calendar.js
2019-01-31 09:45:07.447 [http-nio-8080-exec-3] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/js/My97DatePicker/skin/whyGreen/datepicker.css
2019-01-31 09:45:07.447 [http-nio-8080-exec-1] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/js/My97DatePicker/skin/default/datepicker.css
2019-01-31 09:45:07.447 [http-nio-8080-exec-10] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/js/My97DatePicker/lang/zh-cn.js
2019-01-31 09:45:23.025 [http-nio-8080-exec-4] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productReceiveStockList
2019-01-31 09:45:23.032 [http-nio-8080-exec-4] DEBUG c.y.stock.controller.ProductReceiveStockController - 跳转到待收库存查询控制器
2019-01-31 09:45:23.071 [http-nio-8080-exec-4] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - ==>  Preparing: select count(*) from product_receive_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 
2019-01-31 09:45:23.071 [http-nio-8080-exec-4] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - ==> Parameters: 
2019-01-31 09:45:23.072 [http-nio-8080-exec-4] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - <==      Total: 1
2019-01-31 09:45:23.081 [http-nio-8080-exec-4] DEBUG c.y.s.d.P.findProductReceiveStockList - ==>  Preparing: select ps.prod_rece_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_receive_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 order by p.prod_id,pp.prod_param_id limit ?,? 
2019-01-31 09:45:23.082 [http-nio-8080-exec-4] DEBUG c.y.s.d.P.findProductReceiveStockList - ==> Parameters: 0(Integer), 5(Integer)
2019-01-31 09:45:23.084 [http-nio-8080-exec-4] DEBUG c.y.s.d.P.findProductReceiveStockList - <==      Total: 2
2019-01-31 09:45:23.086 [http-nio-8080-exec-4] DEBUG c.y.stock.controller.ProductReceiveStockController - 转到待收库存页面
2019-01-31 09:45:31.222 [http-nio-8080-exec-2] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productReceiveStockToCurrentStock
2019-01-31 09:45:31.230 [http-nio-8080-exec-2] DEBUG c.y.s.d.P.findProductReceiveStockById - ==>  Preparing: select ps.prod_rece_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_receive_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 and ps.prod_rece_stock_id=? 
2019-01-31 09:45:31.231 [http-nio-8080-exec-2] DEBUG c.y.s.d.P.findProductReceiveStockById - ==> Parameters: 7(Integer)
2019-01-31 09:45:31.234 [http-nio-8080-exec-2] DEBUG c.y.s.d.P.findProductReceiveStockById - <==      Total: 1
2019-01-31 09:46:25.657 [http-nio-8080-exec-7] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productReceiveStockList
2019-01-31 09:46:25.658 [http-nio-8080-exec-7] DEBUG c.y.stock.controller.ProductReceiveStockController - 跳转到待收库存查询控制器
2019-01-31 09:46:25.663 [http-nio-8080-exec-7] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - ==>  Preparing: select count(*) from product_receive_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 
2019-01-31 09:46:25.664 [http-nio-8080-exec-7] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - ==> Parameters: 
2019-01-31 09:46:25.672 [http-nio-8080-exec-7] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - <==      Total: 1
2019-01-31 09:46:25.676 [http-nio-8080-exec-7] DEBUG c.y.s.d.P.findProductReceiveStockList - ==>  Preparing: select ps.prod_rece_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_receive_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 order by p.prod_id,pp.prod_param_id limit ?,? 
2019-01-31 09:46:25.677 [http-nio-8080-exec-7] DEBUG c.y.s.d.P.findProductReceiveStockList - ==> Parameters: 0(Integer), 5(Integer)
2019-01-31 09:46:25.681 [http-nio-8080-exec-7] DEBUG c.y.s.d.P.findProductReceiveStockList - <==      Total: 2
2019-01-31 09:46:25.684 [http-nio-8080-exec-7] DEBUG c.y.stock.controller.ProductReceiveStockController - 转到待收库存页面
2019-01-31 09:46:26.542 [http-nio-8080-exec-9] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productReceiveStockToCurrentStock
2019-01-31 09:46:26.544 [http-nio-8080-exec-9] DEBUG c.y.s.d.P.findProductReceiveStockById - ==>  Preparing: select ps.prod_rece_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_receive_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 and ps.prod_rece_stock_id=? 
2019-01-31 09:46:26.545 [http-nio-8080-exec-9] DEBUG c.y.s.d.P.findProductReceiveStockById - ==> Parameters: 7(Integer)
2019-01-31 09:46:26.547 [http-nio-8080-exec-9] DEBUG c.y.s.d.P.findProductReceiveStockById - <==      Total: 1
2019-01-31 09:46:57.390 [http-nio-8080-exec-8] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productReceiveStockList
2019-01-31 09:46:57.391 [http-nio-8080-exec-8] DEBUG c.y.stock.controller.ProductReceiveStockController - 跳转到待收库存查询控制器
2019-01-31 09:46:57.393 [http-nio-8080-exec-8] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - ==>  Preparing: select count(*) from product_receive_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 
2019-01-31 09:46:57.393 [http-nio-8080-exec-8] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - ==> Parameters: 
2019-01-31 09:46:57.395 [http-nio-8080-exec-8] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - <==      Total: 1
2019-01-31 09:46:57.401 [http-nio-8080-exec-8] DEBUG c.y.s.d.P.findProductReceiveStockList - ==>  Preparing: select ps.prod_rece_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_receive_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 order by p.prod_id,pp.prod_param_id limit ?,? 
2019-01-31 09:46:57.403 [http-nio-8080-exec-8] DEBUG c.y.s.d.P.findProductReceiveStockList - ==> Parameters: 0(Integer), 5(Integer)
2019-01-31 09:46:57.407 [http-nio-8080-exec-8] DEBUG c.y.s.d.P.findProductReceiveStockList - <==      Total: 2
2019-01-31 09:46:57.410 [http-nio-8080-exec-8] DEBUG c.y.stock.controller.ProductReceiveStockController - 转到待收库存页面
2019-01-31 09:46:58.650 [http-nio-8080-exec-3] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productReceiveStockToCurrentStock
2019-01-31 09:46:58.654 [http-nio-8080-exec-3] DEBUG c.y.s.d.P.findProductReceiveStockById - ==>  Preparing: select ps.prod_rece_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_receive_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 and ps.prod_rece_stock_id=? 
2019-01-31 09:46:58.655 [http-nio-8080-exec-3] DEBUG c.y.s.d.P.findProductReceiveStockById - ==> Parameters: 7(Integer)
2019-01-31 09:46:58.665 [http-nio-8080-exec-3] DEBUG c.y.s.d.P.findProductReceiveStockById - <==      Total: 1
2019-01-31 09:47:01.067 [http-nio-8080-exec-1] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productReceiveToCurrentSave
2019-01-31 09:47:01.075 [http-nio-8080-exec-1] DEBUG c.y.s.d.P.findProductReceiveStockById - ==>  Preparing: select ps.prod_rece_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_receive_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 and ps.prod_rece_stock_id=? 
2019-01-31 09:47:01.076 [http-nio-8080-exec-1] DEBUG c.y.s.d.P.findProductReceiveStockById - ==> Parameters: 7(Integer)
2019-01-31 09:47:01.082 [http-nio-8080-exec-1] DEBUG c.y.s.d.P.findProductReceiveStockById - <==      Total: 1
2019-01-31 09:47:01.084 [http-nio-8080-exec-1] DEBUG c.y.s.d.P.insertProductReceiveTrade - ==>  Preparing: insert into product_receive_trade(trade_date,prod_id,prod_param_id,begin_num,trade_add,end_num,oper_id)values(?,?,?,?,?,?,?) 
2019-01-31 09:47:01.085 [http-nio-8080-exec-1] DEBUG c.y.s.d.P.insertProductReceiveTrade - ==> Parameters: 2019-01-31 09:46:58.0(Timestamp), 2(Integer), 8(Integer), 10(Integer), null, 8(Integer), 5(Integer)
2019-01-31 09:47:01.102 [http-nio-8080-exec-1] DEBUG c.y.s.d.P.insertProductReceiveTrade - <==    Updates: 1
2019-01-31 09:47:01.103 [http-nio-8080-exec-1] DEBUG c.y.s.d.P.findProductStockByProdIdAndProdParamId - ==>  Preparing: select ps.prod_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 and p.prod_id=? and pp.prodParamId=? 
2019-01-31 09:47:01.104 [http-nio-8080-exec-1] DEBUG c.y.s.d.P.findProductStockByProdIdAndProdParamId - ==> Parameters: 2(Integer), 8(Integer)
2019-01-31 09:47:01.116 [http-nio-8080-exec-1] INFO  o.s.beans.factory.xml.XmlBeanDefinitionReader - Loading XML bean definitions from class path resource [org/springframework/jdbc/support/sql-error-codes.xml]
2019-01-31 09:47:01.165 [http-nio-8080-exec-1] INFO  o.s.jdbc.support.SQLErrorCodesFactory - SQLErrorCodes loaded: [DB2, Derby, H2, HSQL, Informix, MS-SQL, MySQL, Oracle, PostgreSQL, Sybase, Hana]
2019-01-31 09:47:37.745 [http-nio-8080-exec-10] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productStockList
2019-01-31 09:47:37.750 [http-nio-8080-exec-10] DEBUG com.yun.stock.controller.ProductStockController - 跳转到物品库存查询控制器
2019-01-31 09:47:37.757 [http-nio-8080-exec-10] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==>  Preparing: select count(*) from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 
2019-01-31 09:47:37.758 [http-nio-8080-exec-10] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==> Parameters: 
2019-01-31 09:47:37.761 [http-nio-8080-exec-10] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - <==      Total: 1
2019-01-31 09:47:37.769 [http-nio-8080-exec-10] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==>  Preparing: select ps.prod_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 order by p.prod_id,pp.prod_param_id limit ?,? 
2019-01-31 09:47:37.770 [http-nio-8080-exec-10] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==> Parameters: 0(Integer), 5(Integer)
2019-01-31 09:47:37.772 [http-nio-8080-exec-10] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - <==      Total: 1
2019-01-31 09:47:37.774 [http-nio-8080-exec-10] DEBUG com.yun.stock.controller.ProductStockController - 转到物品库存页面
2019-01-31 09:47:41.807 [http-nio-8080-exec-4] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productReceiveStockList
2019-01-31 09:47:41.809 [http-nio-8080-exec-4] DEBUG c.y.stock.controller.ProductReceiveStockController - 跳转到待收库存查询控制器
2019-01-31 09:47:41.813 [http-nio-8080-exec-4] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - ==>  Preparing: select count(*) from product_receive_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 
2019-01-31 09:47:41.814 [http-nio-8080-exec-4] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - ==> Parameters: 
2019-01-31 09:47:41.816 [http-nio-8080-exec-4] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - <==      Total: 1
2019-01-31 09:47:41.820 [http-nio-8080-exec-4] DEBUG c.y.s.d.P.findProductReceiveStockList - ==>  Preparing: select ps.prod_rece_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_receive_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 order by p.prod_id,pp.prod_param_id limit ?,? 
2019-01-31 09:47:41.821 [http-nio-8080-exec-4] DEBUG c.y.s.d.P.findProductReceiveStockList - ==> Parameters: 0(Integer), 5(Integer)
2019-01-31 09:47:41.826 [http-nio-8080-exec-4] DEBUG c.y.s.d.P.findProductReceiveStockList - <==      Total: 2
2019-01-31 09:47:41.829 [http-nio-8080-exec-4] DEBUG c.y.stock.controller.ProductReceiveStockController - 转到待收库存页面
2019-01-31 09:47:43.291 [http-nio-8080-exec-2] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productStockList
2019-01-31 09:47:43.294 [http-nio-8080-exec-2] DEBUG com.yun.stock.controller.ProductStockController - 跳转到物品库存查询控制器
2019-01-31 09:47:43.297 [http-nio-8080-exec-2] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==>  Preparing: select count(*) from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 
2019-01-31 09:47:43.298 [http-nio-8080-exec-2] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==> Parameters: 
2019-01-31 09:47:43.301 [http-nio-8080-exec-2] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - <==      Total: 1
2019-01-31 09:47:43.311 [http-nio-8080-exec-2] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==>  Preparing: select ps.prod_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 order by p.prod_id,pp.prod_param_id limit ?,? 
2019-01-31 09:47:43.312 [http-nio-8080-exec-2] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==> Parameters: 0(Integer), 5(Integer)
2019-01-31 09:47:43.314 [http-nio-8080-exec-2] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - <==      Total: 1
2019-01-31 09:47:43.316 [http-nio-8080-exec-2] DEBUG com.yun.stock.controller.ProductStockController - 转到物品库存页面
2019-01-31 09:47:45.269 [http-nio-8080-exec-6] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productReceiveIn
2019-01-31 09:47:47.597 [http-nio-8080-exec-5] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productReceiveStockList
2019-01-31 09:47:47.598 [http-nio-8080-exec-5] DEBUG c.y.stock.controller.ProductReceiveStockController - 跳转到待收库存查询控制器
2019-01-31 09:47:47.602 [http-nio-8080-exec-5] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - ==>  Preparing: select count(*) from product_receive_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 
2019-01-31 09:47:47.603 [http-nio-8080-exec-5] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - ==> Parameters: 
2019-01-31 09:47:47.605 [http-nio-8080-exec-5] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - <==      Total: 1
2019-01-31 09:47:47.610 [http-nio-8080-exec-5] DEBUG c.y.s.d.P.findProductReceiveStockList - ==>  Preparing: select ps.prod_rece_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_receive_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 order by p.prod_id,pp.prod_param_id limit ?,? 
2019-01-31 09:47:47.610 [http-nio-8080-exec-5] DEBUG c.y.s.d.P.findProductReceiveStockList - ==> Parameters: 0(Integer), 5(Integer)
2019-01-31 09:47:47.616 [http-nio-8080-exec-5] DEBUG c.y.s.d.P.findProductReceiveStockList - <==      Total: 2
2019-01-31 09:47:47.619 [http-nio-8080-exec-5] DEBUG c.y.stock.controller.ProductReceiveStockController - 转到待收库存页面
2019-01-31 09:47:50.897 [http-nio-8080-exec-7] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productReceiveReject
2019-01-31 09:47:52.784 [http-nio-8080-exec-9] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productCurrentOut
2019-01-31 09:47:55.008 [http-nio-8080-exec-8] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productCurrentIn
2019-01-31 09:47:56.104 [http-nio-8080-exec-3] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productCurrentOut
2019-01-31 09:47:56.682 [http-nio-8080-exec-1] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productCurrentReject
2019-01-31 09:48:32.169 [http-nio-8080-exec-10] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productTypeList
2019-01-31 09:48:32.172 [http-nio-8080-exec-10] INFO  com.yun.product.controller.ProductTypeController - 跳转到stock/productTypeList.html页面
2019-01-31 09:48:32.209 [http-nio-8080-exec-4] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/css/jquery.treetable.css
2019-01-31 09:48:32.215 [http-nio-8080-exec-4] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/css/jquery.treetable.theme.default.css
2019-01-31 09:48:32.226 [http-nio-8080-exec-4] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/js/jquery.treetable.js
2019-01-31 09:48:32.253 [http-nio-8080-exec-5] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productTypeTree
2019-01-31 09:48:32.262 [http-nio-8080-exec-5] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - ==>  Preparing: select p1.prod_type_id,p1.prod_type_name,p1.parent_id,p2.prod_type_id parent_type_id,p2.prod_type_name parent_type_name from product_type p1 LEFT JOIN product_type p2 on p1.parent_id=p2.prod_type_id where p1.parent_id=? 
2019-01-31 09:48:32.262 [http-nio-8080-exec-5] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - ==> Parameters: 0(Integer)
2019-01-31 09:48:32.267 [http-nio-8080-exec-5] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - ====>  Preparing: select p1.prod_type_id,p1.prod_type_name,p1.parent_id,p2.prod_type_id parent_type_id,p2.prod_type_name parent_type_name from product_type p1 LEFT JOIN product_type p2 on p1.parent_id=p2.prod_type_id where p1.parent_id=? 
2019-01-31 09:48:32.267 [http-nio-8080-exec-5] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - ====> Parameters: 29(Integer)
2019-01-31 09:48:32.268 [http-nio-8080-exec-5] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - ======>  Preparing: select p1.prod_type_id,p1.prod_type_name,p1.parent_id,p2.prod_type_id parent_type_id,p2.prod_type_name parent_type_name from product_type p1 LEFT JOIN product_type p2 on p1.parent_id=p2.prod_type_id where p1.parent_id=? 
2019-01-31 09:48:32.269 [http-nio-8080-exec-5] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - ======> Parameters: 30(Integer)
2019-01-31 09:48:32.270 [http-nio-8080-exec-5] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - <======      Total: 0
2019-01-31 09:48:32.270 [http-nio-8080-exec-5] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - <====      Total: 1
2019-01-31 09:48:32.271 [http-nio-8080-exec-5] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - ====>  Preparing: select p1.prod_type_id,p1.prod_type_name,p1.parent_id,p2.prod_type_id parent_type_id,p2.prod_type_name parent_type_name from product_type p1 LEFT JOIN product_type p2 on p1.parent_id=p2.prod_type_id where p1.parent_id=? 
2019-01-31 09:48:32.271 [http-nio-8080-exec-5] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - ====> Parameters: 39(Integer)
2019-01-31 09:48:32.272 [http-nio-8080-exec-5] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - ======>  Preparing: select p1.prod_type_id,p1.prod_type_name,p1.parent_id,p2.prod_type_id parent_type_id,p2.prod_type_name parent_type_name from product_type p1 LEFT JOIN product_type p2 on p1.parent_id=p2.prod_type_id where p1.parent_id=? 
2019-01-31 09:48:32.273 [http-nio-8080-exec-5] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - ======> Parameters: 41(Integer)
2019-01-31 09:48:32.274 [http-nio-8080-exec-5] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - <======      Total: 0
2019-01-31 09:48:32.274 [http-nio-8080-exec-5] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - <====      Total: 1
2019-01-31 09:48:32.275 [http-nio-8080-exec-5] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - <==      Total: 2
2019-01-31 09:48:33.052 [http-nio-8080-exec-7] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productList
2019-01-31 09:48:33.063 [http-nio-8080-exec-7] DEBUG c.yun.product.dao.ProductDao.findProductRowByParam - ==>  Preparing: select count(*) from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 
2019-01-31 09:48:33.064 [http-nio-8080-exec-7] DEBUG c.yun.product.dao.ProductDao.findProductRowByParam - ==> Parameters: 
2019-01-31 09:48:33.067 [http-nio-8080-exec-7] DEBUG c.yun.product.dao.ProductDao.findProductRowByParam - <==      Total: 1
2019-01-31 09:48:33.082 [http-nio-8080-exec-7] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 order by prod_id limit ?,? 
2019-01-31 09:48:33.084 [http-nio-8080-exec-7] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==> Parameters: 0(Integer), 5(Integer)
2019-01-31 09:48:33.087 [http-nio-8080-exec-7] DEBUG com.yun.product.dao.ProductDao.findProductByParam - <==      Total: 4
2019-01-31 09:48:33.087 [http-nio-8080-exec-7] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-31 09:48:33.088 [http-nio-8080-exec-7] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 2(Integer)
2019-01-31 09:48:33.089 [http-nio-8080-exec-7] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-01-31 09:48:33.090 [http-nio-8080-exec-7] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-31 09:48:33.090 [http-nio-8080-exec-7] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 3(Integer)
2019-01-31 09:48:33.091 [http-nio-8080-exec-7] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-01-31 09:48:33.091 [http-nio-8080-exec-7] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-31 09:48:33.091 [http-nio-8080-exec-7] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 4(Integer)
2019-01-31 09:48:33.092 [http-nio-8080-exec-7] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 2
2019-01-31 09:48:33.093 [http-nio-8080-exec-7] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-31 09:48:33.093 [http-nio-8080-exec-7] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 5(Integer)
2019-01-31 09:48:33.094 [http-nio-8080-exec-7] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-01-31 09:48:39.307 [http-nio-8080-exec-9] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/userList
2019-01-31 09:48:39.313 [http-nio-8080-exec-9] DEBUG com.yun.user.dao.UserInfoDao.findUserInfoList - ==>  Preparing: select * from user_info 
2019-01-31 09:48:39.314 [http-nio-8080-exec-9] DEBUG com.yun.user.dao.UserInfoDao.findUserInfoList - ==> Parameters: 
2019-01-31 09:48:39.317 [http-nio-8080-exec-9] DEBUG com.yun.user.dao.UserInfoDao.findUserInfoList - <==      Total: 2
2019-01-31 09:55:40.920 [http-nio-8080-exec-10] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productReceiveStockList
2019-01-31 09:55:40.922 [http-nio-8080-exec-10] DEBUG c.y.stock.controller.ProductReceiveStockController - 跳转到待收库存查询控制器
2019-01-31 09:55:40.926 [http-nio-8080-exec-10] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - ==>  Preparing: select count(*) from product_receive_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 
2019-01-31 09:55:40.928 [http-nio-8080-exec-10] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - ==> Parameters: 
2019-01-31 09:55:40.933 [http-nio-8080-exec-10] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - <==      Total: 1
2019-01-31 09:55:40.943 [http-nio-8080-exec-10] DEBUG c.y.s.d.P.findProductReceiveStockList - ==>  Preparing: select ps.prod_rece_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_receive_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 order by p.prod_id,pp.prod_param_id limit ?,? 
2019-01-31 09:55:40.943 [http-nio-8080-exec-10] DEBUG c.y.s.d.P.findProductReceiveStockList - ==> Parameters: 0(Integer), 5(Integer)
2019-01-31 09:55:40.945 [http-nio-8080-exec-10] DEBUG c.y.s.d.P.findProductReceiveStockList - <==      Total: 2
2019-01-31 09:55:40.947 [http-nio-8080-exec-10] DEBUG c.y.stock.controller.ProductReceiveStockController - 转到待收库存页面
2019-01-31 09:55:42.564 [http-nio-8080-exec-2] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productReceiveStockToCurrentStock
2019-01-31 09:55:42.567 [http-nio-8080-exec-2] DEBUG c.y.s.d.P.findProductReceiveStockById - ==>  Preparing: select ps.prod_rece_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_receive_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 and ps.prod_rece_stock_id=? 
2019-01-31 09:55:42.568 [http-nio-8080-exec-2] DEBUG c.y.s.d.P.findProductReceiveStockById - ==> Parameters: 7(Integer)
2019-01-31 09:55:42.569 [http-nio-8080-exec-2] DEBUG c.y.s.d.P.findProductReceiveStockById - <==      Total: 1
2019-01-31 09:55:45.358 [http-nio-8080-exec-6] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productReceiveToCurrentSave
2019-01-31 09:55:45.363 [http-nio-8080-exec-6] DEBUG c.y.s.d.P.findProductReceiveStockById - ==>  Preparing: select ps.prod_rece_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_receive_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 and ps.prod_rece_stock_id=? 
2019-01-31 09:55:45.364 [http-nio-8080-exec-6] DEBUG c.y.s.d.P.findProductReceiveStockById - ==> Parameters: 7(Integer)
2019-01-31 09:55:45.366 [http-nio-8080-exec-6] DEBUG c.y.s.d.P.findProductReceiveStockById - <==      Total: 1
2019-01-31 09:55:45.367 [http-nio-8080-exec-6] DEBUG c.y.s.d.P.insertProductReceiveTrade - ==>  Preparing: insert into product_receive_trade(trade_date,prod_id,prod_param_id,begin_num,trade_add,end_num,oper_id)values(?,?,?,?,?,?,?) 
2019-01-31 09:55:45.368 [http-nio-8080-exec-6] DEBUG c.y.s.d.P.insertProductReceiveTrade - ==> Parameters: 2019-01-31 09:55:42.0(Timestamp), 2(Integer), 8(Integer), 10(Integer), null, 8(Integer), 5(Integer)
2019-01-31 09:55:45.399 [http-nio-8080-exec-6] DEBUG c.y.s.d.P.insertProductReceiveTrade - <==    Updates: 1
2019-01-31 09:55:45.399 [http-nio-8080-exec-6] DEBUG c.y.s.d.P.findProductStockByProdIdAndProdParamId - ==>  Preparing: select ps.prod_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 and p.prod_id=? and pp.prodParamId=? 
2019-01-31 09:55:45.400 [http-nio-8080-exec-6] DEBUG c.y.s.d.P.findProductStockByProdIdAndProdParamId - ==> Parameters: 2(Integer), 8(Integer)
2019-01-31 09:56:03.664 [http-nio-8080-exec-4] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/main
2019-01-31 09:56:03.730 [http-nio-8080-exec-7] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/js/jquery.min.js
2019-01-31 09:56:03.733 [http-nio-8080-exec-9] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/css/site.css
2019-01-31 09:56:03.739 [http-nio-8080-exec-3] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/js/bootstrap.min.js
2019-01-31 09:56:03.743 [http-nio-8080-exec-5] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/css/bootstrap.min.css
2019-01-31 09:56:03.770 [http-nio-8080-exec-8] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/default.html
2019-01-31 09:56:03.798 [http-nio-8080-exec-1] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/favicon.ico
2019-01-31 09:56:07.202 [http-nio-8080-exec-10] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productReceiveStockList
2019-01-31 09:56:07.205 [http-nio-8080-exec-10] DEBUG c.y.stock.controller.ProductReceiveStockController - 跳转到待收库存查询控制器
2019-01-31 09:56:07.211 [http-nio-8080-exec-10] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - ==>  Preparing: select count(*) from product_receive_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 
2019-01-31 09:56:07.211 [http-nio-8080-exec-10] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - ==> Parameters: 
2019-01-31 09:56:07.214 [http-nio-8080-exec-10] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - <==      Total: 1
2019-01-31 09:56:07.221 [http-nio-8080-exec-10] DEBUG c.y.s.d.P.findProductReceiveStockList - ==>  Preparing: select ps.prod_rece_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_receive_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 order by p.prod_id,pp.prod_param_id limit ?,? 
2019-01-31 09:56:07.222 [http-nio-8080-exec-10] DEBUG c.y.s.d.P.findProductReceiveStockList - ==> Parameters: 0(Integer), 5(Integer)
2019-01-31 09:56:07.224 [http-nio-8080-exec-10] DEBUG c.y.s.d.P.findProductReceiveStockList - <==      Total: 2
2019-01-31 09:56:07.228 [http-nio-8080-exec-10] DEBUG c.y.stock.controller.ProductReceiveStockController - 转到待收库存页面
2019-01-31 09:56:09.520 [http-nio-8080-exec-2] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productReceiveStockToCurrentStock
2019-01-31 09:56:09.524 [http-nio-8080-exec-2] DEBUG c.y.s.d.P.findProductReceiveStockById - ==>  Preparing: select ps.prod_rece_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_receive_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 and ps.prod_rece_stock_id=? 
2019-01-31 09:56:09.524 [http-nio-8080-exec-2] DEBUG c.y.s.d.P.findProductReceiveStockById - ==> Parameters: 7(Integer)
2019-01-31 09:56:09.528 [http-nio-8080-exec-2] DEBUG c.y.s.d.P.findProductReceiveStockById - <==      Total: 1
2019-01-31 09:56:15.464 [http-nio-8080-exec-6] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productReceiveToCurrentSave
2019-01-31 09:56:15.467 [http-nio-8080-exec-6] DEBUG c.y.s.d.P.findProductReceiveStockById - ==>  Preparing: select ps.prod_rece_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_receive_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 and ps.prod_rece_stock_id=? 
2019-01-31 09:56:15.467 [http-nio-8080-exec-6] DEBUG c.y.s.d.P.findProductReceiveStockById - ==> Parameters: 7(Integer)
2019-01-31 09:56:15.471 [http-nio-8080-exec-6] DEBUG c.y.s.d.P.findProductReceiveStockById - <==      Total: 1
2019-01-31 09:56:15.472 [http-nio-8080-exec-6] DEBUG c.y.s.d.P.insertProductReceiveTrade - ==>  Preparing: insert into product_receive_trade(trade_date,prod_id,prod_param_id,begin_num,trade_add,end_num,oper_id)values(?,?,?,?,?,?,?) 
2019-01-31 09:56:15.474 [http-nio-8080-exec-6] DEBUG c.y.s.d.P.insertProductReceiveTrade - ==> Parameters: 2019-01-31 09:56:09.0(Timestamp), 2(Integer), 8(Integer), 10(Integer), null, 7(Integer), 5(Integer)
2019-01-31 09:56:15.522 [http-nio-8080-exec-6] DEBUG c.y.s.d.P.insertProductReceiveTrade - <==    Updates: 1
2019-01-31 09:56:15.523 [http-nio-8080-exec-6] DEBUG c.y.s.d.P.findProductStockByProdIdAndProdParamId - ==>  Preparing: select ps.prod_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 and p.prod_id=? and pp.prodParamId=? 
2019-01-31 09:56:15.523 [http-nio-8080-exec-6] DEBUG c.y.s.d.P.findProductStockByProdIdAndProdParamId - ==> Parameters: 2(Integer), 8(Integer)
2019-01-31 09:58:16.110 [main] INFO  com.yun.YunEbStockApplication - Starting YunEbStockApplication on USER-20181202BJ with PID 6788 (E:\workspace\yun-eb-stock\target\classes started by Administrator in E:\workspace\yun-eb-stock)
2019-01-31 09:58:16.184 [main] DEBUG com.yun.YunEbStockApplication - Running with Spring Boot v1.5.9.RELEASE, Spring v4.3.13.RELEASE
2019-01-31 09:58:16.185 [main] INFO  com.yun.YunEbStockApplication - No active profile set, falling back to default profiles: default
2019-01-31 09:58:16.719 [background-preinit] INFO  org.hibernate.validator.internal.util.Version - HV000001: Hibernate Validator 5.3.6.Final
2019-01-31 09:58:16.775 [main] INFO  o.s.b.c.e.AnnotationConfigEmbeddedWebApplicationContext - Refreshing org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@6a28ffa4: startup date [Thu Jan 31 09:58:16 CST 2019]; root of context hierarchy
2019-01-31 09:58:18.302 [main] INFO  o.s.b.c.e.tomcat.TomcatEmbeddedServletContainer - Tomcat initialized with port(s): 8080 (http)
2019-01-31 09:58:18.312 [main] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2019-01-31 09:58:18.313 [main] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet Engine: Apache Tomcat/8.5.23
2019-01-31 09:58:18.414 [localhost-startStop-1] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2019-01-31 09:58:18.414 [localhost-startStop-1] INFO  org.springframework.web.context.ContextLoader - Root WebApplicationContext: initialization completed in 1639 ms
2019-01-31 09:58:18.575 [localhost-startStop-1] INFO  o.s.boot.web.servlet.FilterRegistrationBean - Mapping filter: 'characterEncodingFilter' to: [/*]
2019-01-31 09:58:18.576 [localhost-startStop-1] INFO  o.s.boot.web.servlet.FilterRegistrationBean - Mapping filter: 'hiddenHttpMethodFilter' to: [/*]
2019-01-31 09:58:18.576 [localhost-startStop-1] INFO  o.s.boot.web.servlet.FilterRegistrationBean - Mapping filter: 'httpPutFormContentFilter' to: [/*]
2019-01-31 09:58:18.577 [localhost-startStop-1] INFO  o.s.boot.web.servlet.FilterRegistrationBean - Mapping filter: 'requestContextFilter' to: [/*]
2019-01-31 09:58:18.577 [localhost-startStop-1] INFO  o.s.boot.web.servlet.FilterRegistrationBean - Mapping filter: 'loginFilter' to urls: [/*]
2019-01-31 09:58:18.577 [localhost-startStop-1] INFO  o.s.boot.web.servlet.ServletRegistrationBean - Mapping servlet: 'dispatcherServlet' to [/]
2019-01-31 09:58:19.449 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerAdapter - Looking for @ControllerAdvice: org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@6a28ffa4: startup date [Thu Jan 31 09:58:16 CST 2019]; root of context hierarchy
2019-01-31 09:58:19.512 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productListForAutoComplete]}" onto public java.util.List<com.yun.product.model.Product> com.yun.product.controller.ProductController.productListForAutoComplete(java.lang.String)
2019-01-31 09:58:19.513 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productListForStock]}" onto public java.util.List<com.yun.product.model.Product> com.yun.product.controller.ProductController.productListForStock()
2019-01-31 09:58:19.514 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productListForTrade]}" onto public java.util.List<com.yun.product.model.Product> com.yun.product.controller.ProductController.productListForTrade(java.lang.String)
2019-01-31 09:58:19.514 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productList]}" onto public java.lang.String com.yun.product.controller.ProductController.productList(org.springframework.ui.Model,java.lang.String,java.lang.String,java.lang.String,java.lang.String)
2019-01-31 09:58:19.514 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productPreAdd]}" onto public java.lang.String com.yun.product.controller.ProductController.productPreAdd()
2019-01-31 09:58:19.514 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productSave]}" onto public java.lang.String com.yun.product.controller.ProductController.productSave(com.yun.product.model.Product)
2019-01-31 09:58:19.514 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productDelete]}" onto public java.lang.String com.yun.product.controller.ProductController.productDelete(int)
2019-01-31 09:58:19.515 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productPreUpdate]}" onto public java.lang.String com.yun.product.controller.ProductController.productPreUpdate(int,org.springframework.ui.Model)
2019-01-31 09:58:19.515 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productUpdate]}" onto public java.lang.String com.yun.product.controller.ProductController.productUpdate(com.yun.product.model.Product)
2019-01-31 09:58:19.516 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/prodParamDelete]}" onto public java.lang.String com.yun.product.controller.ProductParamController.prodParamDelete(int)
2019-01-31 09:58:19.516 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/prodParamPreAdd]}" onto public java.lang.String com.yun.product.controller.ProductParamController.prodParamPreAdd(int,org.springframework.ui.Model)
2019-01-31 09:58:19.516 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/prodParamSave]}" onto public java.lang.String com.yun.product.controller.ProductParamController.prodParamSave(com.yun.product.model.ProductParameter)
2019-01-31 09:58:19.516 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/prodParamList]}" onto public java.lang.String com.yun.product.controller.ProductParamController.prodParamList(int)
2019-01-31 09:58:19.519 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeUpdate]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeUpdate(java.lang.Integer,org.springframework.ui.Model)
2019-01-31 09:58:19.519 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeUpdateSave]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeUpdateSave(com.yun.product.model.ProductType)
2019-01-31 09:58:19.520 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeDelete]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeDelete(java.lang.Integer,javax.servlet.http.HttpServletResponse) throws java.io.IOException
2019-01-31 09:58:19.520 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeList]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeList(org.springframework.ui.Model)
2019-01-31 09:58:19.520 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeTree]}" onto public java.util.List<com.yun.product.model.ProductType> com.yun.product.controller.ProductTypeController.productTypeTree()
2019-01-31 09:58:19.521 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeEdit]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeEdit()
2019-01-31 09:58:19.521 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeSave]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeSave(com.yun.product.model.ProductType)
2019-01-31 09:58:19.522 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveStockList]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveStockController.productReceiveStocklist(java.lang.String,java.lang.String,org.springframework.ui.Model)
2019-01-31 09:58:19.522 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveStockPreAdd]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveStockController.productReceiveStockPreAdd()
2019-01-31 09:58:19.522 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveStockSave]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveStockController.productReceiveStockSave(com.yun.stock.model.ProductReceiveStock)
2019-01-31 09:58:19.522 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveStockDelete]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveStockController.productReceiveStockDelete(int)
2019-01-31 09:58:19.523 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveStockPreUpdate]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveStockController.productReceiveStockPreUpdate(int,org.springframework.ui.Model)
2019-01-31 09:58:19.523 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveStockUpdate]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveStockController.productReceiveStockUpdate(com.yun.stock.model.ProductReceiveStock)
2019-01-31 09:58:19.524 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveStockToCurrentStock]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveTradeController.productReceiveStockToCurrentStock(int,org.springframework.ui.Model)
2019-01-31 09:58:19.524 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveRejectSave]}" onto public void com.yun.stock.controller.ProductReceiveTradeController.receiveRejectSave(com.yun.stock.model.ProductReceiveTrade,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse) throws java.io.IOException
2019-01-31 09:58:19.524 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveToCurrentSave]}" onto public void com.yun.stock.controller.ProductReceiveTradeController.productReceiveToCurrentSave(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse) throws java.lang.Exception
2019-01-31 09:58:19.524 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveInSave]}" onto public void com.yun.stock.controller.ProductReceiveTradeController.receiveInSave(com.yun.stock.model.ProductReceiveTrade,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse) throws java.io.IOException
2019-01-31 09:58:19.525 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveIn]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveTradeController.receiveIn(org.springframework.ui.Model)
2019-01-31 09:58:19.525 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveReject]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveTradeController.receiveReject(org.springframework.ui.Model)
2019-01-31 09:58:19.526 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockPreAdd]}" onto public java.lang.String com.yun.stock.controller.ProductStockController.productStockPreAdd()
2019-01-31 09:58:19.526 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockDelete]}" onto public java.lang.String com.yun.stock.controller.ProductStockController.productStockDelete(int)
2019-01-31 09:58:19.526 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockPreUpdate]}" onto public java.lang.String com.yun.stock.controller.ProductStockController.productStockPreUpdate(int,org.springframework.ui.Model)
2019-01-31 09:58:19.526 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockUpdate]}" onto public java.lang.String com.yun.stock.controller.ProductStockController.productStockUpdate(com.yun.stock.model.ProductStock)
2019-01-31 09:58:19.526 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockList]}" onto public java.lang.String com.yun.stock.controller.ProductStockController.productStocklist(java.lang.String,java.lang.String,org.springframework.ui.Model)
2019-01-31 09:58:19.527 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockSave]}" onto public java.lang.String com.yun.stock.controller.ProductStockController.productStockSave(com.yun.stock.model.ProductStock)
2019-01-31 09:58:19.527 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/main]}" onto public java.lang.String com.yun.user.controller.MainController.main()
2019-01-31 09:58:19.528 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/userList]}" onto public java.lang.String com.yun.user.controller.UserController.userList(org.springframework.ui.Model)
2019-01-31 09:58:19.528 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/deleteUserInfo]}" onto public java.lang.String com.yun.user.controller.UserController.userDelete(int)
2019-01-31 09:58:19.528 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/userEdit]}" onto public java.lang.String com.yun.user.controller.UserController.userEdit()
2019-01-31 09:58:19.529 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/userSave]}" onto public java.lang.String com.yun.user.controller.UserController.userSave(com.yun.user.model.UserInfo)
2019-01-31 09:58:19.529 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/login]}" onto public void com.yun.user.controller.UserController.login(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse) throws java.io.IOException
2019-01-31 09:58:19.532 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/error]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> org.springframework.boot.autoconfigure.web.BasicErrorController.error(javax.servlet.http.HttpServletRequest)
2019-01-31 09:58:19.533 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/error],produces=[text/html]}" onto public org.springframework.web.servlet.ModelAndView org.springframework.boot.autoconfigure.web.BasicErrorController.errorHtml(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
2019-01-31 09:58:19.566 [main] INFO  o.s.web.servlet.handler.SimpleUrlHandlerMapping - Mapped URL path [/webjars/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-01-31 09:58:19.566 [main] INFO  o.s.web.servlet.handler.SimpleUrlHandlerMapping - Mapped URL path [/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-01-31 09:58:19.607 [main] INFO  o.s.web.servlet.handler.SimpleUrlHandlerMapping - Mapped URL path [/**/favicon.ico] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-01-31 09:58:19.905 [main] INFO  o.s.b.a.w.WebMvcAutoConfiguration$WelcomePageHandlerMapping - Adding welcome page: class path resource [static/index.html]
2019-01-31 09:58:20.158 [main] INFO  o.s.jmx.export.annotation.AnnotationMBeanExporter - Registering beans for JMX exposure on startup
2019-01-31 09:58:20.178 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2019-01-31 09:58:20.189 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2019-01-31 09:58:20.203 [main] INFO  org.apache.tomcat.util.net.NioSelectorPool - Using a shared selector for servlet write/read
2019-01-31 09:58:20.221 [main] INFO  o.s.b.c.e.tomcat.TomcatEmbeddedServletContainer - Tomcat started on port(s): 8080 (http)
2019-01-31 09:58:20.226 [main] INFO  com.yun.YunEbStockApplication - Started YunEbStockApplication in 4.573 seconds (JVM running for 5.817)
2019-01-31 09:59:48.792 [main] INFO  com.yun.YunEbStockApplication - Starting YunEbStockApplication on USER-20181202BJ with PID 7148 (E:\workspace\yun-eb-stock\target\classes started by Administrator in E:\workspace\yun-eb-stock)
2019-01-31 09:59:48.796 [main] DEBUG com.yun.YunEbStockApplication - Running with Spring Boot v1.5.9.RELEASE, Spring v4.3.13.RELEASE
2019-01-31 09:59:48.796 [main] INFO  com.yun.YunEbStockApplication - No active profile set, falling back to default profiles: default
2019-01-31 09:59:49.095 [background-preinit] INFO  org.hibernate.validator.internal.util.Version - HV000001: Hibernate Validator 5.3.6.Final
2019-01-31 09:59:49.301 [main] INFO  o.s.b.c.e.AnnotationConfigEmbeddedWebApplicationContext - Refreshing org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@6a28ffa4: startup date [Thu Jan 31 09:59:49 CST 2019]; root of context hierarchy
2019-01-31 09:59:50.875 [main] INFO  o.s.b.c.e.tomcat.TomcatEmbeddedServletContainer - Tomcat initialized with port(s): 8080 (http)
2019-01-31 09:59:50.885 [main] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2019-01-31 09:59:50.886 [main] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet Engine: Apache Tomcat/8.5.23
2019-01-31 09:59:50.988 [localhost-startStop-1] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2019-01-31 09:59:50.988 [localhost-startStop-1] INFO  org.springframework.web.context.ContextLoader - Root WebApplicationContext: initialization completed in 1688 ms
2019-01-31 09:59:51.149 [localhost-startStop-1] INFO  o.s.boot.web.servlet.FilterRegistrationBean - Mapping filter: 'characterEncodingFilter' to: [/*]
2019-01-31 09:59:51.150 [localhost-startStop-1] INFO  o.s.boot.web.servlet.FilterRegistrationBean - Mapping filter: 'hiddenHttpMethodFilter' to: [/*]
2019-01-31 09:59:51.151 [localhost-startStop-1] INFO  o.s.boot.web.servlet.FilterRegistrationBean - Mapping filter: 'httpPutFormContentFilter' to: [/*]
2019-01-31 09:59:51.151 [localhost-startStop-1] INFO  o.s.boot.web.servlet.FilterRegistrationBean - Mapping filter: 'requestContextFilter' to: [/*]
2019-01-31 09:59:51.151 [localhost-startStop-1] INFO  o.s.boot.web.servlet.FilterRegistrationBean - Mapping filter: 'loginFilter' to urls: [/*]
2019-01-31 09:59:51.151 [localhost-startStop-1] INFO  o.s.boot.web.servlet.ServletRegistrationBean - Mapping servlet: 'dispatcherServlet' to [/]
2019-01-31 09:59:52.006 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerAdapter - Looking for @ControllerAdvice: org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@6a28ffa4: startup date [Thu Jan 31 09:59:49 CST 2019]; root of context hierarchy
2019-01-31 09:59:52.067 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productList]}" onto public java.lang.String com.yun.product.controller.ProductController.productList(org.springframework.ui.Model,java.lang.String,java.lang.String,java.lang.String,java.lang.String)
2019-01-31 09:59:52.068 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productPreAdd]}" onto public java.lang.String com.yun.product.controller.ProductController.productPreAdd()
2019-01-31 09:59:52.068 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productSave]}" onto public java.lang.String com.yun.product.controller.ProductController.productSave(com.yun.product.model.Product)
2019-01-31 09:59:52.069 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productDelete]}" onto public java.lang.String com.yun.product.controller.ProductController.productDelete(int)
2019-01-31 09:59:52.069 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productPreUpdate]}" onto public java.lang.String com.yun.product.controller.ProductController.productPreUpdate(int,org.springframework.ui.Model)
2019-01-31 09:59:52.069 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productUpdate]}" onto public java.lang.String com.yun.product.controller.ProductController.productUpdate(com.yun.product.model.Product)
2019-01-31 09:59:52.069 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productListForAutoComplete]}" onto public java.util.List<com.yun.product.model.Product> com.yun.product.controller.ProductController.productListForAutoComplete(java.lang.String)
2019-01-31 09:59:52.070 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productListForStock]}" onto public java.util.List<com.yun.product.model.Product> com.yun.product.controller.ProductController.productListForStock()
2019-01-31 09:59:52.070 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productListForTrade]}" onto public java.util.List<com.yun.product.model.Product> com.yun.product.controller.ProductController.productListForTrade(java.lang.String)
2019-01-31 09:59:52.071 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/prodParamDelete]}" onto public java.lang.String com.yun.product.controller.ProductParamController.prodParamDelete(int)
2019-01-31 09:59:52.072 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/prodParamPreAdd]}" onto public java.lang.String com.yun.product.controller.ProductParamController.prodParamPreAdd(int,org.springframework.ui.Model)
2019-01-31 09:59:52.072 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/prodParamSave]}" onto public java.lang.String com.yun.product.controller.ProductParamController.prodParamSave(com.yun.product.model.ProductParameter)
2019-01-31 09:59:52.072 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/prodParamList]}" onto public java.lang.String com.yun.product.controller.ProductParamController.prodParamList(int)
2019-01-31 09:59:52.075 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeList]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeList(org.springframework.ui.Model)
2019-01-31 09:59:52.075 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeTree]}" onto public java.util.List<com.yun.product.model.ProductType> com.yun.product.controller.ProductTypeController.productTypeTree()
2019-01-31 09:59:52.076 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeEdit]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeEdit()
2019-01-31 09:59:52.076 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeSave]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeSave(com.yun.product.model.ProductType)
2019-01-31 09:59:52.076 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeUpdate]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeUpdate(java.lang.Integer,org.springframework.ui.Model)
2019-01-31 09:59:52.077 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeUpdateSave]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeUpdateSave(com.yun.product.model.ProductType)
2019-01-31 09:59:52.077 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeDelete]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeDelete(java.lang.Integer,javax.servlet.http.HttpServletResponse) throws java.io.IOException
2019-01-31 09:59:52.079 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveStockList]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveStockController.productReceiveStocklist(java.lang.String,java.lang.String,org.springframework.ui.Model)
2019-01-31 09:59:52.079 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveStockPreAdd]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveStockController.productReceiveStockPreAdd()
2019-01-31 09:59:52.079 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveStockSave]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveStockController.productReceiveStockSave(com.yun.stock.model.ProductReceiveStock)
2019-01-31 09:59:52.080 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveStockDelete]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveStockController.productReceiveStockDelete(int)
2019-01-31 09:59:52.080 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveStockPreUpdate]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveStockController.productReceiveStockPreUpdate(int,org.springframework.ui.Model)
2019-01-31 09:59:52.080 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveStockUpdate]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveStockController.productReceiveStockUpdate(com.yun.stock.model.ProductReceiveStock)
2019-01-31 09:59:52.082 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveInSave]}" onto public void com.yun.stock.controller.ProductReceiveTradeController.receiveInSave(com.yun.stock.model.ProductReceiveTrade,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse) throws java.io.IOException
2019-01-31 09:59:52.082 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveIn]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveTradeController.receiveIn(org.springframework.ui.Model)
2019-01-31 09:59:52.082 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveReject]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveTradeController.receiveReject(org.springframework.ui.Model)
2019-01-31 09:59:52.083 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveRejectSave]}" onto public void com.yun.stock.controller.ProductReceiveTradeController.receiveRejectSave(com.yun.stock.model.ProductReceiveTrade,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse) throws java.io.IOException
2019-01-31 09:59:52.083 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveToCurrentSave]}" onto public void com.yun.stock.controller.ProductReceiveTradeController.productReceiveToCurrentSave(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse) throws java.lang.Exception
2019-01-31 09:59:52.084 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveStockToCurrentStock]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveTradeController.productReceiveStockToCurrentStock(int,org.springframework.ui.Model)
2019-01-31 09:59:52.085 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockList]}" onto public java.lang.String com.yun.stock.controller.ProductStockController.productStocklist(java.lang.String,java.lang.String,org.springframework.ui.Model)
2019-01-31 09:59:52.085 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockSave]}" onto public java.lang.String com.yun.stock.controller.ProductStockController.productStockSave(com.yun.stock.model.ProductStock)
2019-01-31 09:59:52.085 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockPreAdd]}" onto public java.lang.String com.yun.stock.controller.ProductStockController.productStockPreAdd()
2019-01-31 09:59:52.085 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockDelete]}" onto public java.lang.String com.yun.stock.controller.ProductStockController.productStockDelete(int)
2019-01-31 09:59:52.085 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockPreUpdate]}" onto public java.lang.String com.yun.stock.controller.ProductStockController.productStockPreUpdate(int,org.springframework.ui.Model)
2019-01-31 09:59:52.086 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockUpdate]}" onto public java.lang.String com.yun.stock.controller.ProductStockController.productStockUpdate(com.yun.stock.model.ProductStock)
2019-01-31 09:59:52.086 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/main]}" onto public java.lang.String com.yun.user.controller.MainController.main()
2019-01-31 09:59:52.087 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/userList]}" onto public java.lang.String com.yun.user.controller.UserController.userList(org.springframework.ui.Model)
2019-01-31 09:59:52.087 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/deleteUserInfo]}" onto public java.lang.String com.yun.user.controller.UserController.userDelete(int)
2019-01-31 09:59:52.087 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/userEdit]}" onto public java.lang.String com.yun.user.controller.UserController.userEdit()
2019-01-31 09:59:52.088 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/userSave]}" onto public java.lang.String com.yun.user.controller.UserController.userSave(com.yun.user.model.UserInfo)
2019-01-31 09:59:52.088 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/login]}" onto public void com.yun.user.controller.UserController.login(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse) throws java.io.IOException
2019-01-31 09:59:52.094 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/error]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> org.springframework.boot.autoconfigure.web.BasicErrorController.error(javax.servlet.http.HttpServletRequest)
2019-01-31 09:59:52.094 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/error],produces=[text/html]}" onto public org.springframework.web.servlet.ModelAndView org.springframework.boot.autoconfigure.web.BasicErrorController.errorHtml(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
2019-01-31 09:59:52.127 [main] INFO  o.s.web.servlet.handler.SimpleUrlHandlerMapping - Mapped URL path [/webjars/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-01-31 09:59:52.128 [main] INFO  o.s.web.servlet.handler.SimpleUrlHandlerMapping - Mapped URL path [/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-01-31 09:59:52.171 [main] INFO  o.s.web.servlet.handler.SimpleUrlHandlerMapping - Mapped URL path [/**/favicon.ico] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-01-31 09:59:52.469 [main] INFO  o.s.b.a.w.WebMvcAutoConfiguration$WelcomePageHandlerMapping - Adding welcome page: class path resource [static/index.html]
2019-01-31 09:59:52.730 [main] INFO  o.s.jmx.export.annotation.AnnotationMBeanExporter - Registering beans for JMX exposure on startup
2019-01-31 09:59:52.750 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2019-01-31 09:59:52.760 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2019-01-31 09:59:52.773 [main] INFO  org.apache.tomcat.util.net.NioSelectorPool - Using a shared selector for servlet write/read
2019-01-31 09:59:52.948 [main] INFO  o.s.b.c.e.tomcat.TomcatEmbeddedServletContainer - Tomcat started on port(s): 8080 (http)
2019-01-31 09:59:52.953 [main] INFO  com.yun.YunEbStockApplication - Started YunEbStockApplication in 4.721 seconds (JVM running for 5.899)
2019-01-31 10:00:34.503 [main] INFO  com.yun.YunEbStockApplication - Starting YunEbStockApplication on USER-20181202BJ with PID 5184 (E:\workspace\yun-eb-stock\target\classes started by Administrator in E:\workspace\yun-eb-stock)
2019-01-31 10:00:34.507 [main] DEBUG com.yun.YunEbStockApplication - Running with Spring Boot v1.5.9.RELEASE, Spring v4.3.13.RELEASE
2019-01-31 10:00:34.507 [main] INFO  com.yun.YunEbStockApplication - No active profile set, falling back to default profiles: default
2019-01-31 10:00:34.843 [background-preinit] INFO  org.hibernate.validator.internal.util.Version - HV000001: Hibernate Validator 5.3.6.Final
2019-01-31 10:00:34.987 [main] INFO  o.s.b.c.e.AnnotationConfigEmbeddedWebApplicationContext - Refreshing org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@6a28ffa4: startup date [Thu Jan 31 10:00:34 CST 2019]; root of context hierarchy
2019-01-31 10:00:36.605 [main] INFO  o.s.b.c.e.tomcat.TomcatEmbeddedServletContainer - Tomcat initialized with port(s): 8080 (http)
2019-01-31 10:00:36.616 [main] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2019-01-31 10:00:36.617 [main] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet Engine: Apache Tomcat/8.5.23
2019-01-31 10:00:36.717 [localhost-startStop-1] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2019-01-31 10:00:36.717 [localhost-startStop-1] INFO  org.springframework.web.context.ContextLoader - Root WebApplicationContext: initialization completed in 1730 ms
2019-01-31 10:00:36.870 [localhost-startStop-1] INFO  o.s.boot.web.servlet.FilterRegistrationBean - Mapping filter: 'characterEncodingFilter' to: [/*]
2019-01-31 10:00:36.871 [localhost-startStop-1] INFO  o.s.boot.web.servlet.FilterRegistrationBean - Mapping filter: 'hiddenHttpMethodFilter' to: [/*]
2019-01-31 10:00:36.871 [localhost-startStop-1] INFO  o.s.boot.web.servlet.FilterRegistrationBean - Mapping filter: 'httpPutFormContentFilter' to: [/*]
2019-01-31 10:00:36.871 [localhost-startStop-1] INFO  o.s.boot.web.servlet.FilterRegistrationBean - Mapping filter: 'requestContextFilter' to: [/*]
2019-01-31 10:00:36.871 [localhost-startStop-1] INFO  o.s.boot.web.servlet.FilterRegistrationBean - Mapping filter: 'loginFilter' to urls: [/*]
2019-01-31 10:00:36.872 [localhost-startStop-1] INFO  o.s.boot.web.servlet.ServletRegistrationBean - Mapping servlet: 'dispatcherServlet' to [/]
2019-01-31 10:00:37.685 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerAdapter - Looking for @ControllerAdvice: org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@6a28ffa4: startup date [Thu Jan 31 10:00:34 CST 2019]; root of context hierarchy
2019-01-31 10:00:37.741 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productList]}" onto public java.lang.String com.yun.product.controller.ProductController.productList(org.springframework.ui.Model,java.lang.String,java.lang.String,java.lang.String,java.lang.String)
2019-01-31 10:00:37.742 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productPreAdd]}" onto public java.lang.String com.yun.product.controller.ProductController.productPreAdd()
2019-01-31 10:00:37.743 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productSave]}" onto public java.lang.String com.yun.product.controller.ProductController.productSave(com.yun.product.model.Product)
2019-01-31 10:00:37.743 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productDelete]}" onto public java.lang.String com.yun.product.controller.ProductController.productDelete(int)
2019-01-31 10:00:37.743 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productPreUpdate]}" onto public java.lang.String com.yun.product.controller.ProductController.productPreUpdate(int,org.springframework.ui.Model)
2019-01-31 10:00:37.743 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productUpdate]}" onto public java.lang.String com.yun.product.controller.ProductController.productUpdate(com.yun.product.model.Product)
2019-01-31 10:00:37.744 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productListForAutoComplete]}" onto public java.util.List<com.yun.product.model.Product> com.yun.product.controller.ProductController.productListForAutoComplete(java.lang.String)
2019-01-31 10:00:37.744 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productListForStock]}" onto public java.util.List<com.yun.product.model.Product> com.yun.product.controller.ProductController.productListForStock()
2019-01-31 10:00:37.744 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productListForTrade]}" onto public java.util.List<com.yun.product.model.Product> com.yun.product.controller.ProductController.productListForTrade(java.lang.String)
2019-01-31 10:00:37.745 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/prodParamDelete]}" onto public java.lang.String com.yun.product.controller.ProductParamController.prodParamDelete(int)
2019-01-31 10:00:37.745 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/prodParamPreAdd]}" onto public java.lang.String com.yun.product.controller.ProductParamController.prodParamPreAdd(int,org.springframework.ui.Model)
2019-01-31 10:00:37.745 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/prodParamSave]}" onto public java.lang.String com.yun.product.controller.ProductParamController.prodParamSave(com.yun.product.model.ProductParameter)
2019-01-31 10:00:37.746 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/prodParamList]}" onto public java.lang.String com.yun.product.controller.ProductParamController.prodParamList(int)
2019-01-31 10:00:37.748 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeList]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeList(org.springframework.ui.Model)
2019-01-31 10:00:37.749 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeTree]}" onto public java.util.List<com.yun.product.model.ProductType> com.yun.product.controller.ProductTypeController.productTypeTree()
2019-01-31 10:00:37.749 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeEdit]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeEdit()
2019-01-31 10:00:37.749 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeSave]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeSave(com.yun.product.model.ProductType)
2019-01-31 10:00:37.749 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeUpdate]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeUpdate(java.lang.Integer,org.springframework.ui.Model)
2019-01-31 10:00:37.750 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeUpdateSave]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeUpdateSave(com.yun.product.model.ProductType)
2019-01-31 10:00:37.750 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeDelete]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeDelete(java.lang.Integer,javax.servlet.http.HttpServletResponse) throws java.io.IOException
2019-01-31 10:00:37.751 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveStockList]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveStockController.productReceiveStocklist(java.lang.String,java.lang.String,org.springframework.ui.Model)
2019-01-31 10:00:37.752 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveStockPreAdd]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveStockController.productReceiveStockPreAdd()
2019-01-31 10:00:37.752 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveStockSave]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveStockController.productReceiveStockSave(com.yun.stock.model.ProductReceiveStock)
2019-01-31 10:00:37.752 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveStockDelete]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveStockController.productReceiveStockDelete(int)
2019-01-31 10:00:37.752 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveStockPreUpdate]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveStockController.productReceiveStockPreUpdate(int,org.springframework.ui.Model)
2019-01-31 10:00:37.752 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveStockUpdate]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveStockController.productReceiveStockUpdate(com.yun.stock.model.ProductReceiveStock)
2019-01-31 10:00:37.753 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveInSave]}" onto public void com.yun.stock.controller.ProductReceiveTradeController.receiveInSave(com.yun.stock.model.ProductReceiveTrade,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse) throws java.io.IOException
2019-01-31 10:00:37.754 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveIn]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveTradeController.receiveIn(org.springframework.ui.Model)
2019-01-31 10:00:37.754 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveReject]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveTradeController.receiveReject(org.springframework.ui.Model)
2019-01-31 10:00:37.754 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveStockToCurrentStock]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveTradeController.productReceiveStockToCurrentStock(int,org.springframework.ui.Model)
2019-01-31 10:00:37.754 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveRejectSave]}" onto public void com.yun.stock.controller.ProductReceiveTradeController.receiveRejectSave(com.yun.stock.model.ProductReceiveTrade,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse) throws java.io.IOException
2019-01-31 10:00:37.754 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveToCurrentSave]}" onto public void com.yun.stock.controller.ProductReceiveTradeController.productReceiveToCurrentSave(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse) throws java.lang.Exception
2019-01-31 10:00:37.755 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockSave]}" onto public java.lang.String com.yun.stock.controller.ProductStockController.productStockSave(com.yun.stock.model.ProductStock)
2019-01-31 10:00:37.755 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockList]}" onto public java.lang.String com.yun.stock.controller.ProductStockController.productStocklist(java.lang.String,java.lang.String,org.springframework.ui.Model)
2019-01-31 10:00:37.756 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockPreAdd]}" onto public java.lang.String com.yun.stock.controller.ProductStockController.productStockPreAdd()
2019-01-31 10:00:37.756 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockDelete]}" onto public java.lang.String com.yun.stock.controller.ProductStockController.productStockDelete(int)
2019-01-31 10:00:37.756 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockPreUpdate]}" onto public java.lang.String com.yun.stock.controller.ProductStockController.productStockPreUpdate(int,org.springframework.ui.Model)
2019-01-31 10:00:37.756 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockUpdate]}" onto public java.lang.String com.yun.stock.controller.ProductStockController.productStockUpdate(com.yun.stock.model.ProductStock)
2019-01-31 10:00:37.757 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/main]}" onto public java.lang.String com.yun.user.controller.MainController.main()
2019-01-31 10:00:37.757 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/userList]}" onto public java.lang.String com.yun.user.controller.UserController.userList(org.springframework.ui.Model)
2019-01-31 10:00:37.758 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/deleteUserInfo]}" onto public java.lang.String com.yun.user.controller.UserController.userDelete(int)
2019-01-31 10:00:37.758 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/userEdit]}" onto public java.lang.String com.yun.user.controller.UserController.userEdit()
2019-01-31 10:00:37.758 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/userSave]}" onto public java.lang.String com.yun.user.controller.UserController.userSave(com.yun.user.model.UserInfo)
2019-01-31 10:00:37.758 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/login]}" onto public void com.yun.user.controller.UserController.login(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse) throws java.io.IOException
2019-01-31 10:00:37.762 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/error]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> org.springframework.boot.autoconfigure.web.BasicErrorController.error(javax.servlet.http.HttpServletRequest)
2019-01-31 10:00:37.762 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/error],produces=[text/html]}" onto public org.springframework.web.servlet.ModelAndView org.springframework.boot.autoconfigure.web.BasicErrorController.errorHtml(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
2019-01-31 10:00:37.793 [main] INFO  o.s.web.servlet.handler.SimpleUrlHandlerMapping - Mapped URL path [/webjars/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-01-31 10:00:37.794 [main] INFO  o.s.web.servlet.handler.SimpleUrlHandlerMapping - Mapped URL path [/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-01-31 10:00:37.834 [main] INFO  o.s.web.servlet.handler.SimpleUrlHandlerMapping - Mapped URL path [/**/favicon.ico] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-01-31 10:00:38.127 [main] INFO  o.s.b.a.w.WebMvcAutoConfiguration$WelcomePageHandlerMapping - Adding welcome page: class path resource [static/index.html]
2019-01-31 10:00:38.375 [main] INFO  o.s.jmx.export.annotation.AnnotationMBeanExporter - Registering beans for JMX exposure on startup
2019-01-31 10:00:38.403 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2019-01-31 10:00:38.419 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2019-01-31 10:00:38.436 [main] INFO  org.apache.tomcat.util.net.NioSelectorPool - Using a shared selector for servlet write/read
2019-01-31 10:00:38.618 [main] INFO  o.s.b.c.e.tomcat.TomcatEmbeddedServletContainer - Tomcat started on port(s): 8080 (http)
2019-01-31 10:00:38.625 [main] INFO  com.yun.YunEbStockApplication - Started YunEbStockApplication in 4.63 seconds (JVM running for 5.776)
2019-01-31 10:00:43.197 [http-nio-8080-exec-1] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring FrameworkServlet 'dispatcherServlet'
2019-01-31 10:00:43.198 [http-nio-8080-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - FrameworkServlet 'dispatcherServlet': initialization started
2019-01-31 10:00:43.217 [http-nio-8080-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - FrameworkServlet 'dispatcherServlet': initialization completed in 19 ms
2019-01-31 10:00:43.228 [http-nio-8080-exec-1] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/main
2019-01-31 10:00:43.669 [http-nio-8080-exec-2] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/css/bootstrap.min.css
2019-01-31 10:00:43.670 [http-nio-8080-exec-5] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/js/bootstrap.min.js
2019-01-31 10:00:43.671 [http-nio-8080-exec-3] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/css/site.css
2019-01-31 10:00:43.675 [http-nio-8080-exec-4] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/js/jquery.min.js
2019-01-31 10:00:43.716 [http-nio-8080-exec-6] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/default.html
2019-01-31 10:00:43.740 [http-nio-8080-exec-7] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/favicon.ico
2019-01-31 10:00:46.198 [http-nio-8080-exec-8] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/main
2019-01-31 10:00:46.269 [http-nio-8080-exec-9] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/css/bootstrap.min.css
2019-01-31 10:00:46.278 [http-nio-8080-exec-9] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/css/site.css
2019-01-31 10:00:46.282 [http-nio-8080-exec-9] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/js/jquery.min.js
2019-01-31 10:00:46.287 [http-nio-8080-exec-1] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/js/bootstrap.min.js
2019-01-31 10:00:46.310 [http-nio-8080-exec-3] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/default.html
2019-01-31 10:00:46.329 [http-nio-8080-exec-2] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/favicon.ico
2019-01-31 10:00:49.715 [http-nio-8080-exec-4] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/main
2019-01-31 10:00:49.779 [http-nio-8080-exec-6] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/css/bootstrap.min.css
2019-01-31 10:00:49.781 [http-nio-8080-exec-7] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/css/site.css
2019-01-31 10:00:49.784 [http-nio-8080-exec-6] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/js/bootstrap.min.js
2019-01-31 10:00:49.783 [http-nio-8080-exec-8] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/js/jquery.min.js
2019-01-31 10:00:49.811 [http-nio-8080-exec-5] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/default.html
2019-01-31 10:00:49.832 [http-nio-8080-exec-9] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/favicon.ico
2019-01-31 10:00:50.487 [http-nio-8080-exec-1] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/main
2019-01-31 10:00:50.548 [http-nio-8080-exec-2] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/css/site.css
2019-01-31 10:00:50.548 [http-nio-8080-exec-3] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/css/bootstrap.min.css
2019-01-31 10:00:50.550 [http-nio-8080-exec-10] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/js/bootstrap.min.js
2019-01-31 10:00:50.549 [http-nio-8080-exec-4] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/js/jquery.min.js
2019-01-31 10:00:50.579 [http-nio-8080-exec-6] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/default.html
2019-01-31 10:00:50.601 [http-nio-8080-exec-8] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/favicon.ico
2019-01-31 10:00:53.711 [http-nio-8080-exec-7] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productReceiveStockList
2019-01-31 10:00:53.731 [http-nio-8080-exec-7] DEBUG c.y.stock.controller.ProductReceiveStockController - 跳转到待收库存查询控制器
2019-01-31 10:00:54.027 [http-nio-8080-exec-7] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - ==>  Preparing: select count(*) from product_receive_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 
2019-01-31 10:00:54.047 [http-nio-8080-exec-7] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - ==> Parameters: 
2019-01-31 10:00:54.058 [http-nio-8080-exec-7] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - <==      Total: 1
2019-01-31 10:00:54.067 [http-nio-8080-exec-7] DEBUG c.y.s.d.P.findProductReceiveStockList - ==>  Preparing: select ps.prod_rece_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_receive_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 order by p.prod_id,pp.prod_param_id limit ?,? 
2019-01-31 10:00:54.068 [http-nio-8080-exec-7] DEBUG c.y.s.d.P.findProductReceiveStockList - ==> Parameters: 0(Integer), 5(Integer)
2019-01-31 10:00:54.071 [http-nio-8080-exec-7] DEBUG c.y.s.d.P.findProductReceiveStockList - <==      Total: 2
2019-01-31 10:00:54.073 [http-nio-8080-exec-7] DEBUG c.y.stock.controller.ProductReceiveStockController - 转到待收库存页面
2019-01-31 10:00:56.413 [http-nio-8080-exec-5] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/main
2019-01-31 10:00:56.468 [http-nio-8080-exec-4] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/js/bootstrap.min.js
2019-01-31 10:00:56.468 [http-nio-8080-exec-2] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/css/site.css
2019-01-31 10:00:56.467 [http-nio-8080-exec-9] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/css/bootstrap.min.css
2019-01-31 10:00:56.474 [http-nio-8080-exec-1] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/js/jquery.min.js
2019-01-31 10:00:56.505 [http-nio-8080-exec-3] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/default.html
2019-01-31 10:00:56.524 [http-nio-8080-exec-10] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/favicon.ico
2019-01-31 10:00:57.426 [http-nio-8080-exec-6] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/main
2019-01-31 10:00:57.487 [http-nio-8080-exec-8] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/css/bootstrap.min.css
2019-01-31 10:00:57.487 [http-nio-8080-exec-7] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/js/jquery.min.js
2019-01-31 10:00:57.488 [http-nio-8080-exec-5] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/js/bootstrap.min.js
2019-01-31 10:00:57.490 [http-nio-8080-exec-4] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/css/site.css
2019-01-31 10:00:57.515 [http-nio-8080-exec-2] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/default.html
2019-01-31 10:00:57.548 [http-nio-8080-exec-9] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/favicon.ico
2019-01-31 10:01:27.721 [main] INFO  com.yun.YunEbStockApplication - Starting YunEbStockApplication on USER-20181202BJ with PID 4208 (E:\workspace\yun-eb-stock\target\classes started by Administrator in E:\workspace\yun-eb-stock)
2019-01-31 10:01:27.726 [main] DEBUG com.yun.YunEbStockApplication - Running with Spring Boot v1.5.9.RELEASE, Spring v4.3.13.RELEASE
2019-01-31 10:01:27.727 [main] INFO  com.yun.YunEbStockApplication - No active profile set, falling back to default profiles: default
2019-01-31 10:01:28.230 [background-preinit] INFO  org.hibernate.validator.internal.util.Version - HV000001: Hibernate Validator 5.3.6.Final
2019-01-31 10:01:28.286 [main] INFO  o.s.b.c.e.AnnotationConfigEmbeddedWebApplicationContext - Refreshing org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@6a28ffa4: startup date [Thu Jan 31 10:01:28 CST 2019]; root of context hierarchy
2019-01-31 10:01:29.997 [main] INFO  o.s.b.c.e.tomcat.TomcatEmbeddedServletContainer - Tomcat initialized with port(s): 8080 (http)
2019-01-31 10:01:30.008 [main] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2019-01-31 10:01:30.009 [main] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet Engine: Apache Tomcat/8.5.23
2019-01-31 10:01:30.135 [localhost-startStop-1] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2019-01-31 10:01:30.135 [localhost-startStop-1] INFO  org.springframework.web.context.ContextLoader - Root WebApplicationContext: initialization completed in 1849 ms
2019-01-31 10:01:30.302 [localhost-startStop-1] INFO  o.s.boot.web.servlet.FilterRegistrationBean - Mapping filter: 'characterEncodingFilter' to: [/*]
2019-01-31 10:01:30.302 [localhost-startStop-1] INFO  o.s.boot.web.servlet.FilterRegistrationBean - Mapping filter: 'hiddenHttpMethodFilter' to: [/*]
2019-01-31 10:01:30.302 [localhost-startStop-1] INFO  o.s.boot.web.servlet.FilterRegistrationBean - Mapping filter: 'httpPutFormContentFilter' to: [/*]
2019-01-31 10:01:30.302 [localhost-startStop-1] INFO  o.s.boot.web.servlet.FilterRegistrationBean - Mapping filter: 'requestContextFilter' to: [/*]
2019-01-31 10:01:30.303 [localhost-startStop-1] INFO  o.s.boot.web.servlet.FilterRegistrationBean - Mapping filter: 'loginFilter' to urls: [/*]
2019-01-31 10:01:30.303 [localhost-startStop-1] INFO  o.s.boot.web.servlet.ServletRegistrationBean - Mapping servlet: 'dispatcherServlet' to [/]
2019-01-31 10:01:31.110 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerAdapter - Looking for @ControllerAdvice: org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@6a28ffa4: startup date [Thu Jan 31 10:01:28 CST 2019]; root of context hierarchy
2019-01-31 10:01:31.167 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productListForAutoComplete]}" onto public java.util.List<com.yun.product.model.Product> com.yun.product.controller.ProductController.productListForAutoComplete(java.lang.String)
2019-01-31 10:01:31.168 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productListForStock]}" onto public java.util.List<com.yun.product.model.Product> com.yun.product.controller.ProductController.productListForStock()
2019-01-31 10:01:31.169 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productListForTrade]}" onto public java.util.List<com.yun.product.model.Product> com.yun.product.controller.ProductController.productListForTrade(java.lang.String)
2019-01-31 10:01:31.169 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productList]}" onto public java.lang.String com.yun.product.controller.ProductController.productList(org.springframework.ui.Model,java.lang.String,java.lang.String,java.lang.String,java.lang.String)
2019-01-31 10:01:31.169 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productPreAdd]}" onto public java.lang.String com.yun.product.controller.ProductController.productPreAdd()
2019-01-31 10:01:31.170 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productSave]}" onto public java.lang.String com.yun.product.controller.ProductController.productSave(com.yun.product.model.Product)
2019-01-31 10:01:31.170 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productDelete]}" onto public java.lang.String com.yun.product.controller.ProductController.productDelete(int)
2019-01-31 10:01:31.170 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productPreUpdate]}" onto public java.lang.String com.yun.product.controller.ProductController.productPreUpdate(int,org.springframework.ui.Model)
2019-01-31 10:01:31.170 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productUpdate]}" onto public java.lang.String com.yun.product.controller.ProductController.productUpdate(com.yun.product.model.Product)
2019-01-31 10:01:31.171 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/prodParamDelete]}" onto public java.lang.String com.yun.product.controller.ProductParamController.prodParamDelete(int)
2019-01-31 10:01:31.171 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/prodParamPreAdd]}" onto public java.lang.String com.yun.product.controller.ProductParamController.prodParamPreAdd(int,org.springframework.ui.Model)
2019-01-31 10:01:31.172 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/prodParamSave]}" onto public java.lang.String com.yun.product.controller.ProductParamController.prodParamSave(com.yun.product.model.ProductParameter)
2019-01-31 10:01:31.172 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/prodParamList]}" onto public java.lang.String com.yun.product.controller.ProductParamController.prodParamList(int)
2019-01-31 10:01:31.174 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeUpdate]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeUpdate(java.lang.Integer,org.springframework.ui.Model)
2019-01-31 10:01:31.175 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeUpdateSave]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeUpdateSave(com.yun.product.model.ProductType)
2019-01-31 10:01:31.175 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeDelete]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeDelete(java.lang.Integer,javax.servlet.http.HttpServletResponse) throws java.io.IOException
2019-01-31 10:01:31.175 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeList]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeList(org.springframework.ui.Model)
2019-01-31 10:01:31.175 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeTree]}" onto public java.util.List<com.yun.product.model.ProductType> com.yun.product.controller.ProductTypeController.productTypeTree()
2019-01-31 10:01:31.176 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeEdit]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeEdit()
2019-01-31 10:01:31.176 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeSave]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeSave(com.yun.product.model.ProductType)
2019-01-31 10:01:31.177 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveStockList]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveStockController.productReceiveStocklist(java.lang.String,java.lang.String,org.springframework.ui.Model)
2019-01-31 10:01:31.177 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveStockPreAdd]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveStockController.productReceiveStockPreAdd()
2019-01-31 10:01:31.177 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveStockSave]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveStockController.productReceiveStockSave(com.yun.stock.model.ProductReceiveStock)
2019-01-31 10:01:31.177 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveStockDelete]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveStockController.productReceiveStockDelete(int)
2019-01-31 10:01:31.178 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveStockPreUpdate]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveStockController.productReceiveStockPreUpdate(int,org.springframework.ui.Model)
2019-01-31 10:01:31.178 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveStockUpdate]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveStockController.productReceiveStockUpdate(com.yun.stock.model.ProductReceiveStock)
2019-01-31 10:01:31.179 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveStockToCurrentStock]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveTradeController.productReceiveStockToCurrentStock(int,org.springframework.ui.Model)
2019-01-31 10:01:31.179 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveInSave]}" onto public void com.yun.stock.controller.ProductReceiveTradeController.receiveInSave(com.yun.stock.model.ProductReceiveTrade,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse) throws java.io.IOException
2019-01-31 10:01:31.179 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveIn]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveTradeController.receiveIn(org.springframework.ui.Model)
2019-01-31 10:01:31.180 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveReject]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveTradeController.receiveReject(org.springframework.ui.Model)
2019-01-31 10:01:31.180 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveRejectSave]}" onto public void com.yun.stock.controller.ProductReceiveTradeController.receiveRejectSave(com.yun.stock.model.ProductReceiveTrade,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse) throws java.io.IOException
2019-01-31 10:01:31.180 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveToCurrentSave]}" onto public void com.yun.stock.controller.ProductReceiveTradeController.productReceiveToCurrentSave(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse) throws java.lang.Exception
2019-01-31 10:01:31.181 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockSave]}" onto public java.lang.String com.yun.stock.controller.ProductStockController.productStockSave(com.yun.stock.model.ProductStock)
2019-01-31 10:01:31.181 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockList]}" onto public java.lang.String com.yun.stock.controller.ProductStockController.productStocklist(java.lang.String,java.lang.String,org.springframework.ui.Model)
2019-01-31 10:01:31.181 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockPreAdd]}" onto public java.lang.String com.yun.stock.controller.ProductStockController.productStockPreAdd()
2019-01-31 10:01:31.181 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockDelete]}" onto public java.lang.String com.yun.stock.controller.ProductStockController.productStockDelete(int)
2019-01-31 10:01:31.182 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockPreUpdate]}" onto public java.lang.String com.yun.stock.controller.ProductStockController.productStockPreUpdate(int,org.springframework.ui.Model)
2019-01-31 10:01:31.182 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockUpdate]}" onto public java.lang.String com.yun.stock.controller.ProductStockController.productStockUpdate(com.yun.stock.model.ProductStock)
2019-01-31 10:01:31.182 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/main]}" onto public java.lang.String com.yun.user.controller.MainController.main()
2019-01-31 10:01:31.183 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/userList]}" onto public java.lang.String com.yun.user.controller.UserController.userList(org.springframework.ui.Model)
2019-01-31 10:01:31.183 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/deleteUserInfo]}" onto public java.lang.String com.yun.user.controller.UserController.userDelete(int)
2019-01-31 10:01:31.183 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/userEdit]}" onto public java.lang.String com.yun.user.controller.UserController.userEdit()
2019-01-31 10:01:31.183 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/userSave]}" onto public java.lang.String com.yun.user.controller.UserController.userSave(com.yun.user.model.UserInfo)
2019-01-31 10:01:31.184 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/login]}" onto public void com.yun.user.controller.UserController.login(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse) throws java.io.IOException
2019-01-31 10:01:31.187 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/error]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> org.springframework.boot.autoconfigure.web.BasicErrorController.error(javax.servlet.http.HttpServletRequest)
2019-01-31 10:01:31.187 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/error],produces=[text/html]}" onto public org.springframework.web.servlet.ModelAndView org.springframework.boot.autoconfigure.web.BasicErrorController.errorHtml(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
2019-01-31 10:01:31.220 [main] INFO  o.s.web.servlet.handler.SimpleUrlHandlerMapping - Mapped URL path [/webjars/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-01-31 10:01:31.220 [main] INFO  o.s.web.servlet.handler.SimpleUrlHandlerMapping - Mapped URL path [/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-01-31 10:01:31.262 [main] INFO  o.s.web.servlet.handler.SimpleUrlHandlerMapping - Mapped URL path [/**/favicon.ico] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-01-31 10:01:31.554 [main] INFO  o.s.b.a.w.WebMvcAutoConfiguration$WelcomePageHandlerMapping - Adding welcome page: class path resource [static/index.html]
2019-01-31 10:01:31.814 [main] INFO  o.s.jmx.export.annotation.AnnotationMBeanExporter - Registering beans for JMX exposure on startup
2019-01-31 10:01:31.834 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2019-01-31 10:01:31.845 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2019-01-31 10:01:31.857 [main] INFO  org.apache.tomcat.util.net.NioSelectorPool - Using a shared selector for servlet write/read
2019-01-31 10:01:32.032 [main] INFO  o.s.b.c.e.tomcat.TomcatEmbeddedServletContainer - Tomcat started on port(s): 8080 (http)
2019-01-31 10:01:32.042 [main] INFO  com.yun.YunEbStockApplication - Started YunEbStockApplication in 4.807 seconds (JVM running for 5.991)
2019-01-31 10:01:33.717 [http-nio-8080-exec-1] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring FrameworkServlet 'dispatcherServlet'
2019-01-31 10:01:33.718 [http-nio-8080-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - FrameworkServlet 'dispatcherServlet': initialization started
2019-01-31 10:01:33.738 [http-nio-8080-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - FrameworkServlet 'dispatcherServlet': initialization completed in 20 ms
2019-01-31 10:01:33.747 [http-nio-8080-exec-1] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/main
2019-01-31 10:01:35.053 [http-nio-8080-exec-2] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/login
2019-01-31 10:01:35.346 [http-nio-8080-exec-2] DEBUG c.y.user.dao.UserInfoDao.findUserInfoByNameAndPass - ==>  Preparing: select * from user_info where login_name=? and login_pass=? 
2019-01-31 10:01:35.366 [http-nio-8080-exec-2] DEBUG c.y.user.dao.UserInfoDao.findUserInfoByNameAndPass - ==> Parameters: null, null
2019-01-31 10:01:35.375 [http-nio-8080-exec-2] DEBUG c.y.user.dao.UserInfoDao.findUserInfoByNameAndPass - <==      Total: 0
2019-01-31 10:01:40.976 [http-nio-8080-exec-3] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/login
2019-01-31 10:01:40.999 [http-nio-8080-exec-3] DEBUG c.y.user.dao.UserInfoDao.findUserInfoByNameAndPass - ==>  Preparing: select * from user_info where login_name=? and login_pass=? 
2019-01-31 10:01:41.000 [http-nio-8080-exec-3] DEBUG c.y.user.dao.UserInfoDao.findUserInfoByNameAndPass - ==> Parameters: admin(String), 123(String)
2019-01-31 10:01:41.003 [http-nio-8080-exec-3] DEBUG c.y.user.dao.UserInfoDao.findUserInfoByNameAndPass - <==      Total: 1
2019-01-31 10:01:41.015 [http-nio-8080-exec-4] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/main
2019-01-31 10:02:02.042 [http-nio-8080-exec-5] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productReceiveStockList
2019-01-31 10:02:02.049 [http-nio-8080-exec-5] DEBUG c.y.stock.controller.ProductReceiveStockController - 跳转到待收库存查询控制器
2019-01-31 10:02:02.092 [http-nio-8080-exec-5] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - ==>  Preparing: select count(*) from product_receive_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 
2019-01-31 10:02:02.093 [http-nio-8080-exec-5] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - ==> Parameters: 
2019-01-31 10:02:02.094 [http-nio-8080-exec-5] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - <==      Total: 1
2019-01-31 10:02:02.102 [http-nio-8080-exec-5] DEBUG c.y.s.d.P.findProductReceiveStockList - ==>  Preparing: select ps.prod_rece_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_receive_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 order by p.prod_id,pp.prod_param_id limit ?,? 
2019-01-31 10:02:02.102 [http-nio-8080-exec-5] DEBUG c.y.s.d.P.findProductReceiveStockList - ==> Parameters: 0(Integer), 5(Integer)
2019-01-31 10:02:02.104 [http-nio-8080-exec-5] DEBUG c.y.s.d.P.findProductReceiveStockList - <==      Total: 2
2019-01-31 10:02:02.106 [http-nio-8080-exec-5] DEBUG c.y.stock.controller.ProductReceiveStockController - 转到待收库存页面
2019-01-31 10:02:05.567 [http-nio-8080-exec-6] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productReceiveStockToCurrentStock
2019-01-31 10:02:05.579 [http-nio-8080-exec-6] DEBUG c.y.s.d.P.findProductReceiveStockById - ==>  Preparing: select ps.prod_rece_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_receive_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 and ps.prod_rece_stock_id=? 
2019-01-31 10:02:05.579 [http-nio-8080-exec-6] DEBUG c.y.s.d.P.findProductReceiveStockById - ==> Parameters: 7(Integer)
2019-01-31 10:02:05.583 [http-nio-8080-exec-6] DEBUG c.y.s.d.P.findProductReceiveStockById - <==      Total: 1
2019-01-31 10:02:15.139 [http-nio-8080-exec-7] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productReceiveToCurrentSave
2019-01-31 10:02:15.149 [http-nio-8080-exec-7] DEBUG c.y.s.d.P.findProductReceiveStockById - ==>  Preparing: select ps.prod_rece_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_receive_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 and ps.prod_rece_stock_id=? 
2019-01-31 10:02:15.150 [http-nio-8080-exec-7] DEBUG c.y.s.d.P.findProductReceiveStockById - ==> Parameters: 7(Integer)
2019-01-31 10:02:15.154 [http-nio-8080-exec-7] DEBUG c.y.s.d.P.findProductReceiveStockById - <==      Total: 1
2019-01-31 10:02:15.158 [http-nio-8080-exec-7] DEBUG c.y.s.d.P.insertProductReceiveTrade - ==>  Preparing: insert into product_receive_trade(trade_date,prod_id,prod_param_id,begin_num,trade_add,end_num,oper_id)values(?,?,?,?,?,?,?) 
2019-01-31 10:02:15.163 [http-nio-8080-exec-7] DEBUG c.y.s.d.P.insertProductReceiveTrade - ==> Parameters: 2019-01-31 10:02:05.0(Timestamp), 2(Integer), 8(Integer), 10(Integer), null, 7(Integer), 5(Integer)
2019-01-31 10:02:15.204 [http-nio-8080-exec-7] DEBUG c.y.s.d.P.insertProductReceiveTrade - <==    Updates: 1
2019-01-31 10:02:15.205 [http-nio-8080-exec-7] DEBUG c.y.s.d.P.findProductStockByProdIdAndProdParamId - ==>  Preparing: select ps.prod_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 and p.prod_id=? and pp.prodParamId=? 
2019-01-31 10:02:15.206 [http-nio-8080-exec-7] DEBUG c.y.s.d.P.findProductStockByProdIdAndProdParamId - ==> Parameters: 2(Integer), 8(Integer)
2019-01-31 10:02:15.215 [http-nio-8080-exec-7] INFO  o.s.beans.factory.xml.XmlBeanDefinitionReader - Loading XML bean definitions from class path resource [org/springframework/jdbc/support/sql-error-codes.xml]
2019-01-31 10:02:15.263 [http-nio-8080-exec-7] INFO  o.s.jdbc.support.SQLErrorCodesFactory - SQLErrorCodes loaded: [DB2, Derby, H2, HSQL, Informix, MS-SQL, MySQL, Oracle, PostgreSQL, Sybase, Hana]
2019-01-31 10:02:15.268 [http-nio-8080-exec-7] DEBUG com.yun.stock.service.ProductStockService - org.springframework.jdbc.BadSqlGrammarException: 
### Error querying database.  Cause: com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Unknown column 'pp.prodParamId' in 'where clause'
### The error may exist in com/yun/stock/dao/ProductStockDao.java (best guess)
### The error may involve com.yun.stock.dao.ProductStockDao.findProductStockByProdIdAndProdParamId-Inline
### The error occurred while setting parameters
### SQL: select ps.prod_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name  from product_stock ps inner join product p on ps.prod_id=p.prod_id  left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 and p.prod_id=? and pp.prodParamId=?
### Cause: com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Unknown column 'pp.prodParamId' in 'where clause'
; bad SQL grammar []; nested exception is com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Unknown column 'pp.prodParamId' in 'where clause'
2019-01-31 10:02:15.306 [http-nio-8080-exec-7] DEBUG c.y.stock.controller.ProductReceiveTradeController - result:
### Error querying database.  Cause: com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Unknown column 'pp.prodParamId' in 'where clause'
### The error may exist in com/yun/stock/dao/ProductStockDao.java (best guess)
### The error may involve com.yun.stock.dao.ProductStockDao.findProductStockByProdIdAndProdParamId-Inline
### The error occurred while setting parameters
### SQL: select ps.prod_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name  from product_stock ps inner join product p on ps.prod_id=p.prod_id  left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 and p.prod_id=? and pp.prodParamId=?
### Cause: com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Unknown column 'pp.prodParamId' in 'where clause'
; bad SQL grammar []; nested exception is com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Unknown column 'pp.prodParamId' in 'where clause'
2019-01-31 10:03:36.855 [main] INFO  com.yun.YunEbStockApplication - Starting YunEbStockApplication on USER-20181202BJ with PID 6204 (E:\workspace\yun-eb-stock\target\classes started by Administrator in E:\workspace\yun-eb-stock)
2019-01-31 10:03:36.859 [main] DEBUG com.yun.YunEbStockApplication - Running with Spring Boot v1.5.9.RELEASE, Spring v4.3.13.RELEASE
2019-01-31 10:03:36.860 [main] INFO  com.yun.YunEbStockApplication - No active profile set, falling back to default profiles: default
2019-01-31 10:03:37.335 [main] INFO  o.s.b.c.e.AnnotationConfigEmbeddedWebApplicationContext - Refreshing org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@6a28ffa4: startup date [Thu Jan 31 10:03:37 CST 2019]; root of context hierarchy
2019-01-31 10:03:37.648 [background-preinit] INFO  org.hibernate.validator.internal.util.Version - HV000001: Hibernate Validator 5.3.6.Final
2019-01-31 10:03:38.998 [main] INFO  o.s.b.c.e.tomcat.TomcatEmbeddedServletContainer - Tomcat initialized with port(s): 8080 (http)
2019-01-31 10:03:39.008 [main] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2019-01-31 10:03:39.009 [main] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet Engine: Apache Tomcat/8.5.23
2019-01-31 10:03:39.111 [localhost-startStop-1] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2019-01-31 10:03:39.111 [localhost-startStop-1] INFO  org.springframework.web.context.ContextLoader - Root WebApplicationContext: initialization completed in 1776 ms
2019-01-31 10:03:39.272 [localhost-startStop-1] INFO  o.s.boot.web.servlet.FilterRegistrationBean - Mapping filter: 'characterEncodingFilter' to: [/*]
2019-01-31 10:03:39.272 [localhost-startStop-1] INFO  o.s.boot.web.servlet.FilterRegistrationBean - Mapping filter: 'hiddenHttpMethodFilter' to: [/*]
2019-01-31 10:03:39.272 [localhost-startStop-1] INFO  o.s.boot.web.servlet.FilterRegistrationBean - Mapping filter: 'httpPutFormContentFilter' to: [/*]
2019-01-31 10:03:39.273 [localhost-startStop-1] INFO  o.s.boot.web.servlet.FilterRegistrationBean - Mapping filter: 'requestContextFilter' to: [/*]
2019-01-31 10:03:39.273 [localhost-startStop-1] INFO  o.s.boot.web.servlet.FilterRegistrationBean - Mapping filter: 'loginFilter' to urls: [/*]
2019-01-31 10:03:39.273 [localhost-startStop-1] INFO  o.s.boot.web.servlet.ServletRegistrationBean - Mapping servlet: 'dispatcherServlet' to [/]
2019-01-31 10:03:40.124 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerAdapter - Looking for @ControllerAdvice: org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@6a28ffa4: startup date [Thu Jan 31 10:03:37 CST 2019]; root of context hierarchy
2019-01-31 10:03:40.178 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productPreAdd]}" onto public java.lang.String com.yun.product.controller.ProductController.productPreAdd()
2019-01-31 10:03:40.181 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productList]}" onto public java.lang.String com.yun.product.controller.ProductController.productList(org.springframework.ui.Model,java.lang.String,java.lang.String,java.lang.String,java.lang.String)
2019-01-31 10:03:40.181 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productSave]}" onto public java.lang.String com.yun.product.controller.ProductController.productSave(com.yun.product.model.Product)
2019-01-31 10:03:40.181 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productDelete]}" onto public java.lang.String com.yun.product.controller.ProductController.productDelete(int)
2019-01-31 10:03:40.181 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productPreUpdate]}" onto public java.lang.String com.yun.product.controller.ProductController.productPreUpdate(int,org.springframework.ui.Model)
2019-01-31 10:03:40.182 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productUpdate]}" onto public java.lang.String com.yun.product.controller.ProductController.productUpdate(com.yun.product.model.Product)
2019-01-31 10:03:40.182 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productListForTrade]}" onto public java.util.List<com.yun.product.model.Product> com.yun.product.controller.ProductController.productListForTrade(java.lang.String)
2019-01-31 10:03:40.182 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productListForAutoComplete]}" onto public java.util.List<com.yun.product.model.Product> com.yun.product.controller.ProductController.productListForAutoComplete(java.lang.String)
2019-01-31 10:03:40.182 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productListForStock]}" onto public java.util.List<com.yun.product.model.Product> com.yun.product.controller.ProductController.productListForStock()
2019-01-31 10:03:40.184 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/prodParamDelete]}" onto public java.lang.String com.yun.product.controller.ProductParamController.prodParamDelete(int)
2019-01-31 10:03:40.184 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/prodParamPreAdd]}" onto public java.lang.String com.yun.product.controller.ProductParamController.prodParamPreAdd(int,org.springframework.ui.Model)
2019-01-31 10:03:40.184 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/prodParamSave]}" onto public java.lang.String com.yun.product.controller.ProductParamController.prodParamSave(com.yun.product.model.ProductParameter)
2019-01-31 10:03:40.185 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/prodParamList]}" onto public java.lang.String com.yun.product.controller.ProductParamController.prodParamList(int)
2019-01-31 10:03:40.188 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeList]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeList(org.springframework.ui.Model)
2019-01-31 10:03:40.189 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeTree]}" onto public java.util.List<com.yun.product.model.ProductType> com.yun.product.controller.ProductTypeController.productTypeTree()
2019-01-31 10:03:40.189 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeEdit]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeEdit()
2019-01-31 10:03:40.189 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeSave]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeSave(com.yun.product.model.ProductType)
2019-01-31 10:03:40.190 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeUpdate]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeUpdate(java.lang.Integer,org.springframework.ui.Model)
2019-01-31 10:03:40.190 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeUpdateSave]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeUpdateSave(com.yun.product.model.ProductType)
2019-01-31 10:03:40.190 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeDelete]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeDelete(java.lang.Integer,javax.servlet.http.HttpServletResponse) throws java.io.IOException
2019-01-31 10:03:40.192 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveStockList]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveStockController.productReceiveStocklist(java.lang.String,java.lang.String,org.springframework.ui.Model)
2019-01-31 10:03:40.192 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveStockPreAdd]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveStockController.productReceiveStockPreAdd()
2019-01-31 10:03:40.193 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveStockSave]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveStockController.productReceiveStockSave(com.yun.stock.model.ProductReceiveStock)
2019-01-31 10:03:40.193 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveStockDelete]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveStockController.productReceiveStockDelete(int)
2019-01-31 10:03:40.193 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveStockPreUpdate]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveStockController.productReceiveStockPreUpdate(int,org.springframework.ui.Model)
2019-01-31 10:03:40.193 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveStockUpdate]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveStockController.productReceiveStockUpdate(com.yun.stock.model.ProductReceiveStock)
2019-01-31 10:03:40.195 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveInSave]}" onto public void com.yun.stock.controller.ProductReceiveTradeController.receiveInSave(com.yun.stock.model.ProductReceiveTrade,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse) throws java.io.IOException
2019-01-31 10:03:40.195 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveIn]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveTradeController.receiveIn(org.springframework.ui.Model)
2019-01-31 10:03:40.195 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveReject]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveTradeController.receiveReject(org.springframework.ui.Model)
2019-01-31 10:03:40.196 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveStockToCurrentStock]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveTradeController.productReceiveStockToCurrentStock(int,org.springframework.ui.Model)
2019-01-31 10:03:40.196 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveRejectSave]}" onto public void com.yun.stock.controller.ProductReceiveTradeController.receiveRejectSave(com.yun.stock.model.ProductReceiveTrade,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse) throws java.io.IOException
2019-01-31 10:03:40.196 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveToCurrentSave]}" onto public void com.yun.stock.controller.ProductReceiveTradeController.productReceiveToCurrentSave(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse) throws java.lang.Exception
2019-01-31 10:03:40.198 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockSave]}" onto public java.lang.String com.yun.stock.controller.ProductStockController.productStockSave(com.yun.stock.model.ProductStock)
2019-01-31 10:03:40.198 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockList]}" onto public java.lang.String com.yun.stock.controller.ProductStockController.productStocklist(java.lang.String,java.lang.String,org.springframework.ui.Model)
2019-01-31 10:03:40.198 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockPreAdd]}" onto public java.lang.String com.yun.stock.controller.ProductStockController.productStockPreAdd()
2019-01-31 10:03:40.199 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockDelete]}" onto public java.lang.String com.yun.stock.controller.ProductStockController.productStockDelete(int)
2019-01-31 10:03:40.199 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockPreUpdate]}" onto public java.lang.String com.yun.stock.controller.ProductStockController.productStockPreUpdate(int,org.springframework.ui.Model)
2019-01-31 10:03:40.199 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockUpdate]}" onto public java.lang.String com.yun.stock.controller.ProductStockController.productStockUpdate(com.yun.stock.model.ProductStock)
2019-01-31 10:03:40.200 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/main]}" onto public java.lang.String com.yun.user.controller.MainController.main()
2019-01-31 10:03:40.201 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/userList]}" onto public java.lang.String com.yun.user.controller.UserController.userList(org.springframework.ui.Model)
2019-01-31 10:03:40.201 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/login]}" onto public void com.yun.user.controller.UserController.login(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse) throws java.io.IOException
2019-01-31 10:03:40.202 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/userEdit]}" onto public java.lang.String com.yun.user.controller.UserController.userEdit()
2019-01-31 10:03:40.202 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/userSave]}" onto public java.lang.String com.yun.user.controller.UserController.userSave(com.yun.user.model.UserInfo)
2019-01-31 10:03:40.202 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/deleteUserInfo]}" onto public java.lang.String com.yun.user.controller.UserController.userDelete(int)
2019-01-31 10:03:40.205 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/error]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> org.springframework.boot.autoconfigure.web.BasicErrorController.error(javax.servlet.http.HttpServletRequest)
2019-01-31 10:03:40.205 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/error],produces=[text/html]}" onto public org.springframework.web.servlet.ModelAndView org.springframework.boot.autoconfigure.web.BasicErrorController.errorHtml(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
2019-01-31 10:03:40.238 [main] INFO  o.s.web.servlet.handler.SimpleUrlHandlerMapping - Mapped URL path [/webjars/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-01-31 10:03:40.239 [main] INFO  o.s.web.servlet.handler.SimpleUrlHandlerMapping - Mapped URL path [/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-01-31 10:03:40.279 [main] INFO  o.s.web.servlet.handler.SimpleUrlHandlerMapping - Mapped URL path [/**/favicon.ico] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-01-31 10:03:40.570 [main] INFO  o.s.b.a.w.WebMvcAutoConfiguration$WelcomePageHandlerMapping - Adding welcome page: class path resource [static/index.html]
2019-01-31 10:03:40.823 [main] INFO  o.s.jmx.export.annotation.AnnotationMBeanExporter - Registering beans for JMX exposure on startup
2019-01-31 10:03:40.841 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2019-01-31 10:03:40.853 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2019-01-31 10:03:40.865 [main] INFO  org.apache.tomcat.util.net.NioSelectorPool - Using a shared selector for servlet write/read
2019-01-31 10:03:41.037 [main] INFO  o.s.b.c.e.tomcat.TomcatEmbeddedServletContainer - Tomcat started on port(s): 8080 (http)
2019-01-31 10:03:41.042 [main] INFO  com.yun.YunEbStockApplication - Started YunEbStockApplication in 4.676 seconds (JVM running for 5.874)
2019-01-31 10:03:44.684 [http-nio-8080-exec-1] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring FrameworkServlet 'dispatcherServlet'
2019-01-31 10:03:44.684 [http-nio-8080-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - FrameworkServlet 'dispatcherServlet': initialization started
2019-01-31 10:03:44.705 [http-nio-8080-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - FrameworkServlet 'dispatcherServlet': initialization completed in 21 ms
2019-01-31 10:03:44.717 [http-nio-8080-exec-1] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/main
2019-01-31 10:03:45.888 [http-nio-8080-exec-2] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/login
2019-01-31 10:03:46.222 [http-nio-8080-exec-2] DEBUG c.y.user.dao.UserInfoDao.findUserInfoByNameAndPass - ==>  Preparing: select * from user_info where login_name=? and login_pass=? 
2019-01-31 10:03:46.242 [http-nio-8080-exec-2] DEBUG c.y.user.dao.UserInfoDao.findUserInfoByNameAndPass - ==> Parameters: null, null
2019-01-31 10:03:46.252 [http-nio-8080-exec-2] DEBUG c.y.user.dao.UserInfoDao.findUserInfoByNameAndPass - <==      Total: 0
2019-01-31 10:03:51.230 [http-nio-8080-exec-3] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/login
2019-01-31 10:03:51.251 [http-nio-8080-exec-3] DEBUG c.y.user.dao.UserInfoDao.findUserInfoByNameAndPass - ==>  Preparing: select * from user_info where login_name=? and login_pass=? 
2019-01-31 10:03:51.252 [http-nio-8080-exec-3] DEBUG c.y.user.dao.UserInfoDao.findUserInfoByNameAndPass - ==> Parameters: admin(String), 123(String)
2019-01-31 10:03:51.257 [http-nio-8080-exec-3] DEBUG c.y.user.dao.UserInfoDao.findUserInfoByNameAndPass - <==      Total: 1
2019-01-31 10:03:51.265 [http-nio-8080-exec-4] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/main
2019-01-31 10:04:16.755 [main] INFO  com.yun.YunEbStockApplication - Starting YunEbStockApplication on USER-20181202BJ with PID 3648 (E:\workspace\yun-eb-stock\target\classes started by Administrator in E:\workspace\yun-eb-stock)
2019-01-31 10:04:16.760 [main] DEBUG com.yun.YunEbStockApplication - Running with Spring Boot v1.5.9.RELEASE, Spring v4.3.13.RELEASE
2019-01-31 10:04:16.760 [main] INFO  com.yun.YunEbStockApplication - No active profile set, falling back to default profiles: default
2019-01-31 10:04:17.117 [background-preinit] INFO  org.hibernate.validator.internal.util.Version - HV000001: Hibernate Validator 5.3.6.Final
2019-01-31 10:04:17.316 [main] INFO  o.s.b.c.e.AnnotationConfigEmbeddedWebApplicationContext - Refreshing org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@6a28ffa4: startup date [Thu Jan 31 10:04:17 CST 2019]; root of context hierarchy
2019-01-31 10:04:18.833 [main] INFO  o.s.b.c.e.tomcat.TomcatEmbeddedServletContainer - Tomcat initialized with port(s): 8080 (http)
2019-01-31 10:04:18.843 [main] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2019-01-31 10:04:18.845 [main] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet Engine: Apache Tomcat/8.5.23
2019-01-31 10:04:18.941 [localhost-startStop-1] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2019-01-31 10:04:18.941 [localhost-startStop-1] INFO  org.springframework.web.context.ContextLoader - Root WebApplicationContext: initialization completed in 1625 ms
2019-01-31 10:04:19.106 [localhost-startStop-1] INFO  o.s.boot.web.servlet.FilterRegistrationBean - Mapping filter: 'characterEncodingFilter' to: [/*]
2019-01-31 10:04:19.107 [localhost-startStop-1] INFO  o.s.boot.web.servlet.FilterRegistrationBean - Mapping filter: 'hiddenHttpMethodFilter' to: [/*]
2019-01-31 10:04:19.108 [localhost-startStop-1] INFO  o.s.boot.web.servlet.FilterRegistrationBean - Mapping filter: 'httpPutFormContentFilter' to: [/*]
2019-01-31 10:04:19.108 [localhost-startStop-1] INFO  o.s.boot.web.servlet.FilterRegistrationBean - Mapping filter: 'requestContextFilter' to: [/*]
2019-01-31 10:04:19.108 [localhost-startStop-1] INFO  o.s.boot.web.servlet.FilterRegistrationBean - Mapping filter: 'loginFilter' to urls: [/*]
2019-01-31 10:04:19.108 [localhost-startStop-1] INFO  o.s.boot.web.servlet.ServletRegistrationBean - Mapping servlet: 'dispatcherServlet' to [/]
2019-01-31 10:04:20.042 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerAdapter - Looking for @ControllerAdvice: org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@6a28ffa4: startup date [Thu Jan 31 10:04:17 CST 2019]; root of context hierarchy
2019-01-31 10:04:20.099 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productPreAdd]}" onto public java.lang.String com.yun.product.controller.ProductController.productPreAdd()
2019-01-31 10:04:20.101 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productList]}" onto public java.lang.String com.yun.product.controller.ProductController.productList(org.springframework.ui.Model,java.lang.String,java.lang.String,java.lang.String,java.lang.String)
2019-01-31 10:04:20.101 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productSave]}" onto public java.lang.String com.yun.product.controller.ProductController.productSave(com.yun.product.model.Product)
2019-01-31 10:04:20.102 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productDelete]}" onto public java.lang.String com.yun.product.controller.ProductController.productDelete(int)
2019-01-31 10:04:20.102 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productPreUpdate]}" onto public java.lang.String com.yun.product.controller.ProductController.productPreUpdate(int,org.springframework.ui.Model)
2019-01-31 10:04:20.102 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productUpdate]}" onto public java.lang.String com.yun.product.controller.ProductController.productUpdate(com.yun.product.model.Product)
2019-01-31 10:04:20.102 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productListForAutoComplete]}" onto public java.util.List<com.yun.product.model.Product> com.yun.product.controller.ProductController.productListForAutoComplete(java.lang.String)
2019-01-31 10:04:20.103 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productListForStock]}" onto public java.util.List<com.yun.product.model.Product> com.yun.product.controller.ProductController.productListForStock()
2019-01-31 10:04:20.103 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productListForTrade]}" onto public java.util.List<com.yun.product.model.Product> com.yun.product.controller.ProductController.productListForTrade(java.lang.String)
2019-01-31 10:04:20.104 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/prodParamDelete]}" onto public java.lang.String com.yun.product.controller.ProductParamController.prodParamDelete(int)
2019-01-31 10:04:20.104 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/prodParamPreAdd]}" onto public java.lang.String com.yun.product.controller.ProductParamController.prodParamPreAdd(int,org.springframework.ui.Model)
2019-01-31 10:04:20.104 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/prodParamSave]}" onto public java.lang.String com.yun.product.controller.ProductParamController.prodParamSave(com.yun.product.model.ProductParameter)
2019-01-31 10:04:20.105 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/prodParamList]}" onto public java.lang.String com.yun.product.controller.ProductParamController.prodParamList(int)
2019-01-31 10:04:20.107 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeList]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeList(org.springframework.ui.Model)
2019-01-31 10:04:20.107 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeTree]}" onto public java.util.List<com.yun.product.model.ProductType> com.yun.product.controller.ProductTypeController.productTypeTree()
2019-01-31 10:04:20.108 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeEdit]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeEdit()
2019-01-31 10:04:20.108 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeSave]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeSave(com.yun.product.model.ProductType)
2019-01-31 10:04:20.108 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeUpdate]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeUpdate(java.lang.Integer,org.springframework.ui.Model)
2019-01-31 10:04:20.108 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeUpdateSave]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeUpdateSave(com.yun.product.model.ProductType)
2019-01-31 10:04:20.109 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeDelete]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeDelete(java.lang.Integer,javax.servlet.http.HttpServletResponse) throws java.io.IOException
2019-01-31 10:04:20.110 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveStockList]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveStockController.productReceiveStocklist(java.lang.String,java.lang.String,org.springframework.ui.Model)
2019-01-31 10:04:20.110 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveStockPreAdd]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveStockController.productReceiveStockPreAdd()
2019-01-31 10:04:20.110 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveStockSave]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveStockController.productReceiveStockSave(com.yun.stock.model.ProductReceiveStock)
2019-01-31 10:04:20.110 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveStockDelete]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveStockController.productReceiveStockDelete(int)
2019-01-31 10:04:20.110 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveStockPreUpdate]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveStockController.productReceiveStockPreUpdate(int,org.springframework.ui.Model)
2019-01-31 10:04:20.111 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveStockUpdate]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveStockController.productReceiveStockUpdate(com.yun.stock.model.ProductReceiveStock)
2019-01-31 10:04:20.112 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveStockToCurrentStock]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveTradeController.productReceiveStockToCurrentStock(int,org.springframework.ui.Model)
2019-01-31 10:04:20.112 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveInSave]}" onto public void com.yun.stock.controller.ProductReceiveTradeController.receiveInSave(com.yun.stock.model.ProductReceiveTrade,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse) throws java.io.IOException
2019-01-31 10:04:20.112 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveIn]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveTradeController.receiveIn(org.springframework.ui.Model)
2019-01-31 10:04:20.112 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveReject]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveTradeController.receiveReject(org.springframework.ui.Model)
2019-01-31 10:04:20.113 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveRejectSave]}" onto public void com.yun.stock.controller.ProductReceiveTradeController.receiveRejectSave(com.yun.stock.model.ProductReceiveTrade,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse) throws java.io.IOException
2019-01-31 10:04:20.113 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveToCurrentSave]}" onto public void com.yun.stock.controller.ProductReceiveTradeController.productReceiveToCurrentSave(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse) throws java.lang.Exception
2019-01-31 10:04:20.114 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockSave]}" onto public java.lang.String com.yun.stock.controller.ProductStockController.productStockSave(com.yun.stock.model.ProductStock)
2019-01-31 10:04:20.114 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockList]}" onto public java.lang.String com.yun.stock.controller.ProductStockController.productStocklist(java.lang.String,java.lang.String,org.springframework.ui.Model)
2019-01-31 10:04:20.114 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockPreAdd]}" onto public java.lang.String com.yun.stock.controller.ProductStockController.productStockPreAdd()
2019-01-31 10:04:20.114 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockDelete]}" onto public java.lang.String com.yun.stock.controller.ProductStockController.productStockDelete(int)
2019-01-31 10:04:20.114 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockPreUpdate]}" onto public java.lang.String com.yun.stock.controller.ProductStockController.productStockPreUpdate(int,org.springframework.ui.Model)
2019-01-31 10:04:20.115 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockUpdate]}" onto public java.lang.String com.yun.stock.controller.ProductStockController.productStockUpdate(com.yun.stock.model.ProductStock)
2019-01-31 10:04:20.115 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/main]}" onto public java.lang.String com.yun.user.controller.MainController.main()
2019-01-31 10:04:20.116 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/userList]}" onto public java.lang.String com.yun.user.controller.UserController.userList(org.springframework.ui.Model)
2019-01-31 10:04:20.116 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/deleteUserInfo]}" onto public java.lang.String com.yun.user.controller.UserController.userDelete(int)
2019-01-31 10:04:20.116 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/userEdit]}" onto public java.lang.String com.yun.user.controller.UserController.userEdit()
2019-01-31 10:04:20.116 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/userSave]}" onto public java.lang.String com.yun.user.controller.UserController.userSave(com.yun.user.model.UserInfo)
2019-01-31 10:04:20.117 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/login]}" onto public void com.yun.user.controller.UserController.login(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse) throws java.io.IOException
2019-01-31 10:04:20.120 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/error]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> org.springframework.boot.autoconfigure.web.BasicErrorController.error(javax.servlet.http.HttpServletRequest)
2019-01-31 10:04:20.120 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/error],produces=[text/html]}" onto public org.springframework.web.servlet.ModelAndView org.springframework.boot.autoconfigure.web.BasicErrorController.errorHtml(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
2019-01-31 10:04:20.153 [main] INFO  o.s.web.servlet.handler.SimpleUrlHandlerMapping - Mapped URL path [/webjars/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-01-31 10:04:20.154 [main] INFO  o.s.web.servlet.handler.SimpleUrlHandlerMapping - Mapped URL path [/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-01-31 10:04:20.199 [main] INFO  o.s.web.servlet.handler.SimpleUrlHandlerMapping - Mapped URL path [/**/favicon.ico] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-01-31 10:04:20.488 [main] INFO  o.s.b.a.w.WebMvcAutoConfiguration$WelcomePageHandlerMapping - Adding welcome page: class path resource [static/index.html]
2019-01-31 10:04:20.742 [main] INFO  o.s.jmx.export.annotation.AnnotationMBeanExporter - Registering beans for JMX exposure on startup
2019-01-31 10:04:20.763 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2019-01-31 10:04:20.775 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2019-01-31 10:04:20.788 [main] INFO  org.apache.tomcat.util.net.NioSelectorPool - Using a shared selector for servlet write/read
2019-01-31 10:04:20.805 [main] INFO  o.s.b.c.e.tomcat.TomcatEmbeddedServletContainer - Tomcat started on port(s): 8080 (http)
2019-01-31 10:04:20.810 [main] INFO  com.yun.YunEbStockApplication - Started YunEbStockApplication in 4.697 seconds (JVM running for 5.874)
2019-01-31 10:04:24.024 [http-nio-8080-exec-1] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring FrameworkServlet 'dispatcherServlet'
2019-01-31 10:04:24.025 [http-nio-8080-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - FrameworkServlet 'dispatcherServlet': initialization started
2019-01-31 10:04:24.046 [http-nio-8080-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - FrameworkServlet 'dispatcherServlet': initialization completed in 21 ms
2019-01-31 10:04:24.056 [http-nio-8080-exec-1] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/main
2019-01-31 10:04:25.310 [http-nio-8080-exec-2] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/index.html
2019-01-31 10:04:29.020 [http-nio-8080-exec-3] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/login
2019-01-31 10:04:29.336 [http-nio-8080-exec-3] DEBUG c.y.user.dao.UserInfoDao.findUserInfoByNameAndPass - ==>  Preparing: select * from user_info where login_name=? and login_pass=? 
2019-01-31 10:04:29.356 [http-nio-8080-exec-3] DEBUG c.y.user.dao.UserInfoDao.findUserInfoByNameAndPass - ==> Parameters: admin(String), 123(String)
2019-01-31 10:04:29.368 [http-nio-8080-exec-3] DEBUG c.y.user.dao.UserInfoDao.findUserInfoByNameAndPass - <==      Total: 1
2019-01-31 10:04:29.377 [http-nio-8080-exec-4] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/main
2019-01-31 10:04:32.128 [http-nio-8080-exec-5] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productReceiveStockList
2019-01-31 10:04:32.137 [http-nio-8080-exec-5] DEBUG c.y.stock.controller.ProductReceiveStockController - 跳转到待收库存查询控制器
2019-01-31 10:04:32.183 [http-nio-8080-exec-5] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - ==>  Preparing: select count(*) from product_receive_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 
2019-01-31 10:04:32.184 [http-nio-8080-exec-5] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - ==> Parameters: 
2019-01-31 10:04:32.185 [http-nio-8080-exec-5] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - <==      Total: 1
2019-01-31 10:04:32.193 [http-nio-8080-exec-5] DEBUG c.y.s.d.P.findProductReceiveStockList - ==>  Preparing: select ps.prod_rece_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_receive_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 order by p.prod_id,pp.prod_param_id limit ?,? 
2019-01-31 10:04:32.194 [http-nio-8080-exec-5] DEBUG c.y.s.d.P.findProductReceiveStockList - ==> Parameters: 0(Integer), 5(Integer)
2019-01-31 10:04:32.196 [http-nio-8080-exec-5] DEBUG c.y.s.d.P.findProductReceiveStockList - <==      Total: 2
2019-01-31 10:04:32.199 [http-nio-8080-exec-5] DEBUG c.y.stock.controller.ProductReceiveStockController - 转到待收库存页面
2019-01-31 10:04:33.410 [http-nio-8080-exec-6] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productReceiveStockToCurrentStock
2019-01-31 10:04:33.422 [http-nio-8080-exec-6] DEBUG c.y.s.d.P.findProductReceiveStockById - ==>  Preparing: select ps.prod_rece_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_receive_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 and ps.prod_rece_stock_id=? 
2019-01-31 10:04:33.423 [http-nio-8080-exec-6] DEBUG c.y.s.d.P.findProductReceiveStockById - ==> Parameters: 7(Integer)
2019-01-31 10:04:33.425 [http-nio-8080-exec-6] DEBUG c.y.s.d.P.findProductReceiveStockById - <==      Total: 1
2019-01-31 10:05:15.449 [http-nio-8080-exec-7] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productReceiveToCurrentSave
2019-01-31 10:05:15.460 [http-nio-8080-exec-7] DEBUG c.y.s.d.P.findProductReceiveStockById - ==>  Preparing: select ps.prod_rece_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_receive_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 and ps.prod_rece_stock_id=? 
2019-01-31 10:05:15.461 [http-nio-8080-exec-7] DEBUG c.y.s.d.P.findProductReceiveStockById - ==> Parameters: 7(Integer)
2019-01-31 10:05:15.465 [http-nio-8080-exec-7] DEBUG c.y.s.d.P.findProductReceiveStockById - <==      Total: 1
2019-01-31 10:05:15.467 [http-nio-8080-exec-7] DEBUG c.y.s.d.P.insertProductReceiveTrade - ==>  Preparing: insert into product_receive_trade(trade_date,prod_id,prod_param_id,begin_num,trade_add,end_num,oper_id)values(?,?,?,?,?,?,?) 
2019-01-31 10:05:15.469 [http-nio-8080-exec-7] DEBUG c.y.s.d.P.insertProductReceiveTrade - ==> Parameters: 2019-01-31 10:04:33.0(Timestamp), 2(Integer), 8(Integer), 10(Integer), null, 7(Integer), 5(Integer)
2019-01-31 10:05:15.485 [http-nio-8080-exec-7] DEBUG c.y.s.d.P.insertProductReceiveTrade - <==    Updates: 1
2019-01-31 10:05:15.486 [http-nio-8080-exec-7] DEBUG c.y.s.d.P.findProductStockByProdIdAndProdParamId - ==>  Preparing: select ps.prod_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 and p.prod_id=? and pp.prod_param_Id=? 
2019-01-31 10:05:15.487 [http-nio-8080-exec-7] DEBUG c.y.s.d.P.findProductStockByProdIdAndProdParamId - ==> Parameters: 2(Integer), 8(Integer)
2019-01-31 10:05:15.488 [http-nio-8080-exec-7] DEBUG c.y.s.d.P.findProductStockByProdIdAndProdParamId - <==      Total: 0
2019-01-31 10:05:15.488 [http-nio-8080-exec-7] DEBUG c.yun.stock.dao.ProductStockDao.insertProductStock - ==>  Preparing: insert into product_stock(prod_id,prod_param_id,stock_num)values(?,?,?) 
2019-01-31 10:05:15.489 [http-nio-8080-exec-7] DEBUG c.yun.stock.dao.ProductStockDao.insertProductStock - ==> Parameters: 2(Integer), 8(Integer), 3(Integer)
2019-01-31 10:05:15.490 [http-nio-8080-exec-7] DEBUG c.yun.stock.dao.ProductStockDao.insertProductStock - <==    Updates: 1
2019-01-31 10:05:15.491 [http-nio-8080-exec-7] DEBUG c.yun.stock.dao.ProductTradeDao.insertProductTrade - ==>  Preparing: insert into product_trade(trade_date,prod_id,prod_param_id,begin_num,trade_add,end_num,oper_id)values(?,?,?,?,?,?,?) 
2019-01-31 10:05:15.492 [http-nio-8080-exec-7] DEBUG c.yun.stock.dao.ProductTradeDao.insertProductTrade - ==> Parameters: 2019-01-31 10:04:33.0(Timestamp), 2(Integer), 8(Integer), 0(Integer), 3(Integer), 3(Integer), 5(Integer)
2019-01-31 10:05:15.496 [http-nio-8080-exec-7] DEBUG c.yun.stock.dao.ProductTradeDao.insertProductTrade - <==    Updates: 1
2019-01-31 10:05:15.496 [http-nio-8080-exec-7] DEBUG c.y.s.d.P.updateProductReceiveStock - ==>  Preparing: update product_receive_stock set prod_id=?,prod_param_id=?,stock_num=? where prod_rece_stock_id=? 
2019-01-31 10:05:15.497 [http-nio-8080-exec-7] DEBUG c.y.s.d.P.updateProductReceiveStock - ==> Parameters: 2(Integer), 8(Integer), 7(Integer), 7(Integer)
2019-01-31 10:05:15.517 [http-nio-8080-exec-7] DEBUG c.y.s.d.P.updateProductReceiveStock - <==    Updates: 1
2019-01-31 10:05:15.577 [http-nio-8080-exec-7] DEBUG c.y.stock.controller.ProductReceiveTradeController - result:待收库存转现有库存操作完成
2019-01-31 10:05:17.044 [http-nio-8080-exec-8] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productReceiveStockList
2019-01-31 10:05:17.047 [http-nio-8080-exec-8] DEBUG c.y.stock.controller.ProductReceiveStockController - 跳转到待收库存查询控制器
2019-01-31 10:05:17.050 [http-nio-8080-exec-8] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - ==>  Preparing: select count(*) from product_receive_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 
2019-01-31 10:05:17.050 [http-nio-8080-exec-8] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - ==> Parameters: 
2019-01-31 10:05:17.055 [http-nio-8080-exec-8] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - <==      Total: 1
2019-01-31 10:05:17.058 [http-nio-8080-exec-8] DEBUG c.y.s.d.P.findProductReceiveStockList - ==>  Preparing: select ps.prod_rece_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_receive_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 order by p.prod_id,pp.prod_param_id limit ?,? 
2019-01-31 10:05:17.059 [http-nio-8080-exec-8] DEBUG c.y.s.d.P.findProductReceiveStockList - ==> Parameters: 0(Integer), 5(Integer)
2019-01-31 10:05:17.062 [http-nio-8080-exec-8] DEBUG c.y.s.d.P.findProductReceiveStockList - <==      Total: 2
2019-01-31 10:05:17.064 [http-nio-8080-exec-8] DEBUG c.y.stock.controller.ProductReceiveStockController - 转到待收库存页面
2019-01-31 10:05:20.472 [http-nio-8080-exec-9] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productStockList
2019-01-31 10:05:20.479 [http-nio-8080-exec-9] DEBUG com.yun.stock.controller.ProductStockController - 跳转到物品库存查询控制器
2019-01-31 10:05:20.483 [http-nio-8080-exec-9] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==>  Preparing: select count(*) from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 
2019-01-31 10:05:20.485 [http-nio-8080-exec-9] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==> Parameters: 
2019-01-31 10:05:20.487 [http-nio-8080-exec-9] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - <==      Total: 1
2019-01-31 10:05:20.493 [http-nio-8080-exec-9] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==>  Preparing: select ps.prod_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 order by p.prod_id,pp.prod_param_id limit ?,? 
2019-01-31 10:05:20.494 [http-nio-8080-exec-9] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==> Parameters: 0(Integer), 5(Integer)
2019-01-31 10:05:20.496 [http-nio-8080-exec-9] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - <==      Total: 2
2019-01-31 10:05:20.501 [http-nio-8080-exec-9] DEBUG com.yun.stock.controller.ProductStockController - 转到物品库存页面
2019-01-31 10:08:34.631 [http-nio-8080-exec-1] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/main
2019-01-31 10:08:34.688 [http-nio-8080-exec-2] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/css/bootstrap.min.css
2019-01-31 10:08:34.691 [http-nio-8080-exec-3] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/js/jquery.min.js
2019-01-31 10:08:34.695 [http-nio-8080-exec-5] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/js/bootstrap.min.js
2019-01-31 10:08:34.699 [http-nio-8080-exec-4] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/css/site.css
2019-01-31 10:08:34.728 [http-nio-8080-exec-6] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/default.html
2019-01-31 10:08:34.750 [http-nio-8080-exec-7] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/favicon.ico
2019-01-31 10:08:35.587 [http-nio-8080-exec-8] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productTypeList
2019-01-31 10:08:35.591 [http-nio-8080-exec-8] INFO  com.yun.product.controller.ProductTypeController - 跳转到stock/productTypeList.html页面
2019-01-31 10:08:35.644 [http-nio-8080-exec-9] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productTypeTree
2019-01-31 10:08:35.651 [http-nio-8080-exec-9] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - ==>  Preparing: select p1.prod_type_id,p1.prod_type_name,p1.parent_id,p2.prod_type_id parent_type_id,p2.prod_type_name parent_type_name from product_type p1 LEFT JOIN product_type p2 on p1.parent_id=p2.prod_type_id where p1.parent_id=? 
2019-01-31 10:08:35.651 [http-nio-8080-exec-9] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - ==> Parameters: 0(Integer)
2019-01-31 10:08:35.657 [http-nio-8080-exec-9] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - ====>  Preparing: select p1.prod_type_id,p1.prod_type_name,p1.parent_id,p2.prod_type_id parent_type_id,p2.prod_type_name parent_type_name from product_type p1 LEFT JOIN product_type p2 on p1.parent_id=p2.prod_type_id where p1.parent_id=? 
2019-01-31 10:08:35.658 [http-nio-8080-exec-9] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - ====> Parameters: 29(Integer)
2019-01-31 10:08:35.659 [http-nio-8080-exec-9] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - ======>  Preparing: select p1.prod_type_id,p1.prod_type_name,p1.parent_id,p2.prod_type_id parent_type_id,p2.prod_type_name parent_type_name from product_type p1 LEFT JOIN product_type p2 on p1.parent_id=p2.prod_type_id where p1.parent_id=? 
2019-01-31 10:08:35.660 [http-nio-8080-exec-9] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - ======> Parameters: 30(Integer)
2019-01-31 10:08:35.660 [http-nio-8080-exec-9] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - <======      Total: 0
2019-01-31 10:08:35.661 [http-nio-8080-exec-9] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - <====      Total: 1
2019-01-31 10:08:35.661 [http-nio-8080-exec-9] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - ====>  Preparing: select p1.prod_type_id,p1.prod_type_name,p1.parent_id,p2.prod_type_id parent_type_id,p2.prod_type_name parent_type_name from product_type p1 LEFT JOIN product_type p2 on p1.parent_id=p2.prod_type_id where p1.parent_id=? 
2019-01-31 10:08:35.662 [http-nio-8080-exec-9] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - ====> Parameters: 39(Integer)
2019-01-31 10:08:35.663 [http-nio-8080-exec-9] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - ======>  Preparing: select p1.prod_type_id,p1.prod_type_name,p1.parent_id,p2.prod_type_id parent_type_id,p2.prod_type_name parent_type_name from product_type p1 LEFT JOIN product_type p2 on p1.parent_id=p2.prod_type_id where p1.parent_id=? 
2019-01-31 10:08:35.663 [http-nio-8080-exec-9] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - ======> Parameters: 41(Integer)
2019-01-31 10:08:35.663 [http-nio-8080-exec-9] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - <======      Total: 0
2019-01-31 10:08:35.664 [http-nio-8080-exec-9] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - <====      Total: 1
2019-01-31 10:08:35.664 [http-nio-8080-exec-9] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - <==      Total: 2
2019-01-31 10:08:36.520 [http-nio-8080-exec-10] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productList
2019-01-31 10:08:36.532 [http-nio-8080-exec-10] DEBUG c.yun.product.dao.ProductDao.findProductRowByParam - ==>  Preparing: select count(*) from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 
2019-01-31 10:08:36.532 [http-nio-8080-exec-10] DEBUG c.yun.product.dao.ProductDao.findProductRowByParam - ==> Parameters: 
2019-01-31 10:08:36.535 [http-nio-8080-exec-10] DEBUG c.yun.product.dao.ProductDao.findProductRowByParam - <==      Total: 1
2019-01-31 10:08:36.540 [http-nio-8080-exec-10] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 order by prod_id limit ?,? 
2019-01-31 10:08:36.540 [http-nio-8080-exec-10] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==> Parameters: 0(Integer), 5(Integer)
2019-01-31 10:08:36.543 [http-nio-8080-exec-10] DEBUG com.yun.product.dao.ProductDao.findProductByParam - <==      Total: 4
2019-01-31 10:08:36.544 [http-nio-8080-exec-10] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-31 10:08:36.544 [http-nio-8080-exec-10] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 2(Integer)
2019-01-31 10:08:36.546 [http-nio-8080-exec-10] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-01-31 10:08:36.546 [http-nio-8080-exec-10] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-31 10:08:36.547 [http-nio-8080-exec-10] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 3(Integer)
2019-01-31 10:08:36.548 [http-nio-8080-exec-10] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-01-31 10:08:36.548 [http-nio-8080-exec-10] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-31 10:08:36.548 [http-nio-8080-exec-10] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 4(Integer)
2019-01-31 10:08:36.550 [http-nio-8080-exec-10] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 2
2019-01-31 10:08:36.551 [http-nio-8080-exec-10] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-31 10:08:36.552 [http-nio-8080-exec-10] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 5(Integer)
2019-01-31 10:08:36.553 [http-nio-8080-exec-10] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-01-31 10:08:39.863 [http-nio-8080-exec-1] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productReceiveStockList
2019-01-31 10:08:39.864 [http-nio-8080-exec-1] DEBUG c.y.stock.controller.ProductReceiveStockController - 跳转到待收库存查询控制器
2019-01-31 10:08:39.867 [http-nio-8080-exec-1] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - ==>  Preparing: select count(*) from product_receive_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 
2019-01-31 10:08:39.867 [http-nio-8080-exec-1] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - ==> Parameters: 
2019-01-31 10:08:39.869 [http-nio-8080-exec-1] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - <==      Total: 1
2019-01-31 10:08:39.872 [http-nio-8080-exec-1] DEBUG c.y.s.d.P.findProductReceiveStockList - ==>  Preparing: select ps.prod_rece_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_receive_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 order by p.prod_id,pp.prod_param_id limit ?,? 
2019-01-31 10:08:39.873 [http-nio-8080-exec-1] DEBUG c.y.s.d.P.findProductReceiveStockList - ==> Parameters: 0(Integer), 5(Integer)
2019-01-31 10:08:39.877 [http-nio-8080-exec-1] DEBUG c.y.s.d.P.findProductReceiveStockList - <==      Total: 0
2019-01-31 10:08:39.880 [http-nio-8080-exec-1] DEBUG c.y.stock.controller.ProductReceiveStockController - 转到待收库存页面
2019-01-31 10:08:41.080 [http-nio-8080-exec-3] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productStockList
2019-01-31 10:08:41.089 [http-nio-8080-exec-3] DEBUG com.yun.stock.controller.ProductStockController - 跳转到物品库存查询控制器
2019-01-31 10:08:41.092 [http-nio-8080-exec-3] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==>  Preparing: select count(*) from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 
2019-01-31 10:08:41.092 [http-nio-8080-exec-3] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==> Parameters: 
2019-01-31 10:08:41.093 [http-nio-8080-exec-3] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - <==      Total: 1
2019-01-31 10:08:41.098 [http-nio-8080-exec-3] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==>  Preparing: select ps.prod_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 order by p.prod_id,pp.prod_param_id limit ?,? 
2019-01-31 10:08:41.099 [http-nio-8080-exec-3] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==> Parameters: 0(Integer), 5(Integer)
2019-01-31 10:08:41.100 [http-nio-8080-exec-3] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - <==      Total: 0
2019-01-31 10:08:41.102 [http-nio-8080-exec-3] DEBUG com.yun.stock.controller.ProductStockController - 转到物品库存页面
2019-01-31 10:08:42.204 [http-nio-8080-exec-2] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productReceiveIn
2019-01-31 10:08:46.332 [http-nio-8080-exec-5] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productReceiveStockList
2019-01-31 10:08:46.334 [http-nio-8080-exec-5] DEBUG c.y.stock.controller.ProductReceiveStockController - 跳转到待收库存查询控制器
2019-01-31 10:08:46.338 [http-nio-8080-exec-5] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - ==>  Preparing: select count(*) from product_receive_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 
2019-01-31 10:08:46.339 [http-nio-8080-exec-5] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - ==> Parameters: 
2019-01-31 10:08:46.342 [http-nio-8080-exec-5] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - <==      Total: 1
2019-01-31 10:08:46.346 [http-nio-8080-exec-5] DEBUG c.y.s.d.P.findProductReceiveStockList - ==>  Preparing: select ps.prod_rece_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_receive_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 order by p.prod_id,pp.prod_param_id limit ?,? 
2019-01-31 10:08:46.347 [http-nio-8080-exec-5] DEBUG c.y.s.d.P.findProductReceiveStockList - ==> Parameters: 0(Integer), 5(Integer)
2019-01-31 10:08:46.348 [http-nio-8080-exec-5] DEBUG c.y.s.d.P.findProductReceiveStockList - <==      Total: 0
2019-01-31 10:08:46.350 [http-nio-8080-exec-5] DEBUG c.y.stock.controller.ProductReceiveStockController - 转到待收库存页面
2019-01-31 10:08:49.691 [http-nio-8080-exec-4] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productReceiveStockList
2019-01-31 10:08:49.694 [http-nio-8080-exec-4] DEBUG c.y.stock.controller.ProductReceiveStockController - 跳转到待收库存查询控制器
2019-01-31 10:08:49.700 [http-nio-8080-exec-4] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - ==>  Preparing: select count(*) from product_receive_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 
2019-01-31 10:08:49.701 [http-nio-8080-exec-4] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - ==> Parameters: 
2019-01-31 10:08:49.703 [http-nio-8080-exec-4] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - <==      Total: 1
2019-01-31 10:08:49.706 [http-nio-8080-exec-4] DEBUG c.y.s.d.P.findProductReceiveStockList - ==>  Preparing: select ps.prod_rece_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_receive_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 order by p.prod_id,pp.prod_param_id limit ?,? 
2019-01-31 10:08:49.708 [http-nio-8080-exec-4] DEBUG c.y.s.d.P.findProductReceiveStockList - ==> Parameters: 0(Integer), 5(Integer)
2019-01-31 10:08:49.709 [http-nio-8080-exec-4] DEBUG c.y.s.d.P.findProductReceiveStockList - <==      Total: 0
2019-01-31 10:08:49.712 [http-nio-8080-exec-4] DEBUG c.y.stock.controller.ProductReceiveStockController - 转到待收库存页面
2019-01-31 10:08:52.227 [http-nio-8080-exec-6] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productReceiveStockPreAdd
2019-01-31 10:08:53.934 [http-nio-8080-exec-7] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productListForTrade
2019-01-31 10:08:53.940 [http-nio-8080-exec-7] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 order by prod_id 
2019-01-31 10:08:53.942 [http-nio-8080-exec-7] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==> Parameters: 
2019-01-31 10:08:53.950 [http-nio-8080-exec-7] DEBUG com.yun.product.dao.ProductDao.findProductByParam - <==      Total: 4
2019-01-31 10:08:53.952 [http-nio-8080-exec-7] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-31 10:08:53.953 [http-nio-8080-exec-7] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 2(Integer)
2019-01-31 10:08:53.956 [http-nio-8080-exec-7] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-01-31 10:08:53.957 [http-nio-8080-exec-7] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-31 10:08:53.958 [http-nio-8080-exec-7] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 3(Integer)
2019-01-31 10:08:53.961 [http-nio-8080-exec-7] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-01-31 10:08:53.962 [http-nio-8080-exec-7] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-31 10:08:53.962 [http-nio-8080-exec-7] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 4(Integer)
2019-01-31 10:08:53.965 [http-nio-8080-exec-7] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 2
2019-01-31 10:08:53.966 [http-nio-8080-exec-7] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-31 10:08:53.966 [http-nio-8080-exec-7] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 5(Integer)
2019-01-31 10:08:53.968 [http-nio-8080-exec-7] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-01-31 10:08:56.905 [http-nio-8080-exec-8] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/prodParamList
2019-01-31 10:08:56.915 [http-nio-8080-exec-8] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-31 10:08:56.915 [http-nio-8080-exec-8] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 2(Integer)
2019-01-31 10:08:56.917 [http-nio-8080-exec-8] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-01-31 10:09:01.124 [http-nio-8080-exec-9] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productReceiveStockSave
2019-01-31 10:09:01.141 [http-nio-8080-exec-9] DEBUG c.y.s.d.P.insertProductReceiveStock - ==>  Preparing: insert into product_receive_stock(prod_id,prod_param_id,stock_num)values(?,?,?) 
2019-01-31 10:09:01.142 [http-nio-8080-exec-9] DEBUG c.y.s.d.P.insertProductReceiveStock - ==> Parameters: 2(Integer), 8(Integer), 10(Integer)
2019-01-31 10:09:01.143 [http-nio-8080-exec-9] DEBUG c.y.s.d.P.insertProductReceiveStock - <==    Updates: 1
2019-01-31 10:09:01.214 [http-nio-8080-exec-10] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productReceiveStockList
2019-01-31 10:09:01.215 [http-nio-8080-exec-10] DEBUG c.y.stock.controller.ProductReceiveStockController - 跳转到待收库存查询控制器
2019-01-31 10:09:01.216 [http-nio-8080-exec-10] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - ==>  Preparing: select count(*) from product_receive_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 
2019-01-31 10:09:01.216 [http-nio-8080-exec-10] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - ==> Parameters: 
2019-01-31 10:09:01.217 [http-nio-8080-exec-10] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - <==      Total: 1
2019-01-31 10:09:01.220 [http-nio-8080-exec-10] DEBUG c.y.s.d.P.findProductReceiveStockList - ==>  Preparing: select ps.prod_rece_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_receive_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 order by p.prod_id,pp.prod_param_id limit ?,? 
2019-01-31 10:09:01.220 [http-nio-8080-exec-10] DEBUG c.y.s.d.P.findProductReceiveStockList - ==> Parameters: 0(Integer), 5(Integer)
2019-01-31 10:09:01.222 [http-nio-8080-exec-10] DEBUG c.y.s.d.P.findProductReceiveStockList - <==      Total: 1
2019-01-31 10:09:01.223 [http-nio-8080-exec-10] DEBUG c.y.stock.controller.ProductReceiveStockController - 转到待收库存页面
2019-01-31 10:09:05.485 [http-nio-8080-exec-1] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productReceiveIn
2019-01-31 10:09:06.673 [http-nio-8080-exec-3] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productListForTrade
2019-01-31 10:09:06.679 [http-nio-8080-exec-3] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 order by prod_id 
2019-01-31 10:09:06.680 [http-nio-8080-exec-3] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==> Parameters: 
2019-01-31 10:09:06.684 [http-nio-8080-exec-3] DEBUG com.yun.product.dao.ProductDao.findProductByParam - <==      Total: 4
2019-01-31 10:09:06.685 [http-nio-8080-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-31 10:09:06.686 [http-nio-8080-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 2(Integer)
2019-01-31 10:09:06.688 [http-nio-8080-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-01-31 10:09:06.688 [http-nio-8080-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-31 10:09:06.688 [http-nio-8080-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 3(Integer)
2019-01-31 10:09:06.690 [http-nio-8080-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-01-31 10:09:06.690 [http-nio-8080-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-31 10:09:06.690 [http-nio-8080-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 4(Integer)
2019-01-31 10:09:06.692 [http-nio-8080-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 2
2019-01-31 10:09:06.692 [http-nio-8080-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-31 10:09:06.693 [http-nio-8080-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 5(Integer)
2019-01-31 10:09:06.695 [http-nio-8080-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-01-31 10:09:09.708 [http-nio-8080-exec-2] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/prodParamList
2019-01-31 10:09:09.712 [http-nio-8080-exec-2] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-31 10:09:09.712 [http-nio-8080-exec-2] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 3(Integer)
2019-01-31 10:09:09.713 [http-nio-8080-exec-2] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-01-31 10:09:13.944 [http-nio-8080-exec-5] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productReceiveInSave
2019-01-31 10:09:13.956 [http-nio-8080-exec-5] DEBUG c.y.s.d.P.findProductReceiveStockRecordByProdIdAndProdParamId - ==>  Preparing: select * from product_receive_stock where 1=1 and prod_id=? and prod_param_id=? 
2019-01-31 10:09:13.957 [http-nio-8080-exec-5] DEBUG c.y.s.d.P.findProductReceiveStockRecordByProdIdAndProdParamId - ==> Parameters: 3(Integer), 9(Integer)
2019-01-31 10:09:13.957 [http-nio-8080-exec-5] DEBUG c.y.s.d.P.findProductReceiveStockRecordByProdIdAndProdParamId - <==      Total: 0
2019-01-31 10:09:13.958 [http-nio-8080-exec-5] DEBUG c.y.s.d.P.insertProductReceiveStock - ==>  Preparing: insert into product_receive_stock(prod_id,prod_param_id,stock_num)values(?,?,?) 
2019-01-31 10:09:13.958 [http-nio-8080-exec-5] DEBUG c.y.s.d.P.insertProductReceiveStock - ==> Parameters: 3(Integer), 9(Integer), 4(Integer)
2019-01-31 10:09:13.959 [http-nio-8080-exec-5] DEBUG c.y.s.d.P.insertProductReceiveStock - <==    Updates: 1
2019-01-31 10:09:13.959 [http-nio-8080-exec-5] DEBUG c.y.s.d.P.insertProductReceiveTrade - ==>  Preparing: insert into product_receive_trade(trade_date,prod_id,prod_param_id,begin_num,trade_add,end_num,oper_id)values(?,?,?,?,?,?,?) 
2019-01-31 10:09:13.960 [http-nio-8080-exec-5] DEBUG c.y.s.d.P.insertProductReceiveTrade - ==> Parameters: 2019-01-31 10:09:05.0(Timestamp), 3(Integer), 9(Integer), 0(Integer), 4(Integer), 4(Integer), 5(Integer)
2019-01-31 10:09:13.961 [http-nio-8080-exec-5] DEBUG c.y.s.d.P.insertProductReceiveTrade - <==    Updates: 1
2019-01-31 10:09:16.552 [http-nio-8080-exec-4] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productReceiveIn
2019-01-31 10:09:18.203 [http-nio-8080-exec-6] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productReceiveStockList
2019-01-31 10:09:18.205 [http-nio-8080-exec-6] DEBUG c.y.stock.controller.ProductReceiveStockController - 跳转到待收库存查询控制器
2019-01-31 10:09:18.211 [http-nio-8080-exec-6] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - ==>  Preparing: select count(*) from product_receive_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 
2019-01-31 10:09:18.212 [http-nio-8080-exec-6] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - ==> Parameters: 
2019-01-31 10:09:18.214 [http-nio-8080-exec-6] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - <==      Total: 1
2019-01-31 10:09:18.220 [http-nio-8080-exec-6] DEBUG c.y.s.d.P.findProductReceiveStockList - ==>  Preparing: select ps.prod_rece_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_receive_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 order by p.prod_id,pp.prod_param_id limit ?,? 
2019-01-31 10:09:18.225 [http-nio-8080-exec-6] DEBUG c.y.s.d.P.findProductReceiveStockList - ==> Parameters: 0(Integer), 5(Integer)
2019-01-31 10:09:18.230 [http-nio-8080-exec-6] DEBUG c.y.s.d.P.findProductReceiveStockList - <==      Total: 2
2019-01-31 10:09:18.233 [http-nio-8080-exec-6] DEBUG c.y.stock.controller.ProductReceiveStockController - 转到待收库存页面
2019-01-31 10:09:24.504 [http-nio-8080-exec-7] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productReceiveIn
2019-01-31 10:09:29.118 [http-nio-8080-exec-8] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productListForTrade
2019-01-31 10:09:29.124 [http-nio-8080-exec-8] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 order by prod_id 
2019-01-31 10:09:29.125 [http-nio-8080-exec-8] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==> Parameters: 
2019-01-31 10:09:29.128 [http-nio-8080-exec-8] DEBUG com.yun.product.dao.ProductDao.findProductByParam - <==      Total: 4
2019-01-31 10:09:29.128 [http-nio-8080-exec-8] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-31 10:09:29.128 [http-nio-8080-exec-8] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 2(Integer)
2019-01-31 10:09:29.130 [http-nio-8080-exec-8] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-01-31 10:09:29.130 [http-nio-8080-exec-8] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-31 10:09:29.131 [http-nio-8080-exec-8] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 3(Integer)
2019-01-31 10:09:29.132 [http-nio-8080-exec-8] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-01-31 10:09:29.132 [http-nio-8080-exec-8] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-31 10:09:29.134 [http-nio-8080-exec-8] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 4(Integer)
2019-01-31 10:09:29.136 [http-nio-8080-exec-8] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 2
2019-01-31 10:09:29.136 [http-nio-8080-exec-8] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-31 10:09:29.136 [http-nio-8080-exec-8] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 5(Integer)
2019-01-31 10:09:29.137 [http-nio-8080-exec-8] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-01-31 10:09:32.201 [http-nio-8080-exec-9] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/prodParamList
2019-01-31 10:09:32.203 [http-nio-8080-exec-9] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-31 10:09:32.203 [http-nio-8080-exec-9] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 4(Integer)
2019-01-31 10:09:32.204 [http-nio-8080-exec-9] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 2
2019-01-31 10:09:37.968 [http-nio-8080-exec-2] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productReceiveInSave
2019-01-31 10:09:37.971 [http-nio-8080-exec-2] DEBUG c.y.s.d.P.findProductReceiveStockRecordByProdIdAndProdParamId - ==>  Preparing: select * from product_receive_stock where 1=1 and prod_id=? and prod_param_id=? 
2019-01-31 10:09:37.971 [http-nio-8080-exec-2] DEBUG c.y.s.d.P.findProductReceiveStockRecordByProdIdAndProdParamId - ==> Parameters: 4(Integer), 5(Integer)
2019-01-31 10:09:37.973 [http-nio-8080-exec-2] DEBUG c.y.s.d.P.findProductReceiveStockRecordByProdIdAndProdParamId - <==      Total: 0
2019-01-31 10:09:37.973 [http-nio-8080-exec-2] DEBUG c.y.s.d.P.insertProductReceiveStock - ==>  Preparing: insert into product_receive_stock(prod_id,prod_param_id,stock_num)values(?,?,?) 
2019-01-31 10:09:37.974 [http-nio-8080-exec-2] DEBUG c.y.s.d.P.insertProductReceiveStock - ==> Parameters: 4(Integer), 5(Integer), 18(Integer)
2019-01-31 10:09:37.976 [http-nio-8080-exec-2] DEBUG c.y.s.d.P.insertProductReceiveStock - <==    Updates: 1
2019-01-31 10:09:37.976 [http-nio-8080-exec-2] DEBUG c.y.s.d.P.insertProductReceiveTrade - ==>  Preparing: insert into product_receive_trade(trade_date,prod_id,prod_param_id,begin_num,trade_add,end_num,oper_id)values(?,?,?,?,?,?,?) 
2019-01-31 10:09:37.977 [http-nio-8080-exec-2] DEBUG c.y.s.d.P.insertProductReceiveTrade - ==> Parameters: 2019-01-31 10:09:24.0(Timestamp), 4(Integer), 5(Integer), 0(Integer), 18(Integer), 18(Integer), 5(Integer)
2019-01-31 10:09:37.979 [http-nio-8080-exec-2] DEBUG c.y.s.d.P.insertProductReceiveTrade - <==    Updates: 1
2019-01-31 10:09:41.303 [http-nio-8080-exec-5] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productReceiveIn
2019-01-31 10:09:43.067 [http-nio-8080-exec-4] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productListForTrade
2019-01-31 10:09:43.073 [http-nio-8080-exec-4] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 order by prod_id 
2019-01-31 10:09:43.074 [http-nio-8080-exec-4] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==> Parameters: 
2019-01-31 10:09:43.076 [http-nio-8080-exec-4] DEBUG com.yun.product.dao.ProductDao.findProductByParam - <==      Total: 4
2019-01-31 10:09:43.077 [http-nio-8080-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-31 10:09:43.077 [http-nio-8080-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 2(Integer)
2019-01-31 10:09:43.079 [http-nio-8080-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-01-31 10:09:43.079 [http-nio-8080-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-31 10:09:43.080 [http-nio-8080-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 3(Integer)
2019-01-31 10:09:43.081 [http-nio-8080-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-01-31 10:09:43.082 [http-nio-8080-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-31 10:09:43.082 [http-nio-8080-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 4(Integer)
2019-01-31 10:09:43.084 [http-nio-8080-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 2
2019-01-31 10:09:43.084 [http-nio-8080-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-31 10:09:43.084 [http-nio-8080-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 5(Integer)
2019-01-31 10:09:43.086 [http-nio-8080-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-01-31 10:09:46.159 [http-nio-8080-exec-6] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/prodParamList
2019-01-31 10:09:46.164 [http-nio-8080-exec-6] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-31 10:09:46.165 [http-nio-8080-exec-6] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 4(Integer)
2019-01-31 10:09:46.168 [http-nio-8080-exec-6] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 2
2019-01-31 10:09:51.952 [http-nio-8080-exec-7] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productReceiveInSave
2019-01-31 10:09:51.956 [http-nio-8080-exec-7] DEBUG c.y.s.d.P.findProductReceiveStockRecordByProdIdAndProdParamId - ==>  Preparing: select * from product_receive_stock where 1=1 and prod_id=? and prod_param_id=? 
2019-01-31 10:09:51.956 [http-nio-8080-exec-7] DEBUG c.y.s.d.P.findProductReceiveStockRecordByProdIdAndProdParamId - ==> Parameters: 4(Integer), 5(Integer)
2019-01-31 10:09:51.958 [http-nio-8080-exec-7] DEBUG c.y.s.d.P.findProductReceiveStockRecordByProdIdAndProdParamId - <==      Total: 1
2019-01-31 10:09:51.959 [http-nio-8080-exec-7] DEBUG c.y.s.d.P.findProductReceiveStockNumByProdIdAndProdParamId - ==>  Preparing: select stock_num from product_receive_stock where 1=1 and prod_id=? and prod_param_id=? 
2019-01-31 10:09:51.960 [http-nio-8080-exec-7] DEBUG c.y.s.d.P.findProductReceiveStockNumByProdIdAndProdParamId - ==> Parameters: 4(Integer), 5(Integer)
2019-01-31 10:09:51.961 [http-nio-8080-exec-7] DEBUG c.y.s.d.P.findProductReceiveStockNumByProdIdAndProdParamId - <==      Total: 1
2019-01-31 10:09:51.961 [http-nio-8080-exec-7] DEBUG c.y.s.d.P.updateProductReceiveStock - ==>  Preparing: update product_receive_stock set prod_id=?,prod_param_id=?,stock_num=? where prod_rece_stock_id=? 
2019-01-31 10:09:51.962 [http-nio-8080-exec-7] DEBUG c.y.s.d.P.updateProductReceiveStock - ==> Parameters: 4(Integer), 5(Integer), 28(Integer), 11(Integer)
2019-01-31 10:09:51.964 [http-nio-8080-exec-7] DEBUG c.y.s.d.P.updateProductReceiveStock - <==    Updates: 1
2019-01-31 10:09:51.965 [http-nio-8080-exec-7] DEBUG c.y.s.d.P.insertProductReceiveTrade - ==>  Preparing: insert into product_receive_trade(trade_date,prod_id,prod_param_id,begin_num,trade_add,end_num,oper_id)values(?,?,?,?,?,?,?) 
2019-01-31 10:09:51.966 [http-nio-8080-exec-7] DEBUG c.y.s.d.P.insertProductReceiveTrade - ==> Parameters: 2019-01-31 10:09:41.0(Timestamp), 4(Integer), 5(Integer), 18(Integer), 10(Integer), 28(Integer), 5(Integer)
2019-01-31 10:09:52.019 [http-nio-8080-exec-7] DEBUG c.y.s.d.P.insertProductReceiveTrade - <==    Updates: 1
2019-01-31 10:09:54.625 [http-nio-8080-exec-8] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productReceiveIn
2019-01-31 10:09:56.161 [http-nio-8080-exec-9] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productListForTrade
2019-01-31 10:09:56.167 [http-nio-8080-exec-9] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 order by prod_id 
2019-01-31 10:09:56.168 [http-nio-8080-exec-9] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==> Parameters: 
2019-01-31 10:09:56.172 [http-nio-8080-exec-9] DEBUG com.yun.product.dao.ProductDao.findProductByParam - <==      Total: 4
2019-01-31 10:09:56.174 [http-nio-8080-exec-9] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-31 10:09:56.174 [http-nio-8080-exec-9] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 2(Integer)
2019-01-31 10:09:56.176 [http-nio-8080-exec-9] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-01-31 10:09:56.177 [http-nio-8080-exec-9] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-31 10:09:56.178 [http-nio-8080-exec-9] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 3(Integer)
2019-01-31 10:09:56.180 [http-nio-8080-exec-9] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-01-31 10:09:56.181 [http-nio-8080-exec-9] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-31 10:09:56.182 [http-nio-8080-exec-9] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 4(Integer)
2019-01-31 10:09:56.183 [http-nio-8080-exec-9] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 2
2019-01-31 10:09:56.183 [http-nio-8080-exec-9] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-31 10:09:56.184 [http-nio-8080-exec-9] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 5(Integer)
2019-01-31 10:09:56.185 [http-nio-8080-exec-9] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-01-31 10:09:58.354 [http-nio-8080-exec-10] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/prodParamList
2019-01-31 10:09:58.358 [http-nio-8080-exec-10] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-31 10:09:58.358 [http-nio-8080-exec-10] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 4(Integer)
2019-01-31 10:09:58.361 [http-nio-8080-exec-10] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 2
2019-01-31 10:10:02.296 [http-nio-8080-exec-1] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productReceiveInSave
2019-01-31 10:10:02.299 [http-nio-8080-exec-1] DEBUG c.y.s.d.P.findProductReceiveStockRecordByProdIdAndProdParamId - ==>  Preparing: select * from product_receive_stock where 1=1 and prod_id=? and prod_param_id=? 
2019-01-31 10:10:02.299 [http-nio-8080-exec-1] DEBUG c.y.s.d.P.findProductReceiveStockRecordByProdIdAndProdParamId - ==> Parameters: 4(Integer), 6(Integer)
2019-01-31 10:10:02.301 [http-nio-8080-exec-1] DEBUG c.y.s.d.P.findProductReceiveStockRecordByProdIdAndProdParamId - <==      Total: 0
2019-01-31 10:10:02.302 [http-nio-8080-exec-1] DEBUG c.y.s.d.P.insertProductReceiveStock - ==>  Preparing: insert into product_receive_stock(prod_id,prod_param_id,stock_num)values(?,?,?) 
2019-01-31 10:10:02.302 [http-nio-8080-exec-1] DEBUG c.y.s.d.P.insertProductReceiveStock - ==> Parameters: 4(Integer), 6(Integer), 5(Integer)
2019-01-31 10:10:02.304 [http-nio-8080-exec-1] DEBUG c.y.s.d.P.insertProductReceiveStock - <==    Updates: 1
2019-01-31 10:10:02.304 [http-nio-8080-exec-1] DEBUG c.y.s.d.P.insertProductReceiveTrade - ==>  Preparing: insert into product_receive_trade(trade_date,prod_id,prod_param_id,begin_num,trade_add,end_num,oper_id)values(?,?,?,?,?,?,?) 
2019-01-31 10:10:02.306 [http-nio-8080-exec-1] DEBUG c.y.s.d.P.insertProductReceiveTrade - ==> Parameters: 2019-01-31 10:09:54.0(Timestamp), 4(Integer), 6(Integer), 0(Integer), 5(Integer), 5(Integer), 5(Integer)
2019-01-31 10:10:02.307 [http-nio-8080-exec-1] DEBUG c.y.s.d.P.insertProductReceiveTrade - <==    Updates: 1
2019-01-31 10:10:03.981 [http-nio-8080-exec-3] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productReceiveIn
2019-01-31 10:10:06.796 [http-nio-8080-exec-2] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productReceiveStockList
2019-01-31 10:10:06.798 [http-nio-8080-exec-2] DEBUG c.y.stock.controller.ProductReceiveStockController - 跳转到待收库存查询控制器
2019-01-31 10:10:06.802 [http-nio-8080-exec-2] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - ==>  Preparing: select count(*) from product_receive_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 
2019-01-31 10:10:06.802 [http-nio-8080-exec-2] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - ==> Parameters: 
2019-01-31 10:10:06.803 [http-nio-8080-exec-2] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - <==      Total: 1
2019-01-31 10:10:06.808 [http-nio-8080-exec-2] DEBUG c.y.s.d.P.findProductReceiveStockList - ==>  Preparing: select ps.prod_rece_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_receive_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 order by p.prod_id,pp.prod_param_id limit ?,? 
2019-01-31 10:10:06.808 [http-nio-8080-exec-2] DEBUG c.y.s.d.P.findProductReceiveStockList - ==> Parameters: 0(Integer), 5(Integer)
2019-01-31 10:10:06.811 [http-nio-8080-exec-2] DEBUG c.y.s.d.P.findProductReceiveStockList - <==      Total: 4
2019-01-31 10:10:06.813 [http-nio-8080-exec-2] DEBUG c.y.stock.controller.ProductReceiveStockController - 转到待收库存页面
2019-01-31 10:11:03.796 [http-nio-8080-exec-5] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productReceiveStockList
2019-01-31 10:11:03.797 [http-nio-8080-exec-5] DEBUG c.y.stock.controller.ProductReceiveStockController - 跳转到待收库存查询控制器
2019-01-31 10:11:03.802 [http-nio-8080-exec-5] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - ==>  Preparing: select count(*) from product_receive_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 
2019-01-31 10:11:03.802 [http-nio-8080-exec-5] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - ==> Parameters: 
2019-01-31 10:11:03.803 [http-nio-8080-exec-5] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - <==      Total: 1
2019-01-31 10:11:03.807 [http-nio-8080-exec-5] DEBUG c.y.s.d.P.findProductReceiveStockList - ==>  Preparing: select ps.prod_rece_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_receive_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 order by p.prod_id,pp.prod_param_id limit ?,? 
2019-01-31 10:11:03.807 [http-nio-8080-exec-5] DEBUG c.y.s.d.P.findProductReceiveStockList - ==> Parameters: 0(Integer), 5(Integer)
2019-01-31 10:11:03.812 [http-nio-8080-exec-5] DEBUG c.y.s.d.P.findProductReceiveStockList - <==      Total: 4
2019-01-31 10:11:03.814 [http-nio-8080-exec-5] DEBUG c.y.stock.controller.ProductReceiveStockController - 转到待收库存页面
2019-01-31 10:11:06.418 [http-nio-8080-exec-4] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productReceiveStockPreAdd
2019-01-31 10:11:07.674 [http-nio-8080-exec-6] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productListForTrade
2019-01-31 10:11:07.676 [http-nio-8080-exec-6] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 order by prod_id 
2019-01-31 10:11:07.676 [http-nio-8080-exec-6] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==> Parameters: 
2019-01-31 10:11:07.679 [http-nio-8080-exec-6] DEBUG com.yun.product.dao.ProductDao.findProductByParam - <==      Total: 4
2019-01-31 10:11:07.679 [http-nio-8080-exec-6] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-31 10:11:07.679 [http-nio-8080-exec-6] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 2(Integer)
2019-01-31 10:11:07.680 [http-nio-8080-exec-6] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-01-31 10:11:07.681 [http-nio-8080-exec-6] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-31 10:11:07.681 [http-nio-8080-exec-6] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 3(Integer)
2019-01-31 10:11:07.683 [http-nio-8080-exec-6] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-01-31 10:11:07.683 [http-nio-8080-exec-6] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-31 10:11:07.683 [http-nio-8080-exec-6] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 4(Integer)
2019-01-31 10:11:07.684 [http-nio-8080-exec-6] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 2
2019-01-31 10:11:07.685 [http-nio-8080-exec-6] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-31 10:11:07.685 [http-nio-8080-exec-6] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 5(Integer)
2019-01-31 10:11:07.685 [http-nio-8080-exec-6] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-01-31 10:11:10.984 [http-nio-8080-exec-7] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/prodParamList
2019-01-31 10:11:10.985 [http-nio-8080-exec-7] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-31 10:11:10.986 [http-nio-8080-exec-7] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 5(Integer)
2019-01-31 10:11:10.987 [http-nio-8080-exec-7] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-01-31 10:11:23.023 [http-nio-8080-exec-8] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productReceiveStockList
2019-01-31 10:11:23.025 [http-nio-8080-exec-8] DEBUG c.y.stock.controller.ProductReceiveStockController - 跳转到待收库存查询控制器
2019-01-31 10:11:23.032 [http-nio-8080-exec-8] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - ==>  Preparing: select count(*) from product_receive_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 
2019-01-31 10:11:23.032 [http-nio-8080-exec-8] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - ==> Parameters: 
2019-01-31 10:11:23.034 [http-nio-8080-exec-8] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - <==      Total: 1
2019-01-31 10:11:23.038 [http-nio-8080-exec-8] DEBUG c.y.s.d.P.findProductReceiveStockList - ==>  Preparing: select ps.prod_rece_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_receive_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 order by p.prod_id,pp.prod_param_id limit ?,? 
2019-01-31 10:11:23.040 [http-nio-8080-exec-8] DEBUG c.y.s.d.P.findProductReceiveStockList - ==> Parameters: 0(Integer), 5(Integer)
2019-01-31 10:11:23.042 [http-nio-8080-exec-8] DEBUG c.y.s.d.P.findProductReceiveStockList - <==      Total: 4
2019-01-31 10:11:23.044 [http-nio-8080-exec-8] DEBUG c.y.stock.controller.ProductReceiveStockController - 转到待收库存页面
2019-01-31 10:11:25.345 [http-nio-8080-exec-9] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productReceiveStockPreAdd
2019-01-31 10:11:27.208 [http-nio-8080-exec-10] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productListForTrade
2019-01-31 10:11:27.213 [http-nio-8080-exec-10] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 order by prod_id 
2019-01-31 10:11:27.214 [http-nio-8080-exec-10] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==> Parameters: 
2019-01-31 10:11:27.217 [http-nio-8080-exec-10] DEBUG com.yun.product.dao.ProductDao.findProductByParam - <==      Total: 4
2019-01-31 10:11:27.217 [http-nio-8080-exec-10] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-31 10:11:27.218 [http-nio-8080-exec-10] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 2(Integer)
2019-01-31 10:11:27.220 [http-nio-8080-exec-10] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-01-31 10:11:27.220 [http-nio-8080-exec-10] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-31 10:11:27.221 [http-nio-8080-exec-10] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 3(Integer)
2019-01-31 10:11:27.223 [http-nio-8080-exec-10] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-01-31 10:11:27.223 [http-nio-8080-exec-10] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-31 10:11:27.224 [http-nio-8080-exec-10] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 4(Integer)
2019-01-31 10:11:27.226 [http-nio-8080-exec-10] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 2
2019-01-31 10:11:27.226 [http-nio-8080-exec-10] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-31 10:11:27.227 [http-nio-8080-exec-10] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 5(Integer)
2019-01-31 10:11:27.228 [http-nio-8080-exec-10] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-01-31 10:11:29.832 [http-nio-8080-exec-1] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/prodParamList
2019-01-31 10:11:29.833 [http-nio-8080-exec-1] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-31 10:11:29.833 [http-nio-8080-exec-1] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 5(Integer)
2019-01-31 10:11:29.834 [http-nio-8080-exec-1] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-01-31 10:11:34.569 [http-nio-8080-exec-3] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productReceiveStockSave
2019-01-31 10:11:34.574 [http-nio-8080-exec-3] DEBUG c.y.s.d.P.insertProductReceiveStock - ==>  Preparing: insert into product_receive_stock(prod_id,prod_param_id,stock_num)values(?,?,?) 
2019-01-31 10:11:34.574 [http-nio-8080-exec-3] DEBUG c.y.s.d.P.insertProductReceiveStock - ==> Parameters: 5(Integer), 7(Integer), 56(Integer)
2019-01-31 10:11:34.577 [http-nio-8080-exec-3] DEBUG c.y.s.d.P.insertProductReceiveStock - <==    Updates: 1
2019-01-31 10:11:34.674 [http-nio-8080-exec-2] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productReceiveStockList
2019-01-31 10:11:34.675 [http-nio-8080-exec-2] DEBUG c.y.stock.controller.ProductReceiveStockController - 跳转到待收库存查询控制器
2019-01-31 10:11:34.676 [http-nio-8080-exec-2] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - ==>  Preparing: select count(*) from product_receive_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 
2019-01-31 10:11:34.676 [http-nio-8080-exec-2] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - ==> Parameters: 
2019-01-31 10:11:34.677 [http-nio-8080-exec-2] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - <==      Total: 1
2019-01-31 10:11:34.679 [http-nio-8080-exec-2] DEBUG c.y.s.d.P.findProductReceiveStockList - ==>  Preparing: select ps.prod_rece_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_receive_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 order by p.prod_id,pp.prod_param_id limit ?,? 
2019-01-31 10:11:34.679 [http-nio-8080-exec-2] DEBUG c.y.s.d.P.findProductReceiveStockList - ==> Parameters: 0(Integer), 5(Integer)
2019-01-31 10:11:34.681 [http-nio-8080-exec-2] DEBUG c.y.s.d.P.findProductReceiveStockList - <==      Total: 5
2019-01-31 10:11:34.682 [http-nio-8080-exec-2] DEBUG c.y.stock.controller.ProductReceiveStockController - 转到待收库存页面
2019-01-31 10:11:36.594 [http-nio-8080-exec-5] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productReceiveStockList
2019-01-31 10:11:36.595 [http-nio-8080-exec-5] DEBUG c.y.stock.controller.ProductReceiveStockController - 跳转到待收库存查询控制器
2019-01-31 10:11:36.597 [http-nio-8080-exec-5] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - ==>  Preparing: select count(*) from product_receive_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 
2019-01-31 10:11:36.597 [http-nio-8080-exec-5] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - ==> Parameters: 
2019-01-31 10:11:36.599 [http-nio-8080-exec-5] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - <==      Total: 1
2019-01-31 10:11:36.603 [http-nio-8080-exec-5] DEBUG c.y.s.d.P.findProductReceiveStockList - ==>  Preparing: select ps.prod_rece_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_receive_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 order by p.prod_id,pp.prod_param_id limit ?,? 
2019-01-31 10:11:36.603 [http-nio-8080-exec-5] DEBUG c.y.s.d.P.findProductReceiveStockList - ==> Parameters: 0(Integer), 5(Integer)
2019-01-31 10:11:36.608 [http-nio-8080-exec-5] DEBUG c.y.s.d.P.findProductReceiveStockList - <==      Total: 5
2019-01-31 10:11:36.611 [http-nio-8080-exec-5] DEBUG c.y.stock.controller.ProductReceiveStockController - 转到待收库存页面
2019-01-31 10:11:40.937 [http-nio-8080-exec-4] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productList
2019-01-31 10:11:40.943 [http-nio-8080-exec-4] DEBUG c.yun.product.dao.ProductDao.findProductRowByParam - ==>  Preparing: select count(*) from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 
2019-01-31 10:11:40.943 [http-nio-8080-exec-4] DEBUG c.yun.product.dao.ProductDao.findProductRowByParam - ==> Parameters: 
2019-01-31 10:11:40.945 [http-nio-8080-exec-4] DEBUG c.yun.product.dao.ProductDao.findProductRowByParam - <==      Total: 1
2019-01-31 10:11:40.949 [http-nio-8080-exec-4] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 order by prod_id limit ?,? 
2019-01-31 10:11:40.950 [http-nio-8080-exec-4] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==> Parameters: 0(Integer), 5(Integer)
2019-01-31 10:11:40.952 [http-nio-8080-exec-4] DEBUG com.yun.product.dao.ProductDao.findProductByParam - <==      Total: 4
2019-01-31 10:11:40.953 [http-nio-8080-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-31 10:11:40.953 [http-nio-8080-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 2(Integer)
2019-01-31 10:11:40.954 [http-nio-8080-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-01-31 10:11:40.955 [http-nio-8080-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-31 10:11:40.955 [http-nio-8080-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 3(Integer)
2019-01-31 10:11:40.957 [http-nio-8080-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-01-31 10:11:40.957 [http-nio-8080-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-31 10:11:40.958 [http-nio-8080-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 4(Integer)
2019-01-31 10:11:40.961 [http-nio-8080-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 2
2019-01-31 10:11:40.961 [http-nio-8080-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-31 10:11:40.961 [http-nio-8080-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 5(Integer)
2019-01-31 10:11:40.963 [http-nio-8080-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-01-31 10:11:50.193 [http-nio-8080-exec-6] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/prodParamList
2019-01-31 10:11:50.197 [http-nio-8080-exec-6] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-31 10:11:50.197 [http-nio-8080-exec-6] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 5(Integer)
2019-01-31 10:11:50.199 [http-nio-8080-exec-6] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-01-31 10:11:52.233 [http-nio-8080-exec-7] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/prodParamPreAdd
2019-01-31 10:11:52.266 [http-nio-8080-exec-9] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/js/bootstrap-treeview.js
2019-01-31 10:11:52.266 [http-nio-8080-exec-8] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/css/bootstrap-treeview.css
2019-01-31 10:11:55.011 [http-nio-8080-exec-10] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/prodParamSave
2019-01-31 10:11:55.014 [http-nio-8080-exec-10] DEBUG c.y.p.d.ProductParameterDao.insertProductParameter - ==>  Preparing: insert into product_parameter(prod_param_name,prod_id) values(?,?) 
2019-01-31 10:11:55.014 [http-nio-8080-exec-10] DEBUG c.y.p.d.ProductParameterDao.insertProductParameter - ==> Parameters: 3444(String), 5(Integer)
2019-01-31 10:11:55.015 [http-nio-8080-exec-10] DEBUG c.y.p.d.ProductParameterDao.insertProductParameter - <==    Updates: 1
2019-01-31 10:11:55.128 [http-nio-8080-exec-1] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productList
2019-01-31 10:11:55.131 [http-nio-8080-exec-1] DEBUG c.yun.product.dao.ProductDao.findProductRowByParam - ==>  Preparing: select count(*) from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 
2019-01-31 10:11:55.132 [http-nio-8080-exec-1] DEBUG c.yun.product.dao.ProductDao.findProductRowByParam - ==> Parameters: 
2019-01-31 10:11:55.135 [http-nio-8080-exec-1] DEBUG c.yun.product.dao.ProductDao.findProductRowByParam - <==      Total: 1
2019-01-31 10:11:55.141 [http-nio-8080-exec-1] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 order by prod_id limit ?,? 
2019-01-31 10:11:55.141 [http-nio-8080-exec-1] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==> Parameters: 0(Integer), 5(Integer)
2019-01-31 10:11:55.144 [http-nio-8080-exec-1] DEBUG com.yun.product.dao.ProductDao.findProductByParam - <==      Total: 4
2019-01-31 10:11:55.145 [http-nio-8080-exec-1] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-31 10:11:55.146 [http-nio-8080-exec-1] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 2(Integer)
2019-01-31 10:11:55.147 [http-nio-8080-exec-1] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-01-31 10:11:55.148 [http-nio-8080-exec-1] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-31 10:11:55.149 [http-nio-8080-exec-1] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 3(Integer)
2019-01-31 10:11:55.151 [http-nio-8080-exec-1] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-01-31 10:11:55.151 [http-nio-8080-exec-1] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-31 10:11:55.152 [http-nio-8080-exec-1] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 4(Integer)
2019-01-31 10:11:55.154 [http-nio-8080-exec-1] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 2
2019-01-31 10:11:55.155 [http-nio-8080-exec-1] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-31 10:11:55.155 [http-nio-8080-exec-1] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 5(Integer)
2019-01-31 10:11:55.157 [http-nio-8080-exec-1] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 2
2019-01-31 10:12:00.259 [http-nio-8080-exec-3] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productReceiveIn
2019-01-31 10:12:01.986 [http-nio-8080-exec-2] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productListForTrade
2019-01-31 10:12:01.991 [http-nio-8080-exec-2] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 order by prod_id 
2019-01-31 10:12:01.992 [http-nio-8080-exec-2] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==> Parameters: 
2019-01-31 10:12:01.995 [http-nio-8080-exec-2] DEBUG com.yun.product.dao.ProductDao.findProductByParam - <==      Total: 4
2019-01-31 10:12:01.996 [http-nio-8080-exec-2] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-31 10:12:01.996 [http-nio-8080-exec-2] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 2(Integer)
2019-01-31 10:12:01.998 [http-nio-8080-exec-2] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-01-31 10:12:01.999 [http-nio-8080-exec-2] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-31 10:12:01.999 [http-nio-8080-exec-2] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 3(Integer)
2019-01-31 10:12:02.001 [http-nio-8080-exec-2] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-01-31 10:12:02.002 [http-nio-8080-exec-2] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-31 10:12:02.002 [http-nio-8080-exec-2] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 4(Integer)
2019-01-31 10:12:02.003 [http-nio-8080-exec-2] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 2
2019-01-31 10:12:02.003 [http-nio-8080-exec-2] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-31 10:12:02.004 [http-nio-8080-exec-2] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 5(Integer)
2019-01-31 10:12:02.005 [http-nio-8080-exec-2] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 2
2019-01-31 10:12:04.618 [http-nio-8080-exec-5] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/prodParamList
2019-01-31 10:12:04.621 [http-nio-8080-exec-5] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-31 10:12:04.621 [http-nio-8080-exec-5] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 5(Integer)
2019-01-31 10:12:04.623 [http-nio-8080-exec-5] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 2
2019-01-31 10:12:08.898 [http-nio-8080-exec-4] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productReceiveInSave
2019-01-31 10:12:08.901 [http-nio-8080-exec-4] DEBUG c.y.s.d.P.findProductReceiveStockRecordByProdIdAndProdParamId - ==>  Preparing: select * from product_receive_stock where 1=1 and prod_id=? and prod_param_id=? 
2019-01-31 10:12:08.901 [http-nio-8080-exec-4] DEBUG c.y.s.d.P.findProductReceiveStockRecordByProdIdAndProdParamId - ==> Parameters: 5(Integer), 10(Integer)
2019-01-31 10:12:08.904 [http-nio-8080-exec-4] DEBUG c.y.s.d.P.findProductReceiveStockRecordByProdIdAndProdParamId - <==      Total: 0
2019-01-31 10:12:08.905 [http-nio-8080-exec-4] DEBUG c.y.s.d.P.insertProductReceiveStock - ==>  Preparing: insert into product_receive_stock(prod_id,prod_param_id,stock_num)values(?,?,?) 
2019-01-31 10:12:08.906 [http-nio-8080-exec-4] DEBUG c.y.s.d.P.insertProductReceiveStock - ==> Parameters: 5(Integer), 10(Integer), 33(Integer)
2019-01-31 10:12:08.907 [http-nio-8080-exec-4] DEBUG c.y.s.d.P.insertProductReceiveStock - <==    Updates: 1
2019-01-31 10:12:08.908 [http-nio-8080-exec-4] DEBUG c.y.s.d.P.insertProductReceiveTrade - ==>  Preparing: insert into product_receive_trade(trade_date,prod_id,prod_param_id,begin_num,trade_add,end_num,oper_id)values(?,?,?,?,?,?,?) 
2019-01-31 10:12:08.908 [http-nio-8080-exec-4] DEBUG c.y.s.d.P.insertProductReceiveTrade - ==> Parameters: 2019-01-31 10:12:00.0(Timestamp), 5(Integer), 10(Integer), 0(Integer), 33(Integer), 33(Integer), 5(Integer)
2019-01-31 10:12:08.909 [http-nio-8080-exec-4] DEBUG c.y.s.d.P.insertProductReceiveTrade - <==    Updates: 1
2019-01-31 10:12:10.301 [http-nio-8080-exec-6] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productReceiveIn
2019-01-31 10:12:12.295 [http-nio-8080-exec-7] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productReceiveStockList
2019-01-31 10:12:12.297 [http-nio-8080-exec-7] DEBUG c.y.stock.controller.ProductReceiveStockController - 跳转到待收库存查询控制器
2019-01-31 10:12:12.302 [http-nio-8080-exec-7] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - ==>  Preparing: select count(*) from product_receive_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 
2019-01-31 10:12:12.303 [http-nio-8080-exec-7] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - ==> Parameters: 
2019-01-31 10:12:12.305 [http-nio-8080-exec-7] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - <==      Total: 1
2019-01-31 10:12:12.311 [http-nio-8080-exec-7] DEBUG c.y.s.d.P.findProductReceiveStockList - ==>  Preparing: select ps.prod_rece_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_receive_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 order by p.prod_id,pp.prod_param_id limit ?,? 
2019-01-31 10:12:12.311 [http-nio-8080-exec-7] DEBUG c.y.s.d.P.findProductReceiveStockList - ==> Parameters: 0(Integer), 5(Integer)
2019-01-31 10:12:12.316 [http-nio-8080-exec-7] DEBUG c.y.s.d.P.findProductReceiveStockList - <==      Total: 5
2019-01-31 10:12:12.319 [http-nio-8080-exec-7] DEBUG c.y.stock.controller.ProductReceiveStockController - 转到待收库存页面
2019-01-31 10:12:14.248 [http-nio-8080-exec-9] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productReceiveStockList
2019-01-31 10:12:14.249 [http-nio-8080-exec-9] DEBUG c.y.stock.controller.ProductReceiveStockController - 跳转到待收库存查询控制器
2019-01-31 10:12:14.251 [http-nio-8080-exec-9] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - ==>  Preparing: select count(*) from product_receive_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 
2019-01-31 10:12:14.252 [http-nio-8080-exec-9] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - ==> Parameters: 
2019-01-31 10:12:14.254 [http-nio-8080-exec-9] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - <==      Total: 1
2019-01-31 10:12:14.258 [http-nio-8080-exec-9] DEBUG c.y.s.d.P.findProductReceiveStockList - ==>  Preparing: select ps.prod_rece_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_receive_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 order by p.prod_id,pp.prod_param_id limit ?,? 
2019-01-31 10:12:14.258 [http-nio-8080-exec-9] DEBUG c.y.s.d.P.findProductReceiveStockList - ==> Parameters: 5(Integer), 5(Integer)
2019-01-31 10:12:14.260 [http-nio-8080-exec-9] DEBUG c.y.s.d.P.findProductReceiveStockList - <==      Total: 1
2019-01-31 10:12:14.268 [http-nio-8080-exec-9] DEBUG c.y.stock.controller.ProductReceiveStockController - 转到待收库存页面
2019-01-31 10:12:15.586 [http-nio-8080-exec-8] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productReceiveStockList
2019-01-31 10:12:15.588 [http-nio-8080-exec-8] DEBUG c.y.stock.controller.ProductReceiveStockController - 跳转到待收库存查询控制器
2019-01-31 10:12:15.592 [http-nio-8080-exec-8] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - ==>  Preparing: select count(*) from product_receive_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 
2019-01-31 10:12:15.593 [http-nio-8080-exec-8] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - ==> Parameters: 
2019-01-31 10:12:15.594 [http-nio-8080-exec-8] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - <==      Total: 1
2019-01-31 10:12:15.596 [http-nio-8080-exec-8] DEBUG c.y.s.d.P.findProductReceiveStockList - ==>  Preparing: select ps.prod_rece_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_receive_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 order by p.prod_id,pp.prod_param_id limit ?,? 
2019-01-31 10:12:15.597 [http-nio-8080-exec-8] DEBUG c.y.s.d.P.findProductReceiveStockList - ==> Parameters: 0(Integer), 5(Integer)
2019-01-31 10:12:15.600 [http-nio-8080-exec-8] DEBUG c.y.s.d.P.findProductReceiveStockList - <==      Total: 5
2019-01-31 10:12:15.601 [http-nio-8080-exec-8] DEBUG c.y.stock.controller.ProductReceiveStockController - 转到待收库存页面
2019-01-31 10:12:21.103 [http-nio-8080-exec-10] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productReceiveStockList
2019-01-31 10:12:21.105 [http-nio-8080-exec-10] DEBUG c.y.stock.controller.ProductReceiveStockController - 跳转到待收库存查询控制器
2019-01-31 10:12:21.107 [http-nio-8080-exec-10] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - ==>  Preparing: select count(*) from product_receive_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 and p.prod_name like ? 
2019-01-31 10:12:21.108 [http-nio-8080-exec-10] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - ==> Parameters: %水%(String)
2019-01-31 10:12:21.109 [http-nio-8080-exec-10] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - <==      Total: 1
2019-01-31 10:12:21.112 [http-nio-8080-exec-10] DEBUG c.y.s.d.P.findProductReceiveStockList - ==>  Preparing: select ps.prod_rece_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_receive_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 and p.prod_name like ? order by p.prod_id,pp.prod_param_id limit ?,? 
2019-01-31 10:12:21.112 [http-nio-8080-exec-10] DEBUG c.y.s.d.P.findProductReceiveStockList - ==> Parameters: %水%(String), 0(Integer), 5(Integer)
2019-01-31 10:12:21.113 [http-nio-8080-exec-10] DEBUG c.y.s.d.P.findProductReceiveStockList - <==      Total: 2
2019-01-31 10:12:21.115 [http-nio-8080-exec-10] DEBUG c.y.stock.controller.ProductReceiveStockController - 转到待收库存页面
2019-01-31 10:13:17.783 [http-nio-8080-exec-3] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productReceiveStockToCurrentStock
2019-01-31 10:13:17.786 [http-nio-8080-exec-3] DEBUG c.y.s.d.P.findProductReceiveStockById - ==>  Preparing: select ps.prod_rece_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_receive_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 and ps.prod_rece_stock_id=? 
2019-01-31 10:13:17.787 [http-nio-8080-exec-3] DEBUG c.y.s.d.P.findProductReceiveStockById - ==> Parameters: 13(Integer)
2019-01-31 10:13:17.788 [http-nio-8080-exec-3] DEBUG c.y.s.d.P.findProductReceiveStockById - <==      Total: 1
2019-01-31 10:13:21.814 [http-nio-8080-exec-2] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productReceiveToCurrentSave
2019-01-31 10:13:21.815 [http-nio-8080-exec-2] DEBUG c.y.stock.controller.ProductReceiveTradeController - java.lang.Exception: 待收库存转入当前库存数量不足
2019-01-31 10:13:36.676 [http-nio-8080-exec-5] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productReceiveToCurrentSave
2019-01-31 10:13:36.682 [http-nio-8080-exec-5] DEBUG c.y.s.d.P.findProductReceiveStockById - ==>  Preparing: select ps.prod_rece_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_receive_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 and ps.prod_rece_stock_id=? 
2019-01-31 10:13:36.683 [http-nio-8080-exec-5] DEBUG c.y.s.d.P.findProductReceiveStockById - ==> Parameters: 13(Integer)
2019-01-31 10:13:36.684 [http-nio-8080-exec-5] DEBUG c.y.s.d.P.findProductReceiveStockById - <==      Total: 1
2019-01-31 10:13:36.685 [http-nio-8080-exec-5] DEBUG c.y.s.d.P.insertProductReceiveTrade - ==>  Preparing: insert into product_receive_trade(trade_date,prod_id,prod_param_id,begin_num,trade_add,end_num,oper_id)values(?,?,?,?,?,?,?) 
2019-01-31 10:13:36.685 [http-nio-8080-exec-5] DEBUG c.y.s.d.P.insertProductReceiveTrade - ==> Parameters: 2019-01-31 10:13:17.0(Timestamp), 5(Integer), 7(Integer), 56(Integer), null, 36(Integer), 5(Integer)
2019-01-31 10:13:36.723 [http-nio-8080-exec-5] DEBUG c.y.s.d.P.insertProductReceiveTrade - <==    Updates: 1
2019-01-31 10:13:36.724 [http-nio-8080-exec-5] DEBUG c.y.s.d.P.findProductStockByProdIdAndProdParamId - ==>  Preparing: select ps.prod_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 and p.prod_id=? and pp.prod_param_Id=? 
2019-01-31 10:13:36.724 [http-nio-8080-exec-5] DEBUG c.y.s.d.P.findProductStockByProdIdAndProdParamId - ==> Parameters: 5(Integer), 7(Integer)
2019-01-31 10:13:36.725 [http-nio-8080-exec-5] DEBUG c.y.s.d.P.findProductStockByProdIdAndProdParamId - <==      Total: 0
2019-01-31 10:13:36.725 [http-nio-8080-exec-5] DEBUG c.yun.stock.dao.ProductStockDao.insertProductStock - ==>  Preparing: insert into product_stock(prod_id,prod_param_id,stock_num)values(?,?,?) 
2019-01-31 10:13:36.725 [http-nio-8080-exec-5] DEBUG c.yun.stock.dao.ProductStockDao.insertProductStock - ==> Parameters: 5(Integer), 7(Integer), 20(Integer)
2019-01-31 10:13:36.726 [http-nio-8080-exec-5] DEBUG c.yun.stock.dao.ProductStockDao.insertProductStock - <==    Updates: 1
2019-01-31 10:13:36.727 [http-nio-8080-exec-5] DEBUG c.yun.stock.dao.ProductTradeDao.insertProductTrade - ==>  Preparing: insert into product_trade(trade_date,prod_id,prod_param_id,begin_num,trade_add,end_num,oper_id)values(?,?,?,?,?,?,?) 
2019-01-31 10:13:36.727 [http-nio-8080-exec-5] DEBUG c.yun.stock.dao.ProductTradeDao.insertProductTrade - ==> Parameters: 2019-01-31 10:13:17.0(Timestamp), 5(Integer), 7(Integer), 0(Integer), 20(Integer), 20(Integer), 5(Integer)
2019-01-31 10:13:36.728 [http-nio-8080-exec-5] DEBUG c.yun.stock.dao.ProductTradeDao.insertProductTrade - <==    Updates: 1
2019-01-31 10:13:36.728 [http-nio-8080-exec-5] DEBUG c.y.s.d.P.updateProductReceiveStock - ==>  Preparing: update product_receive_stock set prod_id=?,prod_param_id=?,stock_num=? where prod_rece_stock_id=? 
2019-01-31 10:13:36.729 [http-nio-8080-exec-5] DEBUG c.y.s.d.P.updateProductReceiveStock - ==> Parameters: 5(Integer), 7(Integer), 36(Integer), 13(Integer)
2019-01-31 10:13:36.741 [http-nio-8080-exec-5] DEBUG c.y.s.d.P.updateProductReceiveStock - <==    Updates: 1
2019-01-31 10:13:36.826 [http-nio-8080-exec-5] DEBUG c.y.stock.controller.ProductReceiveTradeController - result:待收库存转现有库存操作完成
2019-01-31 10:13:38.154 [http-nio-8080-exec-4] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productReceiveStockList
2019-01-31 10:13:38.154 [http-nio-8080-exec-4] DEBUG c.y.stock.controller.ProductReceiveStockController - 跳转到待收库存查询控制器
2019-01-31 10:13:38.157 [http-nio-8080-exec-4] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - ==>  Preparing: select count(*) from product_receive_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 
2019-01-31 10:13:38.157 [http-nio-8080-exec-4] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - ==> Parameters: 
2019-01-31 10:13:38.158 [http-nio-8080-exec-4] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - <==      Total: 1
2019-01-31 10:13:38.164 [http-nio-8080-exec-4] DEBUG c.y.s.d.P.findProductReceiveStockList - ==>  Preparing: select ps.prod_rece_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_receive_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 order by p.prod_id,pp.prod_param_id limit ?,? 
2019-01-31 10:13:38.164 [http-nio-8080-exec-4] DEBUG c.y.s.d.P.findProductReceiveStockList - ==> Parameters: 0(Integer), 5(Integer)
2019-01-31 10:13:38.165 [http-nio-8080-exec-4] DEBUG c.y.s.d.P.findProductReceiveStockList - <==      Total: 5
2019-01-31 10:13:38.167 [http-nio-8080-exec-4] DEBUG c.y.stock.controller.ProductReceiveStockController - 转到待收库存页面
2019-01-31 10:13:41.617 [http-nio-8080-exec-6] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productReceiveStockList
2019-01-31 10:13:41.619 [http-nio-8080-exec-6] DEBUG c.y.stock.controller.ProductReceiveStockController - 跳转到待收库存查询控制器
2019-01-31 10:13:41.625 [http-nio-8080-exec-6] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - ==>  Preparing: select count(*) from product_receive_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 
2019-01-31 10:13:41.626 [http-nio-8080-exec-6] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - ==> Parameters: 
2019-01-31 10:13:41.628 [http-nio-8080-exec-6] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - <==      Total: 1
2019-01-31 10:13:41.634 [http-nio-8080-exec-6] DEBUG c.y.s.d.P.findProductReceiveStockList - ==>  Preparing: select ps.prod_rece_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_receive_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 order by p.prod_id,pp.prod_param_id limit ?,? 
2019-01-31 10:13:41.634 [http-nio-8080-exec-6] DEBUG c.y.s.d.P.findProductReceiveStockList - ==> Parameters: 5(Integer), 5(Integer)
2019-01-31 10:13:41.636 [http-nio-8080-exec-6] DEBUG c.y.s.d.P.findProductReceiveStockList - <==      Total: 1
2019-01-31 10:13:41.638 [http-nio-8080-exec-6] DEBUG c.y.stock.controller.ProductReceiveStockController - 转到待收库存页面
2019-01-31 10:19:47.438 [main] INFO  com.yun.YunEbStockApplication - Starting YunEbStockApplication on USER-20181202BJ with PID 4800 (E:\workspace\yun-eb-stock\target\classes started by Administrator in E:\workspace\yun-eb-stock)
2019-01-31 10:19:47.442 [main] DEBUG com.yun.YunEbStockApplication - Running with Spring Boot v1.5.9.RELEASE, Spring v4.3.13.RELEASE
2019-01-31 10:19:47.442 [main] INFO  com.yun.YunEbStockApplication - No active profile set, falling back to default profiles: default
2019-01-31 10:19:47.653 [background-preinit] INFO  org.hibernate.validator.internal.util.Version - HV000001: Hibernate Validator 5.3.6.Final
2019-01-31 10:19:48.139 [main] INFO  o.s.b.c.e.AnnotationConfigEmbeddedWebApplicationContext - Refreshing org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@6a28ffa4: startup date [Thu Jan 31 10:19:48 CST 2019]; root of context hierarchy
2019-01-31 10:19:49.648 [main] INFO  o.s.b.c.e.tomcat.TomcatEmbeddedServletContainer - Tomcat initialized with port(s): 8080 (http)
2019-01-31 10:19:49.658 [main] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2019-01-31 10:19:49.659 [main] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet Engine: Apache Tomcat/8.5.23
2019-01-31 10:19:49.759 [localhost-startStop-1] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2019-01-31 10:19:49.760 [localhost-startStop-1] INFO  org.springframework.web.context.ContextLoader - Root WebApplicationContext: initialization completed in 1621 ms
2019-01-31 10:19:49.913 [localhost-startStop-1] INFO  o.s.boot.web.servlet.FilterRegistrationBean - Mapping filter: 'characterEncodingFilter' to: [/*]
2019-01-31 10:19:49.914 [localhost-startStop-1] INFO  o.s.boot.web.servlet.FilterRegistrationBean - Mapping filter: 'hiddenHttpMethodFilter' to: [/*]
2019-01-31 10:19:49.914 [localhost-startStop-1] INFO  o.s.boot.web.servlet.FilterRegistrationBean - Mapping filter: 'httpPutFormContentFilter' to: [/*]
2019-01-31 10:19:49.915 [localhost-startStop-1] INFO  o.s.boot.web.servlet.FilterRegistrationBean - Mapping filter: 'requestContextFilter' to: [/*]
2019-01-31 10:19:49.915 [localhost-startStop-1] INFO  o.s.boot.web.servlet.FilterRegistrationBean - Mapping filter: 'loginFilter' to urls: [/*]
2019-01-31 10:19:49.915 [localhost-startStop-1] INFO  o.s.boot.web.servlet.ServletRegistrationBean - Mapping servlet: 'dispatcherServlet' to [/]
2019-01-31 10:19:50.779 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerAdapter - Looking for @ControllerAdvice: org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@6a28ffa4: startup date [Thu Jan 31 10:19:48 CST 2019]; root of context hierarchy
2019-01-31 10:19:50.838 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productListForAutoComplete]}" onto public java.util.List<com.yun.product.model.Product> com.yun.product.controller.ProductController.productListForAutoComplete(java.lang.String)
2019-01-31 10:19:50.839 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productListForStock]}" onto public java.util.List<com.yun.product.model.Product> com.yun.product.controller.ProductController.productListForStock()
2019-01-31 10:19:50.839 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productListForTrade]}" onto public java.util.List<com.yun.product.model.Product> com.yun.product.controller.ProductController.productListForTrade(java.lang.String)
2019-01-31 10:19:50.840 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productPreAdd]}" onto public java.lang.String com.yun.product.controller.ProductController.productPreAdd()
2019-01-31 10:19:50.840 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productList]}" onto public java.lang.String com.yun.product.controller.ProductController.productList(org.springframework.ui.Model,java.lang.String,java.lang.String,java.lang.String,java.lang.String)
2019-01-31 10:19:50.840 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productSave]}" onto public java.lang.String com.yun.product.controller.ProductController.productSave(com.yun.product.model.Product)
2019-01-31 10:19:50.840 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productDelete]}" onto public java.lang.String com.yun.product.controller.ProductController.productDelete(int)
2019-01-31 10:19:50.840 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productPreUpdate]}" onto public java.lang.String com.yun.product.controller.ProductController.productPreUpdate(int,org.springframework.ui.Model)
2019-01-31 10:19:50.841 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productUpdate]}" onto public java.lang.String com.yun.product.controller.ProductController.productUpdate(com.yun.product.model.Product)
2019-01-31 10:19:50.842 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/prodParamDelete]}" onto public java.lang.String com.yun.product.controller.ProductParamController.prodParamDelete(int)
2019-01-31 10:19:50.842 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/prodParamPreAdd]}" onto public java.lang.String com.yun.product.controller.ProductParamController.prodParamPreAdd(int,org.springframework.ui.Model)
2019-01-31 10:19:50.842 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/prodParamSave]}" onto public java.lang.String com.yun.product.controller.ProductParamController.prodParamSave(com.yun.product.model.ProductParameter)
2019-01-31 10:19:50.842 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/prodParamList]}" onto public java.lang.String com.yun.product.controller.ProductParamController.prodParamList(int)
2019-01-31 10:19:50.845 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeUpdate]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeUpdate(java.lang.Integer,org.springframework.ui.Model)
2019-01-31 10:19:50.845 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeUpdateSave]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeUpdateSave(com.yun.product.model.ProductType)
2019-01-31 10:19:50.845 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeDelete]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeDelete(java.lang.Integer,javax.servlet.http.HttpServletResponse) throws java.io.IOException
2019-01-31 10:19:50.845 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeList]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeList(org.springframework.ui.Model)
2019-01-31 10:19:50.846 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeTree]}" onto public java.util.List<com.yun.product.model.ProductType> com.yun.product.controller.ProductTypeController.productTypeTree()
2019-01-31 10:19:50.846 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeEdit]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeEdit()
2019-01-31 10:19:50.846 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeSave]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeSave(com.yun.product.model.ProductType)
2019-01-31 10:19:50.847 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveStockList]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveStockController.productReceiveStocklist(java.lang.String,java.lang.String,org.springframework.ui.Model)
2019-01-31 10:19:50.847 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveStockPreAdd]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveStockController.productReceiveStockPreAdd()
2019-01-31 10:19:50.848 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveStockSave]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveStockController.productReceiveStockSave(com.yun.stock.model.ProductReceiveStock)
2019-01-31 10:19:50.848 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveStockDelete]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveStockController.productReceiveStockDelete(int)
2019-01-31 10:19:50.848 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveStockPreUpdate]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveStockController.productReceiveStockPreUpdate(int,org.springframework.ui.Model)
2019-01-31 10:19:50.848 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveStockUpdate]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveStockController.productReceiveStockUpdate(com.yun.stock.model.ProductReceiveStock)
2019-01-31 10:19:50.849 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveRejectSave]}" onto public void com.yun.stock.controller.ProductReceiveTradeController.receiveRejectSave(com.yun.stock.model.ProductReceiveTrade,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse) throws java.io.IOException
2019-01-31 10:19:50.850 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveToCurrentSave]}" onto public void com.yun.stock.controller.ProductReceiveTradeController.productReceiveToCurrentSave(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse) throws java.lang.Exception
2019-01-31 10:19:50.850 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveStockToCurrentStock]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveTradeController.productReceiveStockToCurrentStock(int,org.springframework.ui.Model)
2019-01-31 10:19:50.851 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveInSave]}" onto public void com.yun.stock.controller.ProductReceiveTradeController.receiveInSave(com.yun.stock.model.ProductReceiveTrade,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse) throws java.io.IOException
2019-01-31 10:19:50.851 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveIn]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveTradeController.receiveIn(org.springframework.ui.Model)
2019-01-31 10:19:50.852 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveReject]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveTradeController.receiveReject(org.springframework.ui.Model)
2019-01-31 10:19:50.853 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockPreAdd]}" onto public java.lang.String com.yun.stock.controller.ProductStockController.productStockPreAdd()
2019-01-31 10:19:50.853 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockDelete]}" onto public java.lang.String com.yun.stock.controller.ProductStockController.productStockDelete(int)
2019-01-31 10:19:50.853 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockPreUpdate]}" onto public java.lang.String com.yun.stock.controller.ProductStockController.productStockPreUpdate(int,org.springframework.ui.Model)
2019-01-31 10:19:50.854 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockUpdate]}" onto public java.lang.String com.yun.stock.controller.ProductStockController.productStockUpdate(com.yun.stock.model.ProductStock)
2019-01-31 10:19:50.854 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockSave]}" onto public java.lang.String com.yun.stock.controller.ProductStockController.productStockSave(com.yun.stock.model.ProductStock)
2019-01-31 10:19:50.854 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockList]}" onto public java.lang.String com.yun.stock.controller.ProductStockController.productStocklist(java.lang.String,java.lang.String,org.springframework.ui.Model)
2019-01-31 10:19:50.855 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/main]}" onto public java.lang.String com.yun.user.controller.MainController.main()
2019-01-31 10:19:50.856 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/userList]}" onto public java.lang.String com.yun.user.controller.UserController.userList(org.springframework.ui.Model)
2019-01-31 10:19:50.856 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/deleteUserInfo]}" onto public java.lang.String com.yun.user.controller.UserController.userDelete(int)
2019-01-31 10:19:50.856 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/userEdit]}" onto public java.lang.String com.yun.user.controller.UserController.userEdit()
2019-01-31 10:19:50.857 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/userSave]}" onto public java.lang.String com.yun.user.controller.UserController.userSave(com.yun.user.model.UserInfo)
2019-01-31 10:19:50.857 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/login]}" onto public void com.yun.user.controller.UserController.login(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse) throws java.io.IOException
2019-01-31 10:19:50.860 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/error]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> org.springframework.boot.autoconfigure.web.BasicErrorController.error(javax.servlet.http.HttpServletRequest)
2019-01-31 10:19:50.860 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/error],produces=[text/html]}" onto public org.springframework.web.servlet.ModelAndView org.springframework.boot.autoconfigure.web.BasicErrorController.errorHtml(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
2019-01-31 10:19:50.896 [main] INFO  o.s.web.servlet.handler.SimpleUrlHandlerMapping - Mapped URL path [/webjars/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-01-31 10:19:50.897 [main] INFO  o.s.web.servlet.handler.SimpleUrlHandlerMapping - Mapped URL path [/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-01-31 10:19:50.938 [main] INFO  o.s.web.servlet.handler.SimpleUrlHandlerMapping - Mapped URL path [/**/favicon.ico] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-01-31 10:19:51.244 [main] INFO  o.s.b.a.w.WebMvcAutoConfiguration$WelcomePageHandlerMapping - Adding welcome page: class path resource [static/index.html]
2019-01-31 10:19:51.504 [main] INFO  o.s.jmx.export.annotation.AnnotationMBeanExporter - Registering beans for JMX exposure on startup
2019-01-31 10:19:51.523 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2019-01-31 10:19:51.534 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2019-01-31 10:19:51.547 [main] INFO  org.apache.tomcat.util.net.NioSelectorPool - Using a shared selector for servlet write/read
2019-01-31 10:19:51.728 [main] INFO  o.s.b.c.e.tomcat.TomcatEmbeddedServletContainer - Tomcat started on port(s): 8080 (http)
2019-01-31 10:19:51.734 [main] INFO  com.yun.YunEbStockApplication - Started YunEbStockApplication in 4.755 seconds (JVM running for 5.912)
2019-01-31 10:19:58.485 [http-nio-8080-exec-1] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring FrameworkServlet 'dispatcherServlet'
2019-01-31 10:19:58.486 [http-nio-8080-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - FrameworkServlet 'dispatcherServlet': initialization started
2019-01-31 10:19:58.505 [http-nio-8080-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - FrameworkServlet 'dispatcherServlet': initialization completed in 19 ms
2019-01-31 10:19:58.515 [http-nio-8080-exec-1] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/main
2019-01-31 10:20:04.564 [http-nio-8080-exec-2] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/login
2019-01-31 10:20:04.885 [http-nio-8080-exec-2] DEBUG c.y.user.dao.UserInfoDao.findUserInfoByNameAndPass - ==>  Preparing: select * from user_info where login_name=? and login_pass=? 
2019-01-31 10:20:04.905 [http-nio-8080-exec-2] DEBUG c.y.user.dao.UserInfoDao.findUserInfoByNameAndPass - ==> Parameters: admin(String), 123(String)
2019-01-31 10:20:04.918 [http-nio-8080-exec-2] DEBUG c.y.user.dao.UserInfoDao.findUserInfoByNameAndPass - <==      Total: 1
2019-01-31 10:20:04.928 [http-nio-8080-exec-3] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/main
2019-01-31 10:20:07.476 [http-nio-8080-exec-4] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productReceiveStockList
2019-01-31 10:20:07.486 [http-nio-8080-exec-4] DEBUG c.y.stock.controller.ProductReceiveStockController - 跳转到待收库存查询控制器
2019-01-31 10:20:07.520 [http-nio-8080-exec-4] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - ==>  Preparing: select count(*) from product_receive_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 
2019-01-31 10:20:07.520 [http-nio-8080-exec-4] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - ==> Parameters: 
2019-01-31 10:20:07.521 [http-nio-8080-exec-4] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - <==      Total: 1
2019-01-31 10:20:07.530 [http-nio-8080-exec-4] DEBUG c.y.s.d.P.findProductReceiveStockList - ==>  Preparing: select ps.prod_rece_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_receive_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 order by p.prod_id,pp.prod_param_id limit ?,? 
2019-01-31 10:20:07.531 [http-nio-8080-exec-4] DEBUG c.y.s.d.P.findProductReceiveStockList - ==> Parameters: 0(Integer), 5(Integer)
2019-01-31 10:20:07.534 [http-nio-8080-exec-4] DEBUG c.y.s.d.P.findProductReceiveStockList - <==      Total: 5
2019-01-31 10:20:07.537 [http-nio-8080-exec-4] DEBUG c.y.stock.controller.ProductReceiveStockController - 转到待收库存页面
2019-01-31 10:20:09.993 [http-nio-8080-exec-5] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productReceiveStockList
2019-01-31 10:20:09.995 [http-nio-8080-exec-5] DEBUG c.y.stock.controller.ProductReceiveStockController - 跳转到待收库存查询控制器
2019-01-31 10:20:10.000 [http-nio-8080-exec-5] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - ==>  Preparing: select count(*) from product_receive_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 
2019-01-31 10:20:10.001 [http-nio-8080-exec-5] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - ==> Parameters: 
2019-01-31 10:20:10.005 [http-nio-8080-exec-5] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - <==      Total: 1
2019-01-31 10:20:10.012 [http-nio-8080-exec-5] DEBUG c.y.s.d.P.findProductReceiveStockList - ==>  Preparing: select ps.prod_rece_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_receive_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 order by p.prod_id,pp.prod_param_id limit ?,? 
2019-01-31 10:20:10.013 [http-nio-8080-exec-5] DEBUG c.y.s.d.P.findProductReceiveStockList - ==> Parameters: 5(Integer), 5(Integer)
2019-01-31 10:20:10.015 [http-nio-8080-exec-5] DEBUG c.y.s.d.P.findProductReceiveStockList - <==      Total: 1
2019-01-31 10:20:10.018 [http-nio-8080-exec-5] DEBUG c.y.stock.controller.ProductReceiveStockController - 转到待收库存页面
2019-01-31 10:20:11.410 [http-nio-8080-exec-6] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productReceiveStockList
2019-01-31 10:20:11.414 [http-nio-8080-exec-6] DEBUG c.y.stock.controller.ProductReceiveStockController - 跳转到待收库存查询控制器
2019-01-31 10:20:11.417 [http-nio-8080-exec-6] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - ==>  Preparing: select count(*) from product_receive_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 
2019-01-31 10:20:11.419 [http-nio-8080-exec-6] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - ==> Parameters: 
2019-01-31 10:20:11.423 [http-nio-8080-exec-6] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - <==      Total: 1
2019-01-31 10:20:11.426 [http-nio-8080-exec-6] DEBUG c.y.s.d.P.findProductReceiveStockList - ==>  Preparing: select ps.prod_rece_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_receive_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 order by p.prod_id,pp.prod_param_id limit ?,? 
2019-01-31 10:20:11.427 [http-nio-8080-exec-6] DEBUG c.y.s.d.P.findProductReceiveStockList - ==> Parameters: 0(Integer), 5(Integer)
2019-01-31 10:20:11.430 [http-nio-8080-exec-6] DEBUG c.y.s.d.P.findProductReceiveStockList - <==      Total: 5
2019-01-31 10:20:11.434 [http-nio-8080-exec-6] DEBUG c.y.stock.controller.ProductReceiveStockController - 转到待收库存页面
2019-01-31 10:20:14.322 [http-nio-8080-exec-7] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productReceiveStockList
2019-01-31 10:20:14.325 [http-nio-8080-exec-7] DEBUG c.y.stock.controller.ProductReceiveStockController - 跳转到待收库存查询控制器
2019-01-31 10:20:14.332 [http-nio-8080-exec-7] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - ==>  Preparing: select count(*) from product_receive_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 
2019-01-31 10:20:14.333 [http-nio-8080-exec-7] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - ==> Parameters: 
2019-01-31 10:20:14.335 [http-nio-8080-exec-7] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - <==      Total: 1
2019-01-31 10:20:14.340 [http-nio-8080-exec-7] DEBUG c.y.s.d.P.findProductReceiveStockList - ==>  Preparing: select ps.prod_rece_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_receive_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 order by p.prod_id,pp.prod_param_id limit ?,? 
2019-01-31 10:20:14.341 [http-nio-8080-exec-7] DEBUG c.y.s.d.P.findProductReceiveStockList - ==> Parameters: 0(Integer), 5(Integer)
2019-01-31 10:20:14.350 [http-nio-8080-exec-7] DEBUG c.y.s.d.P.findProductReceiveStockList - <==      Total: 5
2019-01-31 10:20:14.353 [http-nio-8080-exec-7] DEBUG c.y.stock.controller.ProductReceiveStockController - 转到待收库存页面
2019-01-31 10:20:18.000 [http-nio-8080-exec-8] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productReceiveStockToCurrentStock
2019-01-31 10:20:18.013 [http-nio-8080-exec-8] DEBUG c.y.s.d.P.findProductReceiveStockById - ==>  Preparing: select ps.prod_rece_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_receive_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 and ps.prod_rece_stock_id=? 
2019-01-31 10:20:18.014 [http-nio-8080-exec-8] DEBUG c.y.s.d.P.findProductReceiveStockById - ==> Parameters: 13(Integer)
2019-01-31 10:20:18.017 [http-nio-8080-exec-8] DEBUG c.y.s.d.P.findProductReceiveStockById - <==      Total: 1
2019-01-31 10:20:21.789 [http-nio-8080-exec-9] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productReceiveToCurrentSave
2019-01-31 10:20:21.794 [http-nio-8080-exec-9] DEBUG c.y.s.d.P.findProductReceiveStockById - ==>  Preparing: select ps.prod_rece_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_receive_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 and ps.prod_rece_stock_id=? 
2019-01-31 10:20:21.794 [http-nio-8080-exec-9] DEBUG c.y.s.d.P.findProductReceiveStockById - ==> Parameters: 13(Integer)
2019-01-31 10:20:21.797 [http-nio-8080-exec-9] DEBUG c.y.s.d.P.findProductReceiveStockById - <==      Total: 1
2019-01-31 10:20:21.799 [http-nio-8080-exec-9] DEBUG c.y.s.d.P.insertProductReceiveOutTrade - ==>  Preparing: insert into product_receive_trade(trade_date,prod_id,prod_param_id,begin_num,trade_del,end_num,oper_id)values(?,?,?,?,?,?,?) 
2019-01-31 10:20:21.801 [http-nio-8080-exec-9] DEBUG c.y.s.d.P.insertProductReceiveOutTrade - ==> Parameters: 2019-01-31 10:20:18.0(Timestamp), 5(Integer), 7(Integer), 36(Integer), 10(Integer), 26(Integer), 5(Integer)
2019-01-31 10:20:21.840 [http-nio-8080-exec-9] DEBUG c.y.s.d.P.insertProductReceiveOutTrade - <==    Updates: 1
2019-01-31 10:20:21.841 [http-nio-8080-exec-9] DEBUG c.y.s.d.P.findProductStockByProdIdAndProdParamId - ==>  Preparing: select ps.prod_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 and p.prod_id=? and pp.prod_param_Id=? 
2019-01-31 10:20:21.841 [http-nio-8080-exec-9] DEBUG c.y.s.d.P.findProductStockByProdIdAndProdParamId - ==> Parameters: 5(Integer), 7(Integer)
2019-01-31 10:20:21.991 [http-nio-8080-exec-9] DEBUG c.y.s.d.P.findProductStockByProdIdAndProdParamId - <==      Total: 1
2019-01-31 10:20:21.993 [http-nio-8080-exec-9] DEBUG c.yun.stock.dao.ProductStockDao.updateProductStock - ==>  Preparing: update product_stock set prod_id=?,prod_param_id=?,stock_num=? where prod_stock_id=? 
2019-01-31 10:20:21.994 [http-nio-8080-exec-9] DEBUG c.yun.stock.dao.ProductStockDao.updateProductStock - ==> Parameters: 5(Integer), 7(Integer), 30(Integer), 8(Integer)
2019-01-31 10:20:22.003 [http-nio-8080-exec-9] DEBUG c.yun.stock.dao.ProductStockDao.updateProductStock - <==    Updates: 1
2019-01-31 10:20:22.005 [http-nio-8080-exec-9] DEBUG c.yun.stock.dao.ProductTradeDao.insertProductTrade - ==>  Preparing: insert into product_trade(trade_date,prod_id,prod_param_id,begin_num,trade_add,end_num,oper_id)values(?,?,?,?,?,?,?) 
2019-01-31 10:20:22.008 [http-nio-8080-exec-9] DEBUG c.yun.stock.dao.ProductTradeDao.insertProductTrade - ==> Parameters: 2019-01-31 10:20:18.0(Timestamp), 5(Integer), 7(Integer), 20(Integer), 10(Integer), 30(Integer), 5(Integer)
2019-01-31 10:20:22.015 [http-nio-8080-exec-9] DEBUG c.yun.stock.dao.ProductTradeDao.insertProductTrade - <==    Updates: 1
2019-01-31 10:20:22.016 [http-nio-8080-exec-9] DEBUG c.y.s.d.P.updateProductReceiveStock - ==>  Preparing: update product_receive_stock set prod_id=?,prod_param_id=?,stock_num=? where prod_rece_stock_id=? 
2019-01-31 10:20:22.017 [http-nio-8080-exec-9] DEBUG c.y.s.d.P.updateProductReceiveStock - ==> Parameters: 5(Integer), 7(Integer), 26(Integer), 13(Integer)
2019-01-31 10:20:22.019 [http-nio-8080-exec-9] DEBUG c.y.s.d.P.updateProductReceiveStock - <==    Updates: 1
2019-01-31 10:20:22.154 [http-nio-8080-exec-9] DEBUG c.y.stock.controller.ProductReceiveTradeController - result:待收库存转现有库存操作完成
2019-01-31 10:20:23.175 [http-nio-8080-exec-10] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productReceiveStockList
2019-01-31 10:20:23.177 [http-nio-8080-exec-10] DEBUG c.y.stock.controller.ProductReceiveStockController - 跳转到待收库存查询控制器
2019-01-31 10:20:23.182 [http-nio-8080-exec-10] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - ==>  Preparing: select count(*) from product_receive_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 
2019-01-31 10:20:23.183 [http-nio-8080-exec-10] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - ==> Parameters: 
2019-01-31 10:20:23.186 [http-nio-8080-exec-10] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - <==      Total: 1
2019-01-31 10:20:23.189 [http-nio-8080-exec-10] DEBUG c.y.s.d.P.findProductReceiveStockList - ==>  Preparing: select ps.prod_rece_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_receive_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 order by p.prod_id,pp.prod_param_id limit ?,? 
2019-01-31 10:20:23.190 [http-nio-8080-exec-10] DEBUG c.y.s.d.P.findProductReceiveStockList - ==> Parameters: 0(Integer), 5(Integer)
2019-01-31 10:20:23.192 [http-nio-8080-exec-10] DEBUG c.y.s.d.P.findProductReceiveStockList - <==      Total: 5
2019-01-31 10:20:23.193 [http-nio-8080-exec-10] DEBUG c.y.stock.controller.ProductReceiveStockController - 转到待收库存页面
2019-01-31 10:20:27.343 [http-nio-8080-exec-1] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productStockList
2019-01-31 10:20:27.349 [http-nio-8080-exec-1] DEBUG com.yun.stock.controller.ProductStockController - 跳转到物品库存查询控制器
2019-01-31 10:20:27.353 [http-nio-8080-exec-1] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==>  Preparing: select count(*) from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 
2019-01-31 10:20:27.353 [http-nio-8080-exec-1] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==> Parameters: 
2019-01-31 10:20:27.354 [http-nio-8080-exec-1] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - <==      Total: 1
2019-01-31 10:20:27.358 [http-nio-8080-exec-1] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==>  Preparing: select ps.prod_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 order by p.prod_id,pp.prod_param_id limit ?,? 
2019-01-31 10:20:27.358 [http-nio-8080-exec-1] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==> Parameters: 0(Integer), 5(Integer)
2019-01-31 10:20:27.361 [http-nio-8080-exec-1] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - <==      Total: 1
2019-01-31 10:20:27.363 [http-nio-8080-exec-1] DEBUG com.yun.stock.controller.ProductStockController - 转到物品库存页面
2019-01-31 10:20:36.480 [http-nio-8080-exec-2] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productReceiveIn
2019-01-31 10:21:52.364 [main] INFO  com.yun.YunEbStockApplication - Starting YunEbStockApplication on USER-20181202BJ with PID 6620 (E:\workspace\yun-eb-stock\target\classes started by Administrator in E:\workspace\yun-eb-stock)
2019-01-31 10:21:52.423 [main] DEBUG com.yun.YunEbStockApplication - Running with Spring Boot v1.5.9.RELEASE, Spring v4.3.13.RELEASE
2019-01-31 10:21:52.423 [main] INFO  com.yun.YunEbStockApplication - No active profile set, falling back to default profiles: default
2019-01-31 10:21:52.881 [background-preinit] INFO  org.hibernate.validator.internal.util.Version - HV000001: Hibernate Validator 5.3.6.Final
2019-01-31 10:21:52.899 [main] INFO  o.s.b.c.e.AnnotationConfigEmbeddedWebApplicationContext - Refreshing org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@6a28ffa4: startup date [Thu Jan 31 10:21:52 CST 2019]; root of context hierarchy
2019-01-31 10:21:54.493 [main] INFO  o.s.b.c.e.tomcat.TomcatEmbeddedServletContainer - Tomcat initialized with port(s): 8080 (http)
2019-01-31 10:21:54.503 [main] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2019-01-31 10:21:54.504 [main] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet Engine: Apache Tomcat/8.5.23
2019-01-31 10:21:54.614 [localhost-startStop-1] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2019-01-31 10:21:54.615 [localhost-startStop-1] INFO  org.springframework.web.context.ContextLoader - Root WebApplicationContext: initialization completed in 1716 ms
2019-01-31 10:21:54.775 [localhost-startStop-1] INFO  o.s.boot.web.servlet.FilterRegistrationBean - Mapping filter: 'characterEncodingFilter' to: [/*]
2019-01-31 10:21:54.775 [localhost-startStop-1] INFO  o.s.boot.web.servlet.FilterRegistrationBean - Mapping filter: 'hiddenHttpMethodFilter' to: [/*]
2019-01-31 10:21:54.775 [localhost-startStop-1] INFO  o.s.boot.web.servlet.FilterRegistrationBean - Mapping filter: 'httpPutFormContentFilter' to: [/*]
2019-01-31 10:21:54.775 [localhost-startStop-1] INFO  o.s.boot.web.servlet.FilterRegistrationBean - Mapping filter: 'requestContextFilter' to: [/*]
2019-01-31 10:21:54.776 [localhost-startStop-1] INFO  o.s.boot.web.servlet.FilterRegistrationBean - Mapping filter: 'loginFilter' to urls: [/*]
2019-01-31 10:21:54.776 [localhost-startStop-1] INFO  o.s.boot.web.servlet.ServletRegistrationBean - Mapping servlet: 'dispatcherServlet' to [/]
2019-01-31 10:21:55.598 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerAdapter - Looking for @ControllerAdvice: org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@6a28ffa4: startup date [Thu Jan 31 10:21:52 CST 2019]; root of context hierarchy
2019-01-31 10:21:55.654 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productListForAutoComplete]}" onto public java.util.List<com.yun.product.model.Product> com.yun.product.controller.ProductController.productListForAutoComplete(java.lang.String)
2019-01-31 10:21:55.655 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productListForStock]}" onto public java.util.List<com.yun.product.model.Product> com.yun.product.controller.ProductController.productListForStock()
2019-01-31 10:21:55.655 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productListForTrade]}" onto public java.util.List<com.yun.product.model.Product> com.yun.product.controller.ProductController.productListForTrade(java.lang.String)
2019-01-31 10:21:55.655 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productPreAdd]}" onto public java.lang.String com.yun.product.controller.ProductController.productPreAdd()
2019-01-31 10:21:55.656 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productList]}" onto public java.lang.String com.yun.product.controller.ProductController.productList(org.springframework.ui.Model,java.lang.String,java.lang.String,java.lang.String,java.lang.String)
2019-01-31 10:21:55.656 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productSave]}" onto public java.lang.String com.yun.product.controller.ProductController.productSave(com.yun.product.model.Product)
2019-01-31 10:21:55.656 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productDelete]}" onto public java.lang.String com.yun.product.controller.ProductController.productDelete(int)
2019-01-31 10:21:55.656 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productPreUpdate]}" onto public java.lang.String com.yun.product.controller.ProductController.productPreUpdate(int,org.springframework.ui.Model)
2019-01-31 10:21:55.657 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productUpdate]}" onto public java.lang.String com.yun.product.controller.ProductController.productUpdate(com.yun.product.model.Product)
2019-01-31 10:21:55.658 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/prodParamDelete]}" onto public java.lang.String com.yun.product.controller.ProductParamController.prodParamDelete(int)
2019-01-31 10:21:55.658 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/prodParamPreAdd]}" onto public java.lang.String com.yun.product.controller.ProductParamController.prodParamPreAdd(int,org.springframework.ui.Model)
2019-01-31 10:21:55.658 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/prodParamSave]}" onto public java.lang.String com.yun.product.controller.ProductParamController.prodParamSave(com.yun.product.model.ProductParameter)
2019-01-31 10:21:55.658 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/prodParamList]}" onto public java.lang.String com.yun.product.controller.ProductParamController.prodParamList(int)
2019-01-31 10:21:55.661 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeUpdate]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeUpdate(java.lang.Integer,org.springframework.ui.Model)
2019-01-31 10:21:55.661 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeUpdateSave]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeUpdateSave(com.yun.product.model.ProductType)
2019-01-31 10:21:55.661 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeDelete]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeDelete(java.lang.Integer,javax.servlet.http.HttpServletResponse) throws java.io.IOException
2019-01-31 10:21:55.662 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeList]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeList(org.springframework.ui.Model)
2019-01-31 10:21:55.662 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeTree]}" onto public java.util.List<com.yun.product.model.ProductType> com.yun.product.controller.ProductTypeController.productTypeTree()
2019-01-31 10:21:55.662 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeEdit]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeEdit()
2019-01-31 10:21:55.662 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeSave]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeSave(com.yun.product.model.ProductType)
2019-01-31 10:21:55.663 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveStockList]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveStockController.productReceiveStocklist(java.lang.String,java.lang.String,org.springframework.ui.Model)
2019-01-31 10:21:55.664 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveStockPreAdd]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveStockController.productReceiveStockPreAdd()
2019-01-31 10:21:55.664 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveStockSave]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveStockController.productReceiveStockSave(com.yun.stock.model.ProductReceiveStock)
2019-01-31 10:21:55.664 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveStockDelete]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveStockController.productReceiveStockDelete(int)
2019-01-31 10:21:55.664 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveStockPreUpdate]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveStockController.productReceiveStockPreUpdate(int,org.springframework.ui.Model)
2019-01-31 10:21:55.664 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveStockUpdate]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveStockController.productReceiveStockUpdate(com.yun.stock.model.ProductReceiveStock)
2019-01-31 10:21:55.665 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveRejectSave]}" onto public void com.yun.stock.controller.ProductReceiveTradeController.receiveRejectSave(com.yun.stock.model.ProductReceiveTrade,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse) throws java.io.IOException
2019-01-31 10:21:55.666 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveToCurrentSave]}" onto public void com.yun.stock.controller.ProductReceiveTradeController.productReceiveToCurrentSave(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse) throws java.lang.Exception
2019-01-31 10:21:55.666 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveInSave]}" onto public void com.yun.stock.controller.ProductReceiveTradeController.receiveInSave(com.yun.stock.model.ProductReceiveTrade,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse) throws java.io.IOException
2019-01-31 10:21:55.666 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveIn]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveTradeController.receiveIn(org.springframework.ui.Model)
2019-01-31 10:21:55.666 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveReject]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveTradeController.receiveReject(org.springframework.ui.Model)
2019-01-31 10:21:55.666 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveStockToCurrentStock]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveTradeController.productReceiveStockToCurrentStock(int,org.springframework.ui.Model)
2019-01-31 10:21:55.667 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockPreAdd]}" onto public java.lang.String com.yun.stock.controller.ProductStockController.productStockPreAdd()
2019-01-31 10:21:55.668 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockDelete]}" onto public java.lang.String com.yun.stock.controller.ProductStockController.productStockDelete(int)
2019-01-31 10:21:55.668 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockPreUpdate]}" onto public java.lang.String com.yun.stock.controller.ProductStockController.productStockPreUpdate(int,org.springframework.ui.Model)
2019-01-31 10:21:55.668 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockUpdate]}" onto public java.lang.String com.yun.stock.controller.ProductStockController.productStockUpdate(com.yun.stock.model.ProductStock)
2019-01-31 10:21:55.668 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockSave]}" onto public java.lang.String com.yun.stock.controller.ProductStockController.productStockSave(com.yun.stock.model.ProductStock)
2019-01-31 10:21:55.668 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockList]}" onto public java.lang.String com.yun.stock.controller.ProductStockController.productStocklist(java.lang.String,java.lang.String,org.springframework.ui.Model)
2019-01-31 10:21:55.669 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/main]}" onto public java.lang.String com.yun.user.controller.MainController.main()
2019-01-31 10:21:55.670 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/userList]}" onto public java.lang.String com.yun.user.controller.UserController.userList(org.springframework.ui.Model)
2019-01-31 10:21:55.670 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/deleteUserInfo]}" onto public java.lang.String com.yun.user.controller.UserController.userDelete(int)
2019-01-31 10:21:55.670 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/userEdit]}" onto public java.lang.String com.yun.user.controller.UserController.userEdit()
2019-01-31 10:21:55.670 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/userSave]}" onto public java.lang.String com.yun.user.controller.UserController.userSave(com.yun.user.model.UserInfo)
2019-01-31 10:21:55.671 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/login]}" onto public void com.yun.user.controller.UserController.login(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse) throws java.io.IOException
2019-01-31 10:21:55.674 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/error]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> org.springframework.boot.autoconfigure.web.BasicErrorController.error(javax.servlet.http.HttpServletRequest)
2019-01-31 10:21:55.675 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/error],produces=[text/html]}" onto public org.springframework.web.servlet.ModelAndView org.springframework.boot.autoconfigure.web.BasicErrorController.errorHtml(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
2019-01-31 10:21:55.710 [main] INFO  o.s.web.servlet.handler.SimpleUrlHandlerMapping - Mapped URL path [/webjars/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-01-31 10:21:55.710 [main] INFO  o.s.web.servlet.handler.SimpleUrlHandlerMapping - Mapped URL path [/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-01-31 10:21:55.751 [main] INFO  o.s.web.servlet.handler.SimpleUrlHandlerMapping - Mapped URL path [/**/favicon.ico] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-01-31 10:21:56.061 [main] INFO  o.s.b.a.w.WebMvcAutoConfiguration$WelcomePageHandlerMapping - Adding welcome page: class path resource [static/index.html]
2019-01-31 10:21:56.317 [main] INFO  o.s.jmx.export.annotation.AnnotationMBeanExporter - Registering beans for JMX exposure on startup
2019-01-31 10:21:56.336 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2019-01-31 10:21:56.348 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2019-01-31 10:21:56.361 [main] INFO  org.apache.tomcat.util.net.NioSelectorPool - Using a shared selector for servlet write/read
2019-01-31 10:21:56.518 [main] INFO  o.s.b.c.e.tomcat.TomcatEmbeddedServletContainer - Tomcat started on port(s): 8080 (http)
2019-01-31 10:21:56.524 [main] INFO  com.yun.YunEbStockApplication - Started YunEbStockApplication in 4.514 seconds (JVM running for 5.679)
2019-01-31 10:39:22.804 [http-nio-8080-exec-1] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring FrameworkServlet 'dispatcherServlet'
2019-01-31 10:39:22.805 [http-nio-8080-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - FrameworkServlet 'dispatcherServlet': initialization started
2019-01-31 10:39:22.823 [http-nio-8080-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - FrameworkServlet 'dispatcherServlet': initialization completed in 18 ms
2019-01-31 10:39:22.834 [http-nio-8080-exec-1] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productReceiveStockList
2019-01-31 10:39:26.277 [http-nio-8080-exec-2] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/main
2019-01-31 10:39:35.109 [http-nio-8080-exec-3] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/login
2019-01-31 10:39:35.446 [http-nio-8080-exec-3] DEBUG c.y.user.dao.UserInfoDao.findUserInfoByNameAndPass - ==>  Preparing: select * from user_info where login_name=? and login_pass=? 
2019-01-31 10:39:35.465 [http-nio-8080-exec-3] DEBUG c.y.user.dao.UserInfoDao.findUserInfoByNameAndPass - ==> Parameters: admin(String), 123(String)
2019-01-31 10:39:35.477 [http-nio-8080-exec-3] DEBUG c.y.user.dao.UserInfoDao.findUserInfoByNameAndPass - <==      Total: 1
2019-01-31 10:39:35.488 [http-nio-8080-exec-4] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/main
2019-01-31 10:39:38.752 [http-nio-8080-exec-5] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productReceiveStockList
2019-01-31 10:39:38.755 [http-nio-8080-exec-5] DEBUG c.y.stock.controller.ProductReceiveStockController - 跳转到待收库存查询控制器
2019-01-31 10:39:38.790 [http-nio-8080-exec-5] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - ==>  Preparing: select count(*) from product_receive_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 
2019-01-31 10:39:38.791 [http-nio-8080-exec-5] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - ==> Parameters: 
2019-01-31 10:39:38.792 [http-nio-8080-exec-5] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - <==      Total: 1
2019-01-31 10:39:38.801 [http-nio-8080-exec-5] DEBUG c.y.s.d.P.findProductReceiveStockList - ==>  Preparing: select ps.prod_rece_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_receive_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 order by p.prod_id,pp.prod_param_id limit ?,? 
2019-01-31 10:39:38.802 [http-nio-8080-exec-5] DEBUG c.y.s.d.P.findProductReceiveStockList - ==> Parameters: 0(Integer), 5(Integer)
2019-01-31 10:39:38.807 [http-nio-8080-exec-5] DEBUG c.y.s.d.P.findProductReceiveStockList - <==      Total: 5
2019-01-31 10:39:38.809 [http-nio-8080-exec-5] DEBUG c.y.stock.controller.ProductReceiveStockController - 转到待收库存页面
2019-01-31 10:39:42.442 [http-nio-8080-exec-6] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productReceiveStockToCurrentStock
2019-01-31 10:39:42.451 [http-nio-8080-exec-6] DEBUG c.y.s.d.P.findProductReceiveStockById - ==>  Preparing: select ps.prod_rece_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_receive_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 and ps.prod_rece_stock_id=? 
2019-01-31 10:39:42.452 [http-nio-8080-exec-6] DEBUG c.y.s.d.P.findProductReceiveStockById - ==> Parameters: 9(Integer)
2019-01-31 10:39:42.454 [http-nio-8080-exec-6] DEBUG c.y.s.d.P.findProductReceiveStockById - <==      Total: 1
2019-01-31 10:39:50.506 [http-nio-8080-exec-7] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productReceiveToCurrentSave
2019-01-31 10:39:50.511 [http-nio-8080-exec-7] DEBUG c.y.s.d.P.findProductReceiveStockById - ==>  Preparing: select ps.prod_rece_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_receive_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 and ps.prod_rece_stock_id=? 
2019-01-31 10:39:50.512 [http-nio-8080-exec-7] DEBUG c.y.s.d.P.findProductReceiveStockById - ==> Parameters: 9(Integer)
2019-01-31 10:39:50.514 [http-nio-8080-exec-7] DEBUG c.y.s.d.P.findProductReceiveStockById - <==      Total: 1
2019-01-31 10:39:50.517 [http-nio-8080-exec-7] DEBUG c.y.s.d.P.insertProductReceiveOutTrade - ==>  Preparing: insert into product_receive_trade(trade_date,prod_id,prod_param_id,begin_num,trade_del,end_num,oper_id)values(?,?,?,?,?,?,?) 
2019-01-31 10:39:50.520 [http-nio-8080-exec-7] DEBUG c.y.s.d.P.insertProductReceiveOutTrade - ==> Parameters: 2019-01-31 10:39:42.0(Timestamp), 2(Integer), 8(Integer), 10(Integer), -6(Integer), 16(Integer), 5(Integer)
2019-01-31 10:39:50.567 [http-nio-8080-exec-7] DEBUG c.y.s.d.P.insertProductReceiveOutTrade - <==    Updates: 1
2019-01-31 10:39:50.569 [http-nio-8080-exec-7] DEBUG c.y.s.d.P.findProductStockByProdIdAndProdParamId - ==>  Preparing: select ps.prod_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 and p.prod_id=? and pp.prod_param_Id=? 
2019-01-31 10:39:50.570 [http-nio-8080-exec-7] DEBUG c.y.s.d.P.findProductStockByProdIdAndProdParamId - ==> Parameters: 2(Integer), 8(Integer)
2019-01-31 10:39:50.573 [http-nio-8080-exec-7] DEBUG c.y.s.d.P.findProductStockByProdIdAndProdParamId - <==      Total: 0
2019-01-31 10:39:50.574 [http-nio-8080-exec-7] DEBUG c.yun.stock.dao.ProductStockDao.insertProductStock - ==>  Preparing: insert into product_stock(prod_id,prod_param_id,stock_num)values(?,?,?) 
2019-01-31 10:39:50.575 [http-nio-8080-exec-7] DEBUG c.yun.stock.dao.ProductStockDao.insertProductStock - ==> Parameters: 2(Integer), 8(Integer), -6(Integer)
2019-01-31 10:39:50.577 [http-nio-8080-exec-7] DEBUG c.yun.stock.dao.ProductStockDao.insertProductStock - <==    Updates: 1
2019-01-31 10:39:50.578 [http-nio-8080-exec-7] DEBUG c.y.stock.dao.ProductTradeDao.insertProductInTrade - ==>  Preparing: insert into product_trade(trade_date,prod_id,prod_param_id,begin_num,trade_add,end_num,oper_id)values(?,?,?,?,?,?,?) 
2019-01-31 10:39:50.580 [http-nio-8080-exec-7] DEBUG c.y.stock.dao.ProductTradeDao.insertProductInTrade - ==> Parameters: 2019-01-31 10:39:42.0(Timestamp), 2(Integer), 8(Integer), 0(Integer), -6(Integer), -6(Integer), 5(Integer)
2019-01-31 10:39:50.583 [http-nio-8080-exec-7] DEBUG c.y.stock.dao.ProductTradeDao.insertProductInTrade - <==    Updates: 1
2019-01-31 10:39:50.584 [http-nio-8080-exec-7] DEBUG c.y.s.d.P.updateProductReceiveStock - ==>  Preparing: update product_receive_stock set prod_id=?,prod_param_id=?,stock_num=? where prod_rece_stock_id=? 
2019-01-31 10:39:50.584 [http-nio-8080-exec-7] DEBUG c.y.s.d.P.updateProductReceiveStock - ==> Parameters: 2(Integer), 8(Integer), 16(Integer), 9(Integer)
2019-01-31 10:39:50.590 [http-nio-8080-exec-7] DEBUG c.y.s.d.P.updateProductReceiveStock - <==    Updates: 1
2019-01-31 10:39:50.670 [http-nio-8080-exec-7] DEBUG c.y.stock.controller.ProductReceiveTradeController - result:待收库存转现有库存操作完成
2019-01-31 10:39:52.002 [http-nio-8080-exec-8] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productReceiveStockList
2019-01-31 10:39:52.003 [http-nio-8080-exec-8] DEBUG c.y.stock.controller.ProductReceiveStockController - 跳转到待收库存查询控制器
2019-01-31 10:39:52.005 [http-nio-8080-exec-8] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - ==>  Preparing: select count(*) from product_receive_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 
2019-01-31 10:39:52.006 [http-nio-8080-exec-8] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - ==> Parameters: 
2019-01-31 10:39:52.008 [http-nio-8080-exec-8] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - <==      Total: 1
2019-01-31 10:39:52.013 [http-nio-8080-exec-8] DEBUG c.y.s.d.P.findProductReceiveStockList - ==>  Preparing: select ps.prod_rece_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_receive_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 order by p.prod_id,pp.prod_param_id limit ?,? 
2019-01-31 10:39:52.014 [http-nio-8080-exec-8] DEBUG c.y.s.d.P.findProductReceiveStockList - ==> Parameters: 0(Integer), 5(Integer)
2019-01-31 10:39:52.018 [http-nio-8080-exec-8] DEBUG c.y.s.d.P.findProductReceiveStockList - <==      Total: 5
2019-01-31 10:39:52.022 [http-nio-8080-exec-8] DEBUG c.y.stock.controller.ProductReceiveStockController - 转到待收库存页面
2019-01-31 10:40:39.873 [main] INFO  com.yun.YunEbStockApplication - Starting YunEbStockApplication on USER-20181202BJ with PID 6992 (E:\workspace\yun-eb-stock\target\classes started by Administrator in E:\workspace\yun-eb-stock)
2019-01-31 10:40:39.878 [main] DEBUG com.yun.YunEbStockApplication - Running with Spring Boot v1.5.9.RELEASE, Spring v4.3.13.RELEASE
2019-01-31 10:40:39.878 [main] INFO  com.yun.YunEbStockApplication - No active profile set, falling back to default profiles: default
2019-01-31 10:40:40.029 [background-preinit] INFO  org.hibernate.validator.internal.util.Version - HV000001: Hibernate Validator 5.3.6.Final
2019-01-31 10:40:40.479 [main] INFO  o.s.b.c.e.AnnotationConfigEmbeddedWebApplicationContext - Refreshing org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@6a28ffa4: startup date [Thu Jan 31 10:40:40 CST 2019]; root of context hierarchy
2019-01-31 10:40:42.153 [main] INFO  o.s.b.c.e.tomcat.TomcatEmbeddedServletContainer - Tomcat initialized with port(s): 8080 (http)
2019-01-31 10:40:42.163 [main] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2019-01-31 10:40:42.164 [main] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet Engine: Apache Tomcat/8.5.23
2019-01-31 10:40:42.275 [localhost-startStop-1] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2019-01-31 10:40:42.276 [localhost-startStop-1] INFO  org.springframework.web.context.ContextLoader - Root WebApplicationContext: initialization completed in 1797 ms
2019-01-31 10:40:42.447 [localhost-startStop-1] INFO  o.s.boot.web.servlet.FilterRegistrationBean - Mapping filter: 'characterEncodingFilter' to: [/*]
2019-01-31 10:40:42.447 [localhost-startStop-1] INFO  o.s.boot.web.servlet.FilterRegistrationBean - Mapping filter: 'hiddenHttpMethodFilter' to: [/*]
2019-01-31 10:40:42.447 [localhost-startStop-1] INFO  o.s.boot.web.servlet.FilterRegistrationBean - Mapping filter: 'httpPutFormContentFilter' to: [/*]
2019-01-31 10:40:42.447 [localhost-startStop-1] INFO  o.s.boot.web.servlet.FilterRegistrationBean - Mapping filter: 'requestContextFilter' to: [/*]
2019-01-31 10:40:42.448 [localhost-startStop-1] INFO  o.s.boot.web.servlet.FilterRegistrationBean - Mapping filter: 'loginFilter' to urls: [/*]
2019-01-31 10:40:42.448 [localhost-startStop-1] INFO  o.s.boot.web.servlet.ServletRegistrationBean - Mapping servlet: 'dispatcherServlet' to [/]
2019-01-31 10:40:43.283 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerAdapter - Looking for @ControllerAdvice: org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@6a28ffa4: startup date [Thu Jan 31 10:40:40 CST 2019]; root of context hierarchy
2019-01-31 10:40:43.341 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productList]}" onto public java.lang.String com.yun.product.controller.ProductController.productList(org.springframework.ui.Model,java.lang.String,java.lang.String,java.lang.String,java.lang.String)
2019-01-31 10:40:43.342 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productPreAdd]}" onto public java.lang.String com.yun.product.controller.ProductController.productPreAdd()
2019-01-31 10:40:43.344 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productSave]}" onto public java.lang.String com.yun.product.controller.ProductController.productSave(com.yun.product.model.Product)
2019-01-31 10:40:43.344 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productDelete]}" onto public java.lang.String com.yun.product.controller.ProductController.productDelete(int)
2019-01-31 10:40:43.344 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productPreUpdate]}" onto public java.lang.String com.yun.product.controller.ProductController.productPreUpdate(int,org.springframework.ui.Model)
2019-01-31 10:40:43.344 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productUpdate]}" onto public java.lang.String com.yun.product.controller.ProductController.productUpdate(com.yun.product.model.Product)
2019-01-31 10:40:43.345 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productListForAutoComplete]}" onto public java.util.List<com.yun.product.model.Product> com.yun.product.controller.ProductController.productListForAutoComplete(java.lang.String)
2019-01-31 10:40:43.345 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productListForStock]}" onto public java.util.List<com.yun.product.model.Product> com.yun.product.controller.ProductController.productListForStock()
2019-01-31 10:40:43.345 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productListForTrade]}" onto public java.util.List<com.yun.product.model.Product> com.yun.product.controller.ProductController.productListForTrade(java.lang.String)
2019-01-31 10:40:43.346 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/prodParamDelete]}" onto public java.lang.String com.yun.product.controller.ProductParamController.prodParamDelete(int)
2019-01-31 10:40:43.347 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/prodParamPreAdd]}" onto public java.lang.String com.yun.product.controller.ProductParamController.prodParamPreAdd(int,org.springframework.ui.Model)
2019-01-31 10:40:43.347 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/prodParamSave]}" onto public java.lang.String com.yun.product.controller.ProductParamController.prodParamSave(com.yun.product.model.ProductParameter)
2019-01-31 10:40:43.347 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/prodParamList]}" onto public java.lang.String com.yun.product.controller.ProductParamController.prodParamList(int)
2019-01-31 10:40:43.350 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeList]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeList(org.springframework.ui.Model)
2019-01-31 10:40:43.350 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeTree]}" onto public java.util.List<com.yun.product.model.ProductType> com.yun.product.controller.ProductTypeController.productTypeTree()
2019-01-31 10:40:43.350 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeEdit]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeEdit()
2019-01-31 10:40:43.350 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeSave]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeSave(com.yun.product.model.ProductType)
2019-01-31 10:40:43.351 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeUpdate]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeUpdate(java.lang.Integer,org.springframework.ui.Model)
2019-01-31 10:40:43.351 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeUpdateSave]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeUpdateSave(com.yun.product.model.ProductType)
2019-01-31 10:40:43.351 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeDelete]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeDelete(java.lang.Integer,javax.servlet.http.HttpServletResponse) throws java.io.IOException
2019-01-31 10:40:43.352 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveStockList]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveStockController.productReceiveStocklist(java.lang.String,java.lang.String,org.springframework.ui.Model)
2019-01-31 10:40:43.352 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveStockPreAdd]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveStockController.productReceiveStockPreAdd()
2019-01-31 10:40:43.353 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveStockSave]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveStockController.productReceiveStockSave(com.yun.stock.model.ProductReceiveStock)
2019-01-31 10:40:43.353 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveStockDelete]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveStockController.productReceiveStockDelete(int)
2019-01-31 10:40:43.353 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveStockPreUpdate]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveStockController.productReceiveStockPreUpdate(int,org.springframework.ui.Model)
2019-01-31 10:40:43.353 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveStockUpdate]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveStockController.productReceiveStockUpdate(com.yun.stock.model.ProductReceiveStock)
2019-01-31 10:40:43.354 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveIn]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveTradeController.receiveIn(org.springframework.ui.Model)
2019-01-31 10:40:43.354 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveInSave]}" onto public void com.yun.stock.controller.ProductReceiveTradeController.receiveInSave(com.yun.stock.model.ProductReceiveTrade,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse) throws java.io.IOException
2019-01-31 10:40:43.354 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveReject]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveTradeController.receiveReject(org.springframework.ui.Model)
2019-01-31 10:40:43.355 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveStockToCurrentStock]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveTradeController.productReceiveStockToCurrentStock(int,org.springframework.ui.Model)
2019-01-31 10:40:43.355 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveRejectSave]}" onto public void com.yun.stock.controller.ProductReceiveTradeController.receiveRejectSave(com.yun.stock.model.ProductReceiveTrade,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse) throws java.io.IOException
2019-01-31 10:40:43.355 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveToCurrentSave]}" onto public void com.yun.stock.controller.ProductReceiveTradeController.productReceiveToCurrentSave(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse) throws java.lang.Exception
2019-01-31 10:40:43.356 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockPreAdd]}" onto public java.lang.String com.yun.stock.controller.ProductStockController.productStockPreAdd()
2019-01-31 10:40:43.356 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockDelete]}" onto public java.lang.String com.yun.stock.controller.ProductStockController.productStockDelete(int)
2019-01-31 10:40:43.356 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockPreUpdate]}" onto public java.lang.String com.yun.stock.controller.ProductStockController.productStockPreUpdate(int,org.springframework.ui.Model)
2019-01-31 10:40:43.357 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockUpdate]}" onto public java.lang.String com.yun.stock.controller.ProductStockController.productStockUpdate(com.yun.stock.model.ProductStock)
2019-01-31 10:40:43.357 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockSave]}" onto public java.lang.String com.yun.stock.controller.ProductStockController.productStockSave(com.yun.stock.model.ProductStock)
2019-01-31 10:40:43.357 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockList]}" onto public java.lang.String com.yun.stock.controller.ProductStockController.productStocklist(java.lang.String,java.lang.String,org.springframework.ui.Model)
2019-01-31 10:40:43.357 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/main]}" onto public java.lang.String com.yun.user.controller.MainController.main()
2019-01-31 10:40:43.358 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/userList]}" onto public java.lang.String com.yun.user.controller.UserController.userList(org.springframework.ui.Model)
2019-01-31 10:40:43.358 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/deleteUserInfo]}" onto public java.lang.String com.yun.user.controller.UserController.userDelete(int)
2019-01-31 10:40:43.358 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/login]}" onto public void com.yun.user.controller.UserController.login(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse) throws java.io.IOException
2019-01-31 10:40:43.359 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/userSave]}" onto public java.lang.String com.yun.user.controller.UserController.userSave(com.yun.user.model.UserInfo)
2019-01-31 10:40:43.359 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/userEdit]}" onto public java.lang.String com.yun.user.controller.UserController.userEdit()
2019-01-31 10:40:43.362 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/error]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> org.springframework.boot.autoconfigure.web.BasicErrorController.error(javax.servlet.http.HttpServletRequest)
2019-01-31 10:40:43.362 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/error],produces=[text/html]}" onto public org.springframework.web.servlet.ModelAndView org.springframework.boot.autoconfigure.web.BasicErrorController.errorHtml(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
2019-01-31 10:40:43.396 [main] INFO  o.s.web.servlet.handler.SimpleUrlHandlerMapping - Mapped URL path [/webjars/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-01-31 10:40:43.397 [main] INFO  o.s.web.servlet.handler.SimpleUrlHandlerMapping - Mapped URL path [/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-01-31 10:40:43.442 [main] INFO  o.s.web.servlet.handler.SimpleUrlHandlerMapping - Mapped URL path [/**/favicon.ico] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-01-31 10:40:43.744 [main] INFO  o.s.b.a.w.WebMvcAutoConfiguration$WelcomePageHandlerMapping - Adding welcome page: class path resource [static/index.html]
2019-01-31 10:40:44.006 [main] INFO  o.s.jmx.export.annotation.AnnotationMBeanExporter - Registering beans for JMX exposure on startup
2019-01-31 10:40:44.025 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2019-01-31 10:40:44.037 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2019-01-31 10:40:44.053 [main] INFO  org.apache.tomcat.util.net.NioSelectorPool - Using a shared selector for servlet write/read
2019-01-31 10:40:44.227 [main] INFO  o.s.b.c.e.tomcat.TomcatEmbeddedServletContainer - Tomcat started on port(s): 8080 (http)
2019-01-31 10:40:44.233 [main] INFO  com.yun.YunEbStockApplication - Started YunEbStockApplication in 4.869 seconds (JVM running for 6.024)
2019-01-31 10:40:44.282 [http-nio-8080-exec-1] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring FrameworkServlet 'dispatcherServlet'
2019-01-31 10:40:44.282 [http-nio-8080-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - FrameworkServlet 'dispatcherServlet': initialization started
2019-01-31 10:40:44.301 [http-nio-8080-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - FrameworkServlet 'dispatcherServlet': initialization completed in 19 ms
2019-01-31 10:40:44.311 [http-nio-8080-exec-1] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/main
2019-01-31 10:40:51.313 [http-nio-8080-exec-2] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/login
2019-01-31 10:40:51.637 [http-nio-8080-exec-2] DEBUG c.y.user.dao.UserInfoDao.findUserInfoByNameAndPass - ==>  Preparing: select * from user_info where login_name=? and login_pass=? 
2019-01-31 10:40:51.657 [http-nio-8080-exec-2] DEBUG c.y.user.dao.UserInfoDao.findUserInfoByNameAndPass - ==> Parameters: admin(String), 123(String)
2019-01-31 10:40:51.668 [http-nio-8080-exec-2] DEBUG c.y.user.dao.UserInfoDao.findUserInfoByNameAndPass - <==      Total: 1
2019-01-31 10:40:51.679 [http-nio-8080-exec-3] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/main
2019-01-31 10:40:54.528 [http-nio-8080-exec-5] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productReceiveStockList
2019-01-31 10:40:54.534 [http-nio-8080-exec-5] DEBUG c.y.stock.controller.ProductReceiveStockController - 跳转到待收库存查询控制器
2019-01-31 10:40:54.571 [http-nio-8080-exec-5] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - ==>  Preparing: select count(*) from product_receive_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 
2019-01-31 10:40:54.571 [http-nio-8080-exec-5] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - ==> Parameters: 
2019-01-31 10:40:54.572 [http-nio-8080-exec-5] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - <==      Total: 1
2019-01-31 10:40:54.581 [http-nio-8080-exec-5] DEBUG c.y.s.d.P.findProductReceiveStockList - ==>  Preparing: select ps.prod_rece_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_receive_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 order by p.prod_id,pp.prod_param_id limit ?,? 
2019-01-31 10:40:54.581 [http-nio-8080-exec-5] DEBUG c.y.s.d.P.findProductReceiveStockList - ==> Parameters: 0(Integer), 5(Integer)
2019-01-31 10:40:54.585 [http-nio-8080-exec-5] DEBUG c.y.s.d.P.findProductReceiveStockList - <==      Total: 5
2019-01-31 10:40:54.587 [http-nio-8080-exec-5] DEBUG c.y.stock.controller.ProductReceiveStockController - 转到待收库存页面
2019-01-31 10:40:56.227 [http-nio-8080-exec-6] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productReceiveStockToCurrentStock
2019-01-31 10:40:56.247 [http-nio-8080-exec-6] DEBUG c.y.s.d.P.findProductReceiveStockById - ==>  Preparing: select ps.prod_rece_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_receive_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 and ps.prod_rece_stock_id=? 
2019-01-31 10:40:56.248 [http-nio-8080-exec-6] DEBUG c.y.s.d.P.findProductReceiveStockById - ==> Parameters: 9(Integer)
2019-01-31 10:40:56.250 [http-nio-8080-exec-6] DEBUG c.y.s.d.P.findProductReceiveStockById - <==      Total: 1
2019-01-31 10:40:59.016 [http-nio-8080-exec-7] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productReceiveToCurrentSave
2019-01-31 10:40:59.021 [http-nio-8080-exec-7] DEBUG c.y.s.d.P.findProductReceiveStockById - ==>  Preparing: select ps.prod_rece_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_receive_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 and ps.prod_rece_stock_id=? 
2019-01-31 10:40:59.022 [http-nio-8080-exec-7] DEBUG c.y.s.d.P.findProductReceiveStockById - ==> Parameters: 9(Integer)
2019-01-31 10:40:59.024 [http-nio-8080-exec-7] DEBUG c.y.s.d.P.findProductReceiveStockById - <==      Total: 1
2019-01-31 10:40:59.026 [http-nio-8080-exec-7] DEBUG c.y.s.d.P.insertProductReceiveOutTrade - ==>  Preparing: insert into product_receive_trade(trade_date,prod_id,prod_param_id,begin_num,trade_del,end_num,oper_id)values(?,?,?,?,?,?,?) 
2019-01-31 10:40:59.028 [http-nio-8080-exec-7] DEBUG c.y.s.d.P.insertProductReceiveOutTrade - ==> Parameters: 2019-01-31 10:40:56.0(Timestamp), 2(Integer), 8(Integer), 16(Integer), 6(Integer), 10(Integer), 5(Integer)
2019-01-31 10:40:59.079 [http-nio-8080-exec-7] DEBUG c.y.s.d.P.insertProductReceiveOutTrade - <==    Updates: 1
2019-01-31 10:40:59.080 [http-nio-8080-exec-7] DEBUG c.y.s.d.P.findProductStockByProdIdAndProdParamId - ==>  Preparing: select ps.prod_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 and p.prod_id=? and pp.prod_param_Id=? 
2019-01-31 10:40:59.080 [http-nio-8080-exec-7] DEBUG c.y.s.d.P.findProductStockByProdIdAndProdParamId - ==> Parameters: 2(Integer), 8(Integer)
2019-01-31 10:40:59.082 [http-nio-8080-exec-7] DEBUG c.y.s.d.P.findProductStockByProdIdAndProdParamId - <==      Total: 1
2019-01-31 10:40:59.083 [http-nio-8080-exec-7] DEBUG c.yun.stock.dao.ProductStockDao.updateProductStock - ==>  Preparing: update product_stock set prod_id=?,prod_param_id=?,stock_num=? where prod_stock_id=? 
2019-01-31 10:40:59.083 [http-nio-8080-exec-7] DEBUG c.yun.stock.dao.ProductStockDao.updateProductStock - ==> Parameters: 2(Integer), 8(Integer), 0(Integer), 9(Integer)
2019-01-31 10:40:59.085 [http-nio-8080-exec-7] DEBUG c.yun.stock.dao.ProductStockDao.updateProductStock - <==    Updates: 1
2019-01-31 10:40:59.086 [http-nio-8080-exec-7] DEBUG c.y.stock.dao.ProductTradeDao.insertProductInTrade - ==>  Preparing: insert into product_trade(trade_date,prod_id,prod_param_id,begin_num,trade_add,end_num,oper_id)values(?,?,?,?,?,?,?) 
2019-01-31 10:40:59.088 [http-nio-8080-exec-7] DEBUG c.y.stock.dao.ProductTradeDao.insertProductInTrade - ==> Parameters: 2019-01-31 10:40:56.0(Timestamp), 2(Integer), 8(Integer), -6(Integer), 6(Integer), 0(Integer), 5(Integer)
2019-01-31 10:40:59.242 [http-nio-8080-exec-7] DEBUG c.y.stock.dao.ProductTradeDao.insertProductInTrade - <==    Updates: 1
2019-01-31 10:40:59.244 [http-nio-8080-exec-7] DEBUG c.y.s.d.P.updateProductReceiveStock - ==>  Preparing: update product_receive_stock set prod_id=?,prod_param_id=?,stock_num=? where prod_rece_stock_id=? 
2019-01-31 10:40:59.246 [http-nio-8080-exec-7] DEBUG c.y.s.d.P.updateProductReceiveStock - ==> Parameters: 2(Integer), 8(Integer), 10(Integer), 9(Integer)
2019-01-31 10:40:59.249 [http-nio-8080-exec-7] DEBUG c.y.s.d.P.updateProductReceiveStock - <==    Updates: 1
2019-01-31 10:40:59.250 [http-nio-8080-exec-7] DEBUG com.yun.stock.service.ProductStockService - java.lang.Exception: aaa
2019-01-31 10:40:59.304 [http-nio-8080-exec-7] DEBUG c.y.stock.controller.ProductReceiveTradeController - result:aaa
2019-01-31 10:41:00.578 [http-nio-8080-exec-8] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productReceiveStockList
2019-01-31 10:41:00.580 [http-nio-8080-exec-8] DEBUG c.y.stock.controller.ProductReceiveStockController - 跳转到待收库存查询控制器
2019-01-31 10:41:00.589 [http-nio-8080-exec-8] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - ==>  Preparing: select count(*) from product_receive_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 
2019-01-31 10:41:00.593 [http-nio-8080-exec-8] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - ==> Parameters: 
2019-01-31 10:41:00.596 [http-nio-8080-exec-8] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - <==      Total: 1
2019-01-31 10:41:00.599 [http-nio-8080-exec-8] DEBUG c.y.s.d.P.findProductReceiveStockList - ==>  Preparing: select ps.prod_rece_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_receive_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 order by p.prod_id,pp.prod_param_id limit ?,? 
2019-01-31 10:41:00.599 [http-nio-8080-exec-8] DEBUG c.y.s.d.P.findProductReceiveStockList - ==> Parameters: 0(Integer), 5(Integer)
2019-01-31 10:41:00.602 [http-nio-8080-exec-8] DEBUG c.y.s.d.P.findProductReceiveStockList - <==      Total: 5
2019-01-31 10:41:00.604 [http-nio-8080-exec-8] DEBUG c.y.stock.controller.ProductReceiveStockController - 转到待收库存页面
2019-01-31 10:41:08.495 [http-nio-8080-exec-9] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productReceiveStockToCurrentStock
2019-01-31 10:41:08.499 [http-nio-8080-exec-9] DEBUG c.y.s.d.P.findProductReceiveStockById - ==>  Preparing: select ps.prod_rece_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_receive_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 and ps.prod_rece_stock_id=? 
2019-01-31 10:41:08.499 [http-nio-8080-exec-9] DEBUG c.y.s.d.P.findProductReceiveStockById - ==> Parameters: 9(Integer)
2019-01-31 10:41:08.502 [http-nio-8080-exec-9] DEBUG c.y.s.d.P.findProductReceiveStockById - <==      Total: 1
2019-01-31 10:41:11.217 [http-nio-8080-exec-10] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productReceiveToCurrentSave
2019-01-31 10:41:11.224 [http-nio-8080-exec-10] DEBUG c.y.s.d.P.findProductReceiveStockById - ==>  Preparing: select ps.prod_rece_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_receive_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 and ps.prod_rece_stock_id=? 
2019-01-31 10:41:11.224 [http-nio-8080-exec-10] DEBUG c.y.s.d.P.findProductReceiveStockById - ==> Parameters: 9(Integer)
2019-01-31 10:41:11.228 [http-nio-8080-exec-10] DEBUG c.y.s.d.P.findProductReceiveStockById - <==      Total: 1
2019-01-31 10:41:11.229 [http-nio-8080-exec-10] DEBUG c.y.s.d.P.insertProductReceiveOutTrade - ==>  Preparing: insert into product_receive_trade(trade_date,prod_id,prod_param_id,begin_num,trade_del,end_num,oper_id)values(?,?,?,?,?,?,?) 
2019-01-31 10:41:11.230 [http-nio-8080-exec-10] DEBUG c.y.s.d.P.insertProductReceiveOutTrade - ==> Parameters: 2019-01-31 10:41:08.0(Timestamp), 2(Integer), 8(Integer), 10(Integer), 6(Integer), 4(Integer), 5(Integer)
2019-01-31 10:41:11.280 [http-nio-8080-exec-10] DEBUG c.y.s.d.P.insertProductReceiveOutTrade - <==    Updates: 1
2019-01-31 10:41:11.281 [http-nio-8080-exec-10] DEBUG c.y.s.d.P.findProductStockByProdIdAndProdParamId - ==>  Preparing: select ps.prod_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 and p.prod_id=? and pp.prod_param_Id=? 
2019-01-31 10:41:11.283 [http-nio-8080-exec-10] DEBUG c.y.s.d.P.findProductStockByProdIdAndProdParamId - ==> Parameters: 2(Integer), 8(Integer)
2019-01-31 10:41:11.290 [http-nio-8080-exec-10] DEBUG c.y.s.d.P.findProductStockByProdIdAndProdParamId - <==      Total: 1
2019-01-31 10:41:11.291 [http-nio-8080-exec-10] DEBUG c.yun.stock.dao.ProductStockDao.updateProductStock - ==>  Preparing: update product_stock set prod_id=?,prod_param_id=?,stock_num=? where prod_stock_id=? 
2019-01-31 10:41:11.292 [http-nio-8080-exec-10] DEBUG c.yun.stock.dao.ProductStockDao.updateProductStock - ==> Parameters: 2(Integer), 8(Integer), 6(Integer), 9(Integer)
2019-01-31 10:41:11.293 [http-nio-8080-exec-10] DEBUG c.yun.stock.dao.ProductStockDao.updateProductStock - <==    Updates: 1
2019-01-31 10:41:11.294 [http-nio-8080-exec-10] DEBUG c.y.stock.dao.ProductTradeDao.insertProductInTrade - ==>  Preparing: insert into product_trade(trade_date,prod_id,prod_param_id,begin_num,trade_add,end_num,oper_id)values(?,?,?,?,?,?,?) 
2019-01-31 10:41:11.295 [http-nio-8080-exec-10] DEBUG c.y.stock.dao.ProductTradeDao.insertProductInTrade - ==> Parameters: 2019-01-31 10:41:08.0(Timestamp), 2(Integer), 8(Integer), 0(Integer), 6(Integer), 6(Integer), 5(Integer)
2019-01-31 10:41:11.296 [http-nio-8080-exec-10] DEBUG c.y.stock.dao.ProductTradeDao.insertProductInTrade - <==    Updates: 1
2019-01-31 10:41:11.297 [http-nio-8080-exec-10] DEBUG c.y.s.d.P.updateProductReceiveStock - ==>  Preparing: update product_receive_stock set prod_id=?,prod_param_id=?,stock_num=? where prod_rece_stock_id=? 
2019-01-31 10:41:11.298 [http-nio-8080-exec-10] DEBUG c.y.s.d.P.updateProductReceiveStock - ==> Parameters: 2(Integer), 8(Integer), 4(Integer), 9(Integer)
2019-01-31 10:41:11.300 [http-nio-8080-exec-10] DEBUG c.y.s.d.P.updateProductReceiveStock - <==    Updates: 1
2019-01-31 10:41:11.300 [http-nio-8080-exec-10] DEBUG com.yun.stock.service.ProductStockService - java.lang.Exception: aaa
2019-01-31 10:41:11.347 [http-nio-8080-exec-10] DEBUG c.y.stock.controller.ProductReceiveTradeController - result:aaa
2019-01-31 10:41:12.471 [http-nio-8080-exec-1] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productReceiveStockList
2019-01-31 10:41:12.472 [http-nio-8080-exec-1] DEBUG c.y.stock.controller.ProductReceiveStockController - 跳转到待收库存查询控制器
2019-01-31 10:41:12.474 [http-nio-8080-exec-1] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - ==>  Preparing: select count(*) from product_receive_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 
2019-01-31 10:41:12.474 [http-nio-8080-exec-1] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - ==> Parameters: 
2019-01-31 10:41:12.476 [http-nio-8080-exec-1] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - <==      Total: 1
2019-01-31 10:41:12.480 [http-nio-8080-exec-1] DEBUG c.y.s.d.P.findProductReceiveStockList - ==>  Preparing: select ps.prod_rece_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_receive_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 order by p.prod_id,pp.prod_param_id limit ?,? 
2019-01-31 10:41:12.482 [http-nio-8080-exec-1] DEBUG c.y.s.d.P.findProductReceiveStockList - ==> Parameters: 0(Integer), 5(Integer)
2019-01-31 10:41:12.486 [http-nio-8080-exec-1] DEBUG c.y.s.d.P.findProductReceiveStockList - <==      Total: 5
2019-01-31 10:41:12.489 [http-nio-8080-exec-1] DEBUG c.y.stock.controller.ProductReceiveStockController - 转到待收库存页面
2019-01-31 10:46:05.052 [main] INFO  com.yun.YunEbStockApplication - Starting YunEbStockApplication on USER-20181202BJ with PID 4600 (E:\workspace\yun-eb-stock\target\classes started by Administrator in E:\workspace\yun-eb-stock)
2019-01-31 10:46:05.057 [main] DEBUG com.yun.YunEbStockApplication - Running with Spring Boot v1.5.9.RELEASE, Spring v4.3.13.RELEASE
2019-01-31 10:46:05.057 [main] INFO  com.yun.YunEbStockApplication - No active profile set, falling back to default profiles: default
2019-01-31 10:46:05.453 [main] INFO  o.s.b.c.e.AnnotationConfigEmbeddedWebApplicationContext - Refreshing org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@6a28ffa4: startup date [Thu Jan 31 10:46:05 CST 2019]; root of context hierarchy
2019-01-31 10:46:05.484 [background-preinit] INFO  org.hibernate.validator.internal.util.Version - HV000001: Hibernate Validator 5.3.6.Final
2019-01-31 10:46:07.247 [main] INFO  o.s.b.c.e.tomcat.TomcatEmbeddedServletContainer - Tomcat initialized with port(s): 8080 (http)
2019-01-31 10:46:07.258 [main] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2019-01-31 10:46:07.259 [main] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet Engine: Apache Tomcat/8.5.23
2019-01-31 10:46:07.360 [localhost-startStop-1] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2019-01-31 10:46:07.361 [localhost-startStop-1] INFO  org.springframework.web.context.ContextLoader - Root WebApplicationContext: initialization completed in 1908 ms
2019-01-31 10:46:07.517 [localhost-startStop-1] INFO  o.s.boot.web.servlet.FilterRegistrationBean - Mapping filter: 'characterEncodingFilter' to: [/*]
2019-01-31 10:46:07.518 [localhost-startStop-1] INFO  o.s.boot.web.servlet.FilterRegistrationBean - Mapping filter: 'hiddenHttpMethodFilter' to: [/*]
2019-01-31 10:46:07.518 [localhost-startStop-1] INFO  o.s.boot.web.servlet.FilterRegistrationBean - Mapping filter: 'httpPutFormContentFilter' to: [/*]
2019-01-31 10:46:07.518 [localhost-startStop-1] INFO  o.s.boot.web.servlet.FilterRegistrationBean - Mapping filter: 'requestContextFilter' to: [/*]
2019-01-31 10:46:07.518 [localhost-startStop-1] INFO  o.s.boot.web.servlet.FilterRegistrationBean - Mapping filter: 'loginFilter' to urls: [/*]
2019-01-31 10:46:07.518 [localhost-startStop-1] INFO  o.s.boot.web.servlet.ServletRegistrationBean - Mapping servlet: 'dispatcherServlet' to [/]
2019-01-31 10:46:08.353 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerAdapter - Looking for @ControllerAdvice: org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@6a28ffa4: startup date [Thu Jan 31 10:46:05 CST 2019]; root of context hierarchy
2019-01-31 10:46:08.407 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productPreAdd]}" onto public java.lang.String com.yun.product.controller.ProductController.productPreAdd()
2019-01-31 10:46:08.409 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productList]}" onto public java.lang.String com.yun.product.controller.ProductController.productList(org.springframework.ui.Model,java.lang.String,java.lang.String,java.lang.String,java.lang.String)
2019-01-31 10:46:08.409 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productSave]}" onto public java.lang.String com.yun.product.controller.ProductController.productSave(com.yun.product.model.Product)
2019-01-31 10:46:08.410 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productDelete]}" onto public java.lang.String com.yun.product.controller.ProductController.productDelete(int)
2019-01-31 10:46:08.410 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productPreUpdate]}" onto public java.lang.String com.yun.product.controller.ProductController.productPreUpdate(int,org.springframework.ui.Model)
2019-01-31 10:46:08.410 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productUpdate]}" onto public java.lang.String com.yun.product.controller.ProductController.productUpdate(com.yun.product.model.Product)
2019-01-31 10:46:08.410 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productListForAutoComplete]}" onto public java.util.List<com.yun.product.model.Product> com.yun.product.controller.ProductController.productListForAutoComplete(java.lang.String)
2019-01-31 10:46:08.411 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productListForStock]}" onto public java.util.List<com.yun.product.model.Product> com.yun.product.controller.ProductController.productListForStock()
2019-01-31 10:46:08.411 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productListForTrade]}" onto public java.util.List<com.yun.product.model.Product> com.yun.product.controller.ProductController.productListForTrade(java.lang.String)
2019-01-31 10:46:08.412 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/prodParamDelete]}" onto public java.lang.String com.yun.product.controller.ProductParamController.prodParamDelete(int)
2019-01-31 10:46:08.412 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/prodParamPreAdd]}" onto public java.lang.String com.yun.product.controller.ProductParamController.prodParamPreAdd(int,org.springframework.ui.Model)
2019-01-31 10:46:08.412 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/prodParamSave]}" onto public java.lang.String com.yun.product.controller.ProductParamController.prodParamSave(com.yun.product.model.ProductParameter)
2019-01-31 10:46:08.413 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/prodParamList]}" onto public java.lang.String com.yun.product.controller.ProductParamController.prodParamList(int)
2019-01-31 10:46:08.415 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeList]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeList(org.springframework.ui.Model)
2019-01-31 10:46:08.416 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeTree]}" onto public java.util.List<com.yun.product.model.ProductType> com.yun.product.controller.ProductTypeController.productTypeTree()
2019-01-31 10:46:08.416 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeEdit]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeEdit()
2019-01-31 10:46:08.416 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeSave]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeSave(com.yun.product.model.ProductType)
2019-01-31 10:46:08.416 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeUpdate]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeUpdate(java.lang.Integer,org.springframework.ui.Model)
2019-01-31 10:46:08.417 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeUpdateSave]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeUpdateSave(com.yun.product.model.ProductType)
2019-01-31 10:46:08.417 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeDelete]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeDelete(java.lang.Integer,javax.servlet.http.HttpServletResponse) throws java.io.IOException
2019-01-31 10:46:08.418 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveStockList]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveStockController.productReceiveStocklist(java.lang.String,java.lang.String,org.springframework.ui.Model)
2019-01-31 10:46:08.418 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveStockPreAdd]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveStockController.productReceiveStockPreAdd()
2019-01-31 10:46:08.418 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveStockSave]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveStockController.productReceiveStockSave(com.yun.stock.model.ProductReceiveStock)
2019-01-31 10:46:08.418 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveStockDelete]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveStockController.productReceiveStockDelete(int)
2019-01-31 10:46:08.418 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveStockPreUpdate]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveStockController.productReceiveStockPreUpdate(int,org.springframework.ui.Model)
2019-01-31 10:46:08.419 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveStockUpdate]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveStockController.productReceiveStockUpdate(com.yun.stock.model.ProductReceiveStock)
2019-01-31 10:46:08.420 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveStockToCurrentStock]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveTradeController.productReceiveStockToCurrentStock(int,org.springframework.ui.Model)
2019-01-31 10:46:08.420 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveInSave]}" onto public void com.yun.stock.controller.ProductReceiveTradeController.receiveInSave(com.yun.stock.model.ProductReceiveTrade,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse) throws java.io.IOException
2019-01-31 10:46:08.420 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveIn]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveTradeController.receiveIn(org.springframework.ui.Model)
2019-01-31 10:46:08.420 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveReject]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveTradeController.receiveReject(org.springframework.ui.Model)
2019-01-31 10:46:08.420 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveRejectSave]}" onto public void com.yun.stock.controller.ProductReceiveTradeController.receiveRejectSave(com.yun.stock.model.ProductReceiveTrade,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse) throws java.io.IOException
2019-01-31 10:46:08.421 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveToCurrentSave]}" onto public void com.yun.stock.controller.ProductReceiveTradeController.productReceiveToCurrentSave(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse) throws java.lang.Exception
2019-01-31 10:46:08.422 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockSave]}" onto public java.lang.String com.yun.stock.controller.ProductStockController.productStockSave(com.yun.stock.model.ProductStock)
2019-01-31 10:46:08.422 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockList]}" onto public java.lang.String com.yun.stock.controller.ProductStockController.productStocklist(java.lang.String,java.lang.String,org.springframework.ui.Model)
2019-01-31 10:46:08.422 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockPreAdd]}" onto public java.lang.String com.yun.stock.controller.ProductStockController.productStockPreAdd()
2019-01-31 10:46:08.422 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockDelete]}" onto public java.lang.String com.yun.stock.controller.ProductStockController.productStockDelete(int)
2019-01-31 10:46:08.422 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockPreUpdate]}" onto public java.lang.String com.yun.stock.controller.ProductStockController.productStockPreUpdate(int,org.springframework.ui.Model)
2019-01-31 10:46:08.423 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockUpdate]}" onto public java.lang.String com.yun.stock.controller.ProductStockController.productStockUpdate(com.yun.stock.model.ProductStock)
2019-01-31 10:46:08.423 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/main]}" onto public java.lang.String com.yun.user.controller.MainController.main()
2019-01-31 10:46:08.424 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/userList]}" onto public java.lang.String com.yun.user.controller.UserController.userList(org.springframework.ui.Model)
2019-01-31 10:46:08.424 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/userEdit]}" onto public java.lang.String com.yun.user.controller.UserController.userEdit()
2019-01-31 10:46:08.424 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/deleteUserInfo]}" onto public java.lang.String com.yun.user.controller.UserController.userDelete(int)
2019-01-31 10:46:08.424 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/login]}" onto public void com.yun.user.controller.UserController.login(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse) throws java.io.IOException
2019-01-31 10:46:08.425 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/userSave]}" onto public java.lang.String com.yun.user.controller.UserController.userSave(com.yun.user.model.UserInfo)
2019-01-31 10:46:08.428 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/error]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> org.springframework.boot.autoconfigure.web.BasicErrorController.error(javax.servlet.http.HttpServletRequest)
2019-01-31 10:46:08.429 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/error],produces=[text/html]}" onto public org.springframework.web.servlet.ModelAndView org.springframework.boot.autoconfigure.web.BasicErrorController.errorHtml(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
2019-01-31 10:46:08.460 [main] INFO  o.s.web.servlet.handler.SimpleUrlHandlerMapping - Mapped URL path [/webjars/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-01-31 10:46:08.461 [main] INFO  o.s.web.servlet.handler.SimpleUrlHandlerMapping - Mapped URL path [/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-01-31 10:46:08.503 [main] INFO  o.s.web.servlet.handler.SimpleUrlHandlerMapping - Mapped URL path [/**/favicon.ico] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-01-31 10:46:08.819 [main] INFO  o.s.b.a.w.WebMvcAutoConfiguration$WelcomePageHandlerMapping - Adding welcome page: class path resource [static/index.html]
2019-01-31 10:46:09.065 [main] INFO  o.s.jmx.export.annotation.AnnotationMBeanExporter - Registering beans for JMX exposure on startup
2019-01-31 10:46:09.085 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2019-01-31 10:46:09.095 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2019-01-31 10:46:09.276 [main] INFO  org.apache.tomcat.util.net.NioSelectorPool - Using a shared selector for servlet write/read
2019-01-31 10:46:09.296 [main] INFO  o.s.b.c.e.tomcat.TomcatEmbeddedServletContainer - Tomcat started on port(s): 8080 (http)
2019-01-31 10:46:09.301 [main] INFO  com.yun.YunEbStockApplication - Started YunEbStockApplication in 4.603 seconds (JVM running for 5.762)
2019-01-31 10:46:15.477 [http-nio-8080-exec-1] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring FrameworkServlet 'dispatcherServlet'
2019-01-31 10:46:15.478 [http-nio-8080-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - FrameworkServlet 'dispatcherServlet': initialization started
2019-01-31 10:46:15.497 [http-nio-8080-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - FrameworkServlet 'dispatcherServlet': initialization completed in 19 ms
2019-01-31 10:46:15.509 [http-nio-8080-exec-1] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/main
2019-01-31 10:46:21.116 [http-nio-8080-exec-2] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/login
2019-01-31 10:46:21.434 [http-nio-8080-exec-2] DEBUG c.y.user.dao.UserInfoDao.findUserInfoByNameAndPass - ==>  Preparing: select * from user_info where login_name=? and login_pass=? 
2019-01-31 10:46:21.453 [http-nio-8080-exec-2] DEBUG c.y.user.dao.UserInfoDao.findUserInfoByNameAndPass - ==> Parameters: admin(String), 123(String)
2019-01-31 10:46:21.467 [http-nio-8080-exec-2] DEBUG c.y.user.dao.UserInfoDao.findUserInfoByNameAndPass - <==      Total: 1
2019-01-31 10:46:21.478 [http-nio-8080-exec-3] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/main
2019-01-31 10:46:25.652 [http-nio-8080-exec-4] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productReceiveStockList
2019-01-31 10:46:25.661 [http-nio-8080-exec-4] DEBUG c.y.stock.controller.ProductReceiveStockController - 跳转到待收库存查询控制器
2019-01-31 10:46:25.707 [http-nio-8080-exec-4] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - ==>  Preparing: select count(*) from product_receive_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 
2019-01-31 10:46:25.707 [http-nio-8080-exec-4] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - ==> Parameters: 
2019-01-31 10:46:25.708 [http-nio-8080-exec-4] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - <==      Total: 1
2019-01-31 10:46:25.714 [http-nio-8080-exec-4] DEBUG c.y.s.d.P.findProductReceiveStockList - ==>  Preparing: select ps.prod_rece_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_receive_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 order by p.prod_id,pp.prod_param_id limit ?,? 
2019-01-31 10:46:25.715 [http-nio-8080-exec-4] DEBUG c.y.s.d.P.findProductReceiveStockList - ==> Parameters: 0(Integer), 5(Integer)
2019-01-31 10:46:25.718 [http-nio-8080-exec-4] DEBUG c.y.s.d.P.findProductReceiveStockList - <==      Total: 5
2019-01-31 10:46:25.719 [http-nio-8080-exec-4] DEBUG c.y.stock.controller.ProductReceiveStockController - 转到待收库存页面
2019-01-31 10:46:28.538 [http-nio-8080-exec-5] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productReceiveStockToCurrentStock
2019-01-31 10:46:28.552 [http-nio-8080-exec-5] DEBUG c.y.s.d.P.findProductReceiveStockById - ==>  Preparing: select ps.prod_rece_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_receive_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 and ps.prod_rece_stock_id=? 
2019-01-31 10:46:28.552 [http-nio-8080-exec-5] DEBUG c.y.s.d.P.findProductReceiveStockById - ==> Parameters: 9(Integer)
2019-01-31 10:46:28.555 [http-nio-8080-exec-5] DEBUG c.y.s.d.P.findProductReceiveStockById - <==      Total: 1
2019-01-31 10:46:32.870 [http-nio-8080-exec-7] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productReceiveToCurrentSave
2019-01-31 10:46:32.875 [http-nio-8080-exec-7] DEBUG c.y.s.d.P.findProductReceiveStockById - ==>  Preparing: select ps.prod_rece_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_receive_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 and ps.prod_rece_stock_id=? 
2019-01-31 10:46:32.875 [http-nio-8080-exec-7] DEBUG c.y.s.d.P.findProductReceiveStockById - ==> Parameters: 9(Integer)
2019-01-31 10:46:32.876 [http-nio-8080-exec-7] DEBUG c.y.s.d.P.findProductReceiveStockById - <==      Total: 1
2019-01-31 10:46:32.877 [http-nio-8080-exec-7] DEBUG c.y.s.d.P.insertProductReceiveOutTrade - ==>  Preparing: insert into product_receive_trade(trade_date,prod_id,prod_param_id,begin_num,trade_del,end_num,oper_id)values(?,?,?,?,?,?,?) 
2019-01-31 10:46:32.879 [http-nio-8080-exec-7] DEBUG c.y.s.d.P.insertProductReceiveOutTrade - ==> Parameters: 2019-01-31 10:46:28.0(Timestamp), 2(Integer), 8(Integer), 4(Integer), -6(Integer), 10(Integer), 5(Integer)
2019-01-31 10:46:32.906 [http-nio-8080-exec-7] DEBUG c.y.s.d.P.insertProductReceiveOutTrade - <==    Updates: 1
2019-01-31 10:46:32.907 [http-nio-8080-exec-7] DEBUG c.y.s.d.P.findProductStockByProdIdAndProdParamId - ==>  Preparing: select ps.prod_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 and p.prod_id=? and pp.prod_param_Id=? 
2019-01-31 10:46:32.908 [http-nio-8080-exec-7] DEBUG c.y.s.d.P.findProductStockByProdIdAndProdParamId - ==> Parameters: 2(Integer), 8(Integer)
2019-01-31 10:46:32.911 [http-nio-8080-exec-7] DEBUG c.y.s.d.P.findProductStockByProdIdAndProdParamId - <==      Total: 1
2019-01-31 10:46:32.912 [http-nio-8080-exec-7] DEBUG c.yun.stock.dao.ProductStockDao.updateProductStock - ==>  Preparing: update product_stock set prod_id=?,prod_param_id=?,stock_num=? where prod_stock_id=? 
2019-01-31 10:46:32.913 [http-nio-8080-exec-7] DEBUG c.yun.stock.dao.ProductStockDao.updateProductStock - ==> Parameters: 2(Integer), 8(Integer), 0(Integer), 9(Integer)
2019-01-31 10:46:32.914 [http-nio-8080-exec-7] DEBUG c.yun.stock.dao.ProductStockDao.updateProductStock - <==    Updates: 1
2019-01-31 10:46:32.915 [http-nio-8080-exec-7] DEBUG c.y.stock.dao.ProductTradeDao.insertProductInTrade - ==>  Preparing: insert into product_trade(trade_date,prod_id,prod_param_id,begin_num,trade_add,end_num,oper_id)values(?,?,?,?,?,?,?) 
2019-01-31 10:46:32.916 [http-nio-8080-exec-7] DEBUG c.y.stock.dao.ProductTradeDao.insertProductInTrade - ==> Parameters: 2019-01-31 10:46:28.0(Timestamp), 2(Integer), 8(Integer), 6(Integer), -6(Integer), 0(Integer), 5(Integer)
2019-01-31 10:46:32.919 [http-nio-8080-exec-7] DEBUG c.y.stock.dao.ProductTradeDao.insertProductInTrade - <==    Updates: 1
2019-01-31 10:46:32.919 [http-nio-8080-exec-7] DEBUG c.y.s.d.P.updateProductReceiveStock - ==>  Preparing: update product_receive_stock set prod_id=?,prod_param_id=?,stock_num=? where prod_rece_stock_id=? 
2019-01-31 10:46:32.920 [http-nio-8080-exec-7] DEBUG c.y.s.d.P.updateProductReceiveStock - ==> Parameters: 2(Integer), 8(Integer), 10(Integer), 9(Integer)
2019-01-31 10:46:32.921 [http-nio-8080-exec-7] DEBUG c.y.s.d.P.updateProductReceiveStock - <==    Updates: 1
2019-01-31 10:46:32.921 [http-nio-8080-exec-7] DEBUG com.yun.stock.service.ProductStockService - java.lang.Exception: aaa
2019-01-31 10:46:33.022 [http-nio-8080-exec-7] DEBUG c.y.stock.controller.ProductReceiveTradeController - result:aaa
2019-01-31 10:46:34.340 [http-nio-8080-exec-8] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productReceiveStockList
2019-01-31 10:46:34.342 [http-nio-8080-exec-8] DEBUG c.y.stock.controller.ProductReceiveStockController - 跳转到待收库存查询控制器
2019-01-31 10:46:34.342 [http-nio-8080-exec-8] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - ==>  Preparing: select count(*) from product_receive_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 
2019-01-31 10:46:34.343 [http-nio-8080-exec-8] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - ==> Parameters: 
2019-01-31 10:46:34.346 [http-nio-8080-exec-8] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - <==      Total: 1
2019-01-31 10:46:34.347 [http-nio-8080-exec-8] DEBUG c.y.s.d.P.findProductReceiveStockList - ==>  Preparing: select ps.prod_rece_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_receive_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 order by p.prod_id,pp.prod_param_id limit ?,? 
2019-01-31 10:46:34.348 [http-nio-8080-exec-8] DEBUG c.y.s.d.P.findProductReceiveStockList - ==> Parameters: 0(Integer), 5(Integer)
2019-01-31 10:46:34.354 [http-nio-8080-exec-8] DEBUG c.y.s.d.P.findProductReceiveStockList - <==      Total: 5
2019-01-31 10:46:34.356 [http-nio-8080-exec-8] DEBUG c.y.stock.controller.ProductReceiveStockController - 转到待收库存页面
2019-01-31 10:50:23.000 [main] INFO  com.yun.YunEbStockApplication - Starting YunEbStockApplication on USER-20181202BJ with PID 4712 (E:\workspace\yun-eb-stock\target\classes started by Administrator in E:\workspace\yun-eb-stock)
2019-01-31 10:50:23.005 [main] DEBUG com.yun.YunEbStockApplication - Running with Spring Boot v1.5.9.RELEASE, Spring v4.3.13.RELEASE
2019-01-31 10:50:23.005 [main] INFO  com.yun.YunEbStockApplication - No active profile set, falling back to default profiles: default
2019-01-31 10:50:24.073 [main] INFO  o.s.b.c.e.AnnotationConfigEmbeddedWebApplicationContext - Refreshing org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@c267ef4: startup date [Thu Jan 31 10:50:24 CST 2019]; root of context hierarchy
2019-01-31 10:50:24.110 [background-preinit] INFO  org.hibernate.validator.internal.util.Version - HV000001: Hibernate Validator 5.3.6.Final
2019-01-31 10:50:29.178 [main] INFO  o.s.b.c.e.tomcat.TomcatEmbeddedServletContainer - Tomcat initialized with port(s): 8080 (http)
2019-01-31 10:50:29.199 [main] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2019-01-31 10:50:29.201 [main] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet Engine: Apache Tomcat/8.5.23
2019-01-31 10:50:29.472 [localhost-startStop-1] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2019-01-31 10:50:29.473 [localhost-startStop-1] INFO  org.springframework.web.context.ContextLoader - Root WebApplicationContext: initialization completed in 5399 ms
2019-01-31 10:50:30.346 [localhost-startStop-1] INFO  o.s.boot.web.servlet.FilterRegistrationBean - Mapping filter: 'characterEncodingFilter' to: [/*]
2019-01-31 10:50:30.347 [localhost-startStop-1] INFO  o.s.boot.web.servlet.FilterRegistrationBean - Mapping filter: 'hiddenHttpMethodFilter' to: [/*]
2019-01-31 10:50:30.348 [localhost-startStop-1] INFO  o.s.boot.web.servlet.FilterRegistrationBean - Mapping filter: 'httpPutFormContentFilter' to: [/*]
2019-01-31 10:50:30.348 [localhost-startStop-1] INFO  o.s.boot.web.servlet.FilterRegistrationBean - Mapping filter: 'requestContextFilter' to: [/*]
2019-01-31 10:50:30.348 [localhost-startStop-1] INFO  o.s.boot.web.servlet.FilterRegistrationBean - Mapping filter: 'loginFilter' to urls: [/*]
2019-01-31 10:50:30.348 [localhost-startStop-1] INFO  o.s.boot.web.servlet.ServletRegistrationBean - Mapping servlet: 'dispatcherServlet' to [/]
2019-01-31 10:50:32.124 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerAdapter - Looking for @ControllerAdvice: org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@c267ef4: startup date [Thu Jan 31 10:50:24 CST 2019]; root of context hierarchy
2019-01-31 10:50:32.185 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productList]}" onto public java.lang.String com.yun.product.controller.ProductController.productList(org.springframework.ui.Model,java.lang.String,java.lang.String,java.lang.String,java.lang.String)
2019-01-31 10:50:32.187 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productPreAdd]}" onto public java.lang.String com.yun.product.controller.ProductController.productPreAdd()
2019-01-31 10:50:32.187 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productSave]}" onto public java.lang.String com.yun.product.controller.ProductController.productSave(com.yun.product.model.Product)
2019-01-31 10:50:32.187 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productDelete]}" onto public java.lang.String com.yun.product.controller.ProductController.productDelete(int)
2019-01-31 10:50:32.188 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productPreUpdate]}" onto public java.lang.String com.yun.product.controller.ProductController.productPreUpdate(int,org.springframework.ui.Model)
2019-01-31 10:50:32.188 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productUpdate]}" onto public java.lang.String com.yun.product.controller.ProductController.productUpdate(com.yun.product.model.Product)
2019-01-31 10:50:32.188 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productListForAutoComplete]}" onto public java.util.List<com.yun.product.model.Product> com.yun.product.controller.ProductController.productListForAutoComplete(java.lang.String)
2019-01-31 10:50:32.188 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productListForStock]}" onto public java.util.List<com.yun.product.model.Product> com.yun.product.controller.ProductController.productListForStock()
2019-01-31 10:50:32.189 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productListForTrade]}" onto public java.util.List<com.yun.product.model.Product> com.yun.product.controller.ProductController.productListForTrade(java.lang.String)
2019-01-31 10:50:32.190 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/prodParamDelete]}" onto public java.lang.String com.yun.product.controller.ProductParamController.prodParamDelete(int)
2019-01-31 10:50:32.190 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/prodParamPreAdd]}" onto public java.lang.String com.yun.product.controller.ProductParamController.prodParamPreAdd(int,org.springframework.ui.Model)
2019-01-31 10:50:32.190 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/prodParamSave]}" onto public java.lang.String com.yun.product.controller.ProductParamController.prodParamSave(com.yun.product.model.ProductParameter)
2019-01-31 10:50:32.190 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/prodParamList]}" onto public java.lang.String com.yun.product.controller.ProductParamController.prodParamList(int)
2019-01-31 10:50:32.193 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeList]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeList(org.springframework.ui.Model)
2019-01-31 10:50:32.194 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeTree]}" onto public java.util.List<com.yun.product.model.ProductType> com.yun.product.controller.ProductTypeController.productTypeTree()
2019-01-31 10:50:32.194 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeEdit]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeEdit()
2019-01-31 10:50:32.194 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeSave]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeSave(com.yun.product.model.ProductType)
2019-01-31 10:50:32.194 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeUpdate]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeUpdate(java.lang.Integer,org.springframework.ui.Model)
2019-01-31 10:50:32.195 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeUpdateSave]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeUpdateSave(com.yun.product.model.ProductType)
2019-01-31 10:50:32.195 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeDelete]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeDelete(java.lang.Integer,javax.servlet.http.HttpServletResponse) throws java.io.IOException
2019-01-31 10:50:32.196 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveStockDelete]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveStockController.productReceiveStockDelete(int)
2019-01-31 10:50:32.196 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveStockPreUpdate]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveStockController.productReceiveStockPreUpdate(int,org.springframework.ui.Model)
2019-01-31 10:50:32.196 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveStockUpdate]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveStockController.productReceiveStockUpdate(com.yun.stock.model.ProductReceiveStock)
2019-01-31 10:50:32.196 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveStockList]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveStockController.productReceiveStocklist(java.lang.String,java.lang.String,org.springframework.ui.Model)
2019-01-31 10:50:32.197 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveStockPreAdd]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveStockController.productReceiveStockPreAdd()
2019-01-31 10:50:32.197 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveStockSave]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveStockController.productReceiveStockSave(com.yun.stock.model.ProductReceiveStock)
2019-01-31 10:50:32.198 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveStockToCurrentStock]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveTradeController.productReceiveStockToCurrentStock(int,org.springframework.ui.Model)
2019-01-31 10:50:32.198 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveInSave]}" onto public void com.yun.stock.controller.ProductReceiveTradeController.receiveInSave(com.yun.stock.model.ProductReceiveTrade,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse) throws java.io.IOException
2019-01-31 10:50:32.198 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveIn]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveTradeController.receiveIn(org.springframework.ui.Model)
2019-01-31 10:50:32.198 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveReject]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveTradeController.receiveReject(org.springframework.ui.Model)
2019-01-31 10:50:32.199 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveRejectSave]}" onto public void com.yun.stock.controller.ProductReceiveTradeController.receiveRejectSave(com.yun.stock.model.ProductReceiveTrade,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse) throws java.io.IOException
2019-01-31 10:50:32.199 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveToCurrentSave]}" onto public void com.yun.stock.controller.ProductReceiveTradeController.productReceiveToCurrentSave(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse) throws java.lang.Exception
2019-01-31 10:50:32.200 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockSave]}" onto public java.lang.String com.yun.stock.controller.ProductStockController.productStockSave(com.yun.stock.model.ProductStock)
2019-01-31 10:50:32.200 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockList]}" onto public java.lang.String com.yun.stock.controller.ProductStockController.productStocklist(java.lang.String,java.lang.String,org.springframework.ui.Model)
2019-01-31 10:50:32.200 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockPreAdd]}" onto public java.lang.String com.yun.stock.controller.ProductStockController.productStockPreAdd()
2019-01-31 10:50:32.200 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockDelete]}" onto public java.lang.String com.yun.stock.controller.ProductStockController.productStockDelete(int)
2019-01-31 10:50:32.200 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockPreUpdate]}" onto public java.lang.String com.yun.stock.controller.ProductStockController.productStockPreUpdate(int,org.springframework.ui.Model)
2019-01-31 10:50:32.201 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockUpdate]}" onto public java.lang.String com.yun.stock.controller.ProductStockController.productStockUpdate(com.yun.stock.model.ProductStock)
2019-01-31 10:50:32.201 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/main]}" onto public java.lang.String com.yun.user.controller.MainController.main()
2019-01-31 10:50:32.202 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/userList]}" onto public java.lang.String com.yun.user.controller.UserController.userList(org.springframework.ui.Model)
2019-01-31 10:50:32.202 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/userEdit]}" onto public java.lang.String com.yun.user.controller.UserController.userEdit()
2019-01-31 10:50:32.203 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/userSave]}" onto public java.lang.String com.yun.user.controller.UserController.userSave(com.yun.user.model.UserInfo)
2019-01-31 10:50:32.203 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/deleteUserInfo]}" onto public java.lang.String com.yun.user.controller.UserController.userDelete(int)
2019-01-31 10:50:32.203 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/login]}" onto public void com.yun.user.controller.UserController.login(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse) throws java.io.IOException
2019-01-31 10:50:32.206 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/error]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> org.springframework.boot.autoconfigure.web.BasicErrorController.error(javax.servlet.http.HttpServletRequest)
2019-01-31 10:50:32.207 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/error],produces=[text/html]}" onto public org.springframework.web.servlet.ModelAndView org.springframework.boot.autoconfigure.web.BasicErrorController.errorHtml(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
2019-01-31 10:50:32.245 [main] INFO  o.s.web.servlet.handler.SimpleUrlHandlerMapping - Mapped URL path [/webjars/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-01-31 10:50:32.245 [main] INFO  o.s.web.servlet.handler.SimpleUrlHandlerMapping - Mapped URL path [/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-01-31 10:50:32.288 [main] INFO  o.s.web.servlet.handler.SimpleUrlHandlerMapping - Mapped URL path [/**/favicon.ico] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-01-31 10:50:32.633 [main] INFO  o.s.b.a.w.WebMvcAutoConfiguration$WelcomePageHandlerMapping - Adding welcome page: class path resource [static/index.html]
2019-01-31 10:50:32.947 [main] INFO  o.s.jmx.export.annotation.AnnotationMBeanExporter - Registering beans for JMX exposure on startup
2019-01-31 10:50:32.973 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2019-01-31 10:50:32.989 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2019-01-31 10:50:33.164 [main] INFO  org.apache.tomcat.util.net.NioSelectorPool - Using a shared selector for servlet write/read
2019-01-31 10:50:33.187 [main] INFO  o.s.b.c.e.tomcat.TomcatEmbeddedServletContainer - Tomcat started on port(s): 8080 (http)
2019-01-31 10:50:33.192 [main] INFO  com.yun.YunEbStockApplication - Started YunEbStockApplication in 10.646 seconds (JVM running for 12.145)
2019-01-31 10:50:36.953 [http-nio-8080-exec-1] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring FrameworkServlet 'dispatcherServlet'
2019-01-31 10:50:36.954 [http-nio-8080-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - FrameworkServlet 'dispatcherServlet': initialization started
2019-01-31 10:50:36.972 [http-nio-8080-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - FrameworkServlet 'dispatcherServlet': initialization completed in 18 ms
2019-01-31 10:50:36.983 [http-nio-8080-exec-1] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/main
2019-01-31 10:50:41.769 [http-nio-8080-exec-2] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/login
2019-01-31 10:50:42.095 [http-nio-8080-exec-2] DEBUG c.y.user.dao.UserInfoDao.findUserInfoByNameAndPass - ==>  Preparing: select * from user_info where login_name=? and login_pass=? 
2019-01-31 10:50:42.114 [http-nio-8080-exec-2] DEBUG c.y.user.dao.UserInfoDao.findUserInfoByNameAndPass - ==> Parameters: admin(String), 123(String)
2019-01-31 10:50:42.127 [http-nio-8080-exec-2] DEBUG c.y.user.dao.UserInfoDao.findUserInfoByNameAndPass - <==      Total: 1
2019-01-31 10:50:42.137 [http-nio-8080-exec-3] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/main
2019-01-31 10:50:45.986 [http-nio-8080-exec-4] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productReceiveStockList
2019-01-31 10:50:45.990 [http-nio-8080-exec-4] DEBUG c.y.stock.controller.ProductReceiveStockController - 跳转到待收库存查询控制器
2019-01-31 10:50:46.026 [http-nio-8080-exec-4] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - ==>  Preparing: select count(*) from product_receive_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 
2019-01-31 10:50:46.027 [http-nio-8080-exec-4] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - ==> Parameters: 
2019-01-31 10:50:46.028 [http-nio-8080-exec-4] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - <==      Total: 1
2019-01-31 10:50:46.037 [http-nio-8080-exec-4] DEBUG c.y.s.d.P.findProductReceiveStockList - ==>  Preparing: select ps.prod_rece_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_receive_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 order by p.prod_id,pp.prod_param_id limit ?,? 
2019-01-31 10:50:46.038 [http-nio-8080-exec-4] DEBUG c.y.s.d.P.findProductReceiveStockList - ==> Parameters: 0(Integer), 5(Integer)
2019-01-31 10:50:46.044 [http-nio-8080-exec-4] DEBUG c.y.s.d.P.findProductReceiveStockList - <==      Total: 5
2019-01-31 10:50:46.045 [http-nio-8080-exec-4] DEBUG c.y.stock.controller.ProductReceiveStockController - 转到待收库存页面
2019-01-31 10:50:48.272 [http-nio-8080-exec-6] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productReceiveStockToCurrentStock
2019-01-31 10:50:48.284 [http-nio-8080-exec-6] DEBUG c.y.s.d.P.findProductReceiveStockById - ==>  Preparing: select ps.prod_rece_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_receive_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 and ps.prod_rece_stock_id=? 
2019-01-31 10:50:48.286 [http-nio-8080-exec-6] DEBUG c.y.s.d.P.findProductReceiveStockById - ==> Parameters: 9(Integer)
2019-01-31 10:50:48.292 [http-nio-8080-exec-6] DEBUG c.y.s.d.P.findProductReceiveStockById - <==      Total: 1
2019-01-31 10:50:52.596 [http-nio-8080-exec-7] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productReceiveToCurrentSave
2019-01-31 10:50:52.600 [http-nio-8080-exec-7] DEBUG c.y.s.d.P.findProductReceiveStockById - ==>  Preparing: select ps.prod_rece_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_receive_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 and ps.prod_rece_stock_id=? 
2019-01-31 10:50:52.601 [http-nio-8080-exec-7] DEBUG c.y.s.d.P.findProductReceiveStockById - ==> Parameters: 9(Integer)
2019-01-31 10:50:52.602 [http-nio-8080-exec-7] DEBUG c.y.s.d.P.findProductReceiveStockById - <==      Total: 1
2019-01-31 10:50:52.603 [http-nio-8080-exec-7] DEBUG c.y.s.d.P.insertProductReceiveOutTrade - ==>  Preparing: insert into product_receive_trade(trade_date,prod_id,prod_param_id,begin_num,trade_del,end_num,oper_id)values(?,?,?,?,?,?,?) 
2019-01-31 10:50:52.604 [http-nio-8080-exec-7] DEBUG c.y.s.d.P.insertProductReceiveOutTrade - ==> Parameters: 2019-01-31 10:50:48.0(Timestamp), 2(Integer), 8(Integer), 10(Integer), -6(Integer), 16(Integer), 5(Integer)
2019-01-31 10:50:52.621 [http-nio-8080-exec-7] DEBUG c.y.s.d.P.insertProductReceiveOutTrade - <==    Updates: 1
2019-01-31 10:50:52.622 [http-nio-8080-exec-7] DEBUG c.y.s.d.P.findProductStockByProdIdAndProdParamId - ==>  Preparing: select ps.prod_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 and p.prod_id=? and pp.prod_param_Id=? 
2019-01-31 10:50:52.623 [http-nio-8080-exec-7] DEBUG c.y.s.d.P.findProductStockByProdIdAndProdParamId - ==> Parameters: 2(Integer), 8(Integer)
2019-01-31 10:50:52.625 [http-nio-8080-exec-7] DEBUG c.y.s.d.P.findProductStockByProdIdAndProdParamId - <==      Total: 1
2019-01-31 10:50:52.625 [http-nio-8080-exec-7] DEBUG c.yun.stock.dao.ProductStockDao.updateProductStock - ==>  Preparing: update product_stock set prod_id=?,prod_param_id=?,stock_num=? where prod_stock_id=? 
2019-01-31 10:50:52.626 [http-nio-8080-exec-7] DEBUG c.yun.stock.dao.ProductStockDao.updateProductStock - ==> Parameters: 2(Integer), 8(Integer), -6(Integer), 9(Integer)
2019-01-31 10:50:52.631 [http-nio-8080-exec-7] DEBUG c.yun.stock.dao.ProductStockDao.updateProductStock - <==    Updates: 1
2019-01-31 10:50:52.632 [http-nio-8080-exec-7] DEBUG c.y.stock.dao.ProductTradeDao.insertProductInTrade - ==>  Preparing: insert into product_trade(trade_date,prod_id,prod_param_id,begin_num,trade_add,end_num,oper_id)values(?,?,?,?,?,?,?) 
2019-01-31 10:50:52.632 [http-nio-8080-exec-7] DEBUG c.y.stock.dao.ProductTradeDao.insertProductInTrade - ==> Parameters: 2019-01-31 10:50:48.0(Timestamp), 2(Integer), 8(Integer), 0(Integer), -6(Integer), -6(Integer), 5(Integer)
2019-01-31 10:50:52.772 [http-nio-8080-exec-7] DEBUG c.y.stock.dao.ProductTradeDao.insertProductInTrade - <==    Updates: 1
2019-01-31 10:50:52.773 [http-nio-8080-exec-7] DEBUG c.y.s.d.P.updateProductReceiveStock - ==>  Preparing: update product_receive_stock set prod_id=?,prod_param_id=?,stock_num=? where prod_rece_stock_id=? 
2019-01-31 10:50:52.775 [http-nio-8080-exec-7] DEBUG c.y.s.d.P.updateProductReceiveStock - ==> Parameters: 2(Integer), 8(Integer), 16(Integer), 9(Integer)
2019-01-31 10:50:52.778 [http-nio-8080-exec-7] DEBUG c.y.s.d.P.updateProductReceiveStock - <==    Updates: 1
2019-01-31 10:50:52.779 [http-nio-8080-exec-7] DEBUG com.yun.stock.service.ProductStockService - java.lang.Exception: aaa
2019-01-31 10:50:52.812 [http-nio-8080-exec-7] DEBUG c.y.stock.controller.ProductReceiveTradeController - result:aaa
2019-01-31 10:50:54.007 [http-nio-8080-exec-8] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productReceiveStockList
2019-01-31 10:50:54.010 [http-nio-8080-exec-8] DEBUG c.y.stock.controller.ProductReceiveStockController - 跳转到待收库存查询控制器
2019-01-31 10:50:54.012 [http-nio-8080-exec-8] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - ==>  Preparing: select count(*) from product_receive_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 
2019-01-31 10:50:54.013 [http-nio-8080-exec-8] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - ==> Parameters: 
2019-01-31 10:50:54.021 [http-nio-8080-exec-8] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - <==      Total: 1
2019-01-31 10:50:54.023 [http-nio-8080-exec-8] DEBUG c.y.s.d.P.findProductReceiveStockList - ==>  Preparing: select ps.prod_rece_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_receive_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 order by p.prod_id,pp.prod_param_id limit ?,? 
2019-01-31 10:50:54.024 [http-nio-8080-exec-8] DEBUG c.y.s.d.P.findProductReceiveStockList - ==> Parameters: 0(Integer), 5(Integer)
2019-01-31 10:50:54.028 [http-nio-8080-exec-8] DEBUG c.y.s.d.P.findProductReceiveStockList - <==      Total: 5
2019-01-31 10:50:54.029 [http-nio-8080-exec-8] DEBUG c.y.stock.controller.ProductReceiveStockController - 转到待收库存页面
2019-01-31 10:57:47.995 [main] INFO  com.yun.YunEbStockApplication - Starting YunEbStockApplication on USER-20181202BJ with PID 7124 (E:\workspace\yun-eb-stock\target\classes started by Administrator in E:\workspace\yun-eb-stock)
2019-01-31 10:57:48.000 [main] DEBUG com.yun.YunEbStockApplication - Running with Spring Boot v1.5.9.RELEASE, Spring v4.3.13.RELEASE
2019-01-31 10:57:48.000 [main] INFO  com.yun.YunEbStockApplication - No active profile set, falling back to default profiles: default
2019-01-31 10:57:48.527 [main] INFO  o.s.b.c.e.AnnotationConfigEmbeddedWebApplicationContext - Refreshing org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@c267ef4: startup date [Thu Jan 31 10:57:48 CST 2019]; root of context hierarchy
2019-01-31 10:57:48.532 [background-preinit] INFO  org.hibernate.validator.internal.util.Version - HV000001: Hibernate Validator 5.3.6.Final
2019-01-31 10:57:50.223 [main] INFO  o.s.b.c.e.tomcat.TomcatEmbeddedServletContainer - Tomcat initialized with port(s): 8080 (http)
2019-01-31 10:57:50.233 [main] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2019-01-31 10:57:50.234 [main] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet Engine: Apache Tomcat/8.5.23
2019-01-31 10:57:50.333 [localhost-startStop-1] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2019-01-31 10:57:50.333 [localhost-startStop-1] INFO  org.springframework.web.context.ContextLoader - Root WebApplicationContext: initialization completed in 1806 ms
2019-01-31 10:57:50.495 [localhost-startStop-1] INFO  o.s.boot.web.servlet.FilterRegistrationBean - Mapping filter: 'characterEncodingFilter' to: [/*]
2019-01-31 10:57:50.495 [localhost-startStop-1] INFO  o.s.boot.web.servlet.FilterRegistrationBean - Mapping filter: 'hiddenHttpMethodFilter' to: [/*]
2019-01-31 10:57:50.495 [localhost-startStop-1] INFO  o.s.boot.web.servlet.FilterRegistrationBean - Mapping filter: 'httpPutFormContentFilter' to: [/*]
2019-01-31 10:57:50.496 [localhost-startStop-1] INFO  o.s.boot.web.servlet.FilterRegistrationBean - Mapping filter: 'requestContextFilter' to: [/*]
2019-01-31 10:57:50.496 [localhost-startStop-1] INFO  o.s.boot.web.servlet.FilterRegistrationBean - Mapping filter: 'loginFilter' to urls: [/*]
2019-01-31 10:57:50.496 [localhost-startStop-1] INFO  o.s.boot.web.servlet.ServletRegistrationBean - Mapping servlet: 'dispatcherServlet' to [/]
2019-01-31 10:57:51.312 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerAdapter - Looking for @ControllerAdvice: org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@c267ef4: startup date [Thu Jan 31 10:57:48 CST 2019]; root of context hierarchy
2019-01-31 10:57:51.369 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productList]}" onto public java.lang.String com.yun.product.controller.ProductController.productList(org.springframework.ui.Model,java.lang.String,java.lang.String,java.lang.String,java.lang.String)
2019-01-31 10:57:51.370 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productPreAdd]}" onto public java.lang.String com.yun.product.controller.ProductController.productPreAdd()
2019-01-31 10:57:51.370 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productSave]}" onto public java.lang.String com.yun.product.controller.ProductController.productSave(com.yun.product.model.Product)
2019-01-31 10:57:51.370 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productDelete]}" onto public java.lang.String com.yun.product.controller.ProductController.productDelete(int)
2019-01-31 10:57:51.371 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productPreUpdate]}" onto public java.lang.String com.yun.product.controller.ProductController.productPreUpdate(int,org.springframework.ui.Model)
2019-01-31 10:57:51.371 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productUpdate]}" onto public java.lang.String com.yun.product.controller.ProductController.productUpdate(com.yun.product.model.Product)
2019-01-31 10:57:51.371 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productListForAutoComplete]}" onto public java.util.List<com.yun.product.model.Product> com.yun.product.controller.ProductController.productListForAutoComplete(java.lang.String)
2019-01-31 10:57:51.371 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productListForStock]}" onto public java.util.List<com.yun.product.model.Product> com.yun.product.controller.ProductController.productListForStock()
2019-01-31 10:57:51.372 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productListForTrade]}" onto public java.util.List<com.yun.product.model.Product> com.yun.product.controller.ProductController.productListForTrade(java.lang.String)
2019-01-31 10:57:51.373 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/prodParamDelete]}" onto public java.lang.String com.yun.product.controller.ProductParamController.prodParamDelete(int)
2019-01-31 10:57:51.373 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/prodParamPreAdd]}" onto public java.lang.String com.yun.product.controller.ProductParamController.prodParamPreAdd(int,org.springframework.ui.Model)
2019-01-31 10:57:51.374 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/prodParamSave]}" onto public java.lang.String com.yun.product.controller.ProductParamController.prodParamSave(com.yun.product.model.ProductParameter)
2019-01-31 10:57:51.374 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/prodParamList]}" onto public java.lang.String com.yun.product.controller.ProductParamController.prodParamList(int)
2019-01-31 10:57:51.377 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeList]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeList(org.springframework.ui.Model)
2019-01-31 10:57:51.377 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeTree]}" onto public java.util.List<com.yun.product.model.ProductType> com.yun.product.controller.ProductTypeController.productTypeTree()
2019-01-31 10:57:51.378 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeEdit]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeEdit()
2019-01-31 10:57:51.378 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeSave]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeSave(com.yun.product.model.ProductType)
2019-01-31 10:57:51.378 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeUpdate]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeUpdate(java.lang.Integer,org.springframework.ui.Model)
2019-01-31 10:57:51.379 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeUpdateSave]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeUpdateSave(com.yun.product.model.ProductType)
2019-01-31 10:57:51.379 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeDelete]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeDelete(java.lang.Integer,javax.servlet.http.HttpServletResponse) throws java.io.IOException
2019-01-31 10:57:51.381 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveStockList]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveStockController.productReceiveStocklist(java.lang.String,java.lang.String,org.springframework.ui.Model)
2019-01-31 10:57:51.381 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveStockPreAdd]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveStockController.productReceiveStockPreAdd()
2019-01-31 10:57:51.381 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveStockSave]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveStockController.productReceiveStockSave(com.yun.stock.model.ProductReceiveStock)
2019-01-31 10:57:51.382 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveStockDelete]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveStockController.productReceiveStockDelete(int)
2019-01-31 10:57:51.382 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveStockPreUpdate]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveStockController.productReceiveStockPreUpdate(int,org.springframework.ui.Model)
2019-01-31 10:57:51.382 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveStockUpdate]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveStockController.productReceiveStockUpdate(com.yun.stock.model.ProductReceiveStock)
2019-01-31 10:57:51.383 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveStockToCurrentStock]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveTradeController.productReceiveStockToCurrentStock(int,org.springframework.ui.Model)
2019-01-31 10:57:51.384 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveInSave]}" onto public void com.yun.stock.controller.ProductReceiveTradeController.receiveInSave(com.yun.stock.model.ProductReceiveTrade,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse) throws java.io.IOException
2019-01-31 10:57:51.384 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveIn]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveTradeController.receiveIn(org.springframework.ui.Model)
2019-01-31 10:57:51.385 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveReject]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveTradeController.receiveReject(org.springframework.ui.Model)
2019-01-31 10:57:51.385 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveRejectSave]}" onto public void com.yun.stock.controller.ProductReceiveTradeController.receiveRejectSave(com.yun.stock.model.ProductReceiveTrade,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse) throws java.io.IOException
2019-01-31 10:57:51.385 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveToCurrentSave]}" onto public void com.yun.stock.controller.ProductReceiveTradeController.productReceiveToCurrentSave(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse) throws java.lang.Exception
2019-01-31 10:57:51.387 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockSave]}" onto public java.lang.String com.yun.stock.controller.ProductStockController.productStockSave(com.yun.stock.model.ProductStock)
2019-01-31 10:57:51.387 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockList]}" onto public java.lang.String com.yun.stock.controller.ProductStockController.productStocklist(java.lang.String,java.lang.String,org.springframework.ui.Model)
2019-01-31 10:57:51.387 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockPreAdd]}" onto public java.lang.String com.yun.stock.controller.ProductStockController.productStockPreAdd()
2019-01-31 10:57:51.387 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockDelete]}" onto public java.lang.String com.yun.stock.controller.ProductStockController.productStockDelete(int)
2019-01-31 10:57:51.388 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockPreUpdate]}" onto public java.lang.String com.yun.stock.controller.ProductStockController.productStockPreUpdate(int,org.springframework.ui.Model)
2019-01-31 10:57:51.388 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockUpdate]}" onto public java.lang.String com.yun.stock.controller.ProductStockController.productStockUpdate(com.yun.stock.model.ProductStock)
2019-01-31 10:57:51.389 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/main]}" onto public java.lang.String com.yun.user.controller.MainController.main()
2019-01-31 10:57:51.390 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/userList]}" onto public java.lang.String com.yun.user.controller.UserController.userList(org.springframework.ui.Model)
2019-01-31 10:57:51.390 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/userEdit]}" onto public java.lang.String com.yun.user.controller.UserController.userEdit()
2019-01-31 10:57:51.390 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/userSave]}" onto public java.lang.String com.yun.user.controller.UserController.userSave(com.yun.user.model.UserInfo)
2019-01-31 10:57:51.390 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/deleteUserInfo]}" onto public java.lang.String com.yun.user.controller.UserController.userDelete(int)
2019-01-31 10:57:51.391 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/login]}" onto public void com.yun.user.controller.UserController.login(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse) throws java.io.IOException
2019-01-31 10:57:51.394 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/error]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> org.springframework.boot.autoconfigure.web.BasicErrorController.error(javax.servlet.http.HttpServletRequest)
2019-01-31 10:57:51.394 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/error],produces=[text/html]}" onto public org.springframework.web.servlet.ModelAndView org.springframework.boot.autoconfigure.web.BasicErrorController.errorHtml(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
2019-01-31 10:57:51.428 [main] INFO  o.s.web.servlet.handler.SimpleUrlHandlerMapping - Mapped URL path [/webjars/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-01-31 10:57:51.428 [main] INFO  o.s.web.servlet.handler.SimpleUrlHandlerMapping - Mapped URL path [/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-01-31 10:57:51.472 [main] INFO  o.s.web.servlet.handler.SimpleUrlHandlerMapping - Mapped URL path [/**/favicon.ico] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-01-31 10:57:51.789 [main] INFO  o.s.b.a.w.WebMvcAutoConfiguration$WelcomePageHandlerMapping - Adding welcome page: class path resource [static/index.html]
2019-01-31 10:57:52.049 [main] INFO  o.s.jmx.export.annotation.AnnotationMBeanExporter - Registering beans for JMX exposure on startup
2019-01-31 10:57:52.069 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2019-01-31 10:57:52.081 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2019-01-31 10:57:52.248 [main] INFO  org.apache.tomcat.util.net.NioSelectorPool - Using a shared selector for servlet write/read
2019-01-31 10:57:52.268 [main] INFO  o.s.b.c.e.tomcat.TomcatEmbeddedServletContainer - Tomcat started on port(s): 8080 (http)
2019-01-31 10:57:52.273 [main] INFO  com.yun.YunEbStockApplication - Started YunEbStockApplication in 4.742 seconds (JVM running for 6.027)
2019-01-31 10:57:57.189 [http-nio-8080-exec-1] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring FrameworkServlet 'dispatcherServlet'
2019-01-31 10:57:57.189 [http-nio-8080-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - FrameworkServlet 'dispatcherServlet': initialization started
2019-01-31 10:57:57.209 [http-nio-8080-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - FrameworkServlet 'dispatcherServlet': initialization completed in 20 ms
2019-01-31 10:57:57.219 [http-nio-8080-exec-1] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/main
2019-01-31 10:58:02.630 [http-nio-8080-exec-2] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/login
2019-01-31 10:58:02.958 [http-nio-8080-exec-2] DEBUG c.y.user.dao.UserInfoDao.findUserInfoByNameAndPass - ==>  Preparing: select * from user_info where login_name=? and login_pass=? 
2019-01-31 10:58:02.978 [http-nio-8080-exec-2] DEBUG c.y.user.dao.UserInfoDao.findUserInfoByNameAndPass - ==> Parameters: admin(String), 123(String)
2019-01-31 10:58:02.989 [http-nio-8080-exec-2] DEBUG c.y.user.dao.UserInfoDao.findUserInfoByNameAndPass - <==      Total: 1
2019-01-31 10:58:03.002 [http-nio-8080-exec-3] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/main
2019-01-31 10:58:07.212 [http-nio-8080-exec-5] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productReceiveStockList
2019-01-31 10:58:07.224 [http-nio-8080-exec-5] DEBUG c.y.stock.controller.ProductReceiveStockController - 跳转到待收库存查询控制器
2019-01-31 10:58:07.261 [http-nio-8080-exec-5] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - ==>  Preparing: select count(*) from product_receive_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 
2019-01-31 10:58:07.261 [http-nio-8080-exec-5] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - ==> Parameters: 
2019-01-31 10:58:07.262 [http-nio-8080-exec-5] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - <==      Total: 1
2019-01-31 10:58:07.270 [http-nio-8080-exec-5] DEBUG c.y.s.d.P.findProductReceiveStockList - ==>  Preparing: select ps.prod_rece_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_receive_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 order by p.prod_id,pp.prod_param_id limit ?,? 
2019-01-31 10:58:07.270 [http-nio-8080-exec-5] DEBUG c.y.s.d.P.findProductReceiveStockList - ==> Parameters: 0(Integer), 5(Integer)
2019-01-31 10:58:07.275 [http-nio-8080-exec-5] DEBUG c.y.s.d.P.findProductReceiveStockList - <==      Total: 5
2019-01-31 10:58:07.277 [http-nio-8080-exec-5] DEBUG c.y.stock.controller.ProductReceiveStockController - 转到待收库存页面
2019-01-31 10:58:08.324 [http-nio-8080-exec-6] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productReceiveStockToCurrentStock
2019-01-31 10:58:08.336 [http-nio-8080-exec-6] DEBUG c.y.s.d.P.findProductReceiveStockById - ==>  Preparing: select ps.prod_rece_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_receive_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 and ps.prod_rece_stock_id=? 
2019-01-31 10:58:08.337 [http-nio-8080-exec-6] DEBUG c.y.s.d.P.findProductReceiveStockById - ==> Parameters: 9(Integer)
2019-01-31 10:58:08.340 [http-nio-8080-exec-6] DEBUG c.y.s.d.P.findProductReceiveStockById - <==      Total: 1
2019-01-31 10:58:12.628 [http-nio-8080-exec-7] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productReceiveToCurrentSave
2019-01-31 10:58:12.632 [http-nio-8080-exec-7] DEBUG c.y.s.d.P.findProductReceiveStockById - ==>  Preparing: select ps.prod_rece_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_receive_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 and ps.prod_rece_stock_id=? 
2019-01-31 10:58:12.633 [http-nio-8080-exec-7] DEBUG c.y.s.d.P.findProductReceiveStockById - ==> Parameters: 9(Integer)
2019-01-31 10:58:12.634 [http-nio-8080-exec-7] DEBUG c.y.s.d.P.findProductReceiveStockById - <==      Total: 1
2019-01-31 10:58:12.635 [http-nio-8080-exec-7] DEBUG c.y.s.d.P.insertProductReceiveOutTrade - ==>  Preparing: insert into product_receive_trade(trade_date,prod_id,prod_param_id,begin_num,trade_del,end_num,oper_id)values(?,?,?,?,?,?,?) 
2019-01-31 10:58:12.639 [http-nio-8080-exec-7] DEBUG c.y.s.d.P.insertProductReceiveOutTrade - ==> Parameters: 2019-01-31 10:58:08.0(Timestamp), 2(Integer), 8(Integer), 16(Integer), 6(Integer), 10(Integer), 5(Integer)
2019-01-31 10:58:12.683 [http-nio-8080-exec-7] DEBUG c.y.s.d.P.insertProductReceiveOutTrade - <==    Updates: 1
2019-01-31 10:58:12.686 [http-nio-8080-exec-7] DEBUG c.y.s.d.P.findProductStockByProdIdAndProdParamId - ==>  Preparing: select ps.prod_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 and p.prod_id=? and pp.prod_param_Id=? 
2019-01-31 10:58:12.687 [http-nio-8080-exec-7] DEBUG c.y.s.d.P.findProductStockByProdIdAndProdParamId - ==> Parameters: 2(Integer), 8(Integer)
2019-01-31 10:58:12.694 [http-nio-8080-exec-7] DEBUG c.y.s.d.P.findProductStockByProdIdAndProdParamId - <==      Total: 1
2019-01-31 10:58:12.695 [http-nio-8080-exec-7] DEBUG c.yun.stock.dao.ProductStockDao.updateProductStock - ==>  Preparing: update product_stock set prod_id=?,prod_param_id=?,stock_num=? where prod_stock_id=? 
2019-01-31 10:58:12.698 [http-nio-8080-exec-7] DEBUG c.yun.stock.dao.ProductStockDao.updateProductStock - ==> Parameters: 2(Integer), 8(Integer), 0(Integer), 9(Integer)
2019-01-31 10:58:12.703 [http-nio-8080-exec-7] DEBUG c.yun.stock.dao.ProductStockDao.updateProductStock - <==    Updates: 1
2019-01-31 10:58:12.708 [http-nio-8080-exec-7] DEBUG c.y.stock.dao.ProductTradeDao.insertProductInTrade - ==>  Preparing: insert into product_trade(trade_date,prod_id,prod_param_id,begin_num,trade_add,end_num,oper_id)values(?,?,?,?,?,?,?) 
2019-01-31 10:58:12.711 [http-nio-8080-exec-7] DEBUG c.y.stock.dao.ProductTradeDao.insertProductInTrade - ==> Parameters: 2019-01-31 10:58:08.0(Timestamp), 2(Integer), 8(Integer), -6(Integer), 6(Integer), 0(Integer), 5(Integer)
2019-01-31 10:58:12.714 [http-nio-8080-exec-7] DEBUG c.y.stock.dao.ProductTradeDao.insertProductInTrade - <==    Updates: 1
2019-01-31 10:58:12.715 [http-nio-8080-exec-7] DEBUG c.y.s.d.P.updateProductReceiveStock - ==>  Preparing: update product_receive_stock set prod_id=?,prod_param_id=?,stock_num=? where prod_rece_stock_id=? 
2019-01-31 10:58:12.715 [http-nio-8080-exec-7] DEBUG c.y.s.d.P.updateProductReceiveStock - ==> Parameters: 2(Integer), 8(Integer), 10(Integer), 9(Integer)
2019-01-31 10:58:12.716 [http-nio-8080-exec-7] DEBUG c.y.s.d.P.updateProductReceiveStock - <==    Updates: 1
2019-01-31 10:58:12.717 [http-nio-8080-exec-7] DEBUG com.yun.stock.service.ProductStockService - java.lang.ArithmeticException: / by zero
2019-01-31 10:58:12.782 [http-nio-8080-exec-7] DEBUG c.y.stock.controller.ProductReceiveTradeController - result:/ by zero
2019-01-31 10:58:14.581 [http-nio-8080-exec-8] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productReceiveStockList
2019-01-31 10:58:14.583 [http-nio-8080-exec-8] DEBUG c.y.stock.controller.ProductReceiveStockController - 跳转到待收库存查询控制器
2019-01-31 10:58:14.587 [http-nio-8080-exec-8] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - ==>  Preparing: select count(*) from product_receive_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 
2019-01-31 10:58:14.589 [http-nio-8080-exec-8] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - ==> Parameters: 
2019-01-31 10:58:14.593 [http-nio-8080-exec-8] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - <==      Total: 1
2019-01-31 10:58:14.604 [http-nio-8080-exec-8] DEBUG c.y.s.d.P.findProductReceiveStockList - ==>  Preparing: select ps.prod_rece_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_receive_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 order by p.prod_id,pp.prod_param_id limit ?,? 
2019-01-31 10:58:14.605 [http-nio-8080-exec-8] DEBUG c.y.s.d.P.findProductReceiveStockList - ==> Parameters: 0(Integer), 5(Integer)
2019-01-31 10:58:14.609 [http-nio-8080-exec-8] DEBUG c.y.s.d.P.findProductReceiveStockList - <==      Total: 5
2019-01-31 10:58:14.611 [http-nio-8080-exec-8] DEBUG c.y.stock.controller.ProductReceiveStockController - 转到待收库存页面
2019-01-31 10:58:18.133 [http-nio-8080-exec-9] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productReceiveStockToCurrentStock
2019-01-31 10:58:18.144 [http-nio-8080-exec-9] DEBUG c.y.s.d.P.findProductReceiveStockById - ==>  Preparing: select ps.prod_rece_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_receive_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 and ps.prod_rece_stock_id=? 
2019-01-31 10:58:18.145 [http-nio-8080-exec-9] DEBUG c.y.s.d.P.findProductReceiveStockById - ==> Parameters: 9(Integer)
2019-01-31 10:58:18.147 [http-nio-8080-exec-9] DEBUG c.y.s.d.P.findProductReceiveStockById - <==      Total: 1
2019-01-31 10:58:22.041 [http-nio-8080-exec-10] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productReceiveToCurrentSave
2019-01-31 10:58:22.044 [http-nio-8080-exec-10] DEBUG c.y.s.d.P.findProductReceiveStockById - ==>  Preparing: select ps.prod_rece_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_receive_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 and ps.prod_rece_stock_id=? 
2019-01-31 10:58:22.044 [http-nio-8080-exec-10] DEBUG c.y.s.d.P.findProductReceiveStockById - ==> Parameters: 9(Integer)
2019-01-31 10:58:22.046 [http-nio-8080-exec-10] DEBUG c.y.s.d.P.findProductReceiveStockById - <==      Total: 1
2019-01-31 10:58:22.046 [http-nio-8080-exec-10] DEBUG c.y.s.d.P.insertProductReceiveOutTrade - ==>  Preparing: insert into product_receive_trade(trade_date,prod_id,prod_param_id,begin_num,trade_del,end_num,oper_id)values(?,?,?,?,?,?,?) 
2019-01-31 10:58:22.048 [http-nio-8080-exec-10] DEBUG c.y.s.d.P.insertProductReceiveOutTrade - ==> Parameters: 2019-01-31 10:58:18.0(Timestamp), 2(Integer), 8(Integer), 10(Integer), 6(Integer), 4(Integer), 5(Integer)
2019-01-31 10:58:22.106 [http-nio-8080-exec-10] DEBUG c.y.s.d.P.insertProductReceiveOutTrade - <==    Updates: 1
2019-01-31 10:58:22.108 [http-nio-8080-exec-10] DEBUG c.y.s.d.P.findProductStockByProdIdAndProdParamId - ==>  Preparing: select ps.prod_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 and p.prod_id=? and pp.prod_param_Id=? 
2019-01-31 10:58:22.112 [http-nio-8080-exec-10] DEBUG c.y.s.d.P.findProductStockByProdIdAndProdParamId - ==> Parameters: 2(Integer), 8(Integer)
2019-01-31 10:58:22.122 [http-nio-8080-exec-10] DEBUG c.y.s.d.P.findProductStockByProdIdAndProdParamId - <==      Total: 1
2019-01-31 10:58:22.124 [http-nio-8080-exec-10] DEBUG c.yun.stock.dao.ProductStockDao.updateProductStock - ==>  Preparing: update product_stock set prod_id=?,prod_param_id=?,stock_num=? where prod_stock_id=? 
2019-01-31 10:58:22.125 [http-nio-8080-exec-10] DEBUG c.yun.stock.dao.ProductStockDao.updateProductStock - ==> Parameters: 2(Integer), 8(Integer), 6(Integer), 9(Integer)
2019-01-31 10:58:22.137 [http-nio-8080-exec-10] DEBUG c.yun.stock.dao.ProductStockDao.updateProductStock - <==    Updates: 1
2019-01-31 10:58:22.137 [http-nio-8080-exec-10] DEBUG c.y.stock.dao.ProductTradeDao.insertProductInTrade - ==>  Preparing: insert into product_trade(trade_date,prod_id,prod_param_id,begin_num,trade_add,end_num,oper_id)values(?,?,?,?,?,?,?) 
2019-01-31 10:58:22.138 [http-nio-8080-exec-10] DEBUG c.y.stock.dao.ProductTradeDao.insertProductInTrade - ==> Parameters: 2019-01-31 10:58:18.0(Timestamp), 2(Integer), 8(Integer), 0(Integer), 6(Integer), 6(Integer), 5(Integer)
2019-01-31 10:58:22.141 [http-nio-8080-exec-10] DEBUG c.y.stock.dao.ProductTradeDao.insertProductInTrade - <==    Updates: 1
2019-01-31 10:58:22.142 [http-nio-8080-exec-10] DEBUG c.y.s.d.P.updateProductReceiveStock - ==>  Preparing: update product_receive_stock set prod_id=?,prod_param_id=?,stock_num=? where prod_rece_stock_id=? 
2019-01-31 10:58:22.143 [http-nio-8080-exec-10] DEBUG c.y.s.d.P.updateProductReceiveStock - ==> Parameters: 2(Integer), 8(Integer), 4(Integer), 9(Integer)
2019-01-31 10:58:22.145 [http-nio-8080-exec-10] DEBUG c.y.s.d.P.updateProductReceiveStock - <==    Updates: 1
2019-01-31 10:58:22.145 [http-nio-8080-exec-10] DEBUG com.yun.stock.service.ProductStockService - java.lang.ArithmeticException: / by zero
2019-01-31 10:58:22.260 [http-nio-8080-exec-10] DEBUG c.y.stock.controller.ProductReceiveTradeController - result:/ by zero
2019-01-31 10:58:23.259 [http-nio-8080-exec-1] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productReceiveStockList
2019-01-31 10:58:23.263 [http-nio-8080-exec-1] DEBUG c.y.stock.controller.ProductReceiveStockController - 跳转到待收库存查询控制器
2019-01-31 10:58:23.268 [http-nio-8080-exec-1] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - ==>  Preparing: select count(*) from product_receive_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 
2019-01-31 10:58:23.269 [http-nio-8080-exec-1] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - ==> Parameters: 
2019-01-31 10:58:23.272 [http-nio-8080-exec-1] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - <==      Total: 1
2019-01-31 10:58:23.276 [http-nio-8080-exec-1] DEBUG c.y.s.d.P.findProductReceiveStockList - ==>  Preparing: select ps.prod_rece_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_receive_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 order by p.prod_id,pp.prod_param_id limit ?,? 
2019-01-31 10:58:23.277 [http-nio-8080-exec-1] DEBUG c.y.s.d.P.findProductReceiveStockList - ==> Parameters: 0(Integer), 5(Integer)
2019-01-31 10:58:23.281 [http-nio-8080-exec-1] DEBUG c.y.s.d.P.findProductReceiveStockList - <==      Total: 5
2019-01-31 10:58:23.283 [http-nio-8080-exec-1] DEBUG c.y.stock.controller.ProductReceiveStockController - 转到待收库存页面
2019-01-31 11:02:04.358 [main] INFO  com.yun.YunEbStockApplication - Starting YunEbStockApplication on USER-20181202BJ with PID 2616 (E:\workspace\yun-eb-stock\target\classes started by Administrator in E:\workspace\yun-eb-stock)
2019-01-31 11:02:04.365 [main] DEBUG com.yun.YunEbStockApplication - Running with Spring Boot v1.5.9.RELEASE, Spring v4.3.13.RELEASE
2019-01-31 11:02:04.365 [main] INFO  com.yun.YunEbStockApplication - No active profile set, falling back to default profiles: default
2019-01-31 11:02:04.877 [main] INFO  o.s.b.c.e.AnnotationConfigEmbeddedWebApplicationContext - Refreshing org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@c267ef4: startup date [Thu Jan 31 11:02:04 CST 2019]; root of context hierarchy
2019-01-31 11:02:04.881 [background-preinit] INFO  org.hibernate.validator.internal.util.Version - HV000001: Hibernate Validator 5.3.6.Final
2019-01-31 11:02:06.623 [main] INFO  o.s.b.c.e.tomcat.TomcatEmbeddedServletContainer - Tomcat initialized with port(s): 8080 (http)
2019-01-31 11:02:06.636 [main] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2019-01-31 11:02:06.638 [main] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet Engine: Apache Tomcat/8.5.23
2019-01-31 11:02:06.786 [localhost-startStop-1] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2019-01-31 11:02:06.786 [localhost-startStop-1] INFO  org.springframework.web.context.ContextLoader - Root WebApplicationContext: initialization completed in 1909 ms
2019-01-31 11:02:07.002 [localhost-startStop-1] INFO  o.s.boot.web.servlet.FilterRegistrationBean - Mapping filter: 'characterEncodingFilter' to: [/*]
2019-01-31 11:02:07.003 [localhost-startStop-1] INFO  o.s.boot.web.servlet.FilterRegistrationBean - Mapping filter: 'hiddenHttpMethodFilter' to: [/*]
2019-01-31 11:02:07.003 [localhost-startStop-1] INFO  o.s.boot.web.servlet.FilterRegistrationBean - Mapping filter: 'httpPutFormContentFilter' to: [/*]
2019-01-31 11:02:07.003 [localhost-startStop-1] INFO  o.s.boot.web.servlet.FilterRegistrationBean - Mapping filter: 'requestContextFilter' to: [/*]
2019-01-31 11:02:07.004 [localhost-startStop-1] INFO  o.s.boot.web.servlet.FilterRegistrationBean - Mapping filter: 'loginFilter' to urls: [/*]
2019-01-31 11:02:07.004 [localhost-startStop-1] INFO  o.s.boot.web.servlet.ServletRegistrationBean - Mapping servlet: 'dispatcherServlet' to [/]
2019-01-31 11:02:07.877 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerAdapter - Looking for @ControllerAdvice: org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@c267ef4: startup date [Thu Jan 31 11:02:04 CST 2019]; root of context hierarchy
2019-01-31 11:02:07.935 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productList]}" onto public java.lang.String com.yun.product.controller.ProductController.productList(org.springframework.ui.Model,java.lang.String,java.lang.String,java.lang.String,java.lang.String)
2019-01-31 11:02:07.936 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productPreAdd]}" onto public java.lang.String com.yun.product.controller.ProductController.productPreAdd()
2019-01-31 11:02:07.937 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productSave]}" onto public java.lang.String com.yun.product.controller.ProductController.productSave(com.yun.product.model.Product)
2019-01-31 11:02:07.937 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productDelete]}" onto public java.lang.String com.yun.product.controller.ProductController.productDelete(int)
2019-01-31 11:02:07.938 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productListForAutoComplete]}" onto public java.util.List<com.yun.product.model.Product> com.yun.product.controller.ProductController.productListForAutoComplete(java.lang.String)
2019-01-31 11:02:07.938 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productListForStock]}" onto public java.util.List<com.yun.product.model.Product> com.yun.product.controller.ProductController.productListForStock()
2019-01-31 11:02:07.938 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productListForTrade]}" onto public java.util.List<com.yun.product.model.Product> com.yun.product.controller.ProductController.productListForTrade(java.lang.String)
2019-01-31 11:02:07.939 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productPreUpdate]}" onto public java.lang.String com.yun.product.controller.ProductController.productPreUpdate(int,org.springframework.ui.Model)
2019-01-31 11:02:07.939 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productUpdate]}" onto public java.lang.String com.yun.product.controller.ProductController.productUpdate(com.yun.product.model.Product)
2019-01-31 11:02:07.940 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/prodParamDelete]}" onto public java.lang.String com.yun.product.controller.ProductParamController.prodParamDelete(int)
2019-01-31 11:02:07.940 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/prodParamPreAdd]}" onto public java.lang.String com.yun.product.controller.ProductParamController.prodParamPreAdd(int,org.springframework.ui.Model)
2019-01-31 11:02:07.940 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/prodParamSave]}" onto public java.lang.String com.yun.product.controller.ProductParamController.prodParamSave(com.yun.product.model.ProductParameter)
2019-01-31 11:02:07.940 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/prodParamList]}" onto public java.lang.String com.yun.product.controller.ProductParamController.prodParamList(int)
2019-01-31 11:02:07.944 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeUpdate]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeUpdate(java.lang.Integer,org.springframework.ui.Model)
2019-01-31 11:02:07.944 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeUpdateSave]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeUpdateSave(com.yun.product.model.ProductType)
2019-01-31 11:02:07.944 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeDelete]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeDelete(java.lang.Integer,javax.servlet.http.HttpServletResponse) throws java.io.IOException
2019-01-31 11:02:07.945 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeList]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeList(org.springframework.ui.Model)
2019-01-31 11:02:07.945 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeTree]}" onto public java.util.List<com.yun.product.model.ProductType> com.yun.product.controller.ProductTypeController.productTypeTree()
2019-01-31 11:02:07.945 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeEdit]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeEdit()
2019-01-31 11:02:07.945 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeSave]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeSave(com.yun.product.model.ProductType)
2019-01-31 11:02:07.946 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveStockList]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveStockController.productReceiveStocklist(java.lang.String,java.lang.String,org.springframework.ui.Model)
2019-01-31 11:02:07.947 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveStockPreAdd]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveStockController.productReceiveStockPreAdd()
2019-01-31 11:02:07.947 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveStockSave]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveStockController.productReceiveStockSave(com.yun.stock.model.ProductReceiveStock)
2019-01-31 11:02:07.947 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveStockDelete]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveStockController.productReceiveStockDelete(int)
2019-01-31 11:02:07.948 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveStockPreUpdate]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveStockController.productReceiveStockPreUpdate(int,org.springframework.ui.Model)
2019-01-31 11:02:07.948 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveStockUpdate]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveStockController.productReceiveStockUpdate(com.yun.stock.model.ProductReceiveStock)
2019-01-31 11:02:07.949 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveStockToCurrentStock]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveTradeController.productReceiveStockToCurrentStock(int,org.springframework.ui.Model)
2019-01-31 11:02:07.951 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveRejectSave]}" onto public void com.yun.stock.controller.ProductReceiveTradeController.receiveRejectSave(com.yun.stock.model.ProductReceiveTrade,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse) throws java.io.IOException
2019-01-31 11:02:07.951 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveToCurrentSave]}" onto public void com.yun.stock.controller.ProductReceiveTradeController.productReceiveToCurrentSave(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse) throws java.lang.Exception
2019-01-31 11:02:07.951 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveInSave]}" onto public void com.yun.stock.controller.ProductReceiveTradeController.receiveInSave(com.yun.stock.model.ProductReceiveTrade,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse) throws java.io.IOException
2019-01-31 11:02:07.952 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveIn]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveTradeController.receiveIn(org.springframework.ui.Model)
2019-01-31 11:02:07.952 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveReject]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveTradeController.receiveReject(org.springframework.ui.Model)
2019-01-31 11:02:07.954 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockPreAdd]}" onto public java.lang.String com.yun.stock.controller.ProductStockController.productStockPreAdd()
2019-01-31 11:02:07.954 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockDelete]}" onto public java.lang.String com.yun.stock.controller.ProductStockController.productStockDelete(int)
2019-01-31 11:02:07.955 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockPreUpdate]}" onto public java.lang.String com.yun.stock.controller.ProductStockController.productStockPreUpdate(int,org.springframework.ui.Model)
2019-01-31 11:02:07.955 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockUpdate]}" onto public java.lang.String com.yun.stock.controller.ProductStockController.productStockUpdate(com.yun.stock.model.ProductStock)
2019-01-31 11:02:07.955 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockSave]}" onto public java.lang.String com.yun.stock.controller.ProductStockController.productStockSave(com.yun.stock.model.ProductStock)
2019-01-31 11:02:07.955 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockList]}" onto public java.lang.String com.yun.stock.controller.ProductStockController.productStocklist(java.lang.String,java.lang.String,org.springframework.ui.Model)
2019-01-31 11:02:07.956 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/main]}" onto public java.lang.String com.yun.user.controller.MainController.main()
2019-01-31 11:02:07.957 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/userList]}" onto public java.lang.String com.yun.user.controller.UserController.userList(org.springframework.ui.Model)
2019-01-31 11:02:07.957 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/userSave]}" onto public java.lang.String com.yun.user.controller.UserController.userSave(com.yun.user.model.UserInfo)
2019-01-31 11:02:07.958 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/userEdit]}" onto public java.lang.String com.yun.user.controller.UserController.userEdit()
2019-01-31 11:02:07.958 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/login]}" onto public void com.yun.user.controller.UserController.login(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse) throws java.io.IOException
2019-01-31 11:02:07.958 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/deleteUserInfo]}" onto public java.lang.String com.yun.user.controller.UserController.userDelete(int)
2019-01-31 11:02:07.962 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/error]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> org.springframework.boot.autoconfigure.web.BasicErrorController.error(javax.servlet.http.HttpServletRequest)
2019-01-31 11:02:07.962 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/error],produces=[text/html]}" onto public org.springframework.web.servlet.ModelAndView org.springframework.boot.autoconfigure.web.BasicErrorController.errorHtml(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
2019-01-31 11:02:08.000 [main] INFO  o.s.web.servlet.handler.SimpleUrlHandlerMapping - Mapped URL path [/webjars/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-01-31 11:02:08.000 [main] INFO  o.s.web.servlet.handler.SimpleUrlHandlerMapping - Mapped URL path [/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-01-31 11:02:08.043 [main] INFO  o.s.web.servlet.handler.SimpleUrlHandlerMapping - Mapped URL path [/**/favicon.ico] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-01-31 11:02:08.337 [main] INFO  o.s.b.a.w.WebMvcAutoConfiguration$WelcomePageHandlerMapping - Adding welcome page: class path resource [static/index.html]
2019-01-31 11:02:08.603 [main] INFO  o.s.jmx.export.annotation.AnnotationMBeanExporter - Registering beans for JMX exposure on startup
2019-01-31 11:02:08.622 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2019-01-31 11:02:08.632 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2019-01-31 11:02:08.814 [main] INFO  org.apache.tomcat.util.net.NioSelectorPool - Using a shared selector for servlet write/read
2019-01-31 11:02:08.835 [main] INFO  o.s.b.c.e.tomcat.TomcatEmbeddedServletContainer - Tomcat started on port(s): 8080 (http)
2019-01-31 11:02:08.841 [main] INFO  com.yun.YunEbStockApplication - Started YunEbStockApplication in 4.924 seconds (JVM running for 6.119)
2019-01-31 11:02:30.741 [http-nio-8080-exec-1] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring FrameworkServlet 'dispatcherServlet'
2019-01-31 11:02:30.741 [http-nio-8080-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - FrameworkServlet 'dispatcherServlet': initialization started
2019-01-31 11:02:30.760 [http-nio-8080-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - FrameworkServlet 'dispatcherServlet': initialization completed in 19 ms
2019-01-31 11:02:30.769 [http-nio-8080-exec-1] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/main
2019-01-31 11:02:35.148 [http-nio-8080-exec-2] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/login
2019-01-31 11:02:35.472 [http-nio-8080-exec-2] DEBUG c.y.user.dao.UserInfoDao.findUserInfoByNameAndPass - ==>  Preparing: select * from user_info where login_name=? and login_pass=? 
2019-01-31 11:02:35.494 [http-nio-8080-exec-2] DEBUG c.y.user.dao.UserInfoDao.findUserInfoByNameAndPass - ==> Parameters: admin(String), 123(String)
2019-01-31 11:02:35.505 [http-nio-8080-exec-2] DEBUG c.y.user.dao.UserInfoDao.findUserInfoByNameAndPass - <==      Total: 1
2019-01-31 11:02:35.515 [http-nio-8080-exec-3] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/main
2019-01-31 11:02:38.010 [http-nio-8080-exec-4] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productReceiveStockList
2019-01-31 11:02:38.019 [http-nio-8080-exec-4] DEBUG c.y.stock.controller.ProductReceiveStockController - 跳转到待收库存查询控制器
2019-01-31 11:02:38.063 [http-nio-8080-exec-4] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - ==>  Preparing: select count(*) from product_receive_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 
2019-01-31 11:02:38.064 [http-nio-8080-exec-4] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - ==> Parameters: 
2019-01-31 11:02:38.066 [http-nio-8080-exec-4] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - <==      Total: 1
2019-01-31 11:02:38.074 [http-nio-8080-exec-4] DEBUG c.y.s.d.P.findProductReceiveStockList - ==>  Preparing: select ps.prod_rece_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_receive_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 order by p.prod_id,pp.prod_param_id limit ?,? 
2019-01-31 11:02:38.074 [http-nio-8080-exec-4] DEBUG c.y.s.d.P.findProductReceiveStockList - ==> Parameters: 0(Integer), 5(Integer)
2019-01-31 11:02:38.079 [http-nio-8080-exec-4] DEBUG c.y.s.d.P.findProductReceiveStockList - <==      Total: 5
2019-01-31 11:02:38.081 [http-nio-8080-exec-4] DEBUG c.y.stock.controller.ProductReceiveStockController - 转到待收库存页面
2019-01-31 11:02:40.362 [http-nio-8080-exec-5] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productReceiveStockToCurrentStock
2019-01-31 11:02:40.378 [http-nio-8080-exec-5] DEBUG c.y.s.d.P.findProductReceiveStockById - ==>  Preparing: select ps.prod_rece_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_receive_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 and ps.prod_rece_stock_id=? 
2019-01-31 11:02:40.378 [http-nio-8080-exec-5] DEBUG c.y.s.d.P.findProductReceiveStockById - ==> Parameters: 9(Integer)
2019-01-31 11:02:40.380 [http-nio-8080-exec-5] DEBUG c.y.s.d.P.findProductReceiveStockById - <==      Total: 1
2019-01-31 11:02:43.819 [http-nio-8080-exec-7] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productReceiveToCurrentSave
2019-01-31 11:02:43.826 [http-nio-8080-exec-7] DEBUG c.y.s.d.P.findProductReceiveStockById - ==>  Preparing: select ps.prod_rece_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_receive_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 and ps.prod_rece_stock_id=? 
2019-01-31 11:02:43.827 [http-nio-8080-exec-7] DEBUG c.y.s.d.P.findProductReceiveStockById - ==> Parameters: 9(Integer)
2019-01-31 11:02:43.828 [http-nio-8080-exec-7] DEBUG c.y.s.d.P.findProductReceiveStockById - <==      Total: 1
2019-01-31 11:02:43.829 [http-nio-8080-exec-7] DEBUG c.y.s.d.P.insertProductReceiveOutTrade - ==>  Preparing: insert into product_receive_trade(trade_date,prod_id,prod_param_id,begin_num,trade_del,end_num,oper_id)values(?,?,?,?,?,?,?) 
2019-01-31 11:02:43.834 [http-nio-8080-exec-7] DEBUG c.y.s.d.P.insertProductReceiveOutTrade - ==> Parameters: 2019-01-31 11:02:40.0(Timestamp), 2(Integer), 8(Integer), 4(Integer), -6(Integer), 10(Integer), 5(Integer)
2019-01-31 11:02:43.866 [http-nio-8080-exec-7] DEBUG c.y.s.d.P.insertProductReceiveOutTrade - <==    Updates: 1
2019-01-31 11:02:43.866 [http-nio-8080-exec-7] DEBUG c.y.s.d.P.findProductStockByProdIdAndProdParamId - ==>  Preparing: select ps.prod_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 and p.prod_id=? and pp.prod_param_Id=? 
2019-01-31 11:02:43.867 [http-nio-8080-exec-7] DEBUG c.y.s.d.P.findProductStockByProdIdAndProdParamId - ==> Parameters: 2(Integer), 8(Integer)
2019-01-31 11:02:44.017 [http-nio-8080-exec-7] DEBUG c.y.s.d.P.findProductStockByProdIdAndProdParamId - <==      Total: 1
2019-01-31 11:02:44.019 [http-nio-8080-exec-7] DEBUG c.yun.stock.dao.ProductStockDao.updateProductStock - ==>  Preparing: update product_stock set prod_id=?,prod_param_id=?,stock_num=? where prod_stock_id=? 
2019-01-31 11:02:44.022 [http-nio-8080-exec-7] DEBUG c.yun.stock.dao.ProductStockDao.updateProductStock - ==> Parameters: 2(Integer), 8(Integer), 0(Integer), 9(Integer)
2019-01-31 11:02:44.031 [http-nio-8080-exec-7] DEBUG c.yun.stock.dao.ProductStockDao.updateProductStock - <==    Updates: 1
2019-01-31 11:02:44.036 [http-nio-8080-exec-7] DEBUG c.y.stock.dao.ProductTradeDao.insertProductInTrade - ==>  Preparing: insert into product_trade(trade_date,prod_id,prod_param_id,begin_num,trade_add,end_num,oper_id)values(?,?,?,?,?,?,?) 
2019-01-31 11:02:44.038 [http-nio-8080-exec-7] DEBUG c.y.stock.dao.ProductTradeDao.insertProductInTrade - ==> Parameters: 2019-01-31 11:02:40.0(Timestamp), 2(Integer), 8(Integer), 6(Integer), -6(Integer), 0(Integer), 5(Integer)
2019-01-31 11:02:44.043 [http-nio-8080-exec-7] DEBUG c.y.stock.dao.ProductTradeDao.insertProductInTrade - <==    Updates: 1
2019-01-31 11:02:44.044 [http-nio-8080-exec-7] DEBUG c.y.s.d.P.updateProductReceiveStock - ==>  Preparing: update product_receive_stock set prod_id=?,prod_param_id=?,stock_num=? where prod_rece_stock_id=? 
2019-01-31 11:02:44.046 [http-nio-8080-exec-7] DEBUG c.y.s.d.P.updateProductReceiveStock - ==> Parameters: 2(Integer), 8(Integer), 10(Integer), 9(Integer)
2019-01-31 11:02:44.048 [http-nio-8080-exec-7] DEBUG c.y.s.d.P.updateProductReceiveStock - <==    Updates: 1
2019-01-31 11:02:44.237 [http-nio-8080-exec-7] DEBUG c.y.stock.controller.ProductReceiveTradeController - java.lang.ArithmeticException: / by zero
2019-01-31 11:02:47.749 [http-nio-8080-exec-8] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productReceiveStockList
2019-01-31 11:02:47.751 [http-nio-8080-exec-8] DEBUG c.y.stock.controller.ProductReceiveStockController - 跳转到待收库存查询控制器
2019-01-31 11:02:47.754 [http-nio-8080-exec-8] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - ==>  Preparing: select count(*) from product_receive_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 
2019-01-31 11:02:47.754 [http-nio-8080-exec-8] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - ==> Parameters: 
2019-01-31 11:02:47.756 [http-nio-8080-exec-8] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - <==      Total: 1
2019-01-31 11:02:47.760 [http-nio-8080-exec-8] DEBUG c.y.s.d.P.findProductReceiveStockList - ==>  Preparing: select ps.prod_rece_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_receive_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 order by p.prod_id,pp.prod_param_id limit ?,? 
2019-01-31 11:02:47.760 [http-nio-8080-exec-8] DEBUG c.y.s.d.P.findProductReceiveStockList - ==> Parameters: 0(Integer), 5(Integer)
2019-01-31 11:02:47.765 [http-nio-8080-exec-8] DEBUG c.y.s.d.P.findProductReceiveStockList - <==      Total: 5
2019-01-31 11:02:47.768 [http-nio-8080-exec-8] DEBUG c.y.stock.controller.ProductReceiveStockController - 转到待收库存页面
2019-01-31 11:02:50.304 [http-nio-8080-exec-9] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productReceiveStockToCurrentStock
2019-01-31 11:02:50.310 [http-nio-8080-exec-9] DEBUG c.y.s.d.P.findProductReceiveStockById - ==>  Preparing: select ps.prod_rece_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_receive_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 and ps.prod_rece_stock_id=? 
2019-01-31 11:02:50.311 [http-nio-8080-exec-9] DEBUG c.y.s.d.P.findProductReceiveStockById - ==> Parameters: 9(Integer)
2019-01-31 11:02:50.313 [http-nio-8080-exec-9] DEBUG c.y.s.d.P.findProductReceiveStockById - <==      Total: 1
2019-01-31 11:02:54.493 [http-nio-8080-exec-10] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productReceiveToCurrentSave
2019-01-31 11:02:54.496 [http-nio-8080-exec-10] DEBUG c.y.stock.controller.ProductReceiveTradeController - java.lang.Exception: 待收库存转入当前库存数量不足
2019-01-31 11:03:00.286 [http-nio-8080-exec-1] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productReceiveToCurrentSave
2019-01-31 11:03:00.291 [http-nio-8080-exec-1] DEBUG c.y.s.d.P.findProductReceiveStockById - ==>  Preparing: select ps.prod_rece_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_receive_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 and ps.prod_rece_stock_id=? 
2019-01-31 11:03:00.291 [http-nio-8080-exec-1] DEBUG c.y.s.d.P.findProductReceiveStockById - ==> Parameters: 9(Integer)
2019-01-31 11:03:00.294 [http-nio-8080-exec-1] DEBUG c.y.s.d.P.findProductReceiveStockById - <==      Total: 1
2019-01-31 11:03:00.295 [http-nio-8080-exec-1] DEBUG c.y.s.d.P.insertProductReceiveOutTrade - ==>  Preparing: insert into product_receive_trade(trade_date,prod_id,prod_param_id,begin_num,trade_del,end_num,oper_id)values(?,?,?,?,?,?,?) 
2019-01-31 11:03:00.295 [http-nio-8080-exec-1] DEBUG c.y.s.d.P.insertProductReceiveOutTrade - ==> Parameters: 2019-01-31 11:02:50.0(Timestamp), 2(Integer), 8(Integer), 4(Integer), -40(Integer), 44(Integer), 5(Integer)
2019-01-31 11:03:00.323 [http-nio-8080-exec-1] DEBUG c.y.s.d.P.insertProductReceiveOutTrade - <==    Updates: 1
2019-01-31 11:03:00.323 [http-nio-8080-exec-1] DEBUG c.y.s.d.P.findProductStockByProdIdAndProdParamId - ==>  Preparing: select ps.prod_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 and p.prod_id=? and pp.prod_param_Id=? 
2019-01-31 11:03:00.325 [http-nio-8080-exec-1] DEBUG c.y.s.d.P.findProductStockByProdIdAndProdParamId - ==> Parameters: 2(Integer), 8(Integer)
2019-01-31 11:03:00.330 [http-nio-8080-exec-1] DEBUG c.y.s.d.P.findProductStockByProdIdAndProdParamId - <==      Total: 1
2019-01-31 11:03:00.330 [http-nio-8080-exec-1] DEBUG c.yun.stock.dao.ProductStockDao.updateProductStock - ==>  Preparing: update product_stock set prod_id=?,prod_param_id=?,stock_num=? where prod_stock_id=? 
2019-01-31 11:03:00.330 [http-nio-8080-exec-1] DEBUG c.yun.stock.dao.ProductStockDao.updateProductStock - ==> Parameters: 2(Integer), 8(Integer), -34(Integer), 9(Integer)
2019-01-31 11:03:00.347 [http-nio-8080-exec-1] DEBUG c.yun.stock.dao.ProductStockDao.updateProductStock - <==    Updates: 1
2019-01-31 11:03:00.348 [http-nio-8080-exec-1] DEBUG c.y.stock.dao.ProductTradeDao.insertProductInTrade - ==>  Preparing: insert into product_trade(trade_date,prod_id,prod_param_id,begin_num,trade_add,end_num,oper_id)values(?,?,?,?,?,?,?) 
2019-01-31 11:03:00.348 [http-nio-8080-exec-1] DEBUG c.y.stock.dao.ProductTradeDao.insertProductInTrade - ==> Parameters: 2019-01-31 11:02:50.0(Timestamp), 2(Integer), 8(Integer), 6(Integer), -40(Integer), -34(Integer), 5(Integer)
2019-01-31 11:03:00.350 [http-nio-8080-exec-1] DEBUG c.y.stock.dao.ProductTradeDao.insertProductInTrade - <==    Updates: 1
2019-01-31 11:03:00.351 [http-nio-8080-exec-1] DEBUG c.y.s.d.P.updateProductReceiveStock - ==>  Preparing: update product_receive_stock set prod_id=?,prod_param_id=?,stock_num=? where prod_rece_stock_id=? 
2019-01-31 11:03:00.352 [http-nio-8080-exec-1] DEBUG c.y.s.d.P.updateProductReceiveStock - ==> Parameters: 2(Integer), 8(Integer), 44(Integer), 9(Integer)
2019-01-31 11:03:00.353 [http-nio-8080-exec-1] DEBUG c.y.s.d.P.updateProductReceiveStock - <==    Updates: 1
2019-01-31 11:03:00.666 [http-nio-8080-exec-1] DEBUG c.y.stock.controller.ProductReceiveTradeController - java.lang.ArithmeticException: / by zero
2019-01-31 11:03:03.809 [http-nio-8080-exec-2] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productReceiveStockList
2019-01-31 11:03:03.813 [http-nio-8080-exec-2] DEBUG c.y.stock.controller.ProductReceiveStockController - 跳转到待收库存查询控制器
2019-01-31 11:03:03.816 [http-nio-8080-exec-2] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - ==>  Preparing: select count(*) from product_receive_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 
2019-01-31 11:03:03.817 [http-nio-8080-exec-2] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - ==> Parameters: 
2019-01-31 11:03:03.820 [http-nio-8080-exec-2] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - <==      Total: 1
2019-01-31 11:03:03.830 [http-nio-8080-exec-2] DEBUG c.y.s.d.P.findProductReceiveStockList - ==>  Preparing: select ps.prod_rece_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_receive_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 order by p.prod_id,pp.prod_param_id limit ?,? 
2019-01-31 11:03:03.831 [http-nio-8080-exec-2] DEBUG c.y.s.d.P.findProductReceiveStockList - ==> Parameters: 0(Integer), 5(Integer)
2019-01-31 11:03:03.836 [http-nio-8080-exec-2] DEBUG c.y.s.d.P.findProductReceiveStockList - <==      Total: 5
2019-01-31 11:03:03.838 [http-nio-8080-exec-2] DEBUG c.y.stock.controller.ProductReceiveStockController - 转到待收库存页面
2019-01-31 11:03:35.712 [main] INFO  com.yun.YunEbStockApplication - Starting YunEbStockApplication on USER-20181202BJ with PID 1180 (E:\workspace\yun-eb-stock\target\classes started by Administrator in E:\workspace\yun-eb-stock)
2019-01-31 11:03:35.717 [main] DEBUG com.yun.YunEbStockApplication - Running with Spring Boot v1.5.9.RELEASE, Spring v4.3.13.RELEASE
2019-01-31 11:03:35.717 [main] INFO  com.yun.YunEbStockApplication - No active profile set, falling back to default profiles: default
2019-01-31 11:03:36.063 [background-preinit] INFO  org.hibernate.validator.internal.util.Version - HV000001: Hibernate Validator 5.3.6.Final
2019-01-31 11:03:36.178 [main] INFO  o.s.b.c.e.AnnotationConfigEmbeddedWebApplicationContext - Refreshing org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@6a28ffa4: startup date [Thu Jan 31 11:03:36 CST 2019]; root of context hierarchy
2019-01-31 11:03:37.929 [main] INFO  o.s.b.c.e.tomcat.TomcatEmbeddedServletContainer - Tomcat initialized with port(s): 8080 (http)
2019-01-31 11:03:37.939 [main] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2019-01-31 11:03:37.940 [main] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet Engine: Apache Tomcat/8.5.23
2019-01-31 11:03:38.040 [localhost-startStop-1] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2019-01-31 11:03:38.041 [localhost-startStop-1] INFO  org.springframework.web.context.ContextLoader - Root WebApplicationContext: initialization completed in 1864 ms
2019-01-31 11:03:38.205 [localhost-startStop-1] INFO  o.s.boot.web.servlet.FilterRegistrationBean - Mapping filter: 'characterEncodingFilter' to: [/*]
2019-01-31 11:03:38.206 [localhost-startStop-1] INFO  o.s.boot.web.servlet.FilterRegistrationBean - Mapping filter: 'hiddenHttpMethodFilter' to: [/*]
2019-01-31 11:03:38.206 [localhost-startStop-1] INFO  o.s.boot.web.servlet.FilterRegistrationBean - Mapping filter: 'httpPutFormContentFilter' to: [/*]
2019-01-31 11:03:38.206 [localhost-startStop-1] INFO  o.s.boot.web.servlet.FilterRegistrationBean - Mapping filter: 'requestContextFilter' to: [/*]
2019-01-31 11:03:38.207 [localhost-startStop-1] INFO  o.s.boot.web.servlet.FilterRegistrationBean - Mapping filter: 'loginFilter' to urls: [/*]
2019-01-31 11:03:38.207 [localhost-startStop-1] INFO  o.s.boot.web.servlet.ServletRegistrationBean - Mapping servlet: 'dispatcherServlet' to [/]
2019-01-31 11:03:39.022 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerAdapter - Looking for @ControllerAdvice: org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@6a28ffa4: startup date [Thu Jan 31 11:03:36 CST 2019]; root of context hierarchy
2019-01-31 11:03:39.078 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productListForAutoComplete]}" onto public java.util.List<com.yun.product.model.Product> com.yun.product.controller.ProductController.productListForAutoComplete(java.lang.String)
2019-01-31 11:03:39.079 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productListForStock]}" onto public java.util.List<com.yun.product.model.Product> com.yun.product.controller.ProductController.productListForStock()
2019-01-31 11:03:39.080 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productListForTrade]}" onto public java.util.List<com.yun.product.model.Product> com.yun.product.controller.ProductController.productListForTrade(java.lang.String)
2019-01-31 11:03:39.080 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productPreAdd]}" onto public java.lang.String com.yun.product.controller.ProductController.productPreAdd()
2019-01-31 11:03:39.080 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productList]}" onto public java.lang.String com.yun.product.controller.ProductController.productList(org.springframework.ui.Model,java.lang.String,java.lang.String,java.lang.String,java.lang.String)
2019-01-31 11:03:39.080 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productSave]}" onto public java.lang.String com.yun.product.controller.ProductController.productSave(com.yun.product.model.Product)
2019-01-31 11:03:39.081 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productDelete]}" onto public java.lang.String com.yun.product.controller.ProductController.productDelete(int)
2019-01-31 11:03:39.081 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productPreUpdate]}" onto public java.lang.String com.yun.product.controller.ProductController.productPreUpdate(int,org.springframework.ui.Model)
2019-01-31 11:03:39.081 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productUpdate]}" onto public java.lang.String com.yun.product.controller.ProductController.productUpdate(com.yun.product.model.Product)
2019-01-31 11:03:39.082 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/prodParamDelete]}" onto public java.lang.String com.yun.product.controller.ProductParamController.prodParamDelete(int)
2019-01-31 11:03:39.082 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/prodParamPreAdd]}" onto public java.lang.String com.yun.product.controller.ProductParamController.prodParamPreAdd(int,org.springframework.ui.Model)
2019-01-31 11:03:39.082 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/prodParamSave]}" onto public java.lang.String com.yun.product.controller.ProductParamController.prodParamSave(com.yun.product.model.ProductParameter)
2019-01-31 11:03:39.083 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/prodParamList]}" onto public java.lang.String com.yun.product.controller.ProductParamController.prodParamList(int)
2019-01-31 11:03:39.085 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeUpdate]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeUpdate(java.lang.Integer,org.springframework.ui.Model)
2019-01-31 11:03:39.086 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeUpdateSave]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeUpdateSave(com.yun.product.model.ProductType)
2019-01-31 11:03:39.086 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeDelete]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeDelete(java.lang.Integer,javax.servlet.http.HttpServletResponse) throws java.io.IOException
2019-01-31 11:03:39.086 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeList]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeList(org.springframework.ui.Model)
2019-01-31 11:03:39.086 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeTree]}" onto public java.util.List<com.yun.product.model.ProductType> com.yun.product.controller.ProductTypeController.productTypeTree()
2019-01-31 11:03:39.086 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeEdit]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeEdit()
2019-01-31 11:03:39.087 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeSave]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeSave(com.yun.product.model.ProductType)
2019-01-31 11:03:39.088 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveStockList]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveStockController.productReceiveStocklist(java.lang.String,java.lang.String,org.springframework.ui.Model)
2019-01-31 11:03:39.088 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveStockPreAdd]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveStockController.productReceiveStockPreAdd()
2019-01-31 11:03:39.088 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveStockSave]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveStockController.productReceiveStockSave(com.yun.stock.model.ProductReceiveStock)
2019-01-31 11:03:39.088 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveStockDelete]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveStockController.productReceiveStockDelete(int)
2019-01-31 11:03:39.088 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveStockPreUpdate]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveStockController.productReceiveStockPreUpdate(int,org.springframework.ui.Model)
2019-01-31 11:03:39.089 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveStockUpdate]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveStockController.productReceiveStockUpdate(com.yun.stock.model.ProductReceiveStock)
2019-01-31 11:03:39.089 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveStockToCurrentStock]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveTradeController.productReceiveStockToCurrentStock(int,org.springframework.ui.Model)
2019-01-31 11:03:39.090 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveRejectSave]}" onto public void com.yun.stock.controller.ProductReceiveTradeController.receiveRejectSave(com.yun.stock.model.ProductReceiveTrade,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse) throws java.io.IOException
2019-01-31 11:03:39.090 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveToCurrentSave]}" onto public void com.yun.stock.controller.ProductReceiveTradeController.productReceiveToCurrentSave(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse) throws java.lang.Exception
2019-01-31 11:03:39.090 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveInSave]}" onto public void com.yun.stock.controller.ProductReceiveTradeController.receiveInSave(com.yun.stock.model.ProductReceiveTrade,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse) throws java.io.IOException
2019-01-31 11:03:39.091 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveIn]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveTradeController.receiveIn(org.springframework.ui.Model)
2019-01-31 11:03:39.091 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveReject]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveTradeController.receiveReject(org.springframework.ui.Model)
2019-01-31 11:03:39.092 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockPreAdd]}" onto public java.lang.String com.yun.stock.controller.ProductStockController.productStockPreAdd()
2019-01-31 11:03:39.092 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockDelete]}" onto public java.lang.String com.yun.stock.controller.ProductStockController.productStockDelete(int)
2019-01-31 11:03:39.092 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockPreUpdate]}" onto public java.lang.String com.yun.stock.controller.ProductStockController.productStockPreUpdate(int,org.springframework.ui.Model)
2019-01-31 11:03:39.092 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockUpdate]}" onto public java.lang.String com.yun.stock.controller.ProductStockController.productStockUpdate(com.yun.stock.model.ProductStock)
2019-01-31 11:03:39.092 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockSave]}" onto public java.lang.String com.yun.stock.controller.ProductStockController.productStockSave(com.yun.stock.model.ProductStock)
2019-01-31 11:03:39.093 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockList]}" onto public java.lang.String com.yun.stock.controller.ProductStockController.productStocklist(java.lang.String,java.lang.String,org.springframework.ui.Model)
2019-01-31 11:03:39.093 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/main]}" onto public java.lang.String com.yun.user.controller.MainController.main()
2019-01-31 11:03:39.094 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/userList]}" onto public java.lang.String com.yun.user.controller.UserController.userList(org.springframework.ui.Model)
2019-01-31 11:03:39.094 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/userEdit]}" onto public java.lang.String com.yun.user.controller.UserController.userEdit()
2019-01-31 11:03:39.094 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/login]}" onto public void com.yun.user.controller.UserController.login(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse) throws java.io.IOException
2019-01-31 11:03:39.094 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/userSave]}" onto public java.lang.String com.yun.user.controller.UserController.userSave(com.yun.user.model.UserInfo)
2019-01-31 11:03:39.095 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/deleteUserInfo]}" onto public java.lang.String com.yun.user.controller.UserController.userDelete(int)
2019-01-31 11:03:39.097 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/error]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> org.springframework.boot.autoconfigure.web.BasicErrorController.error(javax.servlet.http.HttpServletRequest)
2019-01-31 11:03:39.098 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/error],produces=[text/html]}" onto public org.springframework.web.servlet.ModelAndView org.springframework.boot.autoconfigure.web.BasicErrorController.errorHtml(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
2019-01-31 11:03:39.139 [main] INFO  o.s.web.servlet.handler.SimpleUrlHandlerMapping - Mapped URL path [/webjars/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-01-31 11:03:39.139 [main] INFO  o.s.web.servlet.handler.SimpleUrlHandlerMapping - Mapped URL path [/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-01-31 11:03:39.196 [main] INFO  o.s.web.servlet.handler.SimpleUrlHandlerMapping - Mapped URL path [/**/favicon.ico] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-01-31 11:03:39.509 [main] INFO  o.s.b.a.w.WebMvcAutoConfiguration$WelcomePageHandlerMapping - Adding welcome page: class path resource [static/index.html]
2019-01-31 11:03:39.767 [main] INFO  o.s.jmx.export.annotation.AnnotationMBeanExporter - Registering beans for JMX exposure on startup
2019-01-31 11:03:39.786 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2019-01-31 11:03:39.797 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2019-01-31 11:03:39.810 [main] INFO  org.apache.tomcat.util.net.NioSelectorPool - Using a shared selector for servlet write/read
2019-01-31 11:03:39.979 [main] INFO  o.s.b.c.e.tomcat.TomcatEmbeddedServletContainer - Tomcat started on port(s): 8080 (http)
2019-01-31 11:03:39.985 [main] INFO  com.yun.YunEbStockApplication - Started YunEbStockApplication in 4.632 seconds (JVM running for 5.928)
2019-01-31 11:03:59.128 [http-nio-8080-exec-1] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring FrameworkServlet 'dispatcherServlet'
2019-01-31 11:03:59.128 [http-nio-8080-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - FrameworkServlet 'dispatcherServlet': initialization started
2019-01-31 11:03:59.146 [http-nio-8080-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - FrameworkServlet 'dispatcherServlet': initialization completed in 18 ms
2019-01-31 11:03:59.161 [http-nio-8080-exec-1] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/main
2019-01-31 11:04:03.944 [http-nio-8080-exec-2] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/login
2019-01-31 11:04:04.281 [http-nio-8080-exec-2] DEBUG c.y.user.dao.UserInfoDao.findUserInfoByNameAndPass - ==>  Preparing: select * from user_info where login_name=? and login_pass=? 
2019-01-31 11:04:04.301 [http-nio-8080-exec-2] DEBUG c.y.user.dao.UserInfoDao.findUserInfoByNameAndPass - ==> Parameters: admin(String), 123(String)
2019-01-31 11:04:04.314 [http-nio-8080-exec-2] DEBUG c.y.user.dao.UserInfoDao.findUserInfoByNameAndPass - <==      Total: 1
2019-01-31 11:04:04.324 [http-nio-8080-exec-3] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/main
2019-01-31 11:04:07.247 [http-nio-8080-exec-4] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productReceiveStockList
2019-01-31 11:04:07.253 [http-nio-8080-exec-4] DEBUG c.y.stock.controller.ProductReceiveStockController - 跳转到待收库存查询控制器
2019-01-31 11:04:07.293 [http-nio-8080-exec-4] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - ==>  Preparing: select count(*) from product_receive_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 
2019-01-31 11:04:07.293 [http-nio-8080-exec-4] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - ==> Parameters: 
2019-01-31 11:04:07.294 [http-nio-8080-exec-4] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - <==      Total: 1
2019-01-31 11:04:07.303 [http-nio-8080-exec-4] DEBUG c.y.s.d.P.findProductReceiveStockList - ==>  Preparing: select ps.prod_rece_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_receive_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 order by p.prod_id,pp.prod_param_id limit ?,? 
2019-01-31 11:04:07.304 [http-nio-8080-exec-4] DEBUG c.y.s.d.P.findProductReceiveStockList - ==> Parameters: 0(Integer), 5(Integer)
2019-01-31 11:04:07.308 [http-nio-8080-exec-4] DEBUG c.y.s.d.P.findProductReceiveStockList - <==      Total: 5
2019-01-31 11:04:07.310 [http-nio-8080-exec-4] DEBUG c.y.stock.controller.ProductReceiveStockController - 转到待收库存页面
2019-01-31 11:04:10.339 [http-nio-8080-exec-6] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productReceiveIn
2019-01-31 11:04:12.332 [http-nio-8080-exec-7] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productListForTrade
2019-01-31 11:04:12.346 [http-nio-8080-exec-7] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 order by prod_id 
2019-01-31 11:04:12.349 [http-nio-8080-exec-7] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==> Parameters: 
2019-01-31 11:04:12.352 [http-nio-8080-exec-7] DEBUG com.yun.product.dao.ProductDao.findProductByParam - <==      Total: 4
2019-01-31 11:04:12.356 [http-nio-8080-exec-7] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-31 11:04:12.357 [http-nio-8080-exec-7] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 2(Integer)
2019-01-31 11:04:12.359 [http-nio-8080-exec-7] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-01-31 11:04:12.360 [http-nio-8080-exec-7] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-31 11:04:12.360 [http-nio-8080-exec-7] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 3(Integer)
2019-01-31 11:04:12.361 [http-nio-8080-exec-7] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-01-31 11:04:12.362 [http-nio-8080-exec-7] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-31 11:04:12.362 [http-nio-8080-exec-7] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 4(Integer)
2019-01-31 11:04:12.364 [http-nio-8080-exec-7] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 2
2019-01-31 11:04:12.365 [http-nio-8080-exec-7] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-31 11:04:12.366 [http-nio-8080-exec-7] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 5(Integer)
2019-01-31 11:04:12.368 [http-nio-8080-exec-7] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 2
2019-01-31 11:04:15.533 [http-nio-8080-exec-8] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/prodParamList
2019-01-31 11:04:15.542 [http-nio-8080-exec-8] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-31 11:04:15.543 [http-nio-8080-exec-8] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 2(Integer)
2019-01-31 11:04:15.546 [http-nio-8080-exec-8] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-01-31 11:04:20.265 [http-nio-8080-exec-9] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productReceiveInSave
2019-01-31 11:04:20.287 [http-nio-8080-exec-9] DEBUG c.y.s.d.P.findProductReceiveStockRecordByProdIdAndProdParamId - ==>  Preparing: select * from product_receive_stock where 1=1 and prod_id=? and prod_param_id=? 
2019-01-31 11:04:20.288 [http-nio-8080-exec-9] DEBUG c.y.s.d.P.findProductReceiveStockRecordByProdIdAndProdParamId - ==> Parameters: 2(Integer), 8(Integer)
2019-01-31 11:04:20.289 [http-nio-8080-exec-9] DEBUG c.y.s.d.P.findProductReceiveStockRecordByProdIdAndProdParamId - <==      Total: 1
2019-01-31 11:04:20.290 [http-nio-8080-exec-9] DEBUG c.y.s.d.P.findProductReceiveStockNumByProdIdAndProdParamId - ==>  Preparing: select stock_num from product_receive_stock where 1=1 and prod_id=? and prod_param_id=? 
2019-01-31 11:04:20.290 [http-nio-8080-exec-9] DEBUG c.y.s.d.P.findProductReceiveStockNumByProdIdAndProdParamId - ==> Parameters: 2(Integer), 8(Integer)
2019-01-31 11:04:20.291 [http-nio-8080-exec-9] DEBUG c.y.s.d.P.findProductReceiveStockNumByProdIdAndProdParamId - <==      Total: 1
2019-01-31 11:04:20.292 [http-nio-8080-exec-9] DEBUG c.y.s.d.P.updateProductReceiveStock - ==>  Preparing: update product_receive_stock set prod_id=?,prod_param_id=?,stock_num=? where prod_rece_stock_id=? 
2019-01-31 11:04:20.292 [http-nio-8080-exec-9] DEBUG c.y.s.d.P.updateProductReceiveStock - ==> Parameters: 2(Integer), 8(Integer), 337(Integer), 9(Integer)
2019-01-31 11:04:20.294 [http-nio-8080-exec-9] DEBUG c.y.s.d.P.updateProductReceiveStock - <==    Updates: 1
2019-01-31 11:04:20.294 [http-nio-8080-exec-9] DEBUG c.y.s.d.P.insertProductReceiveInTrade - ==>  Preparing: insert into product_receive_trade(trade_date,prod_id,prod_param_id,begin_num,trade_add,end_num,oper_id)values(?,?,?,?,?,?,?) 
2019-01-31 11:04:20.295 [http-nio-8080-exec-9] DEBUG c.y.s.d.P.insertProductReceiveInTrade - ==> Parameters: 2019-01-31 11:04:10.0(Timestamp), 2(Integer), 8(Integer), 4(Integer), 333(Integer), 337(Integer), 5(Integer)
2019-01-31 11:04:20.306 [http-nio-8080-exec-9] DEBUG c.y.s.d.P.insertProductReceiveInTrade - <==    Updates: 1
2019-01-31 11:04:21.744 [http-nio-8080-exec-10] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productReceiveIn
2019-01-31 11:04:30.272 [http-nio-8080-exec-1] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productReceiveStockList
2019-01-31 11:04:30.274 [http-nio-8080-exec-1] DEBUG c.y.stock.controller.ProductReceiveStockController - 跳转到待收库存查询控制器
2019-01-31 11:04:30.281 [http-nio-8080-exec-1] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - ==>  Preparing: select count(*) from product_receive_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 
2019-01-31 11:04:30.282 [http-nio-8080-exec-1] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - ==> Parameters: 
2019-01-31 11:04:30.287 [http-nio-8080-exec-1] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - <==      Total: 1
2019-01-31 11:04:30.295 [http-nio-8080-exec-1] DEBUG c.y.s.d.P.findProductReceiveStockList - ==>  Preparing: select ps.prod_rece_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_receive_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 order by p.prod_id,pp.prod_param_id limit ?,? 
2019-01-31 11:04:30.296 [http-nio-8080-exec-1] DEBUG c.y.s.d.P.findProductReceiveStockList - ==> Parameters: 0(Integer), 5(Integer)
2019-01-31 11:04:30.300 [http-nio-8080-exec-1] DEBUG c.y.s.d.P.findProductReceiveStockList - <==      Total: 5
2019-01-31 11:04:30.303 [http-nio-8080-exec-1] DEBUG c.y.stock.controller.ProductReceiveStockController - 转到待收库存页面
2019-01-31 11:04:35.602 [http-nio-8080-exec-2] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productReceiveStockToCurrentStock
2019-01-31 11:04:35.609 [http-nio-8080-exec-2] DEBUG c.y.s.d.P.findProductReceiveStockById - ==>  Preparing: select ps.prod_rece_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_receive_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 and ps.prod_rece_stock_id=? 
2019-01-31 11:04:35.610 [http-nio-8080-exec-2] DEBUG c.y.s.d.P.findProductReceiveStockById - ==> Parameters: 9(Integer)
2019-01-31 11:04:35.612 [http-nio-8080-exec-2] DEBUG c.y.s.d.P.findProductReceiveStockById - <==      Total: 1
2019-01-31 11:04:45.593 [http-nio-8080-exec-3] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productReceiveToCurrentSave
2019-01-31 11:04:45.598 [http-nio-8080-exec-3] DEBUG c.y.s.d.P.findProductReceiveStockById - ==>  Preparing: select ps.prod_rece_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_receive_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 and ps.prod_rece_stock_id=? 
2019-01-31 11:04:45.599 [http-nio-8080-exec-3] DEBUG c.y.s.d.P.findProductReceiveStockById - ==> Parameters: 9(Integer)
2019-01-31 11:04:45.605 [http-nio-8080-exec-3] DEBUG c.y.s.d.P.findProductReceiveStockById - <==      Total: 1
2019-01-31 11:04:45.605 [http-nio-8080-exec-3] DEBUG c.y.s.d.P.insertProductReceiveOutTrade - ==>  Preparing: insert into product_receive_trade(trade_date,prod_id,prod_param_id,begin_num,trade_del,end_num,oper_id)values(?,?,?,?,?,?,?) 
2019-01-31 11:04:45.607 [http-nio-8080-exec-3] DEBUG c.y.s.d.P.insertProductReceiveOutTrade - ==> Parameters: 2019-01-31 11:04:35.0(Timestamp), 2(Integer), 8(Integer), 337(Integer), 37(Integer), 300(Integer), 5(Integer)
2019-01-31 11:04:45.609 [http-nio-8080-exec-3] DEBUG c.y.s.d.P.insertProductReceiveOutTrade - <==    Updates: 1
2019-01-31 11:04:45.609 [http-nio-8080-exec-3] DEBUG c.y.s.d.P.findProductStockByProdIdAndProdParamId - ==>  Preparing: select ps.prod_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 and p.prod_id=? and pp.prod_param_Id=? 
2019-01-31 11:04:45.610 [http-nio-8080-exec-3] DEBUG c.y.s.d.P.findProductStockByProdIdAndProdParamId - ==> Parameters: 2(Integer), 8(Integer)
2019-01-31 11:04:45.614 [http-nio-8080-exec-3] DEBUG c.y.s.d.P.findProductStockByProdIdAndProdParamId - <==      Total: 1
2019-01-31 11:04:45.615 [http-nio-8080-exec-3] DEBUG c.yun.stock.dao.ProductStockDao.updateProductStock - ==>  Preparing: update product_stock set prod_id=?,prod_param_id=?,stock_num=? where prod_stock_id=? 
2019-01-31 11:04:45.616 [http-nio-8080-exec-3] DEBUG c.yun.stock.dao.ProductStockDao.updateProductStock - ==> Parameters: 2(Integer), 8(Integer), 43(Integer), 9(Integer)
2019-01-31 11:04:45.618 [http-nio-8080-exec-3] DEBUG c.yun.stock.dao.ProductStockDao.updateProductStock - <==    Updates: 1
2019-01-31 11:04:45.619 [http-nio-8080-exec-3] DEBUG c.y.stock.dao.ProductTradeDao.insertProductInTrade - ==>  Preparing: insert into product_trade(trade_date,prod_id,prod_param_id,begin_num,trade_add,end_num,oper_id)values(?,?,?,?,?,?,?) 
2019-01-31 11:04:45.619 [http-nio-8080-exec-3] DEBUG c.y.stock.dao.ProductTradeDao.insertProductInTrade - ==> Parameters: 2019-01-31 11:04:35.0(Timestamp), 2(Integer), 8(Integer), 6(Integer), 37(Integer), 43(Integer), 5(Integer)
2019-01-31 11:04:45.621 [http-nio-8080-exec-3] DEBUG c.y.stock.dao.ProductTradeDao.insertProductInTrade - <==    Updates: 1
2019-01-31 11:04:45.621 [http-nio-8080-exec-3] DEBUG c.y.s.d.P.updateProductReceiveStock - ==>  Preparing: update product_receive_stock set prod_id=?,prod_param_id=?,stock_num=? where prod_rece_stock_id=? 
2019-01-31 11:04:45.621 [http-nio-8080-exec-3] DEBUG c.y.s.d.P.updateProductReceiveStock - ==> Parameters: 2(Integer), 8(Integer), 300(Integer), 9(Integer)
2019-01-31 11:04:45.623 [http-nio-8080-exec-3] DEBUG c.y.s.d.P.updateProductReceiveStock - <==    Updates: 1
2019-01-31 11:04:45.878 [http-nio-8080-exec-3] DEBUG c.y.stock.controller.ProductReceiveTradeController - java.lang.ArithmeticException: / by zero
2019-01-31 11:04:49.006 [http-nio-8080-exec-4] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productReceiveStockList
2019-01-31 11:04:49.008 [http-nio-8080-exec-4] DEBUG c.y.stock.controller.ProductReceiveStockController - 跳转到待收库存查询控制器
2019-01-31 11:04:49.013 [http-nio-8080-exec-4] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - ==>  Preparing: select count(*) from product_receive_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 
2019-01-31 11:04:49.013 [http-nio-8080-exec-4] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - ==> Parameters: 
2019-01-31 11:04:49.015 [http-nio-8080-exec-4] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - <==      Total: 1
2019-01-31 11:04:49.018 [http-nio-8080-exec-4] DEBUG c.y.s.d.P.findProductReceiveStockList - ==>  Preparing: select ps.prod_rece_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_receive_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 order by p.prod_id,pp.prod_param_id limit ?,? 
2019-01-31 11:04:49.019 [http-nio-8080-exec-4] DEBUG c.y.s.d.P.findProductReceiveStockList - ==> Parameters: 0(Integer), 5(Integer)
2019-01-31 11:04:49.028 [http-nio-8080-exec-4] DEBUG c.y.s.d.P.findProductReceiveStockList - <==      Total: 5
2019-01-31 11:04:49.030 [http-nio-8080-exec-4] DEBUG c.y.stock.controller.ProductReceiveStockController - 转到待收库存页面
2019-01-31 11:07:15.859 [main] INFO  com.yun.YunEbStockApplication - Starting YunEbStockApplication on USER-20181202BJ with PID 4852 (E:\workspace\yun-eb-stock\target\classes started by Administrator in E:\workspace\yun-eb-stock)
2019-01-31 11:07:15.864 [main] DEBUG com.yun.YunEbStockApplication - Running with Spring Boot v1.5.9.RELEASE, Spring v4.3.13.RELEASE
2019-01-31 11:07:15.864 [main] INFO  com.yun.YunEbStockApplication - No active profile set, falling back to default profiles: default
2019-01-31 11:07:16.120 [background-preinit] INFO  org.hibernate.validator.internal.util.Version - HV000001: Hibernate Validator 5.3.6.Final
2019-01-31 11:07:16.301 [main] INFO  o.s.b.c.e.AnnotationConfigEmbeddedWebApplicationContext - Refreshing org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@6a28ffa4: startup date [Thu Jan 31 11:07:16 CST 2019]; root of context hierarchy
2019-01-31 11:07:17.895 [main] INFO  o.s.b.c.e.tomcat.TomcatEmbeddedServletContainer - Tomcat initialized with port(s): 8080 (http)
2019-01-31 11:07:17.905 [main] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2019-01-31 11:07:17.906 [main] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet Engine: Apache Tomcat/8.5.23
2019-01-31 11:07:18.008 [localhost-startStop-1] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2019-01-31 11:07:18.008 [localhost-startStop-1] INFO  org.springframework.web.context.ContextLoader - Root WebApplicationContext: initialization completed in 1707 ms
2019-01-31 11:07:18.176 [localhost-startStop-1] INFO  o.s.boot.web.servlet.FilterRegistrationBean - Mapping filter: 'characterEncodingFilter' to: [/*]
2019-01-31 11:07:18.177 [localhost-startStop-1] INFO  o.s.boot.web.servlet.FilterRegistrationBean - Mapping filter: 'hiddenHttpMethodFilter' to: [/*]
2019-01-31 11:07:18.177 [localhost-startStop-1] INFO  o.s.boot.web.servlet.FilterRegistrationBean - Mapping filter: 'httpPutFormContentFilter' to: [/*]
2019-01-31 11:07:18.177 [localhost-startStop-1] INFO  o.s.boot.web.servlet.FilterRegistrationBean - Mapping filter: 'requestContextFilter' to: [/*]
2019-01-31 11:07:18.177 [localhost-startStop-1] INFO  o.s.boot.web.servlet.FilterRegistrationBean - Mapping filter: 'loginFilter' to urls: [/*]
2019-01-31 11:07:18.178 [localhost-startStop-1] INFO  o.s.boot.web.servlet.ServletRegistrationBean - Mapping servlet: 'dispatcherServlet' to [/]
2019-01-31 11:07:19.076 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerAdapter - Looking for @ControllerAdvice: org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@6a28ffa4: startup date [Thu Jan 31 11:07:16 CST 2019]; root of context hierarchy
2019-01-31 11:07:19.132 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productPreAdd]}" onto public java.lang.String com.yun.product.controller.ProductController.productPreAdd()
2019-01-31 11:07:19.134 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productList]}" onto public java.lang.String com.yun.product.controller.ProductController.productList(org.springframework.ui.Model,java.lang.String,java.lang.String,java.lang.String,java.lang.String)
2019-01-31 11:07:19.136 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productSave]}" onto public java.lang.String com.yun.product.controller.ProductController.productSave(com.yun.product.model.Product)
2019-01-31 11:07:19.136 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productDelete]}" onto public java.lang.String com.yun.product.controller.ProductController.productDelete(int)
2019-01-31 11:07:19.136 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productPreUpdate]}" onto public java.lang.String com.yun.product.controller.ProductController.productPreUpdate(int,org.springframework.ui.Model)
2019-01-31 11:07:19.136 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productUpdate]}" onto public java.lang.String com.yun.product.controller.ProductController.productUpdate(com.yun.product.model.Product)
2019-01-31 11:07:19.136 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productListForAutoComplete]}" onto public java.util.List<com.yun.product.model.Product> com.yun.product.controller.ProductController.productListForAutoComplete(java.lang.String)
2019-01-31 11:07:19.137 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productListForStock]}" onto public java.util.List<com.yun.product.model.Product> com.yun.product.controller.ProductController.productListForStock()
2019-01-31 11:07:19.137 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productListForTrade]}" onto public java.util.List<com.yun.product.model.Product> com.yun.product.controller.ProductController.productListForTrade(java.lang.String)
2019-01-31 11:07:19.138 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/prodParamDelete]}" onto public java.lang.String com.yun.product.controller.ProductParamController.prodParamDelete(int)
2019-01-31 11:07:19.138 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/prodParamPreAdd]}" onto public java.lang.String com.yun.product.controller.ProductParamController.prodParamPreAdd(int,org.springframework.ui.Model)
2019-01-31 11:07:19.139 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/prodParamSave]}" onto public java.lang.String com.yun.product.controller.ProductParamController.prodParamSave(com.yun.product.model.ProductParameter)
2019-01-31 11:07:19.139 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/prodParamList]}" onto public java.lang.String com.yun.product.controller.ProductParamController.prodParamList(int)
2019-01-31 11:07:19.141 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeList]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeList(org.springframework.ui.Model)
2019-01-31 11:07:19.142 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeTree]}" onto public java.util.List<com.yun.product.model.ProductType> com.yun.product.controller.ProductTypeController.productTypeTree()
2019-01-31 11:07:19.142 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeEdit]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeEdit()
2019-01-31 11:07:19.142 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeSave]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeSave(com.yun.product.model.ProductType)
2019-01-31 11:07:19.143 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeUpdate]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeUpdate(java.lang.Integer,org.springframework.ui.Model)
2019-01-31 11:07:19.143 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeUpdateSave]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeUpdateSave(com.yun.product.model.ProductType)
2019-01-31 11:07:19.143 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeDelete]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeDelete(java.lang.Integer,javax.servlet.http.HttpServletResponse) throws java.io.IOException
2019-01-31 11:07:19.144 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveStockList]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveStockController.productReceiveStocklist(java.lang.String,java.lang.String,org.springframework.ui.Model)
2019-01-31 11:07:19.144 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveStockPreAdd]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveStockController.productReceiveStockPreAdd()
2019-01-31 11:07:19.144 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveStockSave]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveStockController.productReceiveStockSave(com.yun.stock.model.ProductReceiveStock)
2019-01-31 11:07:19.144 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveStockDelete]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveStockController.productReceiveStockDelete(int)
2019-01-31 11:07:19.145 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveStockPreUpdate]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveStockController.productReceiveStockPreUpdate(int,org.springframework.ui.Model)
2019-01-31 11:07:19.145 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveStockUpdate]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveStockController.productReceiveStockUpdate(com.yun.stock.model.ProductReceiveStock)
2019-01-31 11:07:19.146 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveInSave]}" onto public void com.yun.stock.controller.ProductReceiveTradeController.receiveInSave(com.yun.stock.model.ProductReceiveTrade,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse) throws java.io.IOException
2019-01-31 11:07:19.146 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveIn]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveTradeController.receiveIn(org.springframework.ui.Model)
2019-01-31 11:07:19.146 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveReject]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveTradeController.receiveReject(org.springframework.ui.Model)
2019-01-31 11:07:19.146 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveStockToCurrentStock]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveTradeController.productReceiveStockToCurrentStock(int,org.springframework.ui.Model)
2019-01-31 11:07:19.147 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveRejectSave]}" onto public void com.yun.stock.controller.ProductReceiveTradeController.receiveRejectSave(com.yun.stock.model.ProductReceiveTrade,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse) throws java.io.IOException
2019-01-31 11:07:19.147 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveToCurrentSave]}" onto public void com.yun.stock.controller.ProductReceiveTradeController.productReceiveToCurrentSave(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse) throws java.lang.Exception
2019-01-31 11:07:19.148 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockSave]}" onto public java.lang.String com.yun.stock.controller.ProductStockController.productStockSave(com.yun.stock.model.ProductStock)
2019-01-31 11:07:19.148 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockList]}" onto public java.lang.String com.yun.stock.controller.ProductStockController.productStocklist(java.lang.String,java.lang.String,org.springframework.ui.Model)
2019-01-31 11:07:19.148 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockPreAdd]}" onto public java.lang.String com.yun.stock.controller.ProductStockController.productStockPreAdd()
2019-01-31 11:07:19.148 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockDelete]}" onto public java.lang.String com.yun.stock.controller.ProductStockController.productStockDelete(int)
2019-01-31 11:07:19.149 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockPreUpdate]}" onto public java.lang.String com.yun.stock.controller.ProductStockController.productStockPreUpdate(int,org.springframework.ui.Model)
2019-01-31 11:07:19.149 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockUpdate]}" onto public java.lang.String com.yun.stock.controller.ProductStockController.productStockUpdate(com.yun.stock.model.ProductStock)
2019-01-31 11:07:19.149 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/main]}" onto public java.lang.String com.yun.user.controller.MainController.main()
2019-01-31 11:07:19.150 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/userList]}" onto public java.lang.String com.yun.user.controller.UserController.userList(org.springframework.ui.Model)
2019-01-31 11:07:19.150 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/login]}" onto public void com.yun.user.controller.UserController.login(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse) throws java.io.IOException
2019-01-31 11:07:19.150 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/userEdit]}" onto public java.lang.String com.yun.user.controller.UserController.userEdit()
2019-01-31 11:07:19.150 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/deleteUserInfo]}" onto public java.lang.String com.yun.user.controller.UserController.userDelete(int)
2019-01-31 11:07:19.151 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/userSave]}" onto public java.lang.String com.yun.user.controller.UserController.userSave(com.yun.user.model.UserInfo)
2019-01-31 11:07:19.153 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/error]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> org.springframework.boot.autoconfigure.web.BasicErrorController.error(javax.servlet.http.HttpServletRequest)
2019-01-31 11:07:19.154 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/error],produces=[text/html]}" onto public org.springframework.web.servlet.ModelAndView org.springframework.boot.autoconfigure.web.BasicErrorController.errorHtml(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
2019-01-31 11:07:19.186 [main] INFO  o.s.web.servlet.handler.SimpleUrlHandlerMapping - Mapped URL path [/webjars/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-01-31 11:07:19.186 [main] INFO  o.s.web.servlet.handler.SimpleUrlHandlerMapping - Mapped URL path [/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-01-31 11:07:19.227 [main] INFO  o.s.web.servlet.handler.SimpleUrlHandlerMapping - Mapped URL path [/**/favicon.ico] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-01-31 11:07:19.549 [main] INFO  o.s.b.a.w.WebMvcAutoConfiguration$WelcomePageHandlerMapping - Adding welcome page: class path resource [static/index.html]
2019-01-31 11:07:19.817 [main] INFO  o.s.jmx.export.annotation.AnnotationMBeanExporter - Registering beans for JMX exposure on startup
2019-01-31 11:07:19.837 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2019-01-31 11:07:19.847 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2019-01-31 11:07:19.859 [main] INFO  org.apache.tomcat.util.net.NioSelectorPool - Using a shared selector for servlet write/read
2019-01-31 11:07:20.026 [main] INFO  o.s.b.c.e.tomcat.TomcatEmbeddedServletContainer - Tomcat started on port(s): 8080 (http)
2019-01-31 11:07:20.030 [main] INFO  com.yun.YunEbStockApplication - Started YunEbStockApplication in 4.696 seconds (JVM running for 5.955)
2019-01-31 11:07:26.271 [http-nio-8080-exec-1] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring FrameworkServlet 'dispatcherServlet'
2019-01-31 11:07:26.272 [http-nio-8080-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - FrameworkServlet 'dispatcherServlet': initialization started
2019-01-31 11:07:26.289 [http-nio-8080-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - FrameworkServlet 'dispatcherServlet': initialization completed in 17 ms
2019-01-31 11:07:26.301 [http-nio-8080-exec-1] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productReceiveStockList
2019-01-31 11:07:30.206 [http-nio-8080-exec-2] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/login
2019-01-31 11:07:30.534 [http-nio-8080-exec-2] DEBUG c.y.user.dao.UserInfoDao.findUserInfoByNameAndPass - ==>  Preparing: select * from user_info where login_name=? and login_pass=? 
2019-01-31 11:07:30.553 [http-nio-8080-exec-2] DEBUG c.y.user.dao.UserInfoDao.findUserInfoByNameAndPass - ==> Parameters: admin(String), 123(String)
2019-01-31 11:07:30.565 [http-nio-8080-exec-2] DEBUG c.y.user.dao.UserInfoDao.findUserInfoByNameAndPass - <==      Total: 1
2019-01-31 11:07:30.575 [http-nio-8080-exec-3] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/main
2019-01-31 11:07:33.271 [http-nio-8080-exec-4] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productReceiveStockList
2019-01-31 11:07:33.276 [http-nio-8080-exec-4] DEBUG c.y.stock.controller.ProductReceiveStockController - 跳转到待收库存查询控制器
2019-01-31 11:07:33.314 [http-nio-8080-exec-4] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - ==>  Preparing: select count(*) from product_receive_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 
2019-01-31 11:07:33.315 [http-nio-8080-exec-4] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - ==> Parameters: 
2019-01-31 11:07:33.316 [http-nio-8080-exec-4] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - <==      Total: 1
2019-01-31 11:07:33.327 [http-nio-8080-exec-4] DEBUG c.y.s.d.P.findProductReceiveStockList - ==>  Preparing: select ps.prod_rece_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_receive_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 order by p.prod_id,pp.prod_param_id limit ?,? 
2019-01-31 11:07:33.328 [http-nio-8080-exec-4] DEBUG c.y.s.d.P.findProductReceiveStockList - ==> Parameters: 0(Integer), 5(Integer)
2019-01-31 11:07:33.332 [http-nio-8080-exec-4] DEBUG c.y.s.d.P.findProductReceiveStockList - <==      Total: 5
2019-01-31 11:07:33.334 [http-nio-8080-exec-4] DEBUG c.y.stock.controller.ProductReceiveStockController - 转到待收库存页面
2019-01-31 11:07:43.661 [http-nio-8080-exec-5] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productReceiveStockList
2019-01-31 11:07:43.666 [http-nio-8080-exec-5] DEBUG c.y.stock.controller.ProductReceiveStockController - 跳转到待收库存查询控制器
2019-01-31 11:07:43.672 [http-nio-8080-exec-5] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - ==>  Preparing: select count(*) from product_receive_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 
2019-01-31 11:07:43.673 [http-nio-8080-exec-5] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - ==> Parameters: 
2019-01-31 11:07:43.674 [http-nio-8080-exec-5] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - <==      Total: 1
2019-01-31 11:07:43.679 [http-nio-8080-exec-5] DEBUG c.y.s.d.P.findProductReceiveStockList - ==>  Preparing: select ps.prod_rece_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_receive_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 order by p.prod_id,pp.prod_param_id limit ?,? 
2019-01-31 11:07:43.681 [http-nio-8080-exec-5] DEBUG c.y.s.d.P.findProductReceiveStockList - ==> Parameters: 0(Integer), 5(Integer)
2019-01-31 11:07:43.686 [http-nio-8080-exec-5] DEBUG c.y.s.d.P.findProductReceiveStockList - <==      Total: 5
2019-01-31 11:07:43.690 [http-nio-8080-exec-5] DEBUG c.y.stock.controller.ProductReceiveStockController - 转到待收库存页面
2019-01-31 11:08:05.854 [http-nio-8080-exec-6] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productStockList
2019-01-31 11:08:05.859 [http-nio-8080-exec-6] DEBUG com.yun.stock.controller.ProductStockController - 跳转到物品库存查询控制器
2019-01-31 11:08:05.866 [http-nio-8080-exec-6] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==>  Preparing: select count(*) from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 
2019-01-31 11:08:05.866 [http-nio-8080-exec-6] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==> Parameters: 
2019-01-31 11:08:05.871 [http-nio-8080-exec-6] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - <==      Total: 1
2019-01-31 11:08:05.875 [http-nio-8080-exec-6] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==>  Preparing: select ps.prod_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 order by p.prod_id,pp.prod_param_id limit ?,? 
2019-01-31 11:08:05.876 [http-nio-8080-exec-6] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==> Parameters: 0(Integer), 5(Integer)
2019-01-31 11:08:05.878 [http-nio-8080-exec-6] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - <==      Total: 2
2019-01-31 11:08:05.879 [http-nio-8080-exec-6] DEBUG com.yun.stock.controller.ProductStockController - 转到物品库存页面
2019-01-31 11:08:08.946 [http-nio-8080-exec-7] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productReceiveIn
2019-01-31 11:08:09.964 [http-nio-8080-exec-8] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productReceiveReject
2019-01-31 11:08:11.182 [http-nio-8080-exec-9] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productReceiveIn
2019-01-31 11:08:21.493 [http-nio-8080-exec-10] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productReceiveIn
2019-01-31 11:08:22.984 [http-nio-8080-exec-1] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productReceiveReject
2019-01-31 11:08:23.704 [http-nio-8080-exec-2] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productCurrentIn
2019-01-31 11:08:25.309 [http-nio-8080-exec-3] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productReceiveIn
2019-01-31 11:08:25.963 [http-nio-8080-exec-4] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productReceiveStockList
2019-01-31 11:08:25.965 [http-nio-8080-exec-4] DEBUG c.y.stock.controller.ProductReceiveStockController - 跳转到待收库存查询控制器
2019-01-31 11:08:25.971 [http-nio-8080-exec-4] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - ==>  Preparing: select count(*) from product_receive_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 
2019-01-31 11:08:25.972 [http-nio-8080-exec-4] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - ==> Parameters: 
2019-01-31 11:08:25.975 [http-nio-8080-exec-4] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - <==      Total: 1
2019-01-31 11:08:25.981 [http-nio-8080-exec-4] DEBUG c.y.s.d.P.findProductReceiveStockList - ==>  Preparing: select ps.prod_rece_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_receive_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 order by p.prod_id,pp.prod_param_id limit ?,? 
2019-01-31 11:08:25.982 [http-nio-8080-exec-4] DEBUG c.y.s.d.P.findProductReceiveStockList - ==> Parameters: 0(Integer), 5(Integer)
2019-01-31 11:08:25.990 [http-nio-8080-exec-4] DEBUG c.y.s.d.P.findProductReceiveStockList - <==      Total: 5
2019-01-31 11:08:25.993 [http-nio-8080-exec-4] DEBUG c.y.stock.controller.ProductReceiveStockController - 转到待收库存页面
2019-01-31 11:08:27.072 [http-nio-8080-exec-5] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productStockList
2019-01-31 11:08:27.074 [http-nio-8080-exec-5] DEBUG com.yun.stock.controller.ProductStockController - 跳转到物品库存查询控制器
2019-01-31 11:08:27.077 [http-nio-8080-exec-5] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==>  Preparing: select count(*) from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 
2019-01-31 11:08:27.078 [http-nio-8080-exec-5] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==> Parameters: 
2019-01-31 11:08:27.081 [http-nio-8080-exec-5] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - <==      Total: 1
2019-01-31 11:08:27.085 [http-nio-8080-exec-5] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==>  Preparing: select ps.prod_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 order by p.prod_id,pp.prod_param_id limit ?,? 
2019-01-31 11:08:27.086 [http-nio-8080-exec-5] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==> Parameters: 0(Integer), 5(Integer)
2019-01-31 11:08:27.089 [http-nio-8080-exec-5] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - <==      Total: 2
2019-01-31 11:08:27.095 [http-nio-8080-exec-5] DEBUG com.yun.stock.controller.ProductStockController - 转到物品库存页面
2019-01-31 11:08:28.229 [http-nio-8080-exec-6] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productReceiveReject
2019-01-31 11:08:29.743 [http-nio-8080-exec-7] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productListForTrade
2019-01-31 11:08:29.758 [http-nio-8080-exec-7] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 order by prod_id 
2019-01-31 11:08:29.759 [http-nio-8080-exec-7] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==> Parameters: 
2019-01-31 11:08:29.761 [http-nio-8080-exec-7] DEBUG com.yun.product.dao.ProductDao.findProductByParam - <==      Total: 4
2019-01-31 11:08:29.763 [http-nio-8080-exec-7] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-31 11:08:29.764 [http-nio-8080-exec-7] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 2(Integer)
2019-01-31 11:08:29.765 [http-nio-8080-exec-7] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-01-31 11:08:29.766 [http-nio-8080-exec-7] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-31 11:08:29.767 [http-nio-8080-exec-7] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 3(Integer)
2019-01-31 11:08:29.769 [http-nio-8080-exec-7] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-01-31 11:08:29.770 [http-nio-8080-exec-7] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-31 11:08:29.771 [http-nio-8080-exec-7] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 4(Integer)
2019-01-31 11:08:29.772 [http-nio-8080-exec-7] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 2
2019-01-31 11:08:29.773 [http-nio-8080-exec-7] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-31 11:08:29.774 [http-nio-8080-exec-7] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 5(Integer)
2019-01-31 11:08:29.775 [http-nio-8080-exec-7] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 2
2019-01-31 11:08:32.849 [http-nio-8080-exec-8] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/prodParamList
2019-01-31 11:08:32.855 [http-nio-8080-exec-8] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-31 11:08:32.856 [http-nio-8080-exec-8] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 2(Integer)
2019-01-31 11:08:32.857 [http-nio-8080-exec-8] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-01-31 11:08:37.541 [http-nio-8080-exec-9] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productReceiveRejectSave
2019-01-31 11:08:37.565 [http-nio-8080-exec-9] DEBUG c.y.s.d.P.findProductReceiveStockRecordByProdIdAndProdParamId - ==>  Preparing: select * from product_receive_stock where 1=1 and prod_id=? and prod_param_id=? 
2019-01-31 11:08:37.566 [http-nio-8080-exec-9] DEBUG c.y.s.d.P.findProductReceiveStockRecordByProdIdAndProdParamId - ==> Parameters: 2(Integer), 8(Integer)
2019-01-31 11:08:37.571 [http-nio-8080-exec-9] DEBUG c.y.s.d.P.findProductReceiveStockRecordByProdIdAndProdParamId - <==      Total: 1
2019-01-31 11:08:37.572 [http-nio-8080-exec-9] DEBUG c.y.s.d.P.findProductReceiveStockNumByProdIdAndProdParamId - ==>  Preparing: select stock_num from product_receive_stock where 1=1 and prod_id=? and prod_param_id=? 
2019-01-31 11:08:37.575 [http-nio-8080-exec-9] DEBUG c.y.s.d.P.findProductReceiveStockNumByProdIdAndProdParamId - ==> Parameters: 2(Integer), 8(Integer)
2019-01-31 11:08:37.577 [http-nio-8080-exec-9] DEBUG c.y.s.d.P.findProductReceiveStockNumByProdIdAndProdParamId - <==      Total: 1
2019-01-31 11:08:37.578 [http-nio-8080-exec-9] DEBUG c.y.s.d.P.updateProductReceiveStock - ==>  Preparing: update product_receive_stock set prod_id=?,prod_param_id=?,stock_num=? where prod_rece_stock_id=? 
2019-01-31 11:08:37.579 [http-nio-8080-exec-9] DEBUG c.y.s.d.P.updateProductReceiveStock - ==> Parameters: 2(Integer), 8(Integer), 37(Integer), 9(Integer)
2019-01-31 11:08:37.580 [http-nio-8080-exec-9] DEBUG c.y.s.d.P.updateProductReceiveStock - <==    Updates: 1
2019-01-31 11:08:37.583 [http-nio-8080-exec-9] DEBUG c.y.s.d.P.insertProductReceiveOutTrade - ==>  Preparing: insert into product_receive_trade(trade_date,prod_id,prod_param_id,begin_num,trade_del,end_num,oper_id)values(?,?,?,?,?,?,?) 
2019-01-31 11:08:37.585 [http-nio-8080-exec-9] DEBUG c.y.s.d.P.insertProductReceiveOutTrade - ==> Parameters: 2019-01-31 11:08:28.0(Timestamp), 2(Integer), 8(Integer), 337(Integer), 300(Integer), 37(Integer), 5(Integer)
2019-01-31 11:08:37.610 [http-nio-8080-exec-9] DEBUG c.y.s.d.P.insertProductReceiveOutTrade - <==    Updates: 1
2019-01-31 11:08:37.669 [http-nio-8080-exec-9] DEBUG c.y.stock.controller.ProductReceiveTradeController - result:待收库存退货登记300个物品完成，目前库存数量37个
2019-01-31 11:08:39.358 [http-nio-8080-exec-10] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productReceiveReject
2019-01-31 11:08:41.188 [http-nio-8080-exec-1] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productReceiveReject
2019-01-31 16:13:35.968 [main] INFO  com.yun.YunEbStockApplication - Starting YunEbStockApplication on USER-20181202BJ with PID 2564 (E:\workspace\yun-eb-stock\target\classes started by Administrator in E:\workspace\yun-eb-stock)
2019-01-31 16:13:35.972 [main] DEBUG com.yun.YunEbStockApplication - Running with Spring Boot v1.5.9.RELEASE, Spring v4.3.13.RELEASE
2019-01-31 16:13:35.973 [main] INFO  com.yun.YunEbStockApplication - No active profile set, falling back to default profiles: default
2019-01-31 16:13:36.476 [main] INFO  o.s.b.c.e.AnnotationConfigEmbeddedWebApplicationContext - Refreshing org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@6a28ffa4: startup date [Thu Jan 31 16:13:36 CST 2019]; root of context hierarchy
2019-01-31 16:13:36.517 [background-preinit] INFO  org.hibernate.validator.internal.util.Version - HV000001: Hibernate Validator 5.3.6.Final
2019-01-31 16:13:38.083 [main] INFO  o.s.b.c.e.tomcat.TomcatEmbeddedServletContainer - Tomcat initialized with port(s): 8080 (http)
2019-01-31 16:13:38.093 [main] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2019-01-31 16:13:38.094 [main] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet Engine: Apache Tomcat/8.5.23
2019-01-31 16:13:38.196 [localhost-startStop-1] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2019-01-31 16:13:38.196 [localhost-startStop-1] INFO  org.springframework.web.context.ContextLoader - Root WebApplicationContext: initialization completed in 1720 ms
2019-01-31 16:13:38.351 [localhost-startStop-1] INFO  o.s.boot.web.servlet.FilterRegistrationBean - Mapping filter: 'characterEncodingFilter' to: [/*]
2019-01-31 16:13:38.352 [localhost-startStop-1] INFO  o.s.boot.web.servlet.FilterRegistrationBean - Mapping filter: 'hiddenHttpMethodFilter' to: [/*]
2019-01-31 16:13:38.352 [localhost-startStop-1] INFO  o.s.boot.web.servlet.FilterRegistrationBean - Mapping filter: 'httpPutFormContentFilter' to: [/*]
2019-01-31 16:13:38.352 [localhost-startStop-1] INFO  o.s.boot.web.servlet.FilterRegistrationBean - Mapping filter: 'requestContextFilter' to: [/*]
2019-01-31 16:13:38.353 [localhost-startStop-1] INFO  o.s.boot.web.servlet.FilterRegistrationBean - Mapping filter: 'loginFilter' to urls: [/*]
2019-01-31 16:13:38.353 [localhost-startStop-1] INFO  o.s.boot.web.servlet.ServletRegistrationBean - Mapping servlet: 'dispatcherServlet' to [/]
2019-01-31 16:13:39.167 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerAdapter - Looking for @ControllerAdvice: org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@6a28ffa4: startup date [Thu Jan 31 16:13:36 CST 2019]; root of context hierarchy
2019-01-31 16:13:39.225 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productPreAdd]}" onto public java.lang.String com.yun.product.controller.ProductController.productPreAdd()
2019-01-31 16:13:39.227 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productList]}" onto public java.lang.String com.yun.product.controller.ProductController.productList(org.springframework.ui.Model,java.lang.String,java.lang.String,java.lang.String,java.lang.String)
2019-01-31 16:13:39.227 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productSave]}" onto public java.lang.String com.yun.product.controller.ProductController.productSave(com.yun.product.model.Product)
2019-01-31 16:13:39.228 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productDelete]}" onto public java.lang.String com.yun.product.controller.ProductController.productDelete(int)
2019-01-31 16:13:39.228 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productPreUpdate]}" onto public java.lang.String com.yun.product.controller.ProductController.productPreUpdate(int,org.springframework.ui.Model)
2019-01-31 16:13:39.228 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productUpdate]}" onto public java.lang.String com.yun.product.controller.ProductController.productUpdate(com.yun.product.model.Product)
2019-01-31 16:13:39.228 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productListForAutoComplete]}" onto public java.util.List<com.yun.product.model.Product> com.yun.product.controller.ProductController.productListForAutoComplete(java.lang.String)
2019-01-31 16:13:39.229 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productListForStock]}" onto public java.util.List<com.yun.product.model.Product> com.yun.product.controller.ProductController.productListForStock()
2019-01-31 16:13:39.229 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productListForTrade]}" onto public java.util.List<com.yun.product.model.Product> com.yun.product.controller.ProductController.productListForTrade(java.lang.String)
2019-01-31 16:13:39.230 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/prodParamDelete]}" onto public java.lang.String com.yun.product.controller.ProductParamController.prodParamDelete(int)
2019-01-31 16:13:39.230 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/prodParamPreAdd]}" onto public java.lang.String com.yun.product.controller.ProductParamController.prodParamPreAdd(int,org.springframework.ui.Model)
2019-01-31 16:13:39.230 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/prodParamSave]}" onto public java.lang.String com.yun.product.controller.ProductParamController.prodParamSave(com.yun.product.model.ProductParameter)
2019-01-31 16:13:39.230 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/prodParamList]}" onto public java.lang.String com.yun.product.controller.ProductParamController.prodParamList(int)
2019-01-31 16:13:39.233 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeList]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeList(org.springframework.ui.Model)
2019-01-31 16:13:39.233 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeTree]}" onto public java.util.List<com.yun.product.model.ProductType> com.yun.product.controller.ProductTypeController.productTypeTree()
2019-01-31 16:13:39.234 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeEdit]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeEdit()
2019-01-31 16:13:39.234 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeSave]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeSave(com.yun.product.model.ProductType)
2019-01-31 16:13:39.234 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeUpdate]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeUpdate(java.lang.Integer,org.springframework.ui.Model)
2019-01-31 16:13:39.234 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeUpdateSave]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeUpdateSave(com.yun.product.model.ProductType)
2019-01-31 16:13:39.235 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeDelete]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeDelete(java.lang.Integer,javax.servlet.http.HttpServletResponse) throws java.io.IOException
2019-01-31 16:13:39.236 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveStockList]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveStockController.productReceiveStocklist(java.lang.String,java.lang.String,org.springframework.ui.Model)
2019-01-31 16:13:39.236 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveStockPreAdd]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveStockController.productReceiveStockPreAdd()
2019-01-31 16:13:39.236 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveStockSave]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveStockController.productReceiveStockSave(com.yun.stock.model.ProductReceiveStock)
2019-01-31 16:13:39.236 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveStockDelete]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveStockController.productReceiveStockDelete(int)
2019-01-31 16:13:39.236 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveStockPreUpdate]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveStockController.productReceiveStockPreUpdate(int,org.springframework.ui.Model)
2019-01-31 16:13:39.237 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveStockUpdate]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveStockController.productReceiveStockUpdate(com.yun.stock.model.ProductReceiveStock)
2019-01-31 16:13:39.237 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveInSave]}" onto public void com.yun.stock.controller.ProductReceiveTradeController.receiveInSave(com.yun.stock.model.ProductReceiveTrade,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse) throws java.io.IOException
2019-01-31 16:13:39.238 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveIn]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveTradeController.receiveIn(org.springframework.ui.Model)
2019-01-31 16:13:39.238 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveReject]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveTradeController.receiveReject(org.springframework.ui.Model)
2019-01-31 16:13:39.238 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveRejectSave]}" onto public void com.yun.stock.controller.ProductReceiveTradeController.receiveRejectSave(com.yun.stock.model.ProductReceiveTrade,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse) throws java.io.IOException
2019-01-31 16:13:39.239 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveToCurrentSave]}" onto public void com.yun.stock.controller.ProductReceiveTradeController.productReceiveToCurrentSave(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse) throws java.lang.Exception
2019-01-31 16:13:39.239 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveStockToCurrentStock]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveTradeController.productReceiveStockToCurrentStock(int,org.springframework.ui.Model)
2019-01-31 16:13:39.240 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockPreAdd]}" onto public java.lang.String com.yun.stock.controller.ProductStockController.productStockPreAdd()
2019-01-31 16:13:39.240 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockDelete]}" onto public java.lang.String com.yun.stock.controller.ProductStockController.productStockDelete(int)
2019-01-31 16:13:39.240 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockPreUpdate]}" onto public java.lang.String com.yun.stock.controller.ProductStockController.productStockPreUpdate(int,org.springframework.ui.Model)
2019-01-31 16:13:39.240 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockUpdate]}" onto public java.lang.String com.yun.stock.controller.ProductStockController.productStockUpdate(com.yun.stock.model.ProductStock)
2019-01-31 16:13:39.240 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockSave]}" onto public java.lang.String com.yun.stock.controller.ProductStockController.productStockSave(com.yun.stock.model.ProductStock)
2019-01-31 16:13:39.241 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockList]}" onto public java.lang.String com.yun.stock.controller.ProductStockController.productStocklist(java.lang.String,java.lang.String,org.springframework.ui.Model)
2019-01-31 16:13:39.241 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productCurrentOut]}" onto public java.lang.String com.yun.stock.controller.ProductTradeController.receiveReject(org.springframework.ui.Model)
2019-01-31 16:13:39.241 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productCurrentInSave]}" onto public void com.yun.stock.controller.ProductTradeController.productCurrentInSave(com.yun.stock.model.ProductTrade,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse) throws java.io.IOException
2019-01-31 16:13:39.242 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productCurrentOutSave]}" onto public void com.yun.stock.controller.ProductTradeController.productCurrentOutSave(com.yun.stock.model.ProductTrade,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse) throws java.io.IOException
2019-01-31 16:13:39.242 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productCurrentIn]}" onto public java.lang.String com.yun.stock.controller.ProductTradeController.productCurrentIn(org.springframework.ui.Model)
2019-01-31 16:13:39.242 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/main]}" onto public java.lang.String com.yun.user.controller.MainController.main()
2019-01-31 16:13:39.243 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/userList]}" onto public java.lang.String com.yun.user.controller.UserController.userList(org.springframework.ui.Model)
2019-01-31 16:13:39.244 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/login]}" onto public void com.yun.user.controller.UserController.login(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse) throws java.io.IOException
2019-01-31 16:13:39.244 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/deleteUserInfo]}" onto public java.lang.String com.yun.user.controller.UserController.userDelete(int)
2019-01-31 16:13:39.244 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/userSave]}" onto public java.lang.String com.yun.user.controller.UserController.userSave(com.yun.user.model.UserInfo)
2019-01-31 16:13:39.244 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/userEdit]}" onto public java.lang.String com.yun.user.controller.UserController.userEdit()
2019-01-31 16:13:39.247 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/error]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> org.springframework.boot.autoconfigure.web.BasicErrorController.error(javax.servlet.http.HttpServletRequest)
2019-01-31 16:13:39.248 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/error],produces=[text/html]}" onto public org.springframework.web.servlet.ModelAndView org.springframework.boot.autoconfigure.web.BasicErrorController.errorHtml(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
2019-01-31 16:13:39.279 [main] INFO  o.s.web.servlet.handler.SimpleUrlHandlerMapping - Mapped URL path [/webjars/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-01-31 16:13:39.280 [main] INFO  o.s.web.servlet.handler.SimpleUrlHandlerMapping - Mapped URL path [/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-01-31 16:13:39.321 [main] INFO  o.s.web.servlet.handler.SimpleUrlHandlerMapping - Mapped URL path [/**/favicon.ico] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-01-31 16:13:39.680 [main] INFO  o.s.b.a.w.WebMvcAutoConfiguration$WelcomePageHandlerMapping - Adding welcome page: class path resource [static/index.html]
2019-01-31 16:13:39.977 [main] INFO  o.s.jmx.export.annotation.AnnotationMBeanExporter - Registering beans for JMX exposure on startup
2019-01-31 16:13:40.000 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2019-01-31 16:13:40.013 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2019-01-31 16:13:40.028 [main] INFO  org.apache.tomcat.util.net.NioSelectorPool - Using a shared selector for servlet write/read
2019-01-31 16:13:40.219 [main] INFO  o.s.b.c.e.tomcat.TomcatEmbeddedServletContainer - Tomcat started on port(s): 8080 (http)
2019-01-31 16:13:40.226 [main] INFO  com.yun.YunEbStockApplication - Started YunEbStockApplication in 4.664 seconds (JVM running for 5.824)
2019-01-31 16:13:48.682 [http-nio-8080-exec-1] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring FrameworkServlet 'dispatcherServlet'
2019-01-31 16:13:48.683 [http-nio-8080-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - FrameworkServlet 'dispatcherServlet': initialization started
2019-01-31 16:13:48.702 [http-nio-8080-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - FrameworkServlet 'dispatcherServlet': initialization completed in 19 ms
2019-01-31 16:13:48.712 [http-nio-8080-exec-1] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/main
2019-01-31 16:13:49.947 [http-nio-8080-exec-2] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/index.html
2019-01-31 16:13:55.009 [http-nio-8080-exec-3] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/login
2019-01-31 16:13:55.328 [http-nio-8080-exec-3] DEBUG c.y.user.dao.UserInfoDao.findUserInfoByNameAndPass - ==>  Preparing: select * from user_info where login_name=? and login_pass=? 
2019-01-31 16:13:55.348 [http-nio-8080-exec-3] DEBUG c.y.user.dao.UserInfoDao.findUserInfoByNameAndPass - ==> Parameters: admin(String), 123(String)
2019-01-31 16:13:55.359 [http-nio-8080-exec-3] DEBUG c.y.user.dao.UserInfoDao.findUserInfoByNameAndPass - <==      Total: 1
2019-01-31 16:13:55.368 [http-nio-8080-exec-4] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/main
2019-01-31 16:13:58.161 [http-nio-8080-exec-5] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productReceiveStockList
2019-01-31 16:13:58.167 [http-nio-8080-exec-5] DEBUG c.y.stock.controller.ProductReceiveStockController - 跳转到待收库存查询控制器
2019-01-31 16:13:58.210 [http-nio-8080-exec-5] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - ==>  Preparing: select count(*) from product_receive_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 
2019-01-31 16:13:58.211 [http-nio-8080-exec-5] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - ==> Parameters: 
2019-01-31 16:13:58.212 [http-nio-8080-exec-5] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - <==      Total: 1
2019-01-31 16:13:58.221 [http-nio-8080-exec-5] DEBUG c.y.s.d.P.findProductReceiveStockList - ==>  Preparing: select ps.prod_rece_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_receive_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 order by p.prod_id,pp.prod_param_id limit ?,? 
2019-01-31 16:13:58.222 [http-nio-8080-exec-5] DEBUG c.y.s.d.P.findProductReceiveStockList - ==> Parameters: 0(Integer), 5(Integer)
2019-01-31 16:13:58.226 [http-nio-8080-exec-5] DEBUG c.y.s.d.P.findProductReceiveStockList - <==      Total: 5
2019-01-31 16:13:58.227 [http-nio-8080-exec-5] DEBUG c.y.stock.controller.ProductReceiveStockController - 转到待收库存页面
2019-01-31 16:14:00.218 [http-nio-8080-exec-7] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productCurrentIn
2019-01-31 16:14:03.016 [http-nio-8080-exec-8] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productListForTrade
2019-01-31 16:14:03.032 [http-nio-8080-exec-8] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 order by prod_id 
2019-01-31 16:14:03.032 [http-nio-8080-exec-8] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==> Parameters: 
2019-01-31 16:14:03.035 [http-nio-8080-exec-8] DEBUG com.yun.product.dao.ProductDao.findProductByParam - <==      Total: 4
2019-01-31 16:14:03.038 [http-nio-8080-exec-8] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-31 16:14:03.038 [http-nio-8080-exec-8] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 2(Integer)
2019-01-31 16:14:03.040 [http-nio-8080-exec-8] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-01-31 16:14:03.041 [http-nio-8080-exec-8] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-31 16:14:03.042 [http-nio-8080-exec-8] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 3(Integer)
2019-01-31 16:14:03.044 [http-nio-8080-exec-8] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-01-31 16:14:03.045 [http-nio-8080-exec-8] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-31 16:14:03.045 [http-nio-8080-exec-8] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 4(Integer)
2019-01-31 16:14:03.046 [http-nio-8080-exec-8] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 2
2019-01-31 16:14:03.047 [http-nio-8080-exec-8] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-31 16:14:03.047 [http-nio-8080-exec-8] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 5(Integer)
2019-01-31 16:14:03.049 [http-nio-8080-exec-8] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 2
2019-01-31 16:14:08.035 [http-nio-8080-exec-9] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productReceiveIn
2019-01-31 16:14:10.908 [http-nio-8080-exec-10] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productStockList
2019-01-31 16:14:10.914 [http-nio-8080-exec-10] DEBUG com.yun.stock.controller.ProductStockController - 跳转到物品库存查询控制器
2019-01-31 16:14:10.917 [http-nio-8080-exec-10] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==>  Preparing: select count(*) from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 
2019-01-31 16:14:10.917 [http-nio-8080-exec-10] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==> Parameters: 
2019-01-31 16:14:10.919 [http-nio-8080-exec-10] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - <==      Total: 1
2019-01-31 16:14:10.926 [http-nio-8080-exec-10] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==>  Preparing: select ps.prod_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 order by p.prod_id,pp.prod_param_id limit ?,? 
2019-01-31 16:14:10.928 [http-nio-8080-exec-10] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==> Parameters: 0(Integer), 5(Integer)
2019-01-31 16:14:10.931 [http-nio-8080-exec-10] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - <==      Total: 2
2019-01-31 16:14:10.935 [http-nio-8080-exec-10] DEBUG com.yun.stock.controller.ProductStockController - 转到物品库存页面
2019-01-31 16:14:12.299 [http-nio-8080-exec-1] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productCurrentIn
2019-01-31 16:14:16.992 [http-nio-8080-exec-2] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productStockList
2019-01-31 16:14:16.994 [http-nio-8080-exec-2] DEBUG com.yun.stock.controller.ProductStockController - 跳转到物品库存查询控制器
2019-01-31 16:14:16.998 [http-nio-8080-exec-2] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==>  Preparing: select count(*) from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 
2019-01-31 16:14:16.999 [http-nio-8080-exec-2] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==> Parameters: 
2019-01-31 16:14:17.002 [http-nio-8080-exec-2] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - <==      Total: 1
2019-01-31 16:14:17.008 [http-nio-8080-exec-2] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==>  Preparing: select ps.prod_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 order by p.prod_id,pp.prod_param_id limit ?,? 
2019-01-31 16:14:17.009 [http-nio-8080-exec-2] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==> Parameters: 0(Integer), 5(Integer)
2019-01-31 16:14:17.012 [http-nio-8080-exec-2] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - <==      Total: 2
2019-01-31 16:14:17.015 [http-nio-8080-exec-2] DEBUG com.yun.stock.controller.ProductStockController - 转到物品库存页面
2019-01-31 16:14:20.803 [http-nio-8080-exec-3] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productCurrentIn
2019-01-31 16:14:23.454 [http-nio-8080-exec-4] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productStockList
2019-01-31 16:14:23.457 [http-nio-8080-exec-4] DEBUG com.yun.stock.controller.ProductStockController - 跳转到物品库存查询控制器
2019-01-31 16:14:23.460 [http-nio-8080-exec-4] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==>  Preparing: select count(*) from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 
2019-01-31 16:14:23.461 [http-nio-8080-exec-4] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==> Parameters: 
2019-01-31 16:14:23.463 [http-nio-8080-exec-4] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - <==      Total: 1
2019-01-31 16:14:23.470 [http-nio-8080-exec-4] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==>  Preparing: select ps.prod_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 order by p.prod_id,pp.prod_param_id limit ?,? 
2019-01-31 16:14:23.472 [http-nio-8080-exec-4] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==> Parameters: 0(Integer), 5(Integer)
2019-01-31 16:14:23.477 [http-nio-8080-exec-4] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - <==      Total: 2
2019-01-31 16:14:23.482 [http-nio-8080-exec-4] DEBUG com.yun.stock.controller.ProductStockController - 转到物品库存页面
2019-01-31 16:14:28.671 [http-nio-8080-exec-5] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productCurrentOut
2019-01-31 16:14:29.305 [http-nio-8080-exec-6] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productCurrentIn
2019-01-31 16:14:30.840 [http-nio-8080-exec-7] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productListForTrade
2019-01-31 16:14:30.846 [http-nio-8080-exec-7] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 order by prod_id 
2019-01-31 16:14:30.847 [http-nio-8080-exec-7] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==> Parameters: 
2019-01-31 16:14:30.862 [http-nio-8080-exec-7] DEBUG com.yun.product.dao.ProductDao.findProductByParam - <==      Total: 4
2019-01-31 16:14:30.863 [http-nio-8080-exec-7] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-31 16:14:30.864 [http-nio-8080-exec-7] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 2(Integer)
2019-01-31 16:14:30.867 [http-nio-8080-exec-7] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-01-31 16:14:30.868 [http-nio-8080-exec-7] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-31 16:14:30.868 [http-nio-8080-exec-7] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 3(Integer)
2019-01-31 16:14:30.869 [http-nio-8080-exec-7] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-01-31 16:14:30.870 [http-nio-8080-exec-7] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-31 16:14:30.870 [http-nio-8080-exec-7] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 4(Integer)
2019-01-31 16:14:30.871 [http-nio-8080-exec-7] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 2
2019-01-31 16:14:30.872 [http-nio-8080-exec-7] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-31 16:14:30.872 [http-nio-8080-exec-7] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 5(Integer)
2019-01-31 16:14:30.873 [http-nio-8080-exec-7] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 2
2019-01-31 16:14:33.056 [http-nio-8080-exec-8] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/prodParamList
2019-01-31 16:14:33.066 [http-nio-8080-exec-8] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-31 16:14:33.068 [http-nio-8080-exec-8] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 2(Integer)
2019-01-31 16:14:33.071 [http-nio-8080-exec-8] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-01-31 16:14:37.996 [http-nio-8080-exec-9] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productCurrentInSave
2019-01-31 16:14:38.018 [http-nio-8080-exec-9] DEBUG c.y.s.d.P.findProductStockByProdIdAndProdParamId - ==>  Preparing: select ps.prod_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 and p.prod_id=? and pp.prod_param_Id=? 
2019-01-31 16:14:38.018 [http-nio-8080-exec-9] DEBUG c.y.s.d.P.findProductStockByProdIdAndProdParamId - ==> Parameters: 2(Integer), 8(Integer)
2019-01-31 16:14:38.020 [http-nio-8080-exec-9] DEBUG c.y.s.d.P.findProductStockByProdIdAndProdParamId - <==      Total: 1
2019-01-31 16:14:38.026 [http-nio-8080-exec-9] DEBUG com.yun.stock.service.ProductTradeService - org.mybatis.spring.MyBatisSystemException: nested exception is org.apache.ibatis.binding.BindingException: Parameter 'prodId' not found. Available parameters are [arg1, arg0, param1, param2]
2019-01-31 16:14:38.029 [http-nio-8080-exec-9] DEBUG com.yun.stock.controller.ProductTradeController - 保存现有库存入库记录出错：com.yun.exception.EbStockException: nested exception is org.apache.ibatis.binding.BindingException: Parameter 'prodId' not found. Available parameters are [arg1, arg0, param1, param2]
2019-01-31 16:16:33.333 [main] INFO  com.yun.YunEbStockApplication - Starting YunEbStockApplication on USER-20181202BJ with PID 6092 (E:\workspace\yun-eb-stock\target\classes started by Administrator in E:\workspace\yun-eb-stock)
2019-01-31 16:16:33.338 [main] DEBUG com.yun.YunEbStockApplication - Running with Spring Boot v1.5.9.RELEASE, Spring v4.3.13.RELEASE
2019-01-31 16:16:33.338 [main] INFO  com.yun.YunEbStockApplication - No active profile set, falling back to default profiles: default
2019-01-31 16:16:33.766 [main] INFO  o.s.b.c.e.AnnotationConfigEmbeddedWebApplicationContext - Refreshing org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@6a28ffa4: startup date [Thu Jan 31 16:16:33 CST 2019]; root of context hierarchy
2019-01-31 16:16:33.886 [background-preinit] INFO  org.hibernate.validator.internal.util.Version - HV000001: Hibernate Validator 5.3.6.Final
2019-01-31 16:16:35.401 [main] INFO  o.s.b.c.e.tomcat.TomcatEmbeddedServletContainer - Tomcat initialized with port(s): 8080 (http)
2019-01-31 16:16:35.411 [main] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2019-01-31 16:16:35.412 [main] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet Engine: Apache Tomcat/8.5.23
2019-01-31 16:16:35.513 [localhost-startStop-1] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2019-01-31 16:16:35.514 [localhost-startStop-1] INFO  org.springframework.web.context.ContextLoader - Root WebApplicationContext: initialization completed in 1749 ms
2019-01-31 16:16:35.680 [localhost-startStop-1] INFO  o.s.boot.web.servlet.FilterRegistrationBean - Mapping filter: 'characterEncodingFilter' to: [/*]
2019-01-31 16:16:35.681 [localhost-startStop-1] INFO  o.s.boot.web.servlet.FilterRegistrationBean - Mapping filter: 'hiddenHttpMethodFilter' to: [/*]
2019-01-31 16:16:35.681 [localhost-startStop-1] INFO  o.s.boot.web.servlet.FilterRegistrationBean - Mapping filter: 'httpPutFormContentFilter' to: [/*]
2019-01-31 16:16:35.682 [localhost-startStop-1] INFO  o.s.boot.web.servlet.FilterRegistrationBean - Mapping filter: 'requestContextFilter' to: [/*]
2019-01-31 16:16:35.682 [localhost-startStop-1] INFO  o.s.boot.web.servlet.FilterRegistrationBean - Mapping filter: 'loginFilter' to urls: [/*]
2019-01-31 16:16:35.682 [localhost-startStop-1] INFO  o.s.boot.web.servlet.ServletRegistrationBean - Mapping servlet: 'dispatcherServlet' to [/]
2019-01-31 16:16:36.506 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerAdapter - Looking for @ControllerAdvice: org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@6a28ffa4: startup date [Thu Jan 31 16:16:33 CST 2019]; root of context hierarchy
2019-01-31 16:16:36.565 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productList]}" onto public java.lang.String com.yun.product.controller.ProductController.productList(org.springframework.ui.Model,java.lang.String,java.lang.String,java.lang.String,java.lang.String)
2019-01-31 16:16:36.566 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productPreAdd]}" onto public java.lang.String com.yun.product.controller.ProductController.productPreAdd()
2019-01-31 16:16:36.566 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productSave]}" onto public java.lang.String com.yun.product.controller.ProductController.productSave(com.yun.product.model.Product)
2019-01-31 16:16:36.566 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productDelete]}" onto public java.lang.String com.yun.product.controller.ProductController.productDelete(int)
2019-01-31 16:16:36.566 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productPreUpdate]}" onto public java.lang.String com.yun.product.controller.ProductController.productPreUpdate(int,org.springframework.ui.Model)
2019-01-31 16:16:36.566 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productUpdate]}" onto public java.lang.String com.yun.product.controller.ProductController.productUpdate(com.yun.product.model.Product)
2019-01-31 16:16:36.567 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productListForAutoComplete]}" onto public java.util.List<com.yun.product.model.Product> com.yun.product.controller.ProductController.productListForAutoComplete(java.lang.String)
2019-01-31 16:16:36.567 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productListForStock]}" onto public java.util.List<com.yun.product.model.Product> com.yun.product.controller.ProductController.productListForStock()
2019-01-31 16:16:36.567 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productListForTrade]}" onto public java.util.List<com.yun.product.model.Product> com.yun.product.controller.ProductController.productListForTrade(java.lang.String)
2019-01-31 16:16:36.568 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/prodParamDelete]}" onto public java.lang.String com.yun.product.controller.ProductParamController.prodParamDelete(int)
2019-01-31 16:16:36.569 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/prodParamPreAdd]}" onto public java.lang.String com.yun.product.controller.ProductParamController.prodParamPreAdd(int,org.springframework.ui.Model)
2019-01-31 16:16:36.569 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/prodParamSave]}" onto public java.lang.String com.yun.product.controller.ProductParamController.prodParamSave(com.yun.product.model.ProductParameter)
2019-01-31 16:16:36.569 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/prodParamList]}" onto public java.lang.String com.yun.product.controller.ProductParamController.prodParamList(int)
2019-01-31 16:16:36.573 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeList]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeList(org.springframework.ui.Model)
2019-01-31 16:16:36.573 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeTree]}" onto public java.util.List<com.yun.product.model.ProductType> com.yun.product.controller.ProductTypeController.productTypeTree()
2019-01-31 16:16:36.574 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeEdit]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeEdit()
2019-01-31 16:16:36.574 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeSave]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeSave(com.yun.product.model.ProductType)
2019-01-31 16:16:36.574 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeUpdate]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeUpdate(java.lang.Integer,org.springframework.ui.Model)
2019-01-31 16:16:36.574 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeUpdateSave]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeUpdateSave(com.yun.product.model.ProductType)
2019-01-31 16:16:36.575 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeDelete]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeDelete(java.lang.Integer,javax.servlet.http.HttpServletResponse) throws java.io.IOException
2019-01-31 16:16:36.575 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveStockList]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveStockController.productReceiveStocklist(java.lang.String,java.lang.String,org.springframework.ui.Model)
2019-01-31 16:16:36.576 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveStockPreAdd]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveStockController.productReceiveStockPreAdd()
2019-01-31 16:16:36.576 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveStockSave]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveStockController.productReceiveStockSave(com.yun.stock.model.ProductReceiveStock)
2019-01-31 16:16:36.576 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveStockDelete]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveStockController.productReceiveStockDelete(int)
2019-01-31 16:16:36.576 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveStockPreUpdate]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveStockController.productReceiveStockPreUpdate(int,org.springframework.ui.Model)
2019-01-31 16:16:36.576 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveStockUpdate]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveStockController.productReceiveStockUpdate(com.yun.stock.model.ProductReceiveStock)
2019-01-31 16:16:36.577 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveInSave]}" onto public void com.yun.stock.controller.ProductReceiveTradeController.receiveInSave(com.yun.stock.model.ProductReceiveTrade,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse) throws java.io.IOException
2019-01-31 16:16:36.578 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveIn]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveTradeController.receiveIn(org.springframework.ui.Model)
2019-01-31 16:16:36.578 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveReject]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveTradeController.receiveReject(org.springframework.ui.Model)
2019-01-31 16:16:36.578 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveStockToCurrentStock]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveTradeController.productReceiveStockToCurrentStock(int,org.springframework.ui.Model)
2019-01-31 16:16:36.578 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveRejectSave]}" onto public void com.yun.stock.controller.ProductReceiveTradeController.receiveRejectSave(com.yun.stock.model.ProductReceiveTrade,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse) throws java.io.IOException
2019-01-31 16:16:36.578 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveToCurrentSave]}" onto public void com.yun.stock.controller.ProductReceiveTradeController.productReceiveToCurrentSave(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse) throws java.lang.Exception
2019-01-31 16:16:36.579 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockSave]}" onto public java.lang.String com.yun.stock.controller.ProductStockController.productStockSave(com.yun.stock.model.ProductStock)
2019-01-31 16:16:36.579 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockList]}" onto public java.lang.String com.yun.stock.controller.ProductStockController.productStocklist(java.lang.String,java.lang.String,org.springframework.ui.Model)
2019-01-31 16:16:36.580 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockPreAdd]}" onto public java.lang.String com.yun.stock.controller.ProductStockController.productStockPreAdd()
2019-01-31 16:16:36.580 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockDelete]}" onto public java.lang.String com.yun.stock.controller.ProductStockController.productStockDelete(int)
2019-01-31 16:16:36.580 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockPreUpdate]}" onto public java.lang.String com.yun.stock.controller.ProductStockController.productStockPreUpdate(int,org.springframework.ui.Model)
2019-01-31 16:16:36.580 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockUpdate]}" onto public java.lang.String com.yun.stock.controller.ProductStockController.productStockUpdate(com.yun.stock.model.ProductStock)
2019-01-31 16:16:36.581 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productCurrentOut]}" onto public java.lang.String com.yun.stock.controller.ProductTradeController.receiveReject(org.springframework.ui.Model)
2019-01-31 16:16:36.581 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productCurrentIn]}" onto public java.lang.String com.yun.stock.controller.ProductTradeController.productCurrentIn(org.springframework.ui.Model)
2019-01-31 16:16:36.581 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productCurrentInSave]}" onto public void com.yun.stock.controller.ProductTradeController.productCurrentInSave(com.yun.stock.model.ProductTrade,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse) throws java.io.IOException
2019-01-31 16:16:36.581 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productCurrentOutSave]}" onto public void com.yun.stock.controller.ProductTradeController.productCurrentOutSave(com.yun.stock.model.ProductTrade,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse) throws java.io.IOException
2019-01-31 16:16:36.582 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/main]}" onto public java.lang.String com.yun.user.controller.MainController.main()
2019-01-31 16:16:36.583 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/userList]}" onto public java.lang.String com.yun.user.controller.UserController.userList(org.springframework.ui.Model)
2019-01-31 16:16:36.583 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/login]}" onto public void com.yun.user.controller.UserController.login(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse) throws java.io.IOException
2019-01-31 16:16:36.583 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/deleteUserInfo]}" onto public java.lang.String com.yun.user.controller.UserController.userDelete(int)
2019-01-31 16:16:36.583 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/userSave]}" onto public java.lang.String com.yun.user.controller.UserController.userSave(com.yun.user.model.UserInfo)
2019-01-31 16:16:36.584 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/userEdit]}" onto public java.lang.String com.yun.user.controller.UserController.userEdit()
2019-01-31 16:16:36.587 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/error]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> org.springframework.boot.autoconfigure.web.BasicErrorController.error(javax.servlet.http.HttpServletRequest)
2019-01-31 16:16:36.588 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/error],produces=[text/html]}" onto public org.springframework.web.servlet.ModelAndView org.springframework.boot.autoconfigure.web.BasicErrorController.errorHtml(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
2019-01-31 16:16:36.620 [main] INFO  o.s.web.servlet.handler.SimpleUrlHandlerMapping - Mapped URL path [/webjars/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-01-31 16:16:36.621 [main] INFO  o.s.web.servlet.handler.SimpleUrlHandlerMapping - Mapped URL path [/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-01-31 16:16:36.666 [main] INFO  o.s.web.servlet.handler.SimpleUrlHandlerMapping - Mapped URL path [/**/favicon.ico] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-01-31 16:16:36.973 [main] INFO  o.s.b.a.w.WebMvcAutoConfiguration$WelcomePageHandlerMapping - Adding welcome page: class path resource [static/index.html]
2019-01-31 16:16:37.232 [main] INFO  o.s.jmx.export.annotation.AnnotationMBeanExporter - Registering beans for JMX exposure on startup
2019-01-31 16:16:37.253 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2019-01-31 16:16:37.263 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2019-01-31 16:16:37.277 [main] INFO  org.apache.tomcat.util.net.NioSelectorPool - Using a shared selector for servlet write/read
2019-01-31 16:16:37.483 [main] INFO  o.s.b.c.e.tomcat.TomcatEmbeddedServletContainer - Tomcat started on port(s): 8080 (http)
2019-01-31 16:16:37.488 [main] INFO  com.yun.YunEbStockApplication - Started YunEbStockApplication in 4.645 seconds (JVM running for 5.843)
2019-01-31 16:16:41.011 [http-nio-8080-exec-2] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring FrameworkServlet 'dispatcherServlet'
2019-01-31 16:16:41.011 [http-nio-8080-exec-2] INFO  org.springframework.web.servlet.DispatcherServlet - FrameworkServlet 'dispatcherServlet': initialization started
2019-01-31 16:16:41.030 [http-nio-8080-exec-2] INFO  org.springframework.web.servlet.DispatcherServlet - FrameworkServlet 'dispatcherServlet': initialization completed in 19 ms
2019-01-31 16:16:41.041 [http-nio-8080-exec-2] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/main
2019-01-31 16:16:48.728 [http-nio-8080-exec-8] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/login
2019-01-31 16:16:49.054 [http-nio-8080-exec-8] DEBUG c.y.user.dao.UserInfoDao.findUserInfoByNameAndPass - ==>  Preparing: select * from user_info where login_name=? and login_pass=? 
2019-01-31 16:16:49.074 [http-nio-8080-exec-8] DEBUG c.y.user.dao.UserInfoDao.findUserInfoByNameAndPass - ==> Parameters: admin(String), 123(String)
2019-01-31 16:16:49.085 [http-nio-8080-exec-8] DEBUG c.y.user.dao.UserInfoDao.findUserInfoByNameAndPass - <==      Total: 1
2019-01-31 16:16:49.097 [http-nio-8080-exec-7] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/main
2019-01-31 16:16:53.162 [http-nio-8080-exec-5] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productCurrentIn
2019-01-31 16:16:54.443 [http-nio-8080-exec-4] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productListForTrade
2019-01-31 16:16:54.500 [http-nio-8080-exec-4] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 order by prod_id 
2019-01-31 16:16:54.500 [http-nio-8080-exec-4] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==> Parameters: 
2019-01-31 16:16:54.508 [http-nio-8080-exec-4] DEBUG com.yun.product.dao.ProductDao.findProductByParam - <==      Total: 4
2019-01-31 16:16:54.509 [http-nio-8080-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-31 16:16:54.510 [http-nio-8080-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 2(Integer)
2019-01-31 16:16:54.511 [http-nio-8080-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-01-31 16:16:54.512 [http-nio-8080-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-31 16:16:54.512 [http-nio-8080-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 3(Integer)
2019-01-31 16:16:54.514 [http-nio-8080-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-01-31 16:16:54.514 [http-nio-8080-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-31 16:16:54.514 [http-nio-8080-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 4(Integer)
2019-01-31 16:16:54.516 [http-nio-8080-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 2
2019-01-31 16:16:54.516 [http-nio-8080-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-31 16:16:54.516 [http-nio-8080-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 5(Integer)
2019-01-31 16:16:54.518 [http-nio-8080-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 2
2019-01-31 16:16:56.958 [http-nio-8080-exec-3] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/prodParamList
2019-01-31 16:16:56.968 [http-nio-8080-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-31 16:16:56.968 [http-nio-8080-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 2(Integer)
2019-01-31 16:16:56.970 [http-nio-8080-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-01-31 16:17:01.241 [http-nio-8080-exec-1] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productCurrentInSave
2019-01-31 16:17:01.268 [http-nio-8080-exec-1] DEBUG c.y.s.d.P.findProductStockByProdIdAndProdParamId - ==>  Preparing: select ps.prod_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 and p.prod_id=? and pp.prod_param_Id=? 
2019-01-31 16:17:01.269 [http-nio-8080-exec-1] DEBUG c.y.s.d.P.findProductStockByProdIdAndProdParamId - ==> Parameters: 2(Integer), 8(Integer)
2019-01-31 16:17:01.271 [http-nio-8080-exec-1] DEBUG c.y.s.d.P.findProductStockByProdIdAndProdParamId - <==      Total: 1
2019-01-31 16:17:01.272 [http-nio-8080-exec-1] DEBUG c.y.s.d.P.findProductStockNumByProdIdAndProdParamId - ==>  Preparing: select stock_num from product_stock where 1=1 and prod_id=? and prod_param_id=? 
2019-01-31 16:17:01.273 [http-nio-8080-exec-1] DEBUG c.y.s.d.P.findProductStockNumByProdIdAndProdParamId - ==> Parameters: 2(Integer), 8(Integer)
2019-01-31 16:17:01.275 [http-nio-8080-exec-1] DEBUG c.y.s.d.P.findProductStockNumByProdIdAndProdParamId - <==      Total: 1
2019-01-31 16:17:01.275 [http-nio-8080-exec-1] DEBUG c.yun.stock.dao.ProductStockDao.updateProductStock - ==>  Preparing: update product_stock set prod_id=?,prod_param_id=?,stock_num=? where prod_stock_id=? 
2019-01-31 16:17:01.276 [http-nio-8080-exec-1] DEBUG c.yun.stock.dao.ProductStockDao.updateProductStock - ==> Parameters: 2(Integer), 8(Integer), 16(Integer), 9(Integer)
2019-01-31 16:17:01.277 [http-nio-8080-exec-1] DEBUG c.yun.stock.dao.ProductStockDao.updateProductStock - <==    Updates: 1
2019-01-31 16:17:01.278 [http-nio-8080-exec-1] DEBUG c.y.stock.dao.ProductTradeDao.insertProductInTrade - ==>  Preparing: insert into product_trade(trade_date,prod_id,prod_param_id,begin_num,trade_add,end_num,oper_id)values(?,?,?,?,?,?,?) 
2019-01-31 16:17:01.279 [http-nio-8080-exec-1] DEBUG c.y.stock.dao.ProductTradeDao.insertProductInTrade - ==> Parameters: 2019-01-31 16:16:53.0(Timestamp), 2(Integer), 8(Integer), 6(Integer), 10(Integer), 16(Integer), 5(Integer)
2019-01-31 16:17:01.308 [http-nio-8080-exec-1] DEBUG c.y.stock.dao.ProductTradeDao.insertProductInTrade - <==    Updates: 1
2019-01-31 16:17:02.860 [http-nio-8080-exec-6] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productCurrentIn
2019-01-31 16:17:40.931 [http-nio-8080-exec-10] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productCurrentInSave
2019-01-31 16:17:40.943 [http-nio-8080-exec-10] DEBUG com.yun.stock.service.ProductTradeService - java.lang.NullPointerException
2019-01-31 16:17:40.946 [http-nio-8080-exec-10] DEBUG com.yun.stock.controller.ProductTradeController - 保存现有库存入库记录出错：com.yun.exception.EbStockException
2019-01-31 16:17:47.333 [http-nio-8080-exec-2] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productCurrentInSave
2019-01-31 16:17:47.338 [http-nio-8080-exec-2] DEBUG com.yun.stock.service.ProductTradeService - java.lang.NullPointerException
2019-01-31 16:17:47.340 [http-nio-8080-exec-2] DEBUG com.yun.stock.controller.ProductTradeController - 保存现有库存入库记录出错：com.yun.exception.EbStockException
2019-01-31 16:17:53.089 [http-nio-8080-exec-8] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productCurrentInSave
2019-01-31 16:17:53.095 [http-nio-8080-exec-8] DEBUG com.yun.stock.service.ProductTradeService - java.lang.NullPointerException
2019-01-31 16:17:53.098 [http-nio-8080-exec-8] DEBUG com.yun.stock.controller.ProductTradeController - 保存现有库存入库记录出错：com.yun.exception.EbStockException
2019-01-31 16:18:07.263 [http-nio-8080-exec-9] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productCurrentOut
2019-01-31 16:18:08.812 [http-nio-8080-exec-5] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productListForTrade
2019-01-31 16:18:08.815 [http-nio-8080-exec-5] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 order by prod_id 
2019-01-31 16:18:08.815 [http-nio-8080-exec-5] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==> Parameters: 
2019-01-31 16:18:08.817 [http-nio-8080-exec-5] DEBUG com.yun.product.dao.ProductDao.findProductByParam - <==      Total: 4
2019-01-31 16:18:08.817 [http-nio-8080-exec-5] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-31 16:18:08.818 [http-nio-8080-exec-5] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 2(Integer)
2019-01-31 16:18:08.819 [http-nio-8080-exec-5] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-01-31 16:18:08.819 [http-nio-8080-exec-5] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-31 16:18:08.820 [http-nio-8080-exec-5] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 3(Integer)
2019-01-31 16:18:08.823 [http-nio-8080-exec-5] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-01-31 16:18:08.823 [http-nio-8080-exec-5] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-31 16:18:08.824 [http-nio-8080-exec-5] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 4(Integer)
2019-01-31 16:18:08.826 [http-nio-8080-exec-5] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 2
2019-01-31 16:18:08.827 [http-nio-8080-exec-5] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-31 16:18:08.828 [http-nio-8080-exec-5] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 5(Integer)
2019-01-31 16:18:08.829 [http-nio-8080-exec-5] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 2
2019-01-31 16:19:25.538 [main] INFO  com.yun.YunEbStockApplication - Starting YunEbStockApplication on USER-20181202BJ with PID 3476 (E:\workspace\yun-eb-stock\target\classes started by Administrator in E:\workspace\yun-eb-stock)
2019-01-31 16:19:25.542 [main] DEBUG com.yun.YunEbStockApplication - Running with Spring Boot v1.5.9.RELEASE, Spring v4.3.13.RELEASE
2019-01-31 16:19:25.542 [main] INFO  com.yun.YunEbStockApplication - No active profile set, falling back to default profiles: default
2019-01-31 16:19:25.876 [background-preinit] INFO  org.hibernate.validator.internal.util.Version - HV000001: Hibernate Validator 5.3.6.Final
2019-01-31 16:19:26.018 [main] INFO  o.s.b.c.e.AnnotationConfigEmbeddedWebApplicationContext - Refreshing org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@6a28ffa4: startup date [Thu Jan 31 16:19:26 CST 2019]; root of context hierarchy
2019-01-31 16:19:27.622 [main] INFO  o.s.b.c.e.tomcat.TomcatEmbeddedServletContainer - Tomcat initialized with port(s): 8080 (http)
2019-01-31 16:19:27.632 [main] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2019-01-31 16:19:27.633 [main] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet Engine: Apache Tomcat/8.5.23
2019-01-31 16:19:27.778 [localhost-startStop-1] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2019-01-31 16:19:27.778 [localhost-startStop-1] INFO  org.springframework.web.context.ContextLoader - Root WebApplicationContext: initialization completed in 1761 ms
2019-01-31 16:19:27.975 [localhost-startStop-1] INFO  o.s.boot.web.servlet.FilterRegistrationBean - Mapping filter: 'characterEncodingFilter' to: [/*]
2019-01-31 16:19:27.976 [localhost-startStop-1] INFO  o.s.boot.web.servlet.FilterRegistrationBean - Mapping filter: 'hiddenHttpMethodFilter' to: [/*]
2019-01-31 16:19:27.976 [localhost-startStop-1] INFO  o.s.boot.web.servlet.FilterRegistrationBean - Mapping filter: 'httpPutFormContentFilter' to: [/*]
2019-01-31 16:19:27.976 [localhost-startStop-1] INFO  o.s.boot.web.servlet.FilterRegistrationBean - Mapping filter: 'requestContextFilter' to: [/*]
2019-01-31 16:19:27.976 [localhost-startStop-1] INFO  o.s.boot.web.servlet.FilterRegistrationBean - Mapping filter: 'loginFilter' to urls: [/*]
2019-01-31 16:19:27.977 [localhost-startStop-1] INFO  o.s.boot.web.servlet.ServletRegistrationBean - Mapping servlet: 'dispatcherServlet' to [/]
2019-01-31 16:19:28.796 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerAdapter - Looking for @ControllerAdvice: org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@6a28ffa4: startup date [Thu Jan 31 16:19:26 CST 2019]; root of context hierarchy
2019-01-31 16:19:28.852 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productListForAutoComplete]}" onto public java.util.List<com.yun.product.model.Product> com.yun.product.controller.ProductController.productListForAutoComplete(java.lang.String)
2019-01-31 16:19:28.853 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productListForStock]}" onto public java.util.List<com.yun.product.model.Product> com.yun.product.controller.ProductController.productListForStock()
2019-01-31 16:19:28.853 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productListForTrade]}" onto public java.util.List<com.yun.product.model.Product> com.yun.product.controller.ProductController.productListForTrade(java.lang.String)
2019-01-31 16:19:28.853 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productList]}" onto public java.lang.String com.yun.product.controller.ProductController.productList(org.springframework.ui.Model,java.lang.String,java.lang.String,java.lang.String,java.lang.String)
2019-01-31 16:19:28.853 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productPreAdd]}" onto public java.lang.String com.yun.product.controller.ProductController.productPreAdd()
2019-01-31 16:19:28.854 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productSave]}" onto public java.lang.String com.yun.product.controller.ProductController.productSave(com.yun.product.model.Product)
2019-01-31 16:19:28.854 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productDelete]}" onto public java.lang.String com.yun.product.controller.ProductController.productDelete(int)
2019-01-31 16:19:28.854 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productPreUpdate]}" onto public java.lang.String com.yun.product.controller.ProductController.productPreUpdate(int,org.springframework.ui.Model)
2019-01-31 16:19:28.854 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productUpdate]}" onto public java.lang.String com.yun.product.controller.ProductController.productUpdate(com.yun.product.model.Product)
2019-01-31 16:19:28.855 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/prodParamDelete]}" onto public java.lang.String com.yun.product.controller.ProductParamController.prodParamDelete(int)
2019-01-31 16:19:28.855 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/prodParamPreAdd]}" onto public java.lang.String com.yun.product.controller.ProductParamController.prodParamPreAdd(int,org.springframework.ui.Model)
2019-01-31 16:19:28.856 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/prodParamSave]}" onto public java.lang.String com.yun.product.controller.ProductParamController.prodParamSave(com.yun.product.model.ProductParameter)
2019-01-31 16:19:28.856 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/prodParamList]}" onto public java.lang.String com.yun.product.controller.ProductParamController.prodParamList(int)
2019-01-31 16:19:28.858 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeUpdate]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeUpdate(java.lang.Integer,org.springframework.ui.Model)
2019-01-31 16:19:28.859 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeUpdateSave]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeUpdateSave(com.yun.product.model.ProductType)
2019-01-31 16:19:28.859 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeDelete]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeDelete(java.lang.Integer,javax.servlet.http.HttpServletResponse) throws java.io.IOException
2019-01-31 16:19:28.859 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeList]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeList(org.springframework.ui.Model)
2019-01-31 16:19:28.859 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeTree]}" onto public java.util.List<com.yun.product.model.ProductType> com.yun.product.controller.ProductTypeController.productTypeTree()
2019-01-31 16:19:28.860 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeEdit]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeEdit()
2019-01-31 16:19:28.860 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeSave]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeSave(com.yun.product.model.ProductType)
2019-01-31 16:19:28.861 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveStockList]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveStockController.productReceiveStocklist(java.lang.String,java.lang.String,org.springframework.ui.Model)
2019-01-31 16:19:28.861 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveStockPreAdd]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveStockController.productReceiveStockPreAdd()
2019-01-31 16:19:28.861 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveStockSave]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveStockController.productReceiveStockSave(com.yun.stock.model.ProductReceiveStock)
2019-01-31 16:19:28.861 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveStockDelete]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveStockController.productReceiveStockDelete(int)
2019-01-31 16:19:28.862 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveStockPreUpdate]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveStockController.productReceiveStockPreUpdate(int,org.springframework.ui.Model)
2019-01-31 16:19:28.862 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveStockUpdate]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveStockController.productReceiveStockUpdate(com.yun.stock.model.ProductReceiveStock)
2019-01-31 16:19:28.863 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveStockToCurrentStock]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveTradeController.productReceiveStockToCurrentStock(int,org.springframework.ui.Model)
2019-01-31 16:19:28.863 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveRejectSave]}" onto public void com.yun.stock.controller.ProductReceiveTradeController.receiveRejectSave(com.yun.stock.model.ProductReceiveTrade,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse) throws java.io.IOException
2019-01-31 16:19:28.863 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveToCurrentSave]}" onto public void com.yun.stock.controller.ProductReceiveTradeController.productReceiveToCurrentSave(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse) throws java.lang.Exception
2019-01-31 16:19:28.863 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveInSave]}" onto public void com.yun.stock.controller.ProductReceiveTradeController.receiveInSave(com.yun.stock.model.ProductReceiveTrade,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse) throws java.io.IOException
2019-01-31 16:19:28.864 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveIn]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveTradeController.receiveIn(org.springframework.ui.Model)
2019-01-31 16:19:28.864 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveReject]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveTradeController.receiveReject(org.springframework.ui.Model)
2019-01-31 16:19:28.865 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockPreAdd]}" onto public java.lang.String com.yun.stock.controller.ProductStockController.productStockPreAdd()
2019-01-31 16:19:28.865 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockDelete]}" onto public java.lang.String com.yun.stock.controller.ProductStockController.productStockDelete(int)
2019-01-31 16:19:28.865 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockPreUpdate]}" onto public java.lang.String com.yun.stock.controller.ProductStockController.productStockPreUpdate(int,org.springframework.ui.Model)
2019-01-31 16:19:28.865 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockUpdate]}" onto public java.lang.String com.yun.stock.controller.ProductStockController.productStockUpdate(com.yun.stock.model.ProductStock)
2019-01-31 16:19:28.865 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockSave]}" onto public java.lang.String com.yun.stock.controller.ProductStockController.productStockSave(com.yun.stock.model.ProductStock)
2019-01-31 16:19:28.866 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockList]}" onto public java.lang.String com.yun.stock.controller.ProductStockController.productStocklist(java.lang.String,java.lang.String,org.springframework.ui.Model)
2019-01-31 16:19:28.866 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productCurrentInSave]}" onto public void com.yun.stock.controller.ProductTradeController.productCurrentInSave(com.yun.stock.model.ProductTrade,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse) throws java.io.IOException
2019-01-31 16:19:28.867 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productCurrentOutSave]}" onto public void com.yun.stock.controller.ProductTradeController.productCurrentOutSave(com.yun.stock.model.ProductTrade,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse) throws java.io.IOException
2019-01-31 16:19:28.867 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productCurrentOut]}" onto public java.lang.String com.yun.stock.controller.ProductTradeController.receiveReject(org.springframework.ui.Model)
2019-01-31 16:19:28.867 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productCurrentIn]}" onto public java.lang.String com.yun.stock.controller.ProductTradeController.productCurrentIn(org.springframework.ui.Model)
2019-01-31 16:19:28.867 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/main]}" onto public java.lang.String com.yun.user.controller.MainController.main()
2019-01-31 16:19:28.868 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/userList]}" onto public java.lang.String com.yun.user.controller.UserController.userList(org.springframework.ui.Model)
2019-01-31 16:19:28.869 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/login]}" onto public void com.yun.user.controller.UserController.login(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse) throws java.io.IOException
2019-01-31 16:19:28.869 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/deleteUserInfo]}" onto public java.lang.String com.yun.user.controller.UserController.userDelete(int)
2019-01-31 16:19:28.869 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/userSave]}" onto public java.lang.String com.yun.user.controller.UserController.userSave(com.yun.user.model.UserInfo)
2019-01-31 16:19:28.869 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/userEdit]}" onto public java.lang.String com.yun.user.controller.UserController.userEdit()
2019-01-31 16:19:28.872 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/error]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> org.springframework.boot.autoconfigure.web.BasicErrorController.error(javax.servlet.http.HttpServletRequest)
2019-01-31 16:19:28.873 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/error],produces=[text/html]}" onto public org.springframework.web.servlet.ModelAndView org.springframework.boot.autoconfigure.web.BasicErrorController.errorHtml(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
2019-01-31 16:19:28.904 [main] INFO  o.s.web.servlet.handler.SimpleUrlHandlerMapping - Mapped URL path [/webjars/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-01-31 16:19:28.904 [main] INFO  o.s.web.servlet.handler.SimpleUrlHandlerMapping - Mapped URL path [/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-01-31 16:19:28.945 [main] INFO  o.s.web.servlet.handler.SimpleUrlHandlerMapping - Mapped URL path [/**/favicon.ico] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-01-31 16:19:29.254 [main] INFO  o.s.b.a.w.WebMvcAutoConfiguration$WelcomePageHandlerMapping - Adding welcome page: class path resource [static/index.html]
2019-01-31 16:19:29.467 [main] INFO  o.s.jmx.export.annotation.AnnotationMBeanExporter - Registering beans for JMX exposure on startup
2019-01-31 16:19:29.487 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2019-01-31 16:19:29.497 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2019-01-31 16:19:29.509 [main] INFO  org.apache.tomcat.util.net.NioSelectorPool - Using a shared selector for servlet write/read
2019-01-31 16:19:29.686 [main] INFO  o.s.b.c.e.tomcat.TomcatEmbeddedServletContainer - Tomcat started on port(s): 8080 (http)
2019-01-31 16:19:29.691 [main] INFO  com.yun.YunEbStockApplication - Started YunEbStockApplication in 4.816 seconds (JVM running for 5.937)
2019-01-31 16:20:09.300 [http-nio-8080-exec-1] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring FrameworkServlet 'dispatcherServlet'
2019-01-31 16:20:09.301 [http-nio-8080-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - FrameworkServlet 'dispatcherServlet': initialization started
2019-01-31 16:20:09.342 [http-nio-8080-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - FrameworkServlet 'dispatcherServlet': initialization completed in 41 ms
2019-01-31 16:20:09.360 [http-nio-8080-exec-1] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/main
2019-01-31 16:20:14.468 [http-nio-8080-exec-2] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/login
2019-01-31 16:20:14.788 [http-nio-8080-exec-2] DEBUG c.y.user.dao.UserInfoDao.findUserInfoByNameAndPass - ==>  Preparing: select * from user_info where login_name=? and login_pass=? 
2019-01-31 16:20:14.808 [http-nio-8080-exec-2] DEBUG c.y.user.dao.UserInfoDao.findUserInfoByNameAndPass - ==> Parameters: admin(String), 123(String)
2019-01-31 16:20:14.821 [http-nio-8080-exec-2] DEBUG c.y.user.dao.UserInfoDao.findUserInfoByNameAndPass - <==      Total: 1
2019-01-31 16:20:14.832 [http-nio-8080-exec-3] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/main
2019-01-31 16:20:18.784 [http-nio-8080-exec-4] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productCurrentIn
2019-01-31 16:20:18.870 [http-nio-8080-exec-5] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/js/My97DatePicker/WdatePicker.js
2019-01-31 16:20:18.907 [http-nio-8080-exec-6] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/js/My97DatePicker/skin/WdatePicker.css
2019-01-31 16:20:18.935 [http-nio-8080-exec-7] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/js/My97DatePicker/My97DatePicker.html
2019-01-31 16:20:18.945 [http-nio-8080-exec-8] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/js/My97DatePicker/config.js
2019-01-31 16:20:18.946 [http-nio-8080-exec-9] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/js/My97DatePicker/calendar.js
2019-01-31 16:20:18.971 [http-nio-8080-exec-10] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/js/My97DatePicker/lang/zh-cn.js
2019-01-31 16:20:18.971 [http-nio-8080-exec-1] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/js/My97DatePicker/skin/default/datepicker.css
2019-01-31 16:20:18.972 [http-nio-8080-exec-2] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/js/My97DatePicker/skin/whyGreen/datepicker.css
2019-01-31 16:20:18.997 [http-nio-8080-exec-3] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/js/My97DatePicker/skin/default/img.gif
2019-01-31 16:20:24.027 [http-nio-8080-exec-4] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productCurrentOut
2019-01-31 16:20:25.119 [http-nio-8080-exec-5] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productListForTrade
2019-01-31 16:20:25.161 [http-nio-8080-exec-5] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 order by prod_id 
2019-01-31 16:20:25.161 [http-nio-8080-exec-5] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==> Parameters: 
2019-01-31 16:20:25.175 [http-nio-8080-exec-5] DEBUG com.yun.product.dao.ProductDao.findProductByParam - <==      Total: 4
2019-01-31 16:20:25.176 [http-nio-8080-exec-5] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-31 16:20:25.177 [http-nio-8080-exec-5] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 2(Integer)
2019-01-31 16:20:25.178 [http-nio-8080-exec-5] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-01-31 16:20:25.180 [http-nio-8080-exec-5] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-31 16:20:25.181 [http-nio-8080-exec-5] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 3(Integer)
2019-01-31 16:20:25.184 [http-nio-8080-exec-5] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-01-31 16:20:25.185 [http-nio-8080-exec-5] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-31 16:20:25.185 [http-nio-8080-exec-5] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 4(Integer)
2019-01-31 16:20:25.187 [http-nio-8080-exec-5] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 2
2019-01-31 16:20:25.188 [http-nio-8080-exec-5] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-31 16:20:25.188 [http-nio-8080-exec-5] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 5(Integer)
2019-01-31 16:20:25.191 [http-nio-8080-exec-5] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 2
2019-01-31 16:20:27.484 [http-nio-8080-exec-6] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/prodParamList
2019-01-31 16:20:27.497 [http-nio-8080-exec-6] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-31 16:20:27.498 [http-nio-8080-exec-6] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 2(Integer)
2019-01-31 16:20:27.501 [http-nio-8080-exec-6] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-01-31 16:20:32.363 [http-nio-8080-exec-7] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productCurrentOutSave
2019-01-31 16:20:32.394 [http-nio-8080-exec-7] DEBUG c.y.s.d.P.findProductStockByProdIdAndProdParamId - ==>  Preparing: select ps.prod_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 and p.prod_id=? and pp.prod_param_Id=? 
2019-01-31 16:20:32.395 [http-nio-8080-exec-7] DEBUG c.y.s.d.P.findProductStockByProdIdAndProdParamId - ==> Parameters: 2(Integer), 8(Integer)
2019-01-31 16:20:32.397 [http-nio-8080-exec-7] DEBUG c.y.s.d.P.findProductStockByProdIdAndProdParamId - <==      Total: 1
2019-01-31 16:20:32.400 [http-nio-8080-exec-7] DEBUG c.y.s.d.P.findProductStockNumByProdIdAndProdParamId - ==>  Preparing: select stock_num from product_stock where 1=1 and prod_id=? and prod_param_id=? 
2019-01-31 16:20:32.401 [http-nio-8080-exec-7] DEBUG c.y.s.d.P.findProductStockNumByProdIdAndProdParamId - ==> Parameters: 2(Integer), 8(Integer)
2019-01-31 16:20:32.403 [http-nio-8080-exec-7] DEBUG c.y.s.d.P.findProductStockNumByProdIdAndProdParamId - <==      Total: 1
2019-01-31 16:20:32.404 [http-nio-8080-exec-7] DEBUG c.yun.stock.dao.ProductStockDao.updateProductStock - ==>  Preparing: update product_stock set prod_id=?,prod_param_id=?,stock_num=? where prod_stock_id=? 
2019-01-31 16:20:32.405 [http-nio-8080-exec-7] DEBUG c.yun.stock.dao.ProductStockDao.updateProductStock - ==> Parameters: 2(Integer), 8(Integer), 10(Integer), 9(Integer)
2019-01-31 16:20:32.406 [http-nio-8080-exec-7] DEBUG c.yun.stock.dao.ProductStockDao.updateProductStock - <==    Updates: 1
2019-01-31 16:20:32.408 [http-nio-8080-exec-7] DEBUG c.y.s.dao.ProductTradeDao.insertProductOutTrade - ==>  Preparing: insert into product_trade(trade_date,prod_id,prod_param_id,begin_num,trade_del,end_num,oper_id)values(?,?,?,?,?,?,?) 
2019-01-31 16:20:32.410 [http-nio-8080-exec-7] DEBUG c.y.s.dao.ProductTradeDao.insertProductOutTrade - ==> Parameters: 2019-01-31 16:20:24.0(Timestamp), 2(Integer), 8(Integer), 16(Integer), 6(Integer), 10(Integer), 5(Integer)
2019-01-31 16:20:32.434 [http-nio-8080-exec-7] DEBUG c.y.s.dao.ProductTradeDao.insertProductOutTrade - <==    Updates: 1
2019-01-31 16:20:32.536 [http-nio-8080-exec-7] DEBUG com.yun.stock.controller.ProductTradeController - result:现有库存退货登记6个物品完成，目前库存数量10个
2019-01-31 16:20:35.754 [http-nio-8080-exec-8] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productCurrentOut
2019-01-31 16:25:07.995 [http-nio-8080-exec-1] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productCurrentOut
2019-01-31 16:25:09.951 [http-nio-8080-exec-3] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/main
2019-01-31 16:25:10.006 [http-nio-8080-exec-5] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/css/site.css
2019-01-31 16:25:10.006 [http-nio-8080-exec-4] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/css/bootstrap.min.css
2019-01-31 16:25:10.011 [http-nio-8080-exec-7] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/js/bootstrap.min.js
2019-01-31 16:25:10.013 [http-nio-8080-exec-6] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/js/jquery.min.js
2019-01-31 16:25:10.074 [http-nio-8080-exec-8] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/default.html
2019-01-31 16:25:10.100 [http-nio-8080-exec-9] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/favicon.ico
2019-01-31 16:25:12.895 [http-nio-8080-exec-2] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productCurrentOut
2019-01-31 16:25:14.483 [http-nio-8080-exec-10] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productListForTrade
2019-01-31 16:25:14.489 [http-nio-8080-exec-10] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 order by prod_id 
2019-01-31 16:25:14.490 [http-nio-8080-exec-10] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==> Parameters: 
2019-01-31 16:25:14.495 [http-nio-8080-exec-10] DEBUG com.yun.product.dao.ProductDao.findProductByParam - <==      Total: 4
2019-01-31 16:25:14.496 [http-nio-8080-exec-10] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-31 16:25:14.497 [http-nio-8080-exec-10] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 2(Integer)
2019-01-31 16:25:14.501 [http-nio-8080-exec-10] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-01-31 16:25:14.502 [http-nio-8080-exec-10] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-31 16:25:14.503 [http-nio-8080-exec-10] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 3(Integer)
2019-01-31 16:25:14.505 [http-nio-8080-exec-10] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-01-31 16:25:14.506 [http-nio-8080-exec-10] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-31 16:25:14.507 [http-nio-8080-exec-10] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 4(Integer)
2019-01-31 16:25:14.511 [http-nio-8080-exec-10] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 2
2019-01-31 16:25:14.512 [http-nio-8080-exec-10] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-31 16:25:14.513 [http-nio-8080-exec-10] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 5(Integer)
2019-01-31 16:25:14.514 [http-nio-8080-exec-10] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 2
2019-01-31 16:25:16.796 [http-nio-8080-exec-1] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productListForTrade
2019-01-31 16:25:16.801 [http-nio-8080-exec-1] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 and p.prod_name like ? order by prod_id 
2019-01-31 16:25:16.803 [http-nio-8080-exec-1] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==> Parameters: %a%(String)
2019-01-31 16:25:16.805 [http-nio-8080-exec-1] DEBUG com.yun.product.dao.ProductDao.findProductByParam - <==      Total: 0
2019-01-31 16:25:24.230 [http-nio-8080-exec-3] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productReceiveStockList
2019-01-31 16:25:24.235 [http-nio-8080-exec-3] DEBUG c.y.stock.controller.ProductReceiveStockController - 跳转到待收库存查询控制器
2019-01-31 16:25:24.246 [http-nio-8080-exec-3] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - ==>  Preparing: select count(*) from product_receive_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 
2019-01-31 16:25:24.247 [http-nio-8080-exec-3] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - ==> Parameters: 
2019-01-31 16:25:24.250 [http-nio-8080-exec-3] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - <==      Total: 1
2019-01-31 16:25:24.257 [http-nio-8080-exec-3] DEBUG c.y.s.d.P.findProductReceiveStockList - ==>  Preparing: select ps.prod_rece_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_receive_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 order by p.prod_id,pp.prod_param_id limit ?,? 
2019-01-31 16:25:24.257 [http-nio-8080-exec-3] DEBUG c.y.s.d.P.findProductReceiveStockList - ==> Parameters: 0(Integer), 5(Integer)
2019-01-31 16:25:24.263 [http-nio-8080-exec-3] DEBUG c.y.s.d.P.findProductReceiveStockList - <==      Total: 5
2019-01-31 16:25:24.265 [http-nio-8080-exec-3] DEBUG c.y.stock.controller.ProductReceiveStockController - 转到待收库存页面
2019-01-31 16:25:25.431 [http-nio-8080-exec-5] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productStockList
2019-01-31 16:25:25.436 [http-nio-8080-exec-5] DEBUG com.yun.stock.controller.ProductStockController - 跳转到物品库存查询控制器
2019-01-31 16:25:25.439 [http-nio-8080-exec-5] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==>  Preparing: select count(*) from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 
2019-01-31 16:25:25.440 [http-nio-8080-exec-5] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==> Parameters: 
2019-01-31 16:25:25.441 [http-nio-8080-exec-5] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - <==      Total: 1
2019-01-31 16:25:25.446 [http-nio-8080-exec-5] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==>  Preparing: select ps.prod_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 order by p.prod_id,pp.prod_param_id limit ?,? 
2019-01-31 16:25:25.447 [http-nio-8080-exec-5] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==> Parameters: 0(Integer), 5(Integer)
2019-01-31 16:25:25.453 [http-nio-8080-exec-5] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - <==      Total: 2
2019-01-31 16:25:25.456 [http-nio-8080-exec-5] DEBUG com.yun.stock.controller.ProductStockController - 转到物品库存页面
2019-01-31 16:25:26.057 [http-nio-8080-exec-7] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productReceiveIn
2019-01-31 16:25:26.654 [http-nio-8080-exec-4] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productReceiveReject
2019-01-31 16:25:27.227 [http-nio-8080-exec-6] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productCurrentIn
2019-01-31 16:25:27.714 [http-nio-8080-exec-8] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productCurrentOut
2019-01-31 16:28:01.010 [main] INFO  com.yun.YunEbStockApplication - Starting YunEbStockApplication on USER-20181202BJ with PID 3676 (E:\workspace\yun-eb-stock\target\classes started by Administrator in E:\workspace\yun-eb-stock)
2019-01-31 16:28:01.027 [main] DEBUG com.yun.YunEbStockApplication - Running with Spring Boot v1.5.9.RELEASE, Spring v4.3.13.RELEASE
2019-01-31 16:28:01.027 [main] INFO  com.yun.YunEbStockApplication - No active profile set, falling back to default profiles: default
2019-01-31 16:28:01.369 [background-preinit] INFO  org.hibernate.validator.internal.util.Version - HV000001: Hibernate Validator 5.3.6.Final
2019-01-31 16:28:01.446 [main] INFO  o.s.b.c.e.AnnotationConfigEmbeddedWebApplicationContext - Refreshing org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@6a28ffa4: startup date [Thu Jan 31 16:28:01 CST 2019]; root of context hierarchy
2019-01-31 16:28:03.017 [main] INFO  o.s.b.c.e.tomcat.TomcatEmbeddedServletContainer - Tomcat initialized with port(s): 8080 (http)
2019-01-31 16:28:03.027 [main] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2019-01-31 16:28:03.028 [main] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet Engine: Apache Tomcat/8.5.23
2019-01-31 16:28:03.131 [localhost-startStop-1] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2019-01-31 16:28:03.132 [localhost-startStop-1] INFO  org.springframework.web.context.ContextLoader - Root WebApplicationContext: initialization completed in 1686 ms
2019-01-31 16:28:03.306 [localhost-startStop-1] INFO  o.s.boot.web.servlet.FilterRegistrationBean - Mapping filter: 'characterEncodingFilter' to: [/*]
2019-01-31 16:28:03.307 [localhost-startStop-1] INFO  o.s.boot.web.servlet.FilterRegistrationBean - Mapping filter: 'hiddenHttpMethodFilter' to: [/*]
2019-01-31 16:28:03.307 [localhost-startStop-1] INFO  o.s.boot.web.servlet.FilterRegistrationBean - Mapping filter: 'httpPutFormContentFilter' to: [/*]
2019-01-31 16:28:03.307 [localhost-startStop-1] INFO  o.s.boot.web.servlet.FilterRegistrationBean - Mapping filter: 'requestContextFilter' to: [/*]
2019-01-31 16:28:03.308 [localhost-startStop-1] INFO  o.s.boot.web.servlet.FilterRegistrationBean - Mapping filter: 'loginFilter' to urls: [/*]
2019-01-31 16:28:03.308 [localhost-startStop-1] INFO  o.s.boot.web.servlet.ServletRegistrationBean - Mapping servlet: 'dispatcherServlet' to [/]
2019-01-31 16:28:04.234 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerAdapter - Looking for @ControllerAdvice: org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@6a28ffa4: startup date [Thu Jan 31 16:28:01 CST 2019]; root of context hierarchy
2019-01-31 16:28:04.298 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productListForAutoComplete]}" onto public java.util.List<com.yun.product.model.Product> com.yun.product.controller.ProductController.productListForAutoComplete(java.lang.String)
2019-01-31 16:28:04.300 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productListForStock]}" onto public java.util.List<com.yun.product.model.Product> com.yun.product.controller.ProductController.productListForStock()
2019-01-31 16:28:04.300 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productListForTrade]}" onto public java.util.List<com.yun.product.model.Product> com.yun.product.controller.ProductController.productListForTrade(java.lang.String)
2019-01-31 16:28:04.301 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productList]}" onto public java.lang.String com.yun.product.controller.ProductController.productList(org.springframework.ui.Model,java.lang.String,java.lang.String,java.lang.String,java.lang.String)
2019-01-31 16:28:04.301 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productPreAdd]}" onto public java.lang.String com.yun.product.controller.ProductController.productPreAdd()
2019-01-31 16:28:04.301 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productSave]}" onto public java.lang.String com.yun.product.controller.ProductController.productSave(com.yun.product.model.Product)
2019-01-31 16:28:04.301 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productDelete]}" onto public java.lang.String com.yun.product.controller.ProductController.productDelete(int)
2019-01-31 16:28:04.301 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productPreUpdate]}" onto public java.lang.String com.yun.product.controller.ProductController.productPreUpdate(int,org.springframework.ui.Model)
2019-01-31 16:28:04.302 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productUpdate]}" onto public java.lang.String com.yun.product.controller.ProductController.productUpdate(com.yun.product.model.Product)
2019-01-31 16:28:04.303 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/prodParamDelete]}" onto public java.lang.String com.yun.product.controller.ProductParamController.prodParamDelete(int)
2019-01-31 16:28:04.304 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/prodParamPreAdd]}" onto public java.lang.String com.yun.product.controller.ProductParamController.prodParamPreAdd(int,org.springframework.ui.Model)
2019-01-31 16:28:04.304 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/prodParamSave]}" onto public java.lang.String com.yun.product.controller.ProductParamController.prodParamSave(com.yun.product.model.ProductParameter)
2019-01-31 16:28:04.304 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/prodParamList]}" onto public java.lang.String com.yun.product.controller.ProductParamController.prodParamList(int)
2019-01-31 16:28:04.307 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeUpdate]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeUpdate(java.lang.Integer,org.springframework.ui.Model)
2019-01-31 16:28:04.308 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeUpdateSave]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeUpdateSave(com.yun.product.model.ProductType)
2019-01-31 16:28:04.308 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeDelete]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeDelete(java.lang.Integer,javax.servlet.http.HttpServletResponse) throws java.io.IOException
2019-01-31 16:28:04.308 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeList]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeList(org.springframework.ui.Model)
2019-01-31 16:28:04.309 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeTree]}" onto public java.util.List<com.yun.product.model.ProductType> com.yun.product.controller.ProductTypeController.productTypeTree()
2019-01-31 16:28:04.309 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeEdit]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeEdit()
2019-01-31 16:28:04.309 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeSave]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeSave(com.yun.product.model.ProductType)
2019-01-31 16:28:04.310 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveStockList]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveStockController.productReceiveStocklist(java.lang.String,java.lang.String,org.springframework.ui.Model)
2019-01-31 16:28:04.310 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveStockPreAdd]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveStockController.productReceiveStockPreAdd()
2019-01-31 16:28:04.311 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveStockSave]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveStockController.productReceiveStockSave(com.yun.stock.model.ProductReceiveStock)
2019-01-31 16:28:04.311 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveStockDelete]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveStockController.productReceiveStockDelete(int)
2019-01-31 16:28:04.311 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveStockPreUpdate]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveStockController.productReceiveStockPreUpdate(int,org.springframework.ui.Model)
2019-01-31 16:28:04.311 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveStockUpdate]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveStockController.productReceiveStockUpdate(com.yun.stock.model.ProductReceiveStock)
2019-01-31 16:28:04.312 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveRejectSave]}" onto public void com.yun.stock.controller.ProductReceiveTradeController.receiveRejectSave(com.yun.stock.model.ProductReceiveTrade,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse) throws java.io.IOException
2019-01-31 16:28:04.313 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveToCurrentSave]}" onto public void com.yun.stock.controller.ProductReceiveTradeController.productReceiveToCurrentSave(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse) throws java.lang.Exception
2019-01-31 16:28:04.313 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveStockToCurrentStock]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveTradeController.productReceiveStockToCurrentStock(int,org.springframework.ui.Model)
2019-01-31 16:28:04.313 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveInSave]}" onto public void com.yun.stock.controller.ProductReceiveTradeController.receiveInSave(com.yun.stock.model.ProductReceiveTrade,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse) throws java.io.IOException
2019-01-31 16:28:04.313 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveIn]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveTradeController.receiveIn(org.springframework.ui.Model)
2019-01-31 16:28:04.314 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveReject]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveTradeController.receiveReject(org.springframework.ui.Model)
2019-01-31 16:28:04.314 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockPreAdd]}" onto public java.lang.String com.yun.stock.controller.ProductStockController.productStockPreAdd()
2019-01-31 16:28:04.315 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockDelete]}" onto public java.lang.String com.yun.stock.controller.ProductStockController.productStockDelete(int)
2019-01-31 16:28:04.315 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockPreUpdate]}" onto public java.lang.String com.yun.stock.controller.ProductStockController.productStockPreUpdate(int,org.springframework.ui.Model)
2019-01-31 16:28:04.315 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockUpdate]}" onto public java.lang.String com.yun.stock.controller.ProductStockController.productStockUpdate(com.yun.stock.model.ProductStock)
2019-01-31 16:28:04.315 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockSave]}" onto public java.lang.String com.yun.stock.controller.ProductStockController.productStockSave(com.yun.stock.model.ProductStock)
2019-01-31 16:28:04.316 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockList]}" onto public java.lang.String com.yun.stock.controller.ProductStockController.productStocklist(java.lang.String,java.lang.String,org.springframework.ui.Model)
2019-01-31 16:28:04.316 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productCurrentInSave]}" onto public void com.yun.stock.controller.ProductTradeController.productCurrentInSave(com.yun.stock.model.ProductTrade,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse) throws java.io.IOException
2019-01-31 16:28:04.317 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productCurrentOutSave]}" onto public void com.yun.stock.controller.ProductTradeController.productCurrentOutSave(com.yun.stock.model.ProductTrade,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse) throws java.io.IOException
2019-01-31 16:28:04.317 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productCurrentOut]}" onto public java.lang.String com.yun.stock.controller.ProductTradeController.receiveReject(org.springframework.ui.Model)
2019-01-31 16:28:04.317 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productCurrentIn]}" onto public java.lang.String com.yun.stock.controller.ProductTradeController.productCurrentIn(org.springframework.ui.Model)
2019-01-31 16:28:04.318 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/main]}" onto public java.lang.String com.yun.user.controller.MainController.main()
2019-01-31 16:28:04.318 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/userList]}" onto public java.lang.String com.yun.user.controller.UserController.userList(org.springframework.ui.Model)
2019-01-31 16:28:04.318 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/userSave]}" onto public java.lang.String com.yun.user.controller.UserController.userSave(com.yun.user.model.UserInfo)
2019-01-31 16:28:04.319 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/login]}" onto public void com.yun.user.controller.UserController.login(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse) throws java.io.IOException
2019-01-31 16:28:04.319 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/userEdit]}" onto public java.lang.String com.yun.user.controller.UserController.userEdit()
2019-01-31 16:28:04.319 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/deleteUserInfo]}" onto public java.lang.String com.yun.user.controller.UserController.userDelete(int)
2019-01-31 16:28:04.323 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/error]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> org.springframework.boot.autoconfigure.web.BasicErrorController.error(javax.servlet.http.HttpServletRequest)
2019-01-31 16:28:04.323 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/error],produces=[text/html]}" onto public org.springframework.web.servlet.ModelAndView org.springframework.boot.autoconfigure.web.BasicErrorController.errorHtml(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
2019-01-31 16:28:04.358 [main] INFO  o.s.web.servlet.handler.SimpleUrlHandlerMapping - Mapped URL path [/webjars/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-01-31 16:28:04.358 [main] INFO  o.s.web.servlet.handler.SimpleUrlHandlerMapping - Mapped URL path [/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-01-31 16:28:04.400 [main] INFO  o.s.web.servlet.handler.SimpleUrlHandlerMapping - Mapped URL path [/**/favicon.ico] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-01-31 16:28:04.704 [main] INFO  o.s.b.a.w.WebMvcAutoConfiguration$WelcomePageHandlerMapping - Adding welcome page: class path resource [static/index.html]
2019-01-31 16:28:04.960 [main] INFO  o.s.jmx.export.annotation.AnnotationMBeanExporter - Registering beans for JMX exposure on startup
2019-01-31 16:28:04.979 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2019-01-31 16:28:04.989 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2019-01-31 16:28:05.002 [main] INFO  org.apache.tomcat.util.net.NioSelectorPool - Using a shared selector for servlet write/read
2019-01-31 16:28:05.174 [main] INFO  o.s.b.c.e.tomcat.TomcatEmbeddedServletContainer - Tomcat started on port(s): 8080 (http)
2019-01-31 16:28:05.180 [main] INFO  com.yun.YunEbStockApplication - Started YunEbStockApplication in 4.768 seconds (JVM running for 5.934)
2019-01-31 16:28:08.478 [http-nio-8080-exec-2] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring FrameworkServlet 'dispatcherServlet'
2019-01-31 16:28:08.479 [http-nio-8080-exec-2] INFO  org.springframework.web.servlet.DispatcherServlet - FrameworkServlet 'dispatcherServlet': initialization started
2019-01-31 16:28:08.499 [http-nio-8080-exec-2] INFO  org.springframework.web.servlet.DispatcherServlet - FrameworkServlet 'dispatcherServlet': initialization completed in 19 ms
2019-01-31 16:28:08.512 [http-nio-8080-exec-2] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/userList
2019-01-31 16:28:13.713 [http-nio-8080-exec-3] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/login
2019-01-31 16:28:14.016 [http-nio-8080-exec-3] DEBUG c.y.user.dao.UserInfoDao.findUserInfoByNameAndPass - ==>  Preparing: select * from user_info where login_name=? and login_pass=? 
2019-01-31 16:28:14.036 [http-nio-8080-exec-3] DEBUG c.y.user.dao.UserInfoDao.findUserInfoByNameAndPass - ==> Parameters: admin(String), 123(String)
2019-01-31 16:28:14.048 [http-nio-8080-exec-3] DEBUG c.y.user.dao.UserInfoDao.findUserInfoByNameAndPass - <==      Total: 1
2019-01-31 16:28:14.057 [http-nio-8080-exec-1] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/main
2019-01-31 16:28:17.817 [http-nio-8080-exec-4] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/userList
2019-01-31 16:28:17.826 [http-nio-8080-exec-4] DEBUG com.yun.user.dao.UserInfoDao.findUserInfoList - ==>  Preparing: select * from user_info 
2019-01-31 16:28:17.827 [http-nio-8080-exec-4] DEBUG com.yun.user.dao.UserInfoDao.findUserInfoList - ==> Parameters: 
2019-01-31 16:28:17.830 [http-nio-8080-exec-4] DEBUG com.yun.user.dao.UserInfoDao.findUserInfoList - <==      Total: 2
2019-01-31 16:28:19.770 [http-nio-8080-exec-5] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/userEdit
2019-01-31 16:28:19.826 [http-nio-8080-exec-6] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/js/jquery.validate.min.js
2019-01-31 16:29:27.531 [http-nio-8080-exec-8] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/main
2019-01-31 16:29:27.595 [http-nio-8080-exec-9] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/css/bootstrap.min.css
2019-01-31 16:29:27.596 [http-nio-8080-exec-10] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/css/site.css
2019-01-31 16:29:27.599 [http-nio-8080-exec-2] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/js/jquery.min.js
2019-01-31 16:29:27.608 [http-nio-8080-exec-3] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/js/bootstrap.min.js
2019-01-31 16:29:27.639 [http-nio-8080-exec-1] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/default.html
2019-01-31 16:29:27.668 [http-nio-8080-exec-4] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/favicon.ico
2019-01-31 16:29:30.381 [http-nio-8080-exec-5] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/userList
2019-01-31 16:29:30.387 [http-nio-8080-exec-5] DEBUG com.yun.user.dao.UserInfoDao.findUserInfoList - ==>  Preparing: select * from user_info 
2019-01-31 16:29:30.388 [http-nio-8080-exec-5] DEBUG com.yun.user.dao.UserInfoDao.findUserInfoList - ==> Parameters: 
2019-01-31 16:29:30.390 [http-nio-8080-exec-5] DEBUG com.yun.user.dao.UserInfoDao.findUserInfoList - <==      Total: 2
2019-01-31 16:29:31.612 [http-nio-8080-exec-6] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/userEdit
2019-01-31 16:29:31.644 [http-nio-8080-exec-7] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/js/jquery.message_cn.js
2019-01-31 16:33:30.605 [http-nio-8080-exec-3] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productTypeList
2019-01-31 16:33:30.609 [http-nio-8080-exec-3] INFO  com.yun.product.controller.ProductTypeController - 跳转到stock/productTypeList.html页面
2019-01-31 16:33:30.674 [http-nio-8080-exec-1] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productTypeTree
2019-01-31 16:33:30.688 [http-nio-8080-exec-1] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - ==>  Preparing: select p1.prod_type_id,p1.prod_type_name,p1.parent_id,p2.prod_type_id parent_type_id,p2.prod_type_name parent_type_name from product_type p1 LEFT JOIN product_type p2 on p1.parent_id=p2.prod_type_id where p1.parent_id=? 
2019-01-31 16:33:30.689 [http-nio-8080-exec-1] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - ==> Parameters: 0(Integer)
2019-01-31 16:33:30.694 [http-nio-8080-exec-1] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - ====>  Preparing: select p1.prod_type_id,p1.prod_type_name,p1.parent_id,p2.prod_type_id parent_type_id,p2.prod_type_name parent_type_name from product_type p1 LEFT JOIN product_type p2 on p1.parent_id=p2.prod_type_id where p1.parent_id=? 
2019-01-31 16:33:30.694 [http-nio-8080-exec-1] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - ====> Parameters: 29(Integer)
2019-01-31 16:33:30.701 [http-nio-8080-exec-1] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - ======>  Preparing: select p1.prod_type_id,p1.prod_type_name,p1.parent_id,p2.prod_type_id parent_type_id,p2.prod_type_name parent_type_name from product_type p1 LEFT JOIN product_type p2 on p1.parent_id=p2.prod_type_id where p1.parent_id=? 
2019-01-31 16:33:30.702 [http-nio-8080-exec-1] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - ======> Parameters: 30(Integer)
2019-01-31 16:33:30.703 [http-nio-8080-exec-1] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - <======      Total: 0
2019-01-31 16:33:30.704 [http-nio-8080-exec-1] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - <====      Total: 1
2019-01-31 16:33:30.704 [http-nio-8080-exec-1] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - ====>  Preparing: select p1.prod_type_id,p1.prod_type_name,p1.parent_id,p2.prod_type_id parent_type_id,p2.prod_type_name parent_type_name from product_type p1 LEFT JOIN product_type p2 on p1.parent_id=p2.prod_type_id where p1.parent_id=? 
2019-01-31 16:33:30.705 [http-nio-8080-exec-1] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - ====> Parameters: 39(Integer)
2019-01-31 16:33:30.706 [http-nio-8080-exec-1] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - ======>  Preparing: select p1.prod_type_id,p1.prod_type_name,p1.parent_id,p2.prod_type_id parent_type_id,p2.prod_type_name parent_type_name from product_type p1 LEFT JOIN product_type p2 on p1.parent_id=p2.prod_type_id where p1.parent_id=? 
2019-01-31 16:33:30.707 [http-nio-8080-exec-1] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - ======> Parameters: 41(Integer)
2019-01-31 16:33:30.708 [http-nio-8080-exec-1] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - <======      Total: 0
2019-01-31 16:33:30.709 [http-nio-8080-exec-1] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - <====      Total: 1
2019-01-31 16:33:30.710 [http-nio-8080-exec-1] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - <==      Total: 2
2019-01-31 16:33:32.035 [http-nio-8080-exec-4] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productTypeEdit
2019-01-31 16:33:45.875 [http-nio-8080-exec-5] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productTypeList
2019-01-31 16:33:45.876 [http-nio-8080-exec-5] INFO  com.yun.product.controller.ProductTypeController - 跳转到stock/productTypeList.html页面
2019-01-31 16:33:45.935 [http-nio-8080-exec-6] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productTypeTree
2019-01-31 16:33:45.940 [http-nio-8080-exec-6] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - ==>  Preparing: select p1.prod_type_id,p1.prod_type_name,p1.parent_id,p2.prod_type_id parent_type_id,p2.prod_type_name parent_type_name from product_type p1 LEFT JOIN product_type p2 on p1.parent_id=p2.prod_type_id where p1.parent_id=? 
2019-01-31 16:33:45.941 [http-nio-8080-exec-6] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - ==> Parameters: 0(Integer)
2019-01-31 16:33:45.943 [http-nio-8080-exec-6] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - ====>  Preparing: select p1.prod_type_id,p1.prod_type_name,p1.parent_id,p2.prod_type_id parent_type_id,p2.prod_type_name parent_type_name from product_type p1 LEFT JOIN product_type p2 on p1.parent_id=p2.prod_type_id where p1.parent_id=? 
2019-01-31 16:33:45.943 [http-nio-8080-exec-6] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - ====> Parameters: 29(Integer)
2019-01-31 16:33:45.944 [http-nio-8080-exec-6] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - ======>  Preparing: select p1.prod_type_id,p1.prod_type_name,p1.parent_id,p2.prod_type_id parent_type_id,p2.prod_type_name parent_type_name from product_type p1 LEFT JOIN product_type p2 on p1.parent_id=p2.prod_type_id where p1.parent_id=? 
2019-01-31 16:33:45.945 [http-nio-8080-exec-6] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - ======> Parameters: 30(Integer)
2019-01-31 16:33:45.946 [http-nio-8080-exec-6] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - <======      Total: 0
2019-01-31 16:33:45.946 [http-nio-8080-exec-6] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - <====      Total: 1
2019-01-31 16:33:45.947 [http-nio-8080-exec-6] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - ====>  Preparing: select p1.prod_type_id,p1.prod_type_name,p1.parent_id,p2.prod_type_id parent_type_id,p2.prod_type_name parent_type_name from product_type p1 LEFT JOIN product_type p2 on p1.parent_id=p2.prod_type_id where p1.parent_id=? 
2019-01-31 16:33:45.947 [http-nio-8080-exec-6] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - ====> Parameters: 39(Integer)
2019-01-31 16:33:45.950 [http-nio-8080-exec-6] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - ======>  Preparing: select p1.prod_type_id,p1.prod_type_name,p1.parent_id,p2.prod_type_id parent_type_id,p2.prod_type_name parent_type_name from product_type p1 LEFT JOIN product_type p2 on p1.parent_id=p2.prod_type_id where p1.parent_id=? 
2019-01-31 16:33:45.951 [http-nio-8080-exec-6] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - ======> Parameters: 41(Integer)
2019-01-31 16:33:45.953 [http-nio-8080-exec-6] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - <======      Total: 0
2019-01-31 16:33:45.953 [http-nio-8080-exec-6] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - <====      Total: 1
2019-01-31 16:33:45.954 [http-nio-8080-exec-6] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - <==      Total: 2
2019-01-31 16:33:47.581 [http-nio-8080-exec-7] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productTypeUpdate
2019-01-31 16:33:47.585 [http-nio-8080-exec-7] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeById - ==>  Preparing: select p1.prod_type_id,p1.prod_type_name,p1.parent_id,p2.prod_type_id parent_type_id,p2.prod_type_name parent_type_name from product_type p1 LEFT JOIN product_type p2 on p1.parent_id=p2.prod_type_id where p1.prod_type_id=? 
2019-01-31 16:33:47.586 [http-nio-8080-exec-7] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeById - ==> Parameters: 29(Integer)
2019-01-31 16:33:47.588 [http-nio-8080-exec-7] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - ====>  Preparing: select p1.prod_type_id,p1.prod_type_name,p1.parent_id,p2.prod_type_id parent_type_id,p2.prod_type_name parent_type_name from product_type p1 LEFT JOIN product_type p2 on p1.parent_id=p2.prod_type_id where p1.parent_id=? 
2019-01-31 16:33:47.589 [http-nio-8080-exec-7] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - ====> Parameters: 29(Integer)
2019-01-31 16:33:47.591 [http-nio-8080-exec-7] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - ======>  Preparing: select p1.prod_type_id,p1.prod_type_name,p1.parent_id,p2.prod_type_id parent_type_id,p2.prod_type_name parent_type_name from product_type p1 LEFT JOIN product_type p2 on p1.parent_id=p2.prod_type_id where p1.parent_id=? 
2019-01-31 16:33:47.592 [http-nio-8080-exec-7] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - ======> Parameters: 30(Integer)
2019-01-31 16:33:47.595 [http-nio-8080-exec-7] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - <======      Total: 0
2019-01-31 16:33:47.595 [http-nio-8080-exec-7] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - <====      Total: 1
2019-01-31 16:33:47.596 [http-nio-8080-exec-7] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeById - <==      Total: 1
2019-01-31 16:33:49.098 [http-nio-8080-exec-8] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productTypeUpdateSave
2019-01-31 16:33:49.111 [http-nio-8080-exec-8] DEBUG c.yun.product.dao.ProductTypeDao.updateProductType - ==>  Preparing: update product_type set prod_type_name=?,parent_id=? where prod_type_id=? 
2019-01-31 16:33:49.111 [http-nio-8080-exec-8] DEBUG c.yun.product.dao.ProductTypeDao.updateProductType - ==> Parameters: 玩具(String), 0(Integer), 29(Integer)
2019-01-31 16:33:49.114 [http-nio-8080-exec-8] DEBUG c.yun.product.dao.ProductTypeDao.updateProductType - <==    Updates: 1
2019-01-31 16:33:49.175 [http-nio-8080-exec-9] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productTypeList
2019-01-31 16:33:49.175 [http-nio-8080-exec-9] INFO  com.yun.product.controller.ProductTypeController - 跳转到stock/productTypeList.html页面
2019-01-31 16:33:49.219 [http-nio-8080-exec-10] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productTypeTree
2019-01-31 16:33:49.221 [http-nio-8080-exec-10] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - ==>  Preparing: select p1.prod_type_id,p1.prod_type_name,p1.parent_id,p2.prod_type_id parent_type_id,p2.prod_type_name parent_type_name from product_type p1 LEFT JOIN product_type p2 on p1.parent_id=p2.prod_type_id where p1.parent_id=? 
2019-01-31 16:33:49.221 [http-nio-8080-exec-10] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - ==> Parameters: 0(Integer)
2019-01-31 16:33:49.224 [http-nio-8080-exec-10] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - ====>  Preparing: select p1.prod_type_id,p1.prod_type_name,p1.parent_id,p2.prod_type_id parent_type_id,p2.prod_type_name parent_type_name from product_type p1 LEFT JOIN product_type p2 on p1.parent_id=p2.prod_type_id where p1.parent_id=? 
2019-01-31 16:33:49.225 [http-nio-8080-exec-10] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - ====> Parameters: 29(Integer)
2019-01-31 16:33:49.227 [http-nio-8080-exec-10] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - ======>  Preparing: select p1.prod_type_id,p1.prod_type_name,p1.parent_id,p2.prod_type_id parent_type_id,p2.prod_type_name parent_type_name from product_type p1 LEFT JOIN product_type p2 on p1.parent_id=p2.prod_type_id where p1.parent_id=? 
2019-01-31 16:33:49.228 [http-nio-8080-exec-10] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - ======> Parameters: 30(Integer)
2019-01-31 16:33:49.229 [http-nio-8080-exec-10] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - <======      Total: 0
2019-01-31 16:33:49.229 [http-nio-8080-exec-10] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - <====      Total: 1
2019-01-31 16:33:49.230 [http-nio-8080-exec-10] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - ====>  Preparing: select p1.prod_type_id,p1.prod_type_name,p1.parent_id,p2.prod_type_id parent_type_id,p2.prod_type_name parent_type_name from product_type p1 LEFT JOIN product_type p2 on p1.parent_id=p2.prod_type_id where p1.parent_id=? 
2019-01-31 16:33:49.231 [http-nio-8080-exec-10] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - ====> Parameters: 39(Integer)
2019-01-31 16:33:49.233 [http-nio-8080-exec-10] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - ======>  Preparing: select p1.prod_type_id,p1.prod_type_name,p1.parent_id,p2.prod_type_id parent_type_id,p2.prod_type_name parent_type_name from product_type p1 LEFT JOIN product_type p2 on p1.parent_id=p2.prod_type_id where p1.parent_id=? 
2019-01-31 16:33:49.234 [http-nio-8080-exec-10] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - ======> Parameters: 41(Integer)
2019-01-31 16:33:49.235 [http-nio-8080-exec-10] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - <======      Total: 0
2019-01-31 16:33:49.236 [http-nio-8080-exec-10] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - <====      Total: 1
2019-01-31 16:33:49.237 [http-nio-8080-exec-10] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - <==      Total: 2
2019-01-31 16:33:51.786 [http-nio-8080-exec-2] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productTypeUpdate
2019-01-31 16:33:51.789 [http-nio-8080-exec-2] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeById - ==>  Preparing: select p1.prod_type_id,p1.prod_type_name,p1.parent_id,p2.prod_type_id parent_type_id,p2.prod_type_name parent_type_name from product_type p1 LEFT JOIN product_type p2 on p1.parent_id=p2.prod_type_id where p1.prod_type_id=? 
2019-01-31 16:33:51.790 [http-nio-8080-exec-2] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeById - ==> Parameters: 29(Integer)
2019-01-31 16:33:51.791 [http-nio-8080-exec-2] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - ====>  Preparing: select p1.prod_type_id,p1.prod_type_name,p1.parent_id,p2.prod_type_id parent_type_id,p2.prod_type_name parent_type_name from product_type p1 LEFT JOIN product_type p2 on p1.parent_id=p2.prod_type_id where p1.parent_id=? 
2019-01-31 16:33:51.792 [http-nio-8080-exec-2] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - ====> Parameters: 29(Integer)
2019-01-31 16:33:51.793 [http-nio-8080-exec-2] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - ======>  Preparing: select p1.prod_type_id,p1.prod_type_name,p1.parent_id,p2.prod_type_id parent_type_id,p2.prod_type_name parent_type_name from product_type p1 LEFT JOIN product_type p2 on p1.parent_id=p2.prod_type_id where p1.parent_id=? 
2019-01-31 16:33:51.794 [http-nio-8080-exec-2] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - ======> Parameters: 30(Integer)
2019-01-31 16:33:51.795 [http-nio-8080-exec-2] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - <======      Total: 0
2019-01-31 16:33:51.796 [http-nio-8080-exec-2] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - <====      Total: 1
2019-01-31 16:33:51.797 [http-nio-8080-exec-2] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeById - <==      Total: 1
2019-01-31 16:33:54.031 [http-nio-8080-exec-3] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productTypeUpdateSave
2019-01-31 16:33:54.039 [http-nio-8080-exec-3] DEBUG c.yun.product.dao.ProductTypeDao.updateProductType - ==>  Preparing: update product_type set prod_type_name=?,parent_id=? where prod_type_id=? 
2019-01-31 16:33:54.040 [http-nio-8080-exec-3] DEBUG c.yun.product.dao.ProductTypeDao.updateProductType - ==> Parameters: 玩具(String), 0(Integer), 29(Integer)
2019-01-31 16:33:54.044 [http-nio-8080-exec-3] DEBUG c.yun.product.dao.ProductTypeDao.updateProductType - <==    Updates: 1
2019-01-31 16:33:54.190 [http-nio-8080-exec-1] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productTypeList
2019-01-31 16:33:54.191 [http-nio-8080-exec-1] INFO  com.yun.product.controller.ProductTypeController - 跳转到stock/productTypeList.html页面
2019-01-31 16:33:54.256 [http-nio-8080-exec-4] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productTypeTree
2019-01-31 16:33:54.257 [http-nio-8080-exec-4] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - ==>  Preparing: select p1.prod_type_id,p1.prod_type_name,p1.parent_id,p2.prod_type_id parent_type_id,p2.prod_type_name parent_type_name from product_type p1 LEFT JOIN product_type p2 on p1.parent_id=p2.prod_type_id where p1.parent_id=? 
2019-01-31 16:33:54.257 [http-nio-8080-exec-4] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - ==> Parameters: 0(Integer)
2019-01-31 16:33:54.259 [http-nio-8080-exec-4] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - ====>  Preparing: select p1.prod_type_id,p1.prod_type_name,p1.parent_id,p2.prod_type_id parent_type_id,p2.prod_type_name parent_type_name from product_type p1 LEFT JOIN product_type p2 on p1.parent_id=p2.prod_type_id where p1.parent_id=? 
2019-01-31 16:33:54.259 [http-nio-8080-exec-4] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - ====> Parameters: 29(Integer)
2019-01-31 16:33:54.261 [http-nio-8080-exec-4] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - ======>  Preparing: select p1.prod_type_id,p1.prod_type_name,p1.parent_id,p2.prod_type_id parent_type_id,p2.prod_type_name parent_type_name from product_type p1 LEFT JOIN product_type p2 on p1.parent_id=p2.prod_type_id where p1.parent_id=? 
2019-01-31 16:33:54.261 [http-nio-8080-exec-4] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - ======> Parameters: 30(Integer)
2019-01-31 16:33:54.263 [http-nio-8080-exec-4] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - <======      Total: 0
2019-01-31 16:33:54.263 [http-nio-8080-exec-4] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - <====      Total: 1
2019-01-31 16:33:54.263 [http-nio-8080-exec-4] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - ====>  Preparing: select p1.prod_type_id,p1.prod_type_name,p1.parent_id,p2.prod_type_id parent_type_id,p2.prod_type_name parent_type_name from product_type p1 LEFT JOIN product_type p2 on p1.parent_id=p2.prod_type_id where p1.parent_id=? 
2019-01-31 16:33:54.264 [http-nio-8080-exec-4] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - ====> Parameters: 39(Integer)
2019-01-31 16:33:54.266 [http-nio-8080-exec-4] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - ======>  Preparing: select p1.prod_type_id,p1.prod_type_name,p1.parent_id,p2.prod_type_id parent_type_id,p2.prod_type_name parent_type_name from product_type p1 LEFT JOIN product_type p2 on p1.parent_id=p2.prod_type_id where p1.parent_id=? 
2019-01-31 16:33:54.266 [http-nio-8080-exec-4] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - ======> Parameters: 41(Integer)
2019-01-31 16:33:54.267 [http-nio-8080-exec-4] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - <======      Total: 0
2019-01-31 16:33:54.267 [http-nio-8080-exec-4] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - <====      Total: 1
2019-01-31 16:33:54.268 [http-nio-8080-exec-4] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - <==      Total: 2
2019-01-31 16:33:56.748 [http-nio-8080-exec-5] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productTypeEdit
2019-01-31 16:33:59.862 [http-nio-8080-exec-6] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productList
2019-01-31 16:33:59.904 [http-nio-8080-exec-6] DEBUG c.yun.product.dao.ProductDao.findProductRowByParam - ==>  Preparing: select count(*) from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 
2019-01-31 16:33:59.905 [http-nio-8080-exec-6] DEBUG c.yun.product.dao.ProductDao.findProductRowByParam - ==> Parameters: 
2019-01-31 16:33:59.906 [http-nio-8080-exec-6] DEBUG c.yun.product.dao.ProductDao.findProductRowByParam - <==      Total: 1
2019-01-31 16:33:59.910 [http-nio-8080-exec-6] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 order by prod_id limit ?,? 
2019-01-31 16:33:59.910 [http-nio-8080-exec-6] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==> Parameters: 0(Integer), 5(Integer)
2019-01-31 16:33:59.912 [http-nio-8080-exec-6] DEBUG com.yun.product.dao.ProductDao.findProductByParam - <==      Total: 4
2019-01-31 16:33:59.913 [http-nio-8080-exec-6] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-31 16:33:59.913 [http-nio-8080-exec-6] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 2(Integer)
2019-01-31 16:33:59.914 [http-nio-8080-exec-6] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-01-31 16:33:59.915 [http-nio-8080-exec-6] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-31 16:33:59.915 [http-nio-8080-exec-6] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 3(Integer)
2019-01-31 16:33:59.916 [http-nio-8080-exec-6] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-01-31 16:33:59.916 [http-nio-8080-exec-6] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-31 16:33:59.917 [http-nio-8080-exec-6] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 4(Integer)
2019-01-31 16:33:59.920 [http-nio-8080-exec-6] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 2
2019-01-31 16:33:59.920 [http-nio-8080-exec-6] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-31 16:33:59.922 [http-nio-8080-exec-6] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 5(Integer)
2019-01-31 16:33:59.924 [http-nio-8080-exec-6] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 2
2019-01-31 16:34:01.830 [http-nio-8080-exec-7] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productPreAdd
2019-01-31 16:35:00.081 [http-nio-8080-exec-8] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productList
2019-01-31 16:35:00.083 [http-nio-8080-exec-8] DEBUG c.yun.product.dao.ProductDao.findProductRowByParam - ==>  Preparing: select count(*) from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 
2019-01-31 16:35:00.083 [http-nio-8080-exec-8] DEBUG c.yun.product.dao.ProductDao.findProductRowByParam - ==> Parameters: 
2019-01-31 16:35:00.087 [http-nio-8080-exec-8] DEBUG c.yun.product.dao.ProductDao.findProductRowByParam - <==      Total: 1
2019-01-31 16:35:00.094 [http-nio-8080-exec-8] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 order by prod_id limit ?,? 
2019-01-31 16:35:00.096 [http-nio-8080-exec-8] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==> Parameters: 0(Integer), 5(Integer)
2019-01-31 16:35:00.098 [http-nio-8080-exec-8] DEBUG com.yun.product.dao.ProductDao.findProductByParam - <==      Total: 4
2019-01-31 16:35:00.099 [http-nio-8080-exec-8] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-31 16:35:00.099 [http-nio-8080-exec-8] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 2(Integer)
2019-01-31 16:35:00.100 [http-nio-8080-exec-8] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-01-31 16:35:00.101 [http-nio-8080-exec-8] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-31 16:35:00.101 [http-nio-8080-exec-8] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 3(Integer)
2019-01-31 16:35:00.103 [http-nio-8080-exec-8] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-01-31 16:35:00.104 [http-nio-8080-exec-8] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-31 16:35:00.104 [http-nio-8080-exec-8] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 4(Integer)
2019-01-31 16:35:00.105 [http-nio-8080-exec-8] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 2
2019-01-31 16:35:00.106 [http-nio-8080-exec-8] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-31 16:35:00.106 [http-nio-8080-exec-8] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 5(Integer)
2019-01-31 16:35:00.107 [http-nio-8080-exec-8] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 2
2019-01-31 16:35:01.425 [http-nio-8080-exec-9] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productPreAdd
2019-01-31 16:35:12.845 [http-nio-8080-exec-10] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productList
2019-01-31 16:35:12.847 [http-nio-8080-exec-10] DEBUG c.yun.product.dao.ProductDao.findProductRowByParam - ==>  Preparing: select count(*) from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 
2019-01-31 16:35:12.847 [http-nio-8080-exec-10] DEBUG c.yun.product.dao.ProductDao.findProductRowByParam - ==> Parameters: 
2019-01-31 16:35:12.848 [http-nio-8080-exec-10] DEBUG c.yun.product.dao.ProductDao.findProductRowByParam - <==      Total: 1
2019-01-31 16:35:12.851 [http-nio-8080-exec-10] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 order by prod_id limit ?,? 
2019-01-31 16:35:12.852 [http-nio-8080-exec-10] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==> Parameters: 0(Integer), 5(Integer)
2019-01-31 16:35:12.855 [http-nio-8080-exec-10] DEBUG com.yun.product.dao.ProductDao.findProductByParam - <==      Total: 4
2019-01-31 16:35:12.855 [http-nio-8080-exec-10] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-31 16:35:12.856 [http-nio-8080-exec-10] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 2(Integer)
2019-01-31 16:35:12.857 [http-nio-8080-exec-10] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-01-31 16:35:12.858 [http-nio-8080-exec-10] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-31 16:35:12.858 [http-nio-8080-exec-10] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 3(Integer)
2019-01-31 16:35:12.859 [http-nio-8080-exec-10] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-01-31 16:35:12.860 [http-nio-8080-exec-10] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-31 16:35:12.861 [http-nio-8080-exec-10] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 4(Integer)
2019-01-31 16:35:12.863 [http-nio-8080-exec-10] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 2
2019-01-31 16:35:12.864 [http-nio-8080-exec-10] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-31 16:35:12.865 [http-nio-8080-exec-10] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 5(Integer)
2019-01-31 16:35:12.866 [http-nio-8080-exec-10] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 2
2019-01-31 16:35:16.198 [http-nio-8080-exec-2] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productPreAdd
2019-01-31 16:35:18.209 [http-nio-8080-exec-3] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productList
2019-01-31 16:35:18.217 [http-nio-8080-exec-3] DEBUG c.yun.product.dao.ProductDao.findProductRowByParam - ==>  Preparing: select count(*) from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 
2019-01-31 16:35:18.217 [http-nio-8080-exec-3] DEBUG c.yun.product.dao.ProductDao.findProductRowByParam - ==> Parameters: 
2019-01-31 16:35:18.220 [http-nio-8080-exec-3] DEBUG c.yun.product.dao.ProductDao.findProductRowByParam - <==      Total: 1
2019-01-31 16:35:18.227 [http-nio-8080-exec-3] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 order by prod_id limit ?,? 
2019-01-31 16:35:18.232 [http-nio-8080-exec-3] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==> Parameters: 0(Integer), 5(Integer)
2019-01-31 16:35:18.238 [http-nio-8080-exec-3] DEBUG com.yun.product.dao.ProductDao.findProductByParam - <==      Total: 4
2019-01-31 16:35:18.238 [http-nio-8080-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-31 16:35:18.238 [http-nio-8080-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 2(Integer)
2019-01-31 16:35:18.240 [http-nio-8080-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-01-31 16:35:18.240 [http-nio-8080-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-31 16:35:18.240 [http-nio-8080-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 3(Integer)
2019-01-31 16:35:18.241 [http-nio-8080-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-01-31 16:35:18.242 [http-nio-8080-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-31 16:35:18.242 [http-nio-8080-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 4(Integer)
2019-01-31 16:35:18.243 [http-nio-8080-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 2
2019-01-31 16:35:18.244 [http-nio-8080-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-31 16:35:18.244 [http-nio-8080-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 5(Integer)
2019-01-31 16:35:18.245 [http-nio-8080-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 2
2019-01-31 16:35:19.236 [http-nio-8080-exec-1] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/prodParamList
2019-01-31 16:35:19.238 [http-nio-8080-exec-1] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-31 16:35:19.239 [http-nio-8080-exec-1] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 2(Integer)
2019-01-31 16:35:19.240 [http-nio-8080-exec-1] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-01-31 16:35:31.584 [http-nio-8080-exec-4] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productList
2019-01-31 16:35:31.587 [http-nio-8080-exec-4] DEBUG c.yun.product.dao.ProductDao.findProductRowByParam - ==>  Preparing: select count(*) from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 
2019-01-31 16:35:31.588 [http-nio-8080-exec-4] DEBUG c.yun.product.dao.ProductDao.findProductRowByParam - ==> Parameters: 
2019-01-31 16:35:31.589 [http-nio-8080-exec-4] DEBUG c.yun.product.dao.ProductDao.findProductRowByParam - <==      Total: 1
2019-01-31 16:35:31.595 [http-nio-8080-exec-4] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 order by prod_id limit ?,? 
2019-01-31 16:35:31.595 [http-nio-8080-exec-4] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==> Parameters: 0(Integer), 5(Integer)
2019-01-31 16:35:31.598 [http-nio-8080-exec-4] DEBUG com.yun.product.dao.ProductDao.findProductByParam - <==      Total: 4
2019-01-31 16:35:31.598 [http-nio-8080-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-31 16:35:31.599 [http-nio-8080-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 2(Integer)
2019-01-31 16:35:31.601 [http-nio-8080-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-01-31 16:35:31.601 [http-nio-8080-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-31 16:35:31.602 [http-nio-8080-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 3(Integer)
2019-01-31 16:35:31.603 [http-nio-8080-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-01-31 16:35:31.604 [http-nio-8080-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-31 16:35:31.604 [http-nio-8080-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 4(Integer)
2019-01-31 16:35:31.605 [http-nio-8080-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 2
2019-01-31 16:35:31.605 [http-nio-8080-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-31 16:35:31.606 [http-nio-8080-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 5(Integer)
2019-01-31 16:35:31.608 [http-nio-8080-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 2
2019-01-31 16:35:32.631 [http-nio-8080-exec-5] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productPreAdd
2019-01-31 16:35:37.092 [http-nio-8080-exec-6] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productTypeTree
2019-01-31 16:35:37.097 [http-nio-8080-exec-6] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - ==>  Preparing: select p1.prod_type_id,p1.prod_type_name,p1.parent_id,p2.prod_type_id parent_type_id,p2.prod_type_name parent_type_name from product_type p1 LEFT JOIN product_type p2 on p1.parent_id=p2.prod_type_id where p1.parent_id=? 
2019-01-31 16:35:37.098 [http-nio-8080-exec-6] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - ==> Parameters: 0(Integer)
2019-01-31 16:35:37.101 [http-nio-8080-exec-6] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - ====>  Preparing: select p1.prod_type_id,p1.prod_type_name,p1.parent_id,p2.prod_type_id parent_type_id,p2.prod_type_name parent_type_name from product_type p1 LEFT JOIN product_type p2 on p1.parent_id=p2.prod_type_id where p1.parent_id=? 
2019-01-31 16:35:37.102 [http-nio-8080-exec-6] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - ====> Parameters: 29(Integer)
2019-01-31 16:35:37.104 [http-nio-8080-exec-6] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - ======>  Preparing: select p1.prod_type_id,p1.prod_type_name,p1.parent_id,p2.prod_type_id parent_type_id,p2.prod_type_name parent_type_name from product_type p1 LEFT JOIN product_type p2 on p1.parent_id=p2.prod_type_id where p1.parent_id=? 
2019-01-31 16:35:37.104 [http-nio-8080-exec-6] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - ======> Parameters: 30(Integer)
2019-01-31 16:35:37.106 [http-nio-8080-exec-6] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - <======      Total: 0
2019-01-31 16:35:37.106 [http-nio-8080-exec-6] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - <====      Total: 1
2019-01-31 16:35:37.106 [http-nio-8080-exec-6] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - ====>  Preparing: select p1.prod_type_id,p1.prod_type_name,p1.parent_id,p2.prod_type_id parent_type_id,p2.prod_type_name parent_type_name from product_type p1 LEFT JOIN product_type p2 on p1.parent_id=p2.prod_type_id where p1.parent_id=? 
2019-01-31 16:35:37.108 [http-nio-8080-exec-6] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - ====> Parameters: 39(Integer)
2019-01-31 16:35:37.109 [http-nio-8080-exec-6] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - ======>  Preparing: select p1.prod_type_id,p1.prod_type_name,p1.parent_id,p2.prod_type_id parent_type_id,p2.prod_type_name parent_type_name from product_type p1 LEFT JOIN product_type p2 on p1.parent_id=p2.prod_type_id where p1.parent_id=? 
2019-01-31 16:35:37.110 [http-nio-8080-exec-6] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - ======> Parameters: 41(Integer)
2019-01-31 16:35:37.111 [http-nio-8080-exec-6] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - <======      Total: 0
2019-01-31 16:35:37.111 [http-nio-8080-exec-6] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - <====      Total: 1
2019-01-31 16:35:37.111 [http-nio-8080-exec-6] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - <==      Total: 2
2019-01-31 16:35:40.362 [http-nio-8080-exec-7] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productTypeTree
2019-01-31 16:35:40.376 [http-nio-8080-exec-7] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - ==>  Preparing: select p1.prod_type_id,p1.prod_type_name,p1.parent_id,p2.prod_type_id parent_type_id,p2.prod_type_name parent_type_name from product_type p1 LEFT JOIN product_type p2 on p1.parent_id=p2.prod_type_id where p1.parent_id=? 
2019-01-31 16:35:40.378 [http-nio-8080-exec-7] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - ==> Parameters: 0(Integer)
2019-01-31 16:35:40.383 [http-nio-8080-exec-7] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - ====>  Preparing: select p1.prod_type_id,p1.prod_type_name,p1.parent_id,p2.prod_type_id parent_type_id,p2.prod_type_name parent_type_name from product_type p1 LEFT JOIN product_type p2 on p1.parent_id=p2.prod_type_id where p1.parent_id=? 
2019-01-31 16:35:40.383 [http-nio-8080-exec-7] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - ====> Parameters: 29(Integer)
2019-01-31 16:35:40.385 [http-nio-8080-exec-7] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - ======>  Preparing: select p1.prod_type_id,p1.prod_type_name,p1.parent_id,p2.prod_type_id parent_type_id,p2.prod_type_name parent_type_name from product_type p1 LEFT JOIN product_type p2 on p1.parent_id=p2.prod_type_id where p1.parent_id=? 
2019-01-31 16:35:40.386 [http-nio-8080-exec-7] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - ======> Parameters: 30(Integer)
2019-01-31 16:35:40.389 [http-nio-8080-exec-7] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - <======      Total: 0
2019-01-31 16:35:40.389 [http-nio-8080-exec-7] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - <====      Total: 1
2019-01-31 16:35:40.389 [http-nio-8080-exec-7] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - ====>  Preparing: select p1.prod_type_id,p1.prod_type_name,p1.parent_id,p2.prod_type_id parent_type_id,p2.prod_type_name parent_type_name from product_type p1 LEFT JOIN product_type p2 on p1.parent_id=p2.prod_type_id where p1.parent_id=? 
2019-01-31 16:35:40.390 [http-nio-8080-exec-7] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - ====> Parameters: 39(Integer)
2019-01-31 16:35:40.393 [http-nio-8080-exec-7] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - ======>  Preparing: select p1.prod_type_id,p1.prod_type_name,p1.parent_id,p2.prod_type_id parent_type_id,p2.prod_type_name parent_type_name from product_type p1 LEFT JOIN product_type p2 on p1.parent_id=p2.prod_type_id where p1.parent_id=? 
2019-01-31 16:35:40.393 [http-nio-8080-exec-7] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - ======> Parameters: 41(Integer)
2019-01-31 16:35:40.396 [http-nio-8080-exec-7] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - <======      Total: 0
2019-01-31 16:35:40.397 [http-nio-8080-exec-7] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - <====      Total: 1
2019-01-31 16:35:40.397 [http-nio-8080-exec-7] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - <==      Total: 2
2019-01-31 16:35:43.739 [http-nio-8080-exec-8] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productSave
2019-01-31 16:35:43.747 [http-nio-8080-exec-8] DEBUG com.yun.product.dao.ProductDao.insertProduct - ==>  Preparing: insert into product(prod_name,prod_no,prod_type_id,prod_state) values(?,?,?,0) 
2019-01-31 16:35:43.748 [http-nio-8080-exec-8] DEBUG com.yun.product.dao.ProductDao.insertProduct - ==> Parameters: asdas(String), (String), 30(Integer)
2019-01-31 16:35:43.791 [http-nio-8080-exec-8] DEBUG com.yun.product.dao.ProductDao.insertProduct - <==    Updates: 1
2019-01-31 16:35:43.838 [http-nio-8080-exec-9] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productList
2019-01-31 16:35:43.841 [http-nio-8080-exec-9] DEBUG c.yun.product.dao.ProductDao.findProductRowByParam - ==>  Preparing: select count(*) from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 
2019-01-31 16:35:43.841 [http-nio-8080-exec-9] DEBUG c.yun.product.dao.ProductDao.findProductRowByParam - ==> Parameters: 
2019-01-31 16:35:43.842 [http-nio-8080-exec-9] DEBUG c.yun.product.dao.ProductDao.findProductRowByParam - <==      Total: 1
2019-01-31 16:35:43.846 [http-nio-8080-exec-9] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 order by prod_id limit ?,? 
2019-01-31 16:35:43.846 [http-nio-8080-exec-9] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==> Parameters: 0(Integer), 5(Integer)
2019-01-31 16:35:43.849 [http-nio-8080-exec-9] DEBUG com.yun.product.dao.ProductDao.findProductByParam - <==      Total: 5
2019-01-31 16:35:43.850 [http-nio-8080-exec-9] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-31 16:35:43.851 [http-nio-8080-exec-9] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 2(Integer)
2019-01-31 16:35:43.852 [http-nio-8080-exec-9] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-01-31 16:35:43.853 [http-nio-8080-exec-9] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-31 16:35:43.853 [http-nio-8080-exec-9] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 3(Integer)
2019-01-31 16:35:43.854 [http-nio-8080-exec-9] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-01-31 16:35:43.854 [http-nio-8080-exec-9] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-31 16:35:43.854 [http-nio-8080-exec-9] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 4(Integer)
2019-01-31 16:35:43.855 [http-nio-8080-exec-9] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 2
2019-01-31 16:35:43.855 [http-nio-8080-exec-9] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-31 16:35:43.856 [http-nio-8080-exec-9] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 5(Integer)
2019-01-31 16:35:43.857 [http-nio-8080-exec-9] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 2
2019-01-31 16:35:43.858 [http-nio-8080-exec-9] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-31 16:35:43.858 [http-nio-8080-exec-9] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 6(Integer)
2019-01-31 16:35:43.859 [http-nio-8080-exec-9] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 0
2019-01-31 16:35:46.008 [http-nio-8080-exec-10] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/prodParamList
2019-01-31 16:35:46.012 [http-nio-8080-exec-10] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-31 16:35:46.012 [http-nio-8080-exec-10] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 6(Integer)
2019-01-31 16:35:46.014 [http-nio-8080-exec-10] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 0
2019-01-31 16:37:06.742 [http-nio-8080-exec-3] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/main
2019-01-31 16:37:06.803 [http-nio-8080-exec-4] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/css/site.css
2019-01-31 16:37:06.803 [http-nio-8080-exec-5] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/js/jquery.min.js
2019-01-31 16:37:06.810 [http-nio-8080-exec-6] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/js/bootstrap.min.js
2019-01-31 16:37:06.810 [http-nio-8080-exec-1] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/css/bootstrap.min.css
2019-01-31 16:37:06.840 [http-nio-8080-exec-7] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/default.html
2019-01-31 16:37:06.867 [http-nio-8080-exec-8] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/favicon.ico
2019-01-31 16:37:09.955 [http-nio-8080-exec-9] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productList
2019-01-31 16:37:09.960 [http-nio-8080-exec-9] DEBUG c.yun.product.dao.ProductDao.findProductRowByParam - ==>  Preparing: select count(*) from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 
2019-01-31 16:37:09.961 [http-nio-8080-exec-9] DEBUG c.yun.product.dao.ProductDao.findProductRowByParam - ==> Parameters: 
2019-01-31 16:37:09.964 [http-nio-8080-exec-9] DEBUG c.yun.product.dao.ProductDao.findProductRowByParam - <==      Total: 1
2019-01-31 16:37:09.970 [http-nio-8080-exec-9] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 order by prod_id limit ?,? 
2019-01-31 16:37:09.971 [http-nio-8080-exec-9] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==> Parameters: 0(Integer), 5(Integer)
2019-01-31 16:37:09.974 [http-nio-8080-exec-9] DEBUG com.yun.product.dao.ProductDao.findProductByParam - <==      Total: 5
2019-01-31 16:37:09.975 [http-nio-8080-exec-9] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-31 16:37:09.976 [http-nio-8080-exec-9] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 2(Integer)
2019-01-31 16:37:09.978 [http-nio-8080-exec-9] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-01-31 16:37:09.979 [http-nio-8080-exec-9] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-31 16:37:09.980 [http-nio-8080-exec-9] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 3(Integer)
2019-01-31 16:37:09.981 [http-nio-8080-exec-9] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-01-31 16:37:09.982 [http-nio-8080-exec-9] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-31 16:37:09.982 [http-nio-8080-exec-9] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 4(Integer)
2019-01-31 16:37:09.984 [http-nio-8080-exec-9] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 2
2019-01-31 16:37:09.984 [http-nio-8080-exec-9] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-31 16:37:09.984 [http-nio-8080-exec-9] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 5(Integer)
2019-01-31 16:37:09.985 [http-nio-8080-exec-9] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 2
2019-01-31 16:37:09.985 [http-nio-8080-exec-9] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-31 16:37:09.986 [http-nio-8080-exec-9] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 6(Integer)
2019-01-31 16:37:09.986 [http-nio-8080-exec-9] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 0
2019-01-31 16:37:11.873 [http-nio-8080-exec-10] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productPreUpdate
2019-01-31 16:37:11.876 [http-nio-8080-exec-10] DEBUG com.yun.product.dao.ProductDao.findProductById - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 and prod_id=? 
2019-01-31 16:37:11.876 [http-nio-8080-exec-10] DEBUG com.yun.product.dao.ProductDao.findProductById - ==> Parameters: 6(Integer)
2019-01-31 16:37:11.878 [http-nio-8080-exec-10] DEBUG com.yun.product.dao.ProductDao.findProductById - <==      Total: 1
2019-01-31 16:37:16.829 [http-nio-8080-exec-2] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productTypeTree
2019-01-31 16:37:16.831 [http-nio-8080-exec-2] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - ==>  Preparing: select p1.prod_type_id,p1.prod_type_name,p1.parent_id,p2.prod_type_id parent_type_id,p2.prod_type_name parent_type_name from product_type p1 LEFT JOIN product_type p2 on p1.parent_id=p2.prod_type_id where p1.parent_id=? 
2019-01-31 16:37:16.831 [http-nio-8080-exec-2] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - ==> Parameters: 0(Integer)
2019-01-31 16:37:16.833 [http-nio-8080-exec-2] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - ====>  Preparing: select p1.prod_type_id,p1.prod_type_name,p1.parent_id,p2.prod_type_id parent_type_id,p2.prod_type_name parent_type_name from product_type p1 LEFT JOIN product_type p2 on p1.parent_id=p2.prod_type_id where p1.parent_id=? 
2019-01-31 16:37:16.833 [http-nio-8080-exec-2] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - ====> Parameters: 29(Integer)
2019-01-31 16:37:16.834 [http-nio-8080-exec-2] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - ======>  Preparing: select p1.prod_type_id,p1.prod_type_name,p1.parent_id,p2.prod_type_id parent_type_id,p2.prod_type_name parent_type_name from product_type p1 LEFT JOIN product_type p2 on p1.parent_id=p2.prod_type_id where p1.parent_id=? 
2019-01-31 16:37:16.835 [http-nio-8080-exec-2] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - ======> Parameters: 30(Integer)
2019-01-31 16:37:16.837 [http-nio-8080-exec-2] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - <======      Total: 0
2019-01-31 16:37:16.837 [http-nio-8080-exec-2] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - <====      Total: 1
2019-01-31 16:37:16.838 [http-nio-8080-exec-2] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - ====>  Preparing: select p1.prod_type_id,p1.prod_type_name,p1.parent_id,p2.prod_type_id parent_type_id,p2.prod_type_name parent_type_name from product_type p1 LEFT JOIN product_type p2 on p1.parent_id=p2.prod_type_id where p1.parent_id=? 
2019-01-31 16:37:16.838 [http-nio-8080-exec-2] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - ====> Parameters: 39(Integer)
2019-01-31 16:37:16.840 [http-nio-8080-exec-2] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - ======>  Preparing: select p1.prod_type_id,p1.prod_type_name,p1.parent_id,p2.prod_type_id parent_type_id,p2.prod_type_name parent_type_name from product_type p1 LEFT JOIN product_type p2 on p1.parent_id=p2.prod_type_id where p1.parent_id=? 
2019-01-31 16:37:16.840 [http-nio-8080-exec-2] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - ======> Parameters: 41(Integer)
2019-01-31 16:37:16.842 [http-nio-8080-exec-2] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - <======      Total: 0
2019-01-31 16:37:16.842 [http-nio-8080-exec-2] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - <====      Total: 1
2019-01-31 16:37:16.842 [http-nio-8080-exec-2] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - <==      Total: 2
2019-01-31 16:37:16.986 [http-nio-8080-exec-3] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/fonts/glyphicons-halflings-regular.woff2
2019-01-31 16:38:23.196 [http-nio-8080-exec-7] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productList
2019-01-31 16:38:23.200 [http-nio-8080-exec-7] DEBUG c.yun.product.dao.ProductDao.findProductRowByParam - ==>  Preparing: select count(*) from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 
2019-01-31 16:38:23.200 [http-nio-8080-exec-7] DEBUG c.yun.product.dao.ProductDao.findProductRowByParam - ==> Parameters: 
2019-01-31 16:38:23.204 [http-nio-8080-exec-7] DEBUG c.yun.product.dao.ProductDao.findProductRowByParam - <==      Total: 1
2019-01-31 16:38:23.207 [http-nio-8080-exec-7] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 order by prod_id limit ?,? 
2019-01-31 16:38:23.208 [http-nio-8080-exec-7] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==> Parameters: 0(Integer), 5(Integer)
2019-01-31 16:38:23.210 [http-nio-8080-exec-7] DEBUG com.yun.product.dao.ProductDao.findProductByParam - <==      Total: 5
2019-01-31 16:38:23.211 [http-nio-8080-exec-7] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-31 16:38:23.211 [http-nio-8080-exec-7] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 2(Integer)
2019-01-31 16:38:23.213 [http-nio-8080-exec-7] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-01-31 16:38:23.213 [http-nio-8080-exec-7] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-31 16:38:23.214 [http-nio-8080-exec-7] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 3(Integer)
2019-01-31 16:38:23.215 [http-nio-8080-exec-7] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-01-31 16:38:23.215 [http-nio-8080-exec-7] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-31 16:38:23.215 [http-nio-8080-exec-7] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 4(Integer)
2019-01-31 16:38:23.216 [http-nio-8080-exec-7] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 2
2019-01-31 16:38:23.216 [http-nio-8080-exec-7] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-31 16:38:23.216 [http-nio-8080-exec-7] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 5(Integer)
2019-01-31 16:38:23.217 [http-nio-8080-exec-7] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 2
2019-01-31 16:38:23.217 [http-nio-8080-exec-7] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-31 16:38:23.217 [http-nio-8080-exec-7] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 6(Integer)
2019-01-31 16:38:23.218 [http-nio-8080-exec-7] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 0
2019-01-31 16:38:25.444 [http-nio-8080-exec-8] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/prodParamList
2019-01-31 16:38:25.447 [http-nio-8080-exec-8] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-31 16:38:25.447 [http-nio-8080-exec-8] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 6(Integer)
2019-01-31 16:38:25.448 [http-nio-8080-exec-8] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 0
2019-01-31 16:38:26.872 [http-nio-8080-exec-9] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/prodParamPreAdd
2019-01-31 16:38:29.861 [http-nio-8080-exec-10] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/prodParamSave
2019-01-31 16:38:29.870 [http-nio-8080-exec-10] DEBUG c.y.p.d.ProductParameterDao.insertProductParameter - ==>  Preparing: insert into product_parameter(prod_param_name,prod_id) values(?,?) 
2019-01-31 16:38:29.871 [http-nio-8080-exec-10] DEBUG c.y.p.d.ProductParameterDao.insertProductParameter - ==> Parameters: asdasd(String), 6(Integer)
2019-01-31 16:38:29.873 [http-nio-8080-exec-10] DEBUG c.y.p.d.ProductParameterDao.insertProductParameter - <==    Updates: 1
2019-01-31 16:38:29.964 [http-nio-8080-exec-2] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productList
2019-01-31 16:38:29.965 [http-nio-8080-exec-2] DEBUG c.yun.product.dao.ProductDao.findProductRowByParam - ==>  Preparing: select count(*) from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 
2019-01-31 16:38:29.965 [http-nio-8080-exec-2] DEBUG c.yun.product.dao.ProductDao.findProductRowByParam - ==> Parameters: 
2019-01-31 16:38:29.966 [http-nio-8080-exec-2] DEBUG c.yun.product.dao.ProductDao.findProductRowByParam - <==      Total: 1
2019-01-31 16:38:29.967 [http-nio-8080-exec-2] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 order by prod_id limit ?,? 
2019-01-31 16:38:29.968 [http-nio-8080-exec-2] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==> Parameters: 0(Integer), 5(Integer)
2019-01-31 16:38:29.968 [http-nio-8080-exec-2] DEBUG com.yun.product.dao.ProductDao.findProductByParam - <==      Total: 5
2019-01-31 16:38:29.969 [http-nio-8080-exec-2] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-31 16:38:29.969 [http-nio-8080-exec-2] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 2(Integer)
2019-01-31 16:38:29.969 [http-nio-8080-exec-2] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-01-31 16:38:29.970 [http-nio-8080-exec-2] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-31 16:38:29.970 [http-nio-8080-exec-2] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 3(Integer)
2019-01-31 16:38:29.970 [http-nio-8080-exec-2] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-01-31 16:38:29.971 [http-nio-8080-exec-2] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-31 16:38:29.971 [http-nio-8080-exec-2] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 4(Integer)
2019-01-31 16:38:29.971 [http-nio-8080-exec-2] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 2
2019-01-31 16:38:29.971 [http-nio-8080-exec-2] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-31 16:38:29.971 [http-nio-8080-exec-2] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 5(Integer)
2019-01-31 16:38:29.972 [http-nio-8080-exec-2] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 2
2019-01-31 16:38:29.972 [http-nio-8080-exec-2] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-31 16:38:29.972 [http-nio-8080-exec-2] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 6(Integer)
2019-01-31 16:38:29.973 [http-nio-8080-exec-2] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-01-31 16:38:40.753 [http-nio-8080-exec-3] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productList
2019-01-31 16:38:40.762 [http-nio-8080-exec-3] DEBUG c.yun.product.dao.ProductDao.findProductRowByParam - ==>  Preparing: select count(*) from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 
2019-01-31 16:38:40.762 [http-nio-8080-exec-3] DEBUG c.yun.product.dao.ProductDao.findProductRowByParam - ==> Parameters: 
2019-01-31 16:38:40.763 [http-nio-8080-exec-3] DEBUG c.yun.product.dao.ProductDao.findProductRowByParam - <==      Total: 1
2019-01-31 16:38:40.767 [http-nio-8080-exec-3] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 order by prod_id limit ?,? 
2019-01-31 16:38:40.767 [http-nio-8080-exec-3] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==> Parameters: 0(Integer), 5(Integer)
2019-01-31 16:38:40.769 [http-nio-8080-exec-3] DEBUG com.yun.product.dao.ProductDao.findProductByParam - <==      Total: 5
2019-01-31 16:38:40.770 [http-nio-8080-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-31 16:38:40.770 [http-nio-8080-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 2(Integer)
2019-01-31 16:38:40.771 [http-nio-8080-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-01-31 16:38:40.772 [http-nio-8080-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-31 16:38:40.772 [http-nio-8080-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 3(Integer)
2019-01-31 16:38:40.775 [http-nio-8080-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-01-31 16:38:40.776 [http-nio-8080-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-31 16:38:40.776 [http-nio-8080-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 4(Integer)
2019-01-31 16:38:40.778 [http-nio-8080-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 2
2019-01-31 16:38:40.779 [http-nio-8080-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-31 16:38:40.779 [http-nio-8080-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 5(Integer)
2019-01-31 16:38:40.781 [http-nio-8080-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 2
2019-01-31 16:38:40.781 [http-nio-8080-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-31 16:38:40.781 [http-nio-8080-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 6(Integer)
2019-01-31 16:38:40.783 [http-nio-8080-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-01-31 16:41:54.364 [http-nio-8080-exec-5] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productReceiveStockList
2019-01-31 16:41:54.368 [http-nio-8080-exec-5] DEBUG c.y.stock.controller.ProductReceiveStockController - 跳转到待收库存查询控制器
2019-01-31 16:41:54.383 [http-nio-8080-exec-5] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - ==>  Preparing: select count(*) from product_receive_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 
2019-01-31 16:41:54.383 [http-nio-8080-exec-5] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - ==> Parameters: 
2019-01-31 16:41:54.384 [http-nio-8080-exec-5] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - <==      Total: 1
2019-01-31 16:41:54.387 [http-nio-8080-exec-5] DEBUG c.y.s.d.P.findProductReceiveStockList - ==>  Preparing: select ps.prod_rece_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_receive_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 order by p.prod_id,pp.prod_param_id limit ?,? 
2019-01-31 16:41:54.388 [http-nio-8080-exec-5] DEBUG c.y.s.d.P.findProductReceiveStockList - ==> Parameters: 0(Integer), 5(Integer)
2019-01-31 16:41:54.391 [http-nio-8080-exec-5] DEBUG c.y.s.d.P.findProductReceiveStockList - <==      Total: 5
2019-01-31 16:41:54.392 [http-nio-8080-exec-5] DEBUG c.y.stock.controller.ProductReceiveStockController - 转到待收库存页面
2019-01-31 16:41:55.645 [http-nio-8080-exec-1] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productReceiveStockPreAdd
2019-01-31 16:42:02.115 [http-nio-8080-exec-6] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productListForTrade
2019-01-31 16:42:02.117 [http-nio-8080-exec-6] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 order by prod_id 
2019-01-31 16:42:02.118 [http-nio-8080-exec-6] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==> Parameters: 
2019-01-31 16:42:02.119 [http-nio-8080-exec-6] DEBUG com.yun.product.dao.ProductDao.findProductByParam - <==      Total: 5
2019-01-31 16:42:02.119 [http-nio-8080-exec-6] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-31 16:42:02.120 [http-nio-8080-exec-6] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 2(Integer)
2019-01-31 16:42:02.120 [http-nio-8080-exec-6] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-01-31 16:42:02.121 [http-nio-8080-exec-6] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-31 16:42:02.121 [http-nio-8080-exec-6] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 3(Integer)
2019-01-31 16:42:02.121 [http-nio-8080-exec-6] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-01-31 16:42:02.122 [http-nio-8080-exec-6] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-31 16:42:02.122 [http-nio-8080-exec-6] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 4(Integer)
2019-01-31 16:42:02.123 [http-nio-8080-exec-6] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 2
2019-01-31 16:42:02.123 [http-nio-8080-exec-6] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-31 16:42:02.123 [http-nio-8080-exec-6] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 5(Integer)
2019-01-31 16:42:02.124 [http-nio-8080-exec-6] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 2
2019-01-31 16:42:02.124 [http-nio-8080-exec-6] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-01-31 16:42:02.124 [http-nio-8080-exec-6] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 6(Integer)
2019-01-31 16:42:02.125 [http-nio-8080-exec-6] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-01-31 16:42:43.800 [http-nio-8080-exec-7] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/main
2019-01-31 16:42:43.854 [http-nio-8080-exec-8] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/css/bootstrap.min.css
2019-01-31 16:42:43.855 [http-nio-8080-exec-9] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/css/site.css
2019-01-31 16:42:43.857 [http-nio-8080-exec-2] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/js/bootstrap.min.js
2019-01-31 16:42:43.859 [http-nio-8080-exec-10] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/js/jquery.min.js
2019-01-31 16:42:43.884 [http-nio-8080-exec-3] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/default.html
2019-01-31 16:42:43.914 [http-nio-8080-exec-4] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/favicon.ico
2019-01-31 16:42:46.784 [http-nio-8080-exec-5] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productReceiveStockList
2019-01-31 16:42:46.786 [http-nio-8080-exec-5] DEBUG c.y.stock.controller.ProductReceiveStockController - 跳转到待收库存查询控制器
2019-01-31 16:42:46.790 [http-nio-8080-exec-5] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - ==>  Preparing: select count(*) from product_receive_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 
2019-01-31 16:42:46.792 [http-nio-8080-exec-5] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - ==> Parameters: 
2019-01-31 16:42:46.793 [http-nio-8080-exec-5] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - <==      Total: 1
2019-01-31 16:42:46.796 [http-nio-8080-exec-5] DEBUG c.y.s.d.P.findProductReceiveStockList - ==>  Preparing: select ps.prod_rece_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_receive_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 order by p.prod_id,pp.prod_param_id limit ?,? 
2019-01-31 16:42:46.796 [http-nio-8080-exec-5] DEBUG c.y.s.d.P.findProductReceiveStockList - ==> Parameters: 0(Integer), 5(Integer)
2019-01-31 16:42:46.799 [http-nio-8080-exec-5] DEBUG c.y.s.d.P.findProductReceiveStockList - <==      Total: 5
2019-01-31 16:42:46.801 [http-nio-8080-exec-5] DEBUG c.y.stock.controller.ProductReceiveStockController - 转到待收库存页面
2019-01-31 16:42:48.118 [http-nio-8080-exec-1] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productReceiveStockPreAdd
2019-01-31 17:22:34.720 [http-nio-8080-exec-10] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productReceiveStockList
2019-01-31 17:22:35.933 [http-nio-8080-exec-2] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/index.html
2019-01-31 17:22:35.957 [http-nio-8080-exec-4] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/js/jquery.min.js
2019-01-31 17:22:35.958 [http-nio-8080-exec-5] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/js/bootstrap.min.js
2019-01-31 17:22:35.963 [http-nio-8080-exec-3] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/css/bootstrap.min.css
2019-01-31 17:22:37.167 [http-nio-8080-exec-1] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/main
2019-01-31 17:22:38.463 [http-nio-8080-exec-7] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/js/jquery.min.js
2019-01-31 17:22:38.463 [http-nio-8080-exec-8] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/js/bootstrap.min.js
2019-01-31 17:22:38.464 [http-nio-8080-exec-6] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/css/bootstrap.min.css
2019-01-31 17:22:40.166 [http-nio-8080-exec-9] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/index.html
2019-01-31 17:22:40.196 [http-nio-8080-exec-10] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/css/bootstrap.min.css
2019-01-31 17:22:40.196 [http-nio-8080-exec-5] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/js/bootstrap.min.js
2019-01-31 17:22:40.196 [http-nio-8080-exec-2] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/js/jquery.min.js
2019-01-31 17:22:40.214 [http-nio-8080-exec-4] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/favicon.ico
2019-01-31 17:22:41.190 [http-nio-8080-exec-3] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/index.html
2019-01-31 17:22:41.220 [http-nio-8080-exec-7] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/js/jquery.min.js
2019-01-31 17:22:41.220 [http-nio-8080-exec-8] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/js/bootstrap.min.js
2019-01-31 17:22:41.220 [http-nio-8080-exec-1] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/css/bootstrap.min.css
2019-01-31 17:22:41.234 [http-nio-8080-exec-6] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/favicon.ico
2019-01-31 17:22:43.318 [http-nio-8080-exec-9] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/
2019-01-31 17:22:44.601 [http-nio-8080-exec-10] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/js/bootstrap.min.js
2019-01-31 17:22:44.603 [http-nio-8080-exec-5] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/js/jquery.min.js
2019-01-31 17:22:44.605 [http-nio-8080-exec-10] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/css/bootstrap.min.css
2019-01-31 17:22:44.628 [http-nio-8080-exec-4] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/favicon.ico
2019-01-31 17:22:53.066 [main] INFO  com.yun.YunEbStockApplication - Starting YunEbStockApplication on USER-20181202BJ with PID 5452 (E:\workspace\yun-eb-stock\target\classes started by Administrator in E:\workspace\yun-eb-stock)
2019-01-31 17:22:53.070 [main] DEBUG com.yun.YunEbStockApplication - Running with Spring Boot v1.5.9.RELEASE, Spring v4.3.13.RELEASE
2019-01-31 17:22:53.070 [main] INFO  com.yun.YunEbStockApplication - No active profile set, falling back to default profiles: default
2019-01-31 17:22:53.413 [background-preinit] INFO  org.hibernate.validator.internal.util.Version - HV000001: Hibernate Validator 5.3.6.Final
2019-01-31 17:22:53.471 [main] INFO  o.s.b.c.e.AnnotationConfigEmbeddedWebApplicationContext - Refreshing org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@6a28ffa4: startup date [Thu Jan 31 17:22:53 CST 2019]; root of context hierarchy
2019-01-31 17:22:55.258 [main] INFO  o.s.b.c.e.tomcat.TomcatEmbeddedServletContainer - Tomcat initialized with port(s): 8080 (http)
2019-01-31 17:22:55.269 [main] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2019-01-31 17:22:55.270 [main] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet Engine: Apache Tomcat/8.5.23
2019-01-31 17:22:55.378 [localhost-startStop-1] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2019-01-31 17:22:55.378 [localhost-startStop-1] INFO  org.springframework.web.context.ContextLoader - Root WebApplicationContext: initialization completed in 1907 ms
2019-01-31 17:22:55.547 [localhost-startStop-1] INFO  o.s.boot.web.servlet.FilterRegistrationBean - Mapping filter: 'characterEncodingFilter' to: [/*]
2019-01-31 17:22:55.548 [localhost-startStop-1] INFO  o.s.boot.web.servlet.FilterRegistrationBean - Mapping filter: 'hiddenHttpMethodFilter' to: [/*]
2019-01-31 17:22:55.549 [localhost-startStop-1] INFO  o.s.boot.web.servlet.FilterRegistrationBean - Mapping filter: 'httpPutFormContentFilter' to: [/*]
2019-01-31 17:22:55.549 [localhost-startStop-1] INFO  o.s.boot.web.servlet.FilterRegistrationBean - Mapping filter: 'requestContextFilter' to: [/*]
2019-01-31 17:22:55.549 [localhost-startStop-1] INFO  o.s.boot.web.servlet.FilterRegistrationBean - Mapping filter: 'loginFilter' to urls: [/*]
2019-01-31 17:22:55.549 [localhost-startStop-1] INFO  o.s.boot.web.servlet.ServletRegistrationBean - Mapping servlet: 'dispatcherServlet' to [/]
2019-01-31 17:22:56.392 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerAdapter - Looking for @ControllerAdvice: org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@6a28ffa4: startup date [Thu Jan 31 17:22:53 CST 2019]; root of context hierarchy
2019-01-31 17:22:56.452 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productPreAdd]}" onto public java.lang.String com.yun.product.controller.ProductController.productPreAdd()
2019-01-31 17:22:56.455 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productList]}" onto public java.lang.String com.yun.product.controller.ProductController.productList(org.springframework.ui.Model,java.lang.String,java.lang.String,java.lang.String,java.lang.String)
2019-01-31 17:22:56.455 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productSave]}" onto public java.lang.String com.yun.product.controller.ProductController.productSave(com.yun.product.model.Product)
2019-01-31 17:22:56.455 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productDelete]}" onto public java.lang.String com.yun.product.controller.ProductController.productDelete(int)
2019-01-31 17:22:56.456 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productPreUpdate]}" onto public java.lang.String com.yun.product.controller.ProductController.productPreUpdate(int,org.springframework.ui.Model)
2019-01-31 17:22:56.456 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productUpdate]}" onto public java.lang.String com.yun.product.controller.ProductController.productUpdate(com.yun.product.model.Product)
2019-01-31 17:22:56.456 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productListForAutoComplete]}" onto public java.util.List<com.yun.product.model.Product> com.yun.product.controller.ProductController.productListForAutoComplete(java.lang.String)
2019-01-31 17:22:56.457 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productListForStock]}" onto public java.util.List<com.yun.product.model.Product> com.yun.product.controller.ProductController.productListForStock()
2019-01-31 17:22:56.457 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productListForTrade]}" onto public java.util.List<com.yun.product.model.Product> com.yun.product.controller.ProductController.productListForTrade(java.lang.String)
2019-01-31 17:22:56.458 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/prodParamDelete]}" onto public java.lang.String com.yun.product.controller.ProductParamController.prodParamDelete(int)
2019-01-31 17:22:56.458 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/prodParamPreAdd]}" onto public java.lang.String com.yun.product.controller.ProductParamController.prodParamPreAdd(int,org.springframework.ui.Model)
2019-01-31 17:22:56.458 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/prodParamSave]}" onto public java.lang.String com.yun.product.controller.ProductParamController.prodParamSave(com.yun.product.model.ProductParameter)
2019-01-31 17:22:56.458 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/prodParamList]}" onto public java.lang.String com.yun.product.controller.ProductParamController.prodParamList(int)
2019-01-31 17:22:56.461 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeList]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeList(org.springframework.ui.Model)
2019-01-31 17:22:56.461 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeTree]}" onto public java.util.List<com.yun.product.model.ProductType> com.yun.product.controller.ProductTypeController.productTypeTree()
2019-01-31 17:22:56.462 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeEdit]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeEdit()
2019-01-31 17:22:56.462 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeSave]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeSave(com.yun.product.model.ProductType)
2019-01-31 17:22:56.462 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeUpdate]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeUpdate(java.lang.Integer,org.springframework.ui.Model)
2019-01-31 17:22:56.462 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeUpdateSave]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeUpdateSave(com.yun.product.model.ProductType)
2019-01-31 17:22:56.463 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeDelete]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeDelete(java.lang.Integer,javax.servlet.http.HttpServletResponse) throws java.io.IOException
2019-01-31 17:22:56.464 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveStockList]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveStockController.productReceiveStocklist(java.lang.String,java.lang.String,org.springframework.ui.Model)
2019-01-31 17:22:56.464 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveStockPreAdd]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveStockController.productReceiveStockPreAdd()
2019-01-31 17:22:56.464 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveStockSave]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveStockController.productReceiveStockSave(com.yun.stock.model.ProductReceiveStock)
2019-01-31 17:22:56.465 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveStockDelete]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveStockController.productReceiveStockDelete(int)
2019-01-31 17:22:56.465 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveStockPreUpdate]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveStockController.productReceiveStockPreUpdate(int,org.springframework.ui.Model)
2019-01-31 17:22:56.465 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveStockUpdate]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveStockController.productReceiveStockUpdate(com.yun.stock.model.ProductReceiveStock)
2019-01-31 17:22:56.466 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveInSave]}" onto public void com.yun.stock.controller.ProductReceiveTradeController.receiveInSave(com.yun.stock.model.ProductReceiveTrade,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse) throws java.io.IOException
2019-01-31 17:22:56.467 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveIn]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveTradeController.receiveIn(org.springframework.ui.Model)
2019-01-31 17:22:56.467 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveReject]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveTradeController.receiveReject(org.springframework.ui.Model)
2019-01-31 17:22:56.467 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveRejectSave]}" onto public void com.yun.stock.controller.ProductReceiveTradeController.receiveRejectSave(com.yun.stock.model.ProductReceiveTrade,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse) throws java.io.IOException
2019-01-31 17:22:56.467 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveToCurrentSave]}" onto public void com.yun.stock.controller.ProductReceiveTradeController.productReceiveToCurrentSave(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse) throws java.lang.Exception
2019-01-31 17:22:56.467 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveStockToCurrentStock]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveTradeController.productReceiveStockToCurrentStock(int,org.springframework.ui.Model)
2019-01-31 17:22:56.468 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockSave]}" onto public java.lang.String com.yun.stock.controller.ProductStockController.productStockSave(com.yun.stock.model.ProductStock)
2019-01-31 17:22:56.469 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockList]}" onto public java.lang.String com.yun.stock.controller.ProductStockController.productStocklist(java.lang.String,java.lang.String,org.springframework.ui.Model)
2019-01-31 17:22:56.469 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockPreAdd]}" onto public java.lang.String com.yun.stock.controller.ProductStockController.productStockPreAdd()
2019-01-31 17:22:56.469 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockDelete]}" onto public java.lang.String com.yun.stock.controller.ProductStockController.productStockDelete(int)
2019-01-31 17:22:56.469 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockPreUpdate]}" onto public java.lang.String com.yun.stock.controller.ProductStockController.productStockPreUpdate(int,org.springframework.ui.Model)
2019-01-31 17:22:56.469 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockUpdate]}" onto public java.lang.String com.yun.stock.controller.ProductStockController.productStockUpdate(com.yun.stock.model.ProductStock)
2019-01-31 17:22:56.470 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productCurrentOut]}" onto public java.lang.String com.yun.stock.controller.ProductTradeController.receiveReject(org.springframework.ui.Model)
2019-01-31 17:22:56.470 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productCurrentIn]}" onto public java.lang.String com.yun.stock.controller.ProductTradeController.productCurrentIn(org.springframework.ui.Model)
2019-01-31 17:22:56.470 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productCurrentInSave]}" onto public void com.yun.stock.controller.ProductTradeController.productCurrentInSave(com.yun.stock.model.ProductTrade,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse) throws java.io.IOException
2019-01-31 17:22:56.471 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productCurrentOutSave]}" onto public void com.yun.stock.controller.ProductTradeController.productCurrentOutSave(com.yun.stock.model.ProductTrade,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse) throws java.io.IOException
2019-01-31 17:22:56.471 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/main]}" onto public java.lang.String com.yun.user.controller.MainController.main()
2019-01-31 17:22:56.472 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/userList]}" onto public java.lang.String com.yun.user.controller.UserController.userList(org.springframework.ui.Model)
2019-01-31 17:22:56.472 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/deleteUserInfo]}" onto public java.lang.String com.yun.user.controller.UserController.userDelete(int)
2019-01-31 17:22:56.472 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/login]}" onto public void com.yun.user.controller.UserController.login(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse) throws java.io.IOException
2019-01-31 17:22:56.473 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/userSave]}" onto public java.lang.String com.yun.user.controller.UserController.userSave(com.yun.user.model.UserInfo)
2019-01-31 17:22:56.473 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/userEdit]}" onto public java.lang.String com.yun.user.controller.UserController.userEdit()
2019-01-31 17:22:56.476 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/error]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> org.springframework.boot.autoconfigure.web.BasicErrorController.error(javax.servlet.http.HttpServletRequest)
2019-01-31 17:22:56.476 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/error],produces=[text/html]}" onto public org.springframework.web.servlet.ModelAndView org.springframework.boot.autoconfigure.web.BasicErrorController.errorHtml(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
2019-01-31 17:22:56.519 [main] INFO  o.s.web.servlet.handler.SimpleUrlHandlerMapping - Mapped URL path [/webjars/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-01-31 17:22:56.519 [main] INFO  o.s.web.servlet.handler.SimpleUrlHandlerMapping - Mapped URL path [/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-01-31 17:22:56.565 [main] INFO  o.s.web.servlet.handler.SimpleUrlHandlerMapping - Mapped URL path [/**/favicon.ico] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-01-31 17:22:56.884 [main] INFO  o.s.b.a.w.WebMvcAutoConfiguration$WelcomePageHandlerMapping - Adding welcome page: class path resource [static/index.html]
2019-01-31 17:22:57.161 [main] INFO  o.s.jmx.export.annotation.AnnotationMBeanExporter - Registering beans for JMX exposure on startup
2019-01-31 17:22:57.182 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2019-01-31 17:22:57.193 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2019-01-31 17:22:57.206 [main] INFO  org.apache.tomcat.util.net.NioSelectorPool - Using a shared selector for servlet write/read
2019-01-31 17:22:57.371 [main] INFO  o.s.b.c.e.tomcat.TomcatEmbeddedServletContainer - Tomcat started on port(s): 8080 (http)
2019-01-31 17:22:57.376 [main] INFO  com.yun.YunEbStockApplication - Started YunEbStockApplication in 4.662 seconds (JVM running for 6.077)
2019-01-31 17:22:57.462 [http-nio-8080-exec-1] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring FrameworkServlet 'dispatcherServlet'
2019-01-31 17:22:57.463 [http-nio-8080-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - FrameworkServlet 'dispatcherServlet': initialization started
2019-01-31 17:22:57.481 [http-nio-8080-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - FrameworkServlet 'dispatcherServlet': initialization completed in 17 ms
2019-01-31 17:22:57.491 [http-nio-8080-exec-1] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/index.html
2019-01-31 17:22:57.534 [http-nio-8080-exec-2] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/css/bootstrap.min.css
2019-01-31 17:22:57.535 [http-nio-8080-exec-3] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/js/jquery.min.js
2019-01-31 17:22:57.536 [http-nio-8080-exec-4] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/js/bootstrap.min.js
2019-01-31 17:22:57.560 [http-nio-8080-exec-5] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/favicon.ico
2019-01-31 17:22:58.854 [http-nio-8080-exec-6] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/index.html
2019-01-31 17:22:58.885 [http-nio-8080-exec-8] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/js/jquery.min.js
2019-01-31 17:22:58.891 [http-nio-8080-exec-7] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/css/bootstrap.min.css
2019-01-31 17:22:58.892 [http-nio-8080-exec-9] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/js/bootstrap.min.js
2019-01-31 17:22:58.907 [http-nio-8080-exec-10] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/favicon.ico
2019-01-31 17:23:01.087 [http-nio-8080-exec-1] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/
2019-01-31 17:23:02.557 [http-nio-8080-exec-4] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/css/bootstrap.min.css
2019-01-31 17:23:02.557 [http-nio-8080-exec-3] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/js/bootstrap.min.js
2019-01-31 17:23:02.558 [http-nio-8080-exec-2] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/js/jquery.min.js
2019-01-31 17:23:02.581 [http-nio-8080-exec-5] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/favicon.ico
2019-01-31 17:23:12.740 [http-nio-8080-exec-6] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/login
2019-01-31 17:23:13.044 [http-nio-8080-exec-6] DEBUG c.y.user.dao.UserInfoDao.findUserInfoByNameAndPass - ==>  Preparing: select * from user_info where login_name=? and login_pass=? 
2019-01-31 17:23:13.063 [http-nio-8080-exec-6] DEBUG c.y.user.dao.UserInfoDao.findUserInfoByNameAndPass - ==> Parameters: admin(String), 123(String)
2019-01-31 17:23:13.075 [http-nio-8080-exec-6] DEBUG c.y.user.dao.UserInfoDao.findUserInfoByNameAndPass - <==      Total: 1
2019-01-31 17:23:13.082 [http-nio-8080-exec-8] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/main
2019-01-31 17:23:13.467 [http-nio-8080-exec-7] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/css/bootstrap.min.css
2019-01-31 17:23:13.468 [http-nio-8080-exec-1] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/js/bootstrap.min.js
2019-01-31 17:23:13.467 [http-nio-8080-exec-9] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/css/site.css
2019-01-31 17:23:13.470 [http-nio-8080-exec-10] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/js/jquery.min.js
2019-01-31 17:23:13.546 [http-nio-8080-exec-2] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/default.html
2019-01-31 17:23:13.567 [http-nio-8080-exec-3] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/favicon.ico
2019-01-31 17:23:14.720 [http-nio-8080-exec-4] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/main
2019-01-31 17:23:14.781 [http-nio-8080-exec-5] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/css/bootstrap.min.css
2019-01-31 17:23:14.781 [http-nio-8080-exec-8] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/js/jquery.min.js
2019-01-31 17:23:14.782 [http-nio-8080-exec-9] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/js/bootstrap.min.js
2019-01-31 17:23:14.784 [http-nio-8080-exec-6] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/css/site.css
2019-01-31 17:23:14.837 [http-nio-8080-exec-1] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/default.html
2019-01-31 17:23:14.859 [http-nio-8080-exec-10] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/favicon.ico
2019-01-31 17:23:16.876 [http-nio-8080-exec-7] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/
2019-01-31 17:23:16.885 [http-nio-8080-exec-7] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/index.html
2019-01-31 17:23:20.974 [http-nio-8080-exec-3] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/login
2019-01-31 17:23:20.980 [http-nio-8080-exec-3] DEBUG c.y.user.dao.UserInfoDao.findUserInfoByNameAndPass - ==>  Preparing: select * from user_info where login_name=? and login_pass=? 
2019-01-31 17:23:20.980 [http-nio-8080-exec-3] DEBUG c.y.user.dao.UserInfoDao.findUserInfoByNameAndPass - ==> Parameters: admin(String), 123(String)
2019-01-31 17:23:20.982 [http-nio-8080-exec-3] DEBUG c.y.user.dao.UserInfoDao.findUserInfoByNameAndPass - <==      Total: 1
2019-01-31 17:23:20.993 [http-nio-8080-exec-4] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/main
2019-01-31 17:23:25.020 [http-nio-8080-exec-8] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productReceiveStockList
2019-01-31 17:23:25.026 [http-nio-8080-exec-8] DEBUG c.y.stock.controller.ProductReceiveStockController - 跳转到待收库存查询控制器
2019-01-31 17:23:25.072 [http-nio-8080-exec-8] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - ==>  Preparing: select count(*) from product_receive_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 
2019-01-31 17:23:25.072 [http-nio-8080-exec-8] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - ==> Parameters: 
2019-01-31 17:23:25.074 [http-nio-8080-exec-8] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - <==      Total: 1
2019-01-31 17:23:25.081 [http-nio-8080-exec-8] DEBUG c.y.s.d.P.findProductReceiveStockList - ==>  Preparing: select ps.prod_rece_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_receive_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 order by p.prod_id,pp.prod_param_id limit ?,? 
2019-01-31 17:23:25.082 [http-nio-8080-exec-8] DEBUG c.y.s.d.P.findProductReceiveStockList - ==> Parameters: 0(Integer), 5(Integer)
2019-01-31 17:23:25.085 [http-nio-8080-exec-8] DEBUG c.y.s.d.P.findProductReceiveStockList - <==      Total: 5
2019-01-31 17:23:25.087 [http-nio-8080-exec-8] DEBUG c.y.stock.controller.ProductReceiveStockController - 转到待收库存页面
2019-01-31 17:23:26.787 [http-nio-8080-exec-5] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productReceiveStockPreUpdate
2019-01-31 17:23:26.795 [http-nio-8080-exec-5] DEBUG c.y.s.d.P.findProductReceiveStockById - ==>  Preparing: select ps.prod_rece_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_receive_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 and ps.prod_rece_stock_id=? 
2019-01-31 17:23:26.796 [http-nio-8080-exec-5] DEBUG c.y.s.d.P.findProductReceiveStockById - ==> Parameters: 9(Integer)
2019-01-31 17:23:26.800 [http-nio-8080-exec-5] DEBUG c.y.s.d.P.findProductReceiveStockById - <==      Total: 1
2019-01-31 17:23:26.878 [http-nio-8080-exec-9] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/js/jquery.validate.min.js
2019-01-31 17:23:26.878 [http-nio-8080-exec-6] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/js/jquery.message_cn.js
2019-01-31 17:23:27.911 [http-nio-8080-exec-1] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productReceiveStockUpdate
2019-01-31 17:23:27.930 [http-nio-8080-exec-1] DEBUG c.y.s.d.P.updateProductReceiveStock - ==>  Preparing: update product_receive_stock set prod_id=?,prod_param_id=?,stock_num=? where prod_rece_stock_id=? 
2019-01-31 17:23:27.931 [http-nio-8080-exec-1] DEBUG c.y.s.d.P.updateProductReceiveStock - ==> Parameters: 2(Integer), 8(Integer), 37(Integer), 9(Integer)
2019-01-31 17:23:27.932 [http-nio-8080-exec-1] DEBUG c.y.s.d.P.updateProductReceiveStock - <==    Updates: 1
2019-01-31 17:23:27.991 [http-nio-8080-exec-10] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productReceiveStockList
2019-01-31 17:23:27.992 [http-nio-8080-exec-10] DEBUG c.y.stock.controller.ProductReceiveStockController - 跳转到待收库存查询控制器
2019-01-31 17:23:27.994 [http-nio-8080-exec-10] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - ==>  Preparing: select count(*) from product_receive_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 
2019-01-31 17:23:27.995 [http-nio-8080-exec-10] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - ==> Parameters: 
2019-01-31 17:23:27.999 [http-nio-8080-exec-10] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - <==      Total: 1
2019-01-31 17:23:28.006 [http-nio-8080-exec-10] DEBUG c.y.s.d.P.findProductReceiveStockList - ==>  Preparing: select ps.prod_rece_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_receive_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 order by p.prod_id,pp.prod_param_id limit ?,? 
2019-01-31 17:23:28.008 [http-nio-8080-exec-10] DEBUG c.y.s.d.P.findProductReceiveStockList - ==> Parameters: 0(Integer), 5(Integer)
2019-01-31 17:23:28.014 [http-nio-8080-exec-10] DEBUG c.y.s.d.P.findProductReceiveStockList - <==      Total: 5
2019-01-31 17:23:28.016 [http-nio-8080-exec-10] DEBUG c.y.stock.controller.ProductReceiveStockController - 转到待收库存页面
2019-01-31 17:23:29.580 [http-nio-8080-exec-7] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productReceiveStockPreUpdate
2019-01-31 17:23:29.592 [http-nio-8080-exec-7] DEBUG c.y.s.d.P.findProductReceiveStockById - ==>  Preparing: select ps.prod_rece_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_receive_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 and ps.prod_rece_stock_id=? 
2019-01-31 17:23:29.593 [http-nio-8080-exec-7] DEBUG c.y.s.d.P.findProductReceiveStockById - ==> Parameters: 9(Integer)
2019-01-31 17:23:29.601 [http-nio-8080-exec-7] DEBUG c.y.s.d.P.findProductReceiveStockById - <==      Total: 1
