2019-02-25 10:07:14.446 [main] INFO  com.yun.YunEbStockApplication - Starting YunEbStockApplication on USER-20181202BJ with PID 7072 (E:\workspace\yun-eb-stock\target\classes started by Administrator in E:\workspace\yun-eb-stock)
2019-02-25 10:07:14.520 [main] DEBUG com.yun.YunEbStockApplication - Running with Spring Boot v1.5.9.RELEASE, Spring v4.3.13.RELEASE
2019-02-25 10:07:14.521 [main] INFO  com.yun.YunEbStockApplication - No active profile set, falling back to default profiles: default
2019-02-25 10:07:15.816 [background-preinit] INFO  org.hibernate.validator.internal.util.Version - HV000001: Hibernate Validator 5.3.6.Final
2019-02-25 10:07:16.669 [main] INFO  o.s.b.c.e.AnnotationConfigEmbeddedWebApplicationContext - Refreshing org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@6a28ffa4: startup date [Mon Feb 25 10:07:16 CST 2019]; root of context hierarchy
2019-02-25 10:07:23.022 [main] INFO  o.s.b.c.e.tomcat.TomcatEmbeddedServletContainer - Tomcat initialized with port(s): 80 (http)
2019-02-25 10:07:23.078 [main] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2019-02-25 10:07:23.098 [main] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet Engine: Apache Tomcat/8.5.23
2019-02-25 10:07:23.546 [localhost-startStop-1] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2019-02-25 10:07:23.546 [localhost-startStop-1] INFO  org.springframework.web.context.ContextLoader - Root WebApplicationContext: initialization completed in 6877 ms
2019-02-25 10:07:23.806 [localhost-startStop-1] INFO  o.s.boot.web.servlet.FilterRegistrationBean - Mapping filter: 'characterEncodingFilter' to: [/*]
2019-02-25 10:07:23.807 [localhost-startStop-1] INFO  o.s.boot.web.servlet.FilterRegistrationBean - Mapping filter: 'hiddenHttpMethodFilter' to: [/*]
2019-02-25 10:07:23.807 [localhost-startStop-1] INFO  o.s.boot.web.servlet.FilterRegistrationBean - Mapping filter: 'httpPutFormContentFilter' to: [/*]
2019-02-25 10:07:23.807 [localhost-startStop-1] INFO  o.s.boot.web.servlet.FilterRegistrationBean - Mapping filter: 'requestContextFilter' to: [/*]
2019-02-25 10:07:23.807 [localhost-startStop-1] INFO  o.s.boot.web.servlet.FilterRegistrationBean - Mapping filter: 'loginFilter' to urls: [/*]
2019-02-25 10:07:23.807 [localhost-startStop-1] INFO  o.s.boot.web.servlet.ServletRegistrationBean - Mapping servlet: 'dispatcherServlet' to [/]
2019-02-25 10:07:29.829 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerAdapter - Looking for @ControllerAdvice: org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@6a28ffa4: startup date [Mon Feb 25 10:07:16 CST 2019]; root of context hierarchy
2019-02-25 10:07:30.278 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productList]}" onto public java.lang.String com.yun.product.controller.ProductController.productList(org.springframework.ui.Model,java.lang.String,java.lang.String,java.lang.String,java.lang.String)
2019-02-25 10:07:30.282 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productPreAdd]}" onto public java.lang.String com.yun.product.controller.ProductController.productPreAdd()
2019-02-25 10:07:30.293 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productSave]}" onto public java.lang.String com.yun.product.controller.ProductController.productSave(com.yun.product.model.Product)
2019-02-25 10:07:30.298 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productDelete]}" onto public java.lang.String com.yun.product.controller.ProductController.productDelete(int)
2019-02-25 10:07:30.299 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productPreUpdate]}" onto public java.lang.String com.yun.product.controller.ProductController.productPreUpdate(int,org.springframework.ui.Model)
2019-02-25 10:07:30.300 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productUpdate]}" onto public java.lang.String com.yun.product.controller.ProductController.productUpdate(com.yun.product.model.Product)
2019-02-25 10:07:30.300 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productListForAutoComplete]}" onto public java.util.List<com.yun.product.model.Product> com.yun.product.controller.ProductController.productListForAutoComplete(java.lang.String)
2019-02-25 10:07:30.301 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productListForStock]}" onto public java.util.List<com.yun.product.model.Product> com.yun.product.controller.ProductController.productListForStock()
2019-02-25 10:07:30.304 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productListForTrade]}" onto public java.util.List<com.yun.product.model.Product> com.yun.product.controller.ProductController.productListForTrade(java.lang.String)
2019-02-25 10:07:30.309 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/prodParamDelete]}" onto public java.lang.String com.yun.product.controller.ProductParamController.prodParamDelete(int)
2019-02-25 10:07:30.310 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/prodParamPreAdd]}" onto public java.lang.String com.yun.product.controller.ProductParamController.prodParamPreAdd(int,org.springframework.ui.Model)
2019-02-25 10:07:30.310 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/prodParamSave]}" onto public java.lang.String com.yun.product.controller.ProductParamController.prodParamSave(com.yun.product.model.ProductParameter)
2019-02-25 10:07:30.311 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/prodParamList]}" onto public java.lang.String com.yun.product.controller.ProductParamController.prodParamList(int)
2019-02-25 10:07:30.319 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeList]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeList(org.springframework.ui.Model)
2019-02-25 10:07:30.319 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeTree]}" onto public java.util.List<com.yun.product.model.ProductType> com.yun.product.controller.ProductTypeController.productTypeTree()
2019-02-25 10:07:30.320 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeEdit]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeEdit()
2019-02-25 10:07:30.321 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeSave]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeSave(com.yun.product.model.ProductType)
2019-02-25 10:07:30.321 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeUpdate]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeUpdate(java.lang.Integer,org.springframework.ui.Model)
2019-02-25 10:07:30.327 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeUpdateSave]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeUpdateSave(com.yun.product.model.ProductType)
2019-02-25 10:07:30.327 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeDelete]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeDelete(java.lang.Integer,javax.servlet.http.HttpServletResponse) throws java.io.IOException
2019-02-25 10:07:30.329 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productSaleTop]}" onto public java.lang.String com.yun.report.controller.ProductStockReportController.productSaleTop(java.lang.String,java.lang.String,java.lang.String,java.lang.String,org.springframework.ui.Model)
2019-02-25 10:07:30.330 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productSaleCalc]}" onto public java.lang.String com.yun.report.controller.ProductStockReportController.productSaleCalc()
2019-02-25 10:07:30.330 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockReport]}" onto public java.lang.String com.yun.report.controller.ProductStockReportController.productStockReport(java.lang.String,java.lang.String,java.lang.String,org.springframework.ui.Model)
2019-02-25 10:07:30.330 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveStockChange]}" onto public java.lang.String com.yun.report.controller.ProductStockReportController.productReceiveStockChange(java.lang.String,java.lang.String,java.lang.String,java.lang.String,org.springframework.ui.Model)
2019-02-25 10:07:30.331 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productCurrentStockChange]}" onto public java.lang.String com.yun.report.controller.ProductStockReportController.productCurrentStockChange(java.lang.String,java.lang.String,java.lang.String,java.lang.String,org.springframework.ui.Model)
2019-02-25 10:07:30.331 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productSaleCalcQuery]}" onto public java.lang.String com.yun.report.controller.ProductStockReportController.productSaleCalcQuery(java.lang.String,java.lang.String,java.lang.String,java.lang.String)
2019-02-25 10:07:30.333 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveStockList]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveStockController.productReceiveStocklist(java.lang.String,java.lang.String,org.springframework.ui.Model)
2019-02-25 10:07:30.333 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveStockPreAdd]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveStockController.productReceiveStockPreAdd()
2019-02-25 10:07:30.333 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveStockSave]}" onto public void com.yun.stock.controller.ProductReceiveStockController.productReceiveStockSave(com.yun.stock.model.ProductReceiveStock,javax.servlet.http.HttpServletResponse) throws java.io.IOException
2019-02-25 10:07:30.334 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveStockDelete]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveStockController.productReceiveStockDelete(int)
2019-02-25 10:07:30.334 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveStockPreUpdate]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveStockController.productReceiveStockPreUpdate(int,org.springframework.ui.Model)
2019-02-25 10:07:30.335 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveStockUpdate]}" onto public void com.yun.stock.controller.ProductReceiveStockController.productReceiveStockUpdate(com.yun.stock.model.ProductReceiveStock,javax.servlet.http.HttpServletResponse) throws java.io.IOException
2019-02-25 10:07:30.337 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveStockToCurrentStock]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveTradeController.productReceiveStockToCurrentStock(int,org.springframework.ui.Model)
2019-02-25 10:07:30.342 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveInSave]}" onto public void com.yun.stock.controller.ProductReceiveTradeController.receiveInSave(com.yun.stock.model.ProductReceiveTrade,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse) throws java.io.IOException
2019-02-25 10:07:30.345 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveReject]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveTradeController.receiveReject(org.springframework.ui.Model)
2019-02-25 10:07:30.346 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveIn]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveTradeController.receiveIn(org.springframework.ui.Model)
2019-02-25 10:07:30.346 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveRejectSave]}" onto public void com.yun.stock.controller.ProductReceiveTradeController.receiveRejectSave(com.yun.stock.model.ProductReceiveTrade,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse) throws java.io.IOException
2019-02-25 10:07:30.346 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveToCurrentSave]}" onto public void com.yun.stock.controller.ProductReceiveTradeController.productReceiveToCurrentSave(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse) throws java.lang.Exception
2019-02-25 10:07:30.348 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockSave]}" onto public void com.yun.stock.controller.ProductStockController.productStockSave(com.yun.stock.model.ProductStock,javax.servlet.http.HttpServletResponse) throws java.io.IOException
2019-02-25 10:07:30.348 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockList]}" onto public java.lang.String com.yun.stock.controller.ProductStockController.productStocklist(java.lang.String,java.lang.String,org.springframework.ui.Model)
2019-02-25 10:07:30.349 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockPreAdd]}" onto public java.lang.String com.yun.stock.controller.ProductStockController.productStockPreAdd()
2019-02-25 10:07:30.349 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockDelete]}" onto public java.lang.String com.yun.stock.controller.ProductStockController.productStockDelete(int)
2019-02-25 10:07:30.350 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockPreUpdate]}" onto public java.lang.String com.yun.stock.controller.ProductStockController.productStockPreUpdate(int,org.springframework.ui.Model)
2019-02-25 10:07:30.350 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockUpdate]}" onto public void com.yun.stock.controller.ProductStockController.productStockUpdate(com.yun.stock.model.ProductStock,javax.servlet.http.HttpServletResponse) throws java.io.IOException
2019-02-25 10:07:30.352 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productCurrentOut]}" onto public java.lang.String com.yun.stock.controller.ProductTradeController.receiveReject(org.springframework.ui.Model)
2019-02-25 10:07:30.352 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productCurrentIn]}" onto public java.lang.String com.yun.stock.controller.ProductTradeController.productCurrentIn(org.springframework.ui.Model)
2019-02-25 10:07:30.352 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productCurrentInSave]}" onto public void com.yun.stock.controller.ProductTradeController.productCurrentInSave(com.yun.stock.model.ProductTrade,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse) throws java.io.IOException
2019-02-25 10:07:30.353 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productCurrentOutSave]}" onto public void com.yun.stock.controller.ProductTradeController.productCurrentOutSave(com.yun.stock.model.ProductTrade,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse) throws java.io.IOException
2019-02-25 10:07:30.354 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/main]}" onto public java.lang.String com.yun.user.controller.MainController.main()
2019-02-25 10:07:30.355 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/sysBak]}" onto public void com.yun.user.controller.SysBakController.sysBak(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
2019-02-25 10:07:30.356 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/deleteBakFile]}" onto public java.lang.String com.yun.user.controller.SysBakController.deleteBakFile(java.lang.String)
2019-02-25 10:07:30.357 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/sysBakList]}" onto public java.lang.String com.yun.user.controller.SysBakController.sysBakList(org.springframework.ui.Model)
2019-02-25 10:07:30.360 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/userList]}" onto public java.lang.String com.yun.user.controller.UserController.userList(org.springframework.ui.Model)
2019-02-25 10:07:30.360 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/userEdit]}" onto public java.lang.String com.yun.user.controller.UserController.userEdit()
2019-02-25 10:07:30.361 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/login]}" onto public void com.yun.user.controller.UserController.login(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse) throws java.io.IOException
2019-02-25 10:07:30.361 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/deleteUserInfo]}" onto public java.lang.String com.yun.user.controller.UserController.userDelete(int)
2019-02-25 10:07:30.362 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/userSave]}" onto public java.lang.String com.yun.user.controller.UserController.userSave(com.yun.user.model.UserInfo)
2019-02-25 10:07:30.369 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/error]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> org.springframework.boot.autoconfigure.web.BasicErrorController.error(javax.servlet.http.HttpServletRequest)
2019-02-25 10:07:30.370 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/error],produces=[text/html]}" onto public org.springframework.web.servlet.ModelAndView org.springframework.boot.autoconfigure.web.BasicErrorController.errorHtml(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
2019-02-25 10:07:30.499 [main] WARN  o.s.w.servlet.resource.ResourceHttpRequestHandler - Locations list is empty. No resources will be served unless a custom ResourceResolver is configured as an alternative to PathResourceResolver.
2019-02-25 10:07:30.555 [main] INFO  o.s.web.servlet.handler.SimpleUrlHandlerMapping - Mapped URL path [/dbbak] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-02-25 10:07:30.555 [main] INFO  o.s.web.servlet.handler.SimpleUrlHandlerMapping - Mapped URL path [/webjars/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-02-25 10:07:30.556 [main] INFO  o.s.web.servlet.handler.SimpleUrlHandlerMapping - Mapped URL path [/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-02-25 10:07:31.023 [main] INFO  o.s.web.servlet.handler.SimpleUrlHandlerMapping - Mapped URL path [/**/favicon.ico] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-02-25 10:07:33.310 [main] INFO  o.s.b.a.w.WebMvcAutoConfiguration$WelcomePageHandlerMapping - Adding welcome page: class path resource [static/index.html]
2019-02-25 10:07:34.093 [main] INFO  o.s.jmx.export.annotation.AnnotationMBeanExporter - Registering beans for JMX exposure on startup
2019-02-25 10:07:34.183 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-80"]
2019-02-25 10:07:34.217 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-80"]
2019-02-25 10:07:34.485 [main] INFO  org.apache.tomcat.util.net.NioSelectorPool - Using a shared selector for servlet write/read
2019-02-25 10:07:34.607 [main] INFO  o.s.b.c.e.tomcat.TomcatEmbeddedServletContainer - Tomcat started on port(s): 80 (http)
2019-02-25 10:07:34.615 [main] INFO  com.yun.YunEbStockApplication - Started YunEbStockApplication in 21.782 seconds (JVM running for 29.741)
2019-02-25 10:07:53.064 [http-nio-80-exec-1] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring FrameworkServlet 'dispatcherServlet'
2019-02-25 10:07:53.065 [http-nio-80-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - FrameworkServlet 'dispatcherServlet': initialization started
2019-02-25 10:07:53.100 [http-nio-80-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - FrameworkServlet 'dispatcherServlet': initialization completed in 35 ms
2019-02-25 10:07:53.153 [http-nio-80-exec-1] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/
2019-02-25 10:07:54.464 [http-nio-80-exec-2] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/index.html
2019-02-25 10:07:54.720 [http-nio-80-exec-3] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/css/bootstrap.min.css
2019-02-25 10:07:54.730 [http-nio-80-exec-4] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/js/jquery.min.js
2019-02-25 10:07:54.740 [http-nio-80-exec-5] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/js/bootstrap.min.js
2019-02-25 10:07:54.920 [http-nio-80-exec-6] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/favicon.ico
2019-02-25 10:07:58.137 [http-nio-80-exec-7] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/login
2019-02-25 10:07:59.546 [http-nio-80-exec-7] DEBUG c.y.user.dao.UserInfoDao.findUserInfoByNameAndPass - ==>  Preparing: select * from user_info where login_name=? and login_pass=? 
2019-02-25 10:07:59.582 [http-nio-80-exec-7] DEBUG c.y.user.dao.UserInfoDao.findUserInfoByNameAndPass - ==> Parameters: aaa(String), aaa(String)
2019-02-25 10:07:59.677 [http-nio-80-exec-7] DEBUG c.y.user.dao.UserInfoDao.findUserInfoByNameAndPass - <==      Total: 1
2019-02-25 10:07:59.721 [http-nio-80-exec-8] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/main
2019-02-25 10:08:00.551 [http-nio-80-exec-9] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/css/site.css
2019-02-25 10:08:00.645 [http-nio-80-exec-10] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/default.html
2019-02-25 10:08:00.687 [http-nio-80-exec-1] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/favicon.ico
2019-02-25 10:09:16.876 [main] INFO  com.yun.YunEbStockApplication - Starting YunEbStockApplication on USER-20181202BJ with PID 7856 (E:\workspace\yun-eb-stock\target\classes started by Administrator in E:\workspace\yun-eb-stock)
2019-02-25 10:09:16.881 [main] DEBUG com.yun.YunEbStockApplication - Running with Spring Boot v1.5.9.RELEASE, Spring v4.3.13.RELEASE
2019-02-25 10:09:16.881 [main] INFO  com.yun.YunEbStockApplication - No active profile set, falling back to default profiles: default
2019-02-25 10:09:17.125 [background-preinit] INFO  org.hibernate.validator.internal.util.Version - HV000001: Hibernate Validator 5.3.6.Final
2019-02-25 10:09:17.506 [main] INFO  o.s.b.c.e.AnnotationConfigEmbeddedWebApplicationContext - Refreshing org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@6a28ffa4: startup date [Mon Feb 25 10:09:17 CST 2019]; root of context hierarchy
2019-02-25 10:09:19.348 [main] INFO  o.s.b.c.e.tomcat.TomcatEmbeddedServletContainer - Tomcat initialized with port(s): 80 (http)
2019-02-25 10:09:19.359 [main] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2019-02-25 10:09:19.360 [main] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet Engine: Apache Tomcat/8.5.23
2019-02-25 10:09:19.494 [localhost-startStop-1] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2019-02-25 10:09:19.495 [localhost-startStop-1] INFO  org.springframework.web.context.ContextLoader - Root WebApplicationContext: initialization completed in 1990 ms
2019-02-25 10:09:19.668 [localhost-startStop-1] INFO  o.s.boot.web.servlet.FilterRegistrationBean - Mapping filter: 'characterEncodingFilter' to: [/*]
2019-02-25 10:09:19.669 [localhost-startStop-1] INFO  o.s.boot.web.servlet.FilterRegistrationBean - Mapping filter: 'hiddenHttpMethodFilter' to: [/*]
2019-02-25 10:09:19.669 [localhost-startStop-1] INFO  o.s.boot.web.servlet.FilterRegistrationBean - Mapping filter: 'httpPutFormContentFilter' to: [/*]
2019-02-25 10:09:19.669 [localhost-startStop-1] INFO  o.s.boot.web.servlet.FilterRegistrationBean - Mapping filter: 'requestContextFilter' to: [/*]
2019-02-25 10:09:19.669 [localhost-startStop-1] INFO  o.s.boot.web.servlet.FilterRegistrationBean - Mapping filter: 'loginFilter' to urls: [/*]
2019-02-25 10:09:19.669 [localhost-startStop-1] INFO  o.s.boot.web.servlet.ServletRegistrationBean - Mapping servlet: 'dispatcherServlet' to [/]
2019-02-25 10:09:20.629 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerAdapter - Looking for @ControllerAdvice: org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@6a28ffa4: startup date [Mon Feb 25 10:09:17 CST 2019]; root of context hierarchy
2019-02-25 10:09:20.692 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productListForAutoComplete]}" onto public java.util.List<com.yun.product.model.Product> com.yun.product.controller.ProductController.productListForAutoComplete(java.lang.String)
2019-02-25 10:09:20.693 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productListForStock]}" onto public java.util.List<com.yun.product.model.Product> com.yun.product.controller.ProductController.productListForStock()
2019-02-25 10:09:20.694 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productListForTrade]}" onto public java.util.List<com.yun.product.model.Product> com.yun.product.controller.ProductController.productListForTrade(java.lang.String)
2019-02-25 10:09:20.694 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productList]}" onto public java.lang.String com.yun.product.controller.ProductController.productList(org.springframework.ui.Model,java.lang.String,java.lang.String,java.lang.String,java.lang.String)
2019-02-25 10:09:20.695 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productPreAdd]}" onto public java.lang.String com.yun.product.controller.ProductController.productPreAdd()
2019-02-25 10:09:20.695 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productSave]}" onto public java.lang.String com.yun.product.controller.ProductController.productSave(com.yun.product.model.Product)
2019-02-25 10:09:20.695 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productDelete]}" onto public java.lang.String com.yun.product.controller.ProductController.productDelete(int)
2019-02-25 10:09:20.695 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productPreUpdate]}" onto public java.lang.String com.yun.product.controller.ProductController.productPreUpdate(int,org.springframework.ui.Model)
2019-02-25 10:09:20.695 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productUpdate]}" onto public java.lang.String com.yun.product.controller.ProductController.productUpdate(com.yun.product.model.Product)
2019-02-25 10:09:20.697 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/prodParamDelete]}" onto public java.lang.String com.yun.product.controller.ProductParamController.prodParamDelete(int)
2019-02-25 10:09:20.697 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/prodParamPreAdd]}" onto public java.lang.String com.yun.product.controller.ProductParamController.prodParamPreAdd(int,org.springframework.ui.Model)
2019-02-25 10:09:20.698 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/prodParamSave]}" onto public java.lang.String com.yun.product.controller.ProductParamController.prodParamSave(com.yun.product.model.ProductParameter)
2019-02-25 10:09:20.698 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/prodParamList]}" onto public java.lang.String com.yun.product.controller.ProductParamController.prodParamList(int)
2019-02-25 10:09:20.702 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeUpdate]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeUpdate(java.lang.Integer,org.springframework.ui.Model)
2019-02-25 10:09:20.703 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeUpdateSave]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeUpdateSave(com.yun.product.model.ProductType)
2019-02-25 10:09:20.703 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeDelete]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeDelete(java.lang.Integer,javax.servlet.http.HttpServletResponse) throws java.io.IOException
2019-02-25 10:09:20.704 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeList]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeList(org.springframework.ui.Model)
2019-02-25 10:09:20.704 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeTree]}" onto public java.util.List<com.yun.product.model.ProductType> com.yun.product.controller.ProductTypeController.productTypeTree()
2019-02-25 10:09:20.705 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeEdit]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeEdit()
2019-02-25 10:09:20.705 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeSave]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeSave(com.yun.product.model.ProductType)
2019-02-25 10:09:20.707 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockReport]}" onto public java.lang.String com.yun.report.controller.ProductStockReportController.productStockReport(java.lang.String,java.lang.String,java.lang.String,org.springframework.ui.Model)
2019-02-25 10:09:20.707 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveStockChange]}" onto public java.lang.String com.yun.report.controller.ProductStockReportController.productReceiveStockChange(java.lang.String,java.lang.String,java.lang.String,java.lang.String,org.springframework.ui.Model)
2019-02-25 10:09:20.707 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productCurrentStockChange]}" onto public java.lang.String com.yun.report.controller.ProductStockReportController.productCurrentStockChange(java.lang.String,java.lang.String,java.lang.String,java.lang.String,org.springframework.ui.Model)
2019-02-25 10:09:20.708 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productSaleCalcQuery]}" onto public java.lang.String com.yun.report.controller.ProductStockReportController.productSaleCalcQuery(java.lang.String,java.lang.String,java.lang.String,java.lang.String)
2019-02-25 10:09:20.708 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productSaleTop]}" onto public java.lang.String com.yun.report.controller.ProductStockReportController.productSaleTop(java.lang.String,java.lang.String,java.lang.String,java.lang.String,org.springframework.ui.Model)
2019-02-25 10:09:20.708 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productSaleCalc]}" onto public java.lang.String com.yun.report.controller.ProductStockReportController.productSaleCalc()
2019-02-25 10:09:20.710 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveStockList]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveStockController.productReceiveStocklist(java.lang.String,java.lang.String,org.springframework.ui.Model)
2019-02-25 10:09:20.710 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveStockPreAdd]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveStockController.productReceiveStockPreAdd()
2019-02-25 10:09:20.710 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveStockSave]}" onto public void com.yun.stock.controller.ProductReceiveStockController.productReceiveStockSave(com.yun.stock.model.ProductReceiveStock,javax.servlet.http.HttpServletResponse) throws java.io.IOException
2019-02-25 10:09:20.710 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveStockDelete]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveStockController.productReceiveStockDelete(int)
2019-02-25 10:09:20.711 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveStockPreUpdate]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveStockController.productReceiveStockPreUpdate(int,org.springframework.ui.Model)
2019-02-25 10:09:20.711 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveStockUpdate]}" onto public void com.yun.stock.controller.ProductReceiveStockController.productReceiveStockUpdate(com.yun.stock.model.ProductReceiveStock,javax.servlet.http.HttpServletResponse) throws java.io.IOException
2019-02-25 10:09:20.712 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveStockToCurrentStock]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveTradeController.productReceiveStockToCurrentStock(int,org.springframework.ui.Model)
2019-02-25 10:09:20.712 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveRejectSave]}" onto public void com.yun.stock.controller.ProductReceiveTradeController.receiveRejectSave(com.yun.stock.model.ProductReceiveTrade,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse) throws java.io.IOException
2019-02-25 10:09:20.712 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveToCurrentSave]}" onto public void com.yun.stock.controller.ProductReceiveTradeController.productReceiveToCurrentSave(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse) throws java.lang.Exception
2019-02-25 10:09:20.713 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveIn]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveTradeController.receiveIn(org.springframework.ui.Model)
2019-02-25 10:09:20.713 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveInSave]}" onto public void com.yun.stock.controller.ProductReceiveTradeController.receiveInSave(com.yun.stock.model.ProductReceiveTrade,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse) throws java.io.IOException
2019-02-25 10:09:20.714 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveReject]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveTradeController.receiveReject(org.springframework.ui.Model)
2019-02-25 10:09:20.715 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockPreAdd]}" onto public java.lang.String com.yun.stock.controller.ProductStockController.productStockPreAdd()
2019-02-25 10:09:20.716 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockDelete]}" onto public java.lang.String com.yun.stock.controller.ProductStockController.productStockDelete(int)
2019-02-25 10:09:20.716 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockPreUpdate]}" onto public java.lang.String com.yun.stock.controller.ProductStockController.productStockPreUpdate(int,org.springframework.ui.Model)
2019-02-25 10:09:20.717 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockUpdate]}" onto public void com.yun.stock.controller.ProductStockController.productStockUpdate(com.yun.stock.model.ProductStock,javax.servlet.http.HttpServletResponse) throws java.io.IOException
2019-02-25 10:09:20.717 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockSave]}" onto public void com.yun.stock.controller.ProductStockController.productStockSave(com.yun.stock.model.ProductStock,javax.servlet.http.HttpServletResponse) throws java.io.IOException
2019-02-25 10:09:20.717 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockList]}" onto public java.lang.String com.yun.stock.controller.ProductStockController.productStocklist(java.lang.String,java.lang.String,org.springframework.ui.Model)
2019-02-25 10:09:20.719 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productCurrentInSave]}" onto public void com.yun.stock.controller.ProductTradeController.productCurrentInSave(com.yun.stock.model.ProductTrade,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse) throws java.io.IOException
2019-02-25 10:09:20.719 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productCurrentOutSave]}" onto public void com.yun.stock.controller.ProductTradeController.productCurrentOutSave(com.yun.stock.model.ProductTrade,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse) throws java.io.IOException
2019-02-25 10:09:20.720 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productCurrentOut]}" onto public java.lang.String com.yun.stock.controller.ProductTradeController.receiveReject(org.springframework.ui.Model)
2019-02-25 10:09:20.720 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productCurrentIn]}" onto public java.lang.String com.yun.stock.controller.ProductTradeController.productCurrentIn(org.springframework.ui.Model)
2019-02-25 10:09:20.721 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/main]}" onto public java.lang.String com.yun.user.controller.MainController.main()
2019-02-25 10:09:20.722 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/sysBak]}" onto public void com.yun.user.controller.SysBakController.sysBak(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
2019-02-25 10:09:20.723 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/deleteBakFile]}" onto public java.lang.String com.yun.user.controller.SysBakController.deleteBakFile(java.lang.String)
2019-02-25 10:09:20.723 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/sysBakList]}" onto public java.lang.String com.yun.user.controller.SysBakController.sysBakList(org.springframework.ui.Model)
2019-02-25 10:09:20.724 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/userList]}" onto public java.lang.String com.yun.user.controller.UserController.userList(org.springframework.ui.Model)
2019-02-25 10:09:20.725 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/userEdit]}" onto public java.lang.String com.yun.user.controller.UserController.userEdit()
2019-02-25 10:09:20.725 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/login]}" onto public void com.yun.user.controller.UserController.login(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse) throws java.io.IOException
2019-02-25 10:09:20.725 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/deleteUserInfo]}" onto public java.lang.String com.yun.user.controller.UserController.userDelete(int)
2019-02-25 10:09:20.725 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/userSave]}" onto public java.lang.String com.yun.user.controller.UserController.userSave(com.yun.user.model.UserInfo)
2019-02-25 10:09:20.731 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/error]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> org.springframework.boot.autoconfigure.web.BasicErrorController.error(javax.servlet.http.HttpServletRequest)
2019-02-25 10:09:20.732 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/error],produces=[text/html]}" onto public org.springframework.web.servlet.ModelAndView org.springframework.boot.autoconfigure.web.BasicErrorController.errorHtml(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
2019-02-25 10:09:20.773 [main] WARN  o.s.w.servlet.resource.ResourceHttpRequestHandler - Locations list is empty. No resources will be served unless a custom ResourceResolver is configured as an alternative to PathResourceResolver.
2019-02-25 10:09:20.792 [main] INFO  o.s.web.servlet.handler.SimpleUrlHandlerMapping - Mapped URL path [/dbbak] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-02-25 10:09:20.793 [main] INFO  o.s.web.servlet.handler.SimpleUrlHandlerMapping - Mapped URL path [/webjars/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-02-25 10:09:20.793 [main] INFO  o.s.web.servlet.handler.SimpleUrlHandlerMapping - Mapped URL path [/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-02-25 10:09:20.875 [main] INFO  o.s.web.servlet.handler.SimpleUrlHandlerMapping - Mapped URL path [/**/favicon.ico] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-02-25 10:09:21.256 [main] INFO  o.s.b.a.w.WebMvcAutoConfiguration$WelcomePageHandlerMapping - Adding welcome page: class path resource [static/index.html]
2019-02-25 10:09:21.580 [main] INFO  o.s.jmx.export.annotation.AnnotationMBeanExporter - Registering beans for JMX exposure on startup
2019-02-25 10:09:21.602 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-80"]
2019-02-25 10:09:21.614 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-80"]
2019-02-25 10:09:21.810 [main] INFO  org.apache.tomcat.util.net.NioSelectorPool - Using a shared selector for servlet write/read
2019-02-25 10:09:21.832 [main] INFO  o.s.b.c.e.tomcat.TomcatEmbeddedServletContainer - Tomcat started on port(s): 80 (http)
2019-02-25 10:09:21.838 [main] INFO  com.yun.YunEbStockApplication - Started YunEbStockApplication in 5.562 seconds (JVM running for 6.967)
2019-02-25 10:12:04.202 [http-nio-80-exec-1] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring FrameworkServlet 'dispatcherServlet'
2019-02-25 10:12:04.202 [http-nio-80-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - FrameworkServlet 'dispatcherServlet': initialization started
2019-02-25 10:12:04.224 [http-nio-80-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - FrameworkServlet 'dispatcherServlet': initialization completed in 22 ms
2019-02-25 10:12:04.236 [http-nio-80-exec-1] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/main
2019-02-25 10:12:08.404 [http-nio-80-exec-2] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/
2019-02-25 10:12:08.437 [http-nio-80-exec-2] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/index.html
2019-02-25 10:12:29.788 [http-nio-80-exec-7] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/login
2019-02-25 10:12:30.130 [http-nio-80-exec-7] DEBUG c.y.user.dao.UserInfoDao.findUserInfoByNameAndPass - ==>  Preparing: select * from user_info where login_name=? and login_pass=? 
2019-02-25 10:12:30.152 [http-nio-80-exec-7] DEBUG c.y.user.dao.UserInfoDao.findUserInfoByNameAndPass - ==> Parameters: aaa(String), aaa(String)
2019-02-25 10:12:30.164 [http-nio-80-exec-7] DEBUG c.y.user.dao.UserInfoDao.findUserInfoByNameAndPass - <==      Total: 1
2019-02-25 10:12:30.173 [http-nio-80-exec-8] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/main
2019-02-25 10:12:36.175 [http-nio-80-exec-1] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productCurrentIn
2019-02-25 10:12:36.337 [http-nio-80-exec-2] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/js/jquery.message_cn.js
2019-02-25 10:12:36.344 [http-nio-80-exec-5] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/js/My97DatePicker/WdatePicker.js
2019-02-25 10:12:36.354 [http-nio-80-exec-4] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/js/jquery.validate.min.js
2019-02-25 10:12:36.455 [http-nio-80-exec-3] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/js/My97DatePicker/skin/WdatePicker.css
2019-02-25 10:12:40.976 [http-nio-80-exec-6] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productList
2019-02-25 10:12:41.057 [http-nio-80-exec-6] DEBUG c.yun.product.dao.ProductDao.findProductRowByParam - ==>  Preparing: select count(*) from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 
2019-02-25 10:12:41.057 [http-nio-80-exec-6] DEBUG c.yun.product.dao.ProductDao.findProductRowByParam - ==> Parameters: 
2019-02-25 10:12:41.155 [http-nio-80-exec-6] DEBUG c.yun.product.dao.ProductDao.findProductRowByParam - <==      Total: 1
2019-02-25 10:12:41.164 [http-nio-80-exec-6] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 order by prod_id limit ?,? 
2019-02-25 10:12:41.164 [http-nio-80-exec-6] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==> Parameters: 0(Integer), 5(Integer)
2019-02-25 10:12:41.169 [http-nio-80-exec-6] DEBUG com.yun.product.dao.ProductDao.findProductByParam - <==      Total: 5
2019-02-25 10:12:41.171 [http-nio-80-exec-6] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-02-25 10:12:41.172 [http-nio-80-exec-6] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 2(Integer)
2019-02-25 10:12:41.176 [http-nio-80-exec-6] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-02-25 10:12:41.176 [http-nio-80-exec-6] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-02-25 10:12:41.176 [http-nio-80-exec-6] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 3(Integer)
2019-02-25 10:12:41.177 [http-nio-80-exec-6] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-02-25 10:12:41.178 [http-nio-80-exec-6] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-02-25 10:12:41.178 [http-nio-80-exec-6] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 4(Integer)
2019-02-25 10:12:41.181 [http-nio-80-exec-6] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 2
2019-02-25 10:12:41.182 [http-nio-80-exec-6] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-02-25 10:12:41.182 [http-nio-80-exec-6] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 5(Integer)
2019-02-25 10:12:41.186 [http-nio-80-exec-6] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 2
2019-02-25 10:12:41.187 [http-nio-80-exec-6] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-02-25 10:12:41.188 [http-nio-80-exec-6] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 6(Integer)
2019-02-25 10:12:41.191 [http-nio-80-exec-6] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-02-25 10:12:43.185 [http-nio-80-exec-7] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/prodParamList
2019-02-25 10:12:43.191 [http-nio-80-exec-7] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-02-25 10:12:43.193 [http-nio-80-exec-7] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 2(Integer)
2019-02-25 10:12:43.194 [http-nio-80-exec-7] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-02-25 10:12:45.162 [http-nio-80-exec-8] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/prodParamPreAdd
2019-02-25 10:12:45.218 [http-nio-80-exec-9] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/css/bootstrap-treeview.css
2019-02-25 10:12:45.221 [http-nio-80-exec-10] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/js/bootstrap-treeview.js
2019-02-25 10:13:05.321 [http-nio-80-exec-1] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/js/jquery.min.map
2019-02-25 10:13:05.406 [http-nio-80-exec-2] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/css/bootstrap.min.css.map
2019-02-25 10:15:20.998 [http-nio-80-exec-6] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/main
2019-02-25 10:15:21.236 [http-nio-80-exec-9] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/js/jquery.min.js
2019-02-25 10:15:21.322 [http-nio-80-exec-10] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/js/bootstrap.min.js
2019-02-25 10:15:21.329 [http-nio-80-exec-8] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/css/site.css
2019-02-25 10:15:21.371 [http-nio-80-exec-7] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/css/bootstrap.min.css
2019-02-25 10:15:21.491 [http-nio-80-exec-2] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/css/bootstrap.min.css.map
2019-02-25 10:15:21.551 [http-nio-80-exec-1] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/default.html
2019-02-25 10:15:21.569 [http-nio-80-exec-4] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/js/jquery.min.map
2019-02-25 10:15:23.823 [http-nio-80-exec-5] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productTypeList
2019-02-25 10:15:23.825 [http-nio-80-exec-5] INFO  com.yun.product.controller.ProductTypeController - 跳转到stock/productTypeList.html页面
2019-02-25 10:15:23.898 [http-nio-80-exec-3] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/css/jquery.treetable.theme.default.css
2019-02-25 10:15:23.906 [http-nio-80-exec-6] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/js/jquery.treetable.js
2019-02-25 10:15:23.907 [http-nio-80-exec-9] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/css/jquery.treetable.css
2019-02-25 10:15:23.977 [http-nio-80-exec-10] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productTypeTree
2019-02-25 10:15:23.981 [http-nio-80-exec-10] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - ==>  Preparing: select p1.prod_type_id,p1.prod_type_name,p1.parent_id,p2.prod_type_id parent_type_id,p2.prod_type_name parent_type_name from product_type p1 LEFT JOIN product_type p2 on p1.parent_id=p2.prod_type_id where p1.parent_id=? 
2019-02-25 10:15:23.981 [http-nio-80-exec-10] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - ==> Parameters: 0(Integer)
2019-02-25 10:15:24.020 [http-nio-80-exec-10] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - ====>  Preparing: select p1.prod_type_id,p1.prod_type_name,p1.parent_id,p2.prod_type_id parent_type_id,p2.prod_type_name parent_type_name from product_type p1 LEFT JOIN product_type p2 on p1.parent_id=p2.prod_type_id where p1.parent_id=? 
2019-02-25 10:15:24.021 [http-nio-80-exec-10] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - ====> Parameters: 29(Integer)
2019-02-25 10:15:24.022 [http-nio-80-exec-10] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - ======>  Preparing: select p1.prod_type_id,p1.prod_type_name,p1.parent_id,p2.prod_type_id parent_type_id,p2.prod_type_name parent_type_name from product_type p1 LEFT JOIN product_type p2 on p1.parent_id=p2.prod_type_id where p1.parent_id=? 
2019-02-25 10:15:24.022 [http-nio-80-exec-10] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - ======> Parameters: 30(Integer)
2019-02-25 10:15:24.023 [http-nio-80-exec-10] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - <======      Total: 0
2019-02-25 10:15:24.024 [http-nio-80-exec-10] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - <====      Total: 1
2019-02-25 10:15:24.024 [http-nio-80-exec-10] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - ====>  Preparing: select p1.prod_type_id,p1.prod_type_name,p1.parent_id,p2.prod_type_id parent_type_id,p2.prod_type_name parent_type_name from product_type p1 LEFT JOIN product_type p2 on p1.parent_id=p2.prod_type_id where p1.parent_id=? 
2019-02-25 10:15:24.024 [http-nio-80-exec-10] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - ====> Parameters: 39(Integer)
2019-02-25 10:15:24.026 [http-nio-80-exec-10] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - ======>  Preparing: select p1.prod_type_id,p1.prod_type_name,p1.parent_id,p2.prod_type_id parent_type_id,p2.prod_type_name parent_type_name from product_type p1 LEFT JOIN product_type p2 on p1.parent_id=p2.prod_type_id where p1.parent_id=? 
2019-02-25 10:15:24.026 [http-nio-80-exec-10] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - ======> Parameters: 41(Integer)
2019-02-25 10:15:24.028 [http-nio-80-exec-10] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - <======      Total: 0
2019-02-25 10:15:24.029 [http-nio-80-exec-10] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - <====      Total: 1
2019-02-25 10:15:24.029 [http-nio-80-exec-10] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - <==      Total: 2
2019-02-25 10:15:24.686 [http-nio-80-exec-8] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productList
2019-02-25 10:15:24.688 [http-nio-80-exec-8] DEBUG c.yun.product.dao.ProductDao.findProductRowByParam - ==>  Preparing: select count(*) from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 
2019-02-25 10:15:24.688 [http-nio-80-exec-8] DEBUG c.yun.product.dao.ProductDao.findProductRowByParam - ==> Parameters: 
2019-02-25 10:15:24.690 [http-nio-80-exec-8] DEBUG c.yun.product.dao.ProductDao.findProductRowByParam - <==      Total: 1
2019-02-25 10:15:24.694 [http-nio-80-exec-8] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 order by prod_id limit ?,? 
2019-02-25 10:15:24.695 [http-nio-80-exec-8] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==> Parameters: 0(Integer), 5(Integer)
2019-02-25 10:15:24.702 [http-nio-80-exec-8] DEBUG com.yun.product.dao.ProductDao.findProductByParam - <==      Total: 5
2019-02-25 10:15:24.703 [http-nio-80-exec-8] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-02-25 10:15:24.704 [http-nio-80-exec-8] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 2(Integer)
2019-02-25 10:15:24.705 [http-nio-80-exec-8] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-02-25 10:15:24.706 [http-nio-80-exec-8] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-02-25 10:15:24.706 [http-nio-80-exec-8] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 3(Integer)
2019-02-25 10:15:24.707 [http-nio-80-exec-8] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-02-25 10:15:24.708 [http-nio-80-exec-8] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-02-25 10:15:24.708 [http-nio-80-exec-8] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 4(Integer)
2019-02-25 10:15:24.710 [http-nio-80-exec-8] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 2
2019-02-25 10:15:24.711 [http-nio-80-exec-8] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-02-25 10:15:24.711 [http-nio-80-exec-8] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 5(Integer)
2019-02-25 10:15:24.713 [http-nio-80-exec-8] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 2
2019-02-25 10:15:24.714 [http-nio-80-exec-8] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-02-25 10:15:24.714 [http-nio-80-exec-8] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 6(Integer)
2019-02-25 10:15:24.716 [http-nio-80-exec-8] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-02-25 10:15:25.944 [http-nio-80-exec-7] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/prodParamList
2019-02-25 10:15:25.947 [http-nio-80-exec-7] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-02-25 10:15:25.947 [http-nio-80-exec-7] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 2(Integer)
2019-02-25 10:15:25.950 [http-nio-80-exec-7] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-02-25 10:15:27.296 [http-nio-80-exec-2] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/prodParamPreAdd
2019-02-25 10:15:43.281 [http-nio-80-exec-1] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/js/jquery.min.map
2019-02-25 10:15:43.308 [http-nio-80-exec-4] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/css/bootstrap.min.css.map
2019-02-25 10:18:55.684 [http-nio-80-exec-10] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/prodParamSave
2019-02-25 10:18:55.701 [http-nio-80-exec-10] DEBUG c.y.p.d.ProductParameterDao.insertProductParameter - ==>  Preparing: insert into product_parameter(prod_param_name,prod_id) values(?,?) 
2019-02-25 10:18:55.702 [http-nio-80-exec-10] DEBUG c.y.p.d.ProductParameterDao.insertProductParameter - ==> Parameters: aa,aa,,,(String), 2(Integer)
2019-02-25 10:18:55.889 [http-nio-80-exec-10] DEBUG c.y.p.d.ProductParameterDao.insertProductParameter - <==    Updates: 1
2019-02-25 10:18:56.127 [http-nio-80-exec-8] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productList
2019-02-25 10:18:56.136 [http-nio-80-exec-8] DEBUG c.yun.product.dao.ProductDao.findProductRowByParam - ==>  Preparing: select count(*) from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 
2019-02-25 10:18:56.137 [http-nio-80-exec-8] DEBUG c.yun.product.dao.ProductDao.findProductRowByParam - ==> Parameters: 
2019-02-25 10:18:56.138 [http-nio-80-exec-8] DEBUG c.yun.product.dao.ProductDao.findProductRowByParam - <==      Total: 1
2019-02-25 10:18:56.140 [http-nio-80-exec-8] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 order by prod_id limit ?,? 
2019-02-25 10:18:56.141 [http-nio-80-exec-8] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==> Parameters: 0(Integer), 5(Integer)
2019-02-25 10:18:56.146 [http-nio-80-exec-8] DEBUG com.yun.product.dao.ProductDao.findProductByParam - <==      Total: 5
2019-02-25 10:18:56.147 [http-nio-80-exec-8] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-02-25 10:18:56.147 [http-nio-80-exec-8] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 2(Integer)
2019-02-25 10:18:56.150 [http-nio-80-exec-8] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 2
2019-02-25 10:18:56.151 [http-nio-80-exec-8] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-02-25 10:18:56.152 [http-nio-80-exec-8] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 3(Integer)
2019-02-25 10:18:56.154 [http-nio-80-exec-8] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-02-25 10:18:56.154 [http-nio-80-exec-8] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-02-25 10:18:56.155 [http-nio-80-exec-8] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 4(Integer)
2019-02-25 10:18:56.156 [http-nio-80-exec-8] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 2
2019-02-25 10:18:56.157 [http-nio-80-exec-8] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-02-25 10:18:56.157 [http-nio-80-exec-8] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 5(Integer)
2019-02-25 10:18:56.158 [http-nio-80-exec-8] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 2
2019-02-25 10:18:56.159 [http-nio-80-exec-8] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-02-25 10:18:56.159 [http-nio-80-exec-8] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 6(Integer)
2019-02-25 10:18:56.160 [http-nio-80-exec-8] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-02-25 10:18:56.627 [http-nio-80-exec-2] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/js/jquery.min.map
2019-02-25 10:18:56.628 [http-nio-80-exec-7] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/css/bootstrap.min.css.map
2019-02-25 10:19:00.473 [http-nio-80-exec-1] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/prodParamList
2019-02-25 10:19:00.475 [http-nio-80-exec-1] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-02-25 10:19:00.475 [http-nio-80-exec-1] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 2(Integer)
2019-02-25 10:19:00.477 [http-nio-80-exec-1] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 2
2019-02-25 10:22:24.534 [main] INFO  com.yun.YunEbStockApplication - Starting YunEbStockApplication on USER-20181202BJ with PID 6628 (E:\workspace\yun-eb-stock\target\classes started by Administrator in E:\workspace\yun-eb-stock)
2019-02-25 10:22:24.546 [main] DEBUG com.yun.YunEbStockApplication - Running with Spring Boot v1.5.9.RELEASE, Spring v4.3.13.RELEASE
2019-02-25 10:22:24.546 [main] INFO  com.yun.YunEbStockApplication - No active profile set, falling back to default profiles: default
2019-02-25 10:22:25.997 [main] INFO  o.s.b.c.e.AnnotationConfigEmbeddedWebApplicationContext - Refreshing org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@6a28ffa4: startup date [Mon Feb 25 10:22:25 CST 2019]; root of context hierarchy
2019-02-25 10:22:26.171 [background-preinit] INFO  org.hibernate.validator.internal.util.Version - HV000001: Hibernate Validator 5.3.6.Final
2019-02-25 10:22:28.132 [main] INFO  o.s.b.c.e.tomcat.TomcatEmbeddedServletContainer - Tomcat initialized with port(s): 80 (http)
2019-02-25 10:22:28.144 [main] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2019-02-25 10:22:28.146 [main] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet Engine: Apache Tomcat/8.5.23
2019-02-25 10:22:28.296 [localhost-startStop-1] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2019-02-25 10:22:28.297 [localhost-startStop-1] INFO  org.springframework.web.context.ContextLoader - Root WebApplicationContext: initialization completed in 2300 ms
2019-02-25 10:22:28.478 [localhost-startStop-1] INFO  o.s.boot.web.servlet.FilterRegistrationBean - Mapping filter: 'characterEncodingFilter' to: [/*]
2019-02-25 10:22:28.479 [localhost-startStop-1] INFO  o.s.boot.web.servlet.FilterRegistrationBean - Mapping filter: 'hiddenHttpMethodFilter' to: [/*]
2019-02-25 10:22:28.480 [localhost-startStop-1] INFO  o.s.boot.web.servlet.FilterRegistrationBean - Mapping filter: 'httpPutFormContentFilter' to: [/*]
2019-02-25 10:22:28.480 [localhost-startStop-1] INFO  o.s.boot.web.servlet.FilterRegistrationBean - Mapping filter: 'requestContextFilter' to: [/*]
2019-02-25 10:22:28.480 [localhost-startStop-1] INFO  o.s.boot.web.servlet.FilterRegistrationBean - Mapping filter: 'loginFilter' to urls: [/*]
2019-02-25 10:22:28.481 [localhost-startStop-1] INFO  o.s.boot.web.servlet.ServletRegistrationBean - Mapping servlet: 'dispatcherServlet' to [/]
2019-02-25 10:22:29.436 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerAdapter - Looking for @ControllerAdvice: org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@6a28ffa4: startup date [Mon Feb 25 10:22:25 CST 2019]; root of context hierarchy
2019-02-25 10:22:29.498 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productListForAutoComplete]}" onto public java.util.List<com.yun.product.model.Product> com.yun.product.controller.ProductController.productListForAutoComplete(java.lang.String)
2019-02-25 10:22:29.499 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productListForStock]}" onto public java.util.List<com.yun.product.model.Product> com.yun.product.controller.ProductController.productListForStock()
2019-02-25 10:22:29.500 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productListForTrade]}" onto public java.util.List<com.yun.product.model.Product> com.yun.product.controller.ProductController.productListForTrade(java.lang.String)
2019-02-25 10:22:29.500 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productList]}" onto public java.lang.String com.yun.product.controller.ProductController.productList(org.springframework.ui.Model,java.lang.String,java.lang.String,java.lang.String,java.lang.String)
2019-02-25 10:22:29.500 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productPreAdd]}" onto public java.lang.String com.yun.product.controller.ProductController.productPreAdd()
2019-02-25 10:22:29.501 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productSave]}" onto public java.lang.String com.yun.product.controller.ProductController.productSave(com.yun.product.model.Product)
2019-02-25 10:22:29.501 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productDelete]}" onto public java.lang.String com.yun.product.controller.ProductController.productDelete(int)
2019-02-25 10:22:29.501 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productPreUpdate]}" onto public java.lang.String com.yun.product.controller.ProductController.productPreUpdate(int,org.springframework.ui.Model)
2019-02-25 10:22:29.501 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productUpdate]}" onto public java.lang.String com.yun.product.controller.ProductController.productUpdate(com.yun.product.model.Product)
2019-02-25 10:22:29.502 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/prodParamDelete]}" onto public java.lang.String com.yun.product.controller.ProductParamController.prodParamDelete(int)
2019-02-25 10:22:29.503 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/prodParamPreAdd]}" onto public java.lang.String com.yun.product.controller.ProductParamController.prodParamPreAdd(int,org.springframework.ui.Model)
2019-02-25 10:22:29.503 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/prodParamSave]}" onto public java.lang.String com.yun.product.controller.ProductParamController.prodParamSave(int,java.lang.String[])
2019-02-25 10:22:29.503 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/prodParamList]}" onto public java.lang.String com.yun.product.controller.ProductParamController.prodParamList(int)
2019-02-25 10:22:29.506 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeUpdate]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeUpdate(java.lang.Integer,org.springframework.ui.Model)
2019-02-25 10:22:29.506 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeUpdateSave]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeUpdateSave(com.yun.product.model.ProductType)
2019-02-25 10:22:29.507 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeDelete]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeDelete(java.lang.Integer,javax.servlet.http.HttpServletResponse) throws java.io.IOException
2019-02-25 10:22:29.507 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeList]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeList(org.springframework.ui.Model)
2019-02-25 10:22:29.507 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeTree]}" onto public java.util.List<com.yun.product.model.ProductType> com.yun.product.controller.ProductTypeController.productTypeTree()
2019-02-25 10:22:29.507 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeEdit]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeEdit()
2019-02-25 10:22:29.508 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeSave]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeSave(com.yun.product.model.ProductType)
2019-02-25 10:22:29.508 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockReport]}" onto public java.lang.String com.yun.report.controller.ProductStockReportController.productStockReport(java.lang.String,java.lang.String,java.lang.String,org.springframework.ui.Model)
2019-02-25 10:22:29.509 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveStockChange]}" onto public java.lang.String com.yun.report.controller.ProductStockReportController.productReceiveStockChange(java.lang.String,java.lang.String,java.lang.String,java.lang.String,org.springframework.ui.Model)
2019-02-25 10:22:29.509 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productCurrentStockChange]}" onto public java.lang.String com.yun.report.controller.ProductStockReportController.productCurrentStockChange(java.lang.String,java.lang.String,java.lang.String,java.lang.String,org.springframework.ui.Model)
2019-02-25 10:22:29.509 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productSaleCalcQuery]}" onto public java.lang.String com.yun.report.controller.ProductStockReportController.productSaleCalcQuery(java.lang.String,java.lang.String,java.lang.String,java.lang.String)
2019-02-25 10:22:29.509 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productSaleTop]}" onto public java.lang.String com.yun.report.controller.ProductStockReportController.productSaleTop(java.lang.String,java.lang.String,java.lang.String,java.lang.String,org.springframework.ui.Model)
2019-02-25 10:22:29.510 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productSaleCalc]}" onto public java.lang.String com.yun.report.controller.ProductStockReportController.productSaleCalc()
2019-02-25 10:22:29.511 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveStockList]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveStockController.productReceiveStocklist(java.lang.String,java.lang.String,org.springframework.ui.Model)
2019-02-25 10:22:29.511 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveStockPreAdd]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveStockController.productReceiveStockPreAdd()
2019-02-25 10:22:29.511 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveStockSave]}" onto public void com.yun.stock.controller.ProductReceiveStockController.productReceiveStockSave(com.yun.stock.model.ProductReceiveStock,javax.servlet.http.HttpServletResponse) throws java.io.IOException
2019-02-25 10:22:29.511 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveStockDelete]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveStockController.productReceiveStockDelete(int)
2019-02-25 10:22:29.511 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveStockPreUpdate]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveStockController.productReceiveStockPreUpdate(int,org.springframework.ui.Model)
2019-02-25 10:22:29.512 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveStockUpdate]}" onto public void com.yun.stock.controller.ProductReceiveStockController.productReceiveStockUpdate(com.yun.stock.model.ProductReceiveStock,javax.servlet.http.HttpServletResponse) throws java.io.IOException
2019-02-25 10:22:29.513 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveStockToCurrentStock]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveTradeController.productReceiveStockToCurrentStock(int,org.springframework.ui.Model)
2019-02-25 10:22:29.513 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveRejectSave]}" onto public void com.yun.stock.controller.ProductReceiveTradeController.receiveRejectSave(com.yun.stock.model.ProductReceiveTrade,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse) throws java.io.IOException
2019-02-25 10:22:29.513 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveToCurrentSave]}" onto public void com.yun.stock.controller.ProductReceiveTradeController.productReceiveToCurrentSave(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse) throws java.lang.Exception
2019-02-25 10:22:29.514 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveIn]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveTradeController.receiveIn(org.springframework.ui.Model)
2019-02-25 10:22:29.514 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveInSave]}" onto public void com.yun.stock.controller.ProductReceiveTradeController.receiveInSave(com.yun.stock.model.ProductReceiveTrade,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse) throws java.io.IOException
2019-02-25 10:22:29.514 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveReject]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveTradeController.receiveReject(org.springframework.ui.Model)
2019-02-25 10:22:29.515 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockPreAdd]}" onto public java.lang.String com.yun.stock.controller.ProductStockController.productStockPreAdd()
2019-02-25 10:22:29.515 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockDelete]}" onto public java.lang.String com.yun.stock.controller.ProductStockController.productStockDelete(int)
2019-02-25 10:22:29.516 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockPreUpdate]}" onto public java.lang.String com.yun.stock.controller.ProductStockController.productStockPreUpdate(int,org.springframework.ui.Model)
2019-02-25 10:22:29.516 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockUpdate]}" onto public void com.yun.stock.controller.ProductStockController.productStockUpdate(com.yun.stock.model.ProductStock,javax.servlet.http.HttpServletResponse) throws java.io.IOException
2019-02-25 10:22:29.516 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockSave]}" onto public void com.yun.stock.controller.ProductStockController.productStockSave(com.yun.stock.model.ProductStock,javax.servlet.http.HttpServletResponse) throws java.io.IOException
2019-02-25 10:22:29.516 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockList]}" onto public java.lang.String com.yun.stock.controller.ProductStockController.productStocklist(java.lang.String,java.lang.String,org.springframework.ui.Model)
2019-02-25 10:22:29.517 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productCurrentInSave]}" onto public void com.yun.stock.controller.ProductTradeController.productCurrentInSave(com.yun.stock.model.ProductTrade,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse) throws java.io.IOException
2019-02-25 10:22:29.517 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productCurrentOutSave]}" onto public void com.yun.stock.controller.ProductTradeController.productCurrentOutSave(com.yun.stock.model.ProductTrade,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse) throws java.io.IOException
2019-02-25 10:22:29.517 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productCurrentOut]}" onto public java.lang.String com.yun.stock.controller.ProductTradeController.receiveReject(org.springframework.ui.Model)
2019-02-25 10:22:29.518 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productCurrentIn]}" onto public java.lang.String com.yun.stock.controller.ProductTradeController.productCurrentIn(org.springframework.ui.Model)
2019-02-25 10:22:29.518 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/main]}" onto public java.lang.String com.yun.user.controller.MainController.main()
2019-02-25 10:22:29.519 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/sysBak]}" onto public void com.yun.user.controller.SysBakController.sysBak(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
2019-02-25 10:22:29.519 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/deleteBakFile]}" onto public java.lang.String com.yun.user.controller.SysBakController.deleteBakFile(java.lang.String)
2019-02-25 10:22:29.519 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/sysBakList]}" onto public java.lang.String com.yun.user.controller.SysBakController.sysBakList(org.springframework.ui.Model)
2019-02-25 10:22:29.520 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/userList]}" onto public java.lang.String com.yun.user.controller.UserController.userList(org.springframework.ui.Model)
2019-02-25 10:22:29.520 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/deleteUserInfo]}" onto public java.lang.String com.yun.user.controller.UserController.userDelete(int)
2019-02-25 10:22:29.520 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/login]}" onto public void com.yun.user.controller.UserController.login(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse) throws java.io.IOException
2019-02-25 10:22:29.521 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/userEdit]}" onto public java.lang.String com.yun.user.controller.UserController.userEdit()
2019-02-25 10:22:29.521 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/userSave]}" onto public java.lang.String com.yun.user.controller.UserController.userSave(com.yun.user.model.UserInfo)
2019-02-25 10:22:29.525 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/error]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> org.springframework.boot.autoconfigure.web.BasicErrorController.error(javax.servlet.http.HttpServletRequest)
2019-02-25 10:22:29.526 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/error],produces=[text/html]}" onto public org.springframework.web.servlet.ModelAndView org.springframework.boot.autoconfigure.web.BasicErrorController.errorHtml(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
2019-02-25 10:22:29.557 [main] WARN  o.s.w.servlet.resource.ResourceHttpRequestHandler - Locations list is empty. No resources will be served unless a custom ResourceResolver is configured as an alternative to PathResourceResolver.
2019-02-25 10:22:29.567 [main] INFO  o.s.web.servlet.handler.SimpleUrlHandlerMapping - Mapped URL path [/dbbak] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-02-25 10:22:29.567 [main] INFO  o.s.web.servlet.handler.SimpleUrlHandlerMapping - Mapped URL path [/webjars/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-02-25 10:22:29.567 [main] INFO  o.s.web.servlet.handler.SimpleUrlHandlerMapping - Mapped URL path [/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-02-25 10:22:29.613 [main] INFO  o.s.web.servlet.handler.SimpleUrlHandlerMapping - Mapped URL path [/**/favicon.ico] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-02-25 10:22:29.964 [main] INFO  o.s.b.a.w.WebMvcAutoConfiguration$WelcomePageHandlerMapping - Adding welcome page: class path resource [static/index.html]
2019-02-25 10:22:30.204 [main] INFO  o.s.jmx.export.annotation.AnnotationMBeanExporter - Registering beans for JMX exposure on startup
2019-02-25 10:22:30.227 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-80"]
2019-02-25 10:22:30.238 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-80"]
2019-02-25 10:22:30.418 [main] INFO  org.apache.tomcat.util.net.NioSelectorPool - Using a shared selector for servlet write/read
2019-02-25 10:22:30.440 [main] INFO  o.s.b.c.e.tomcat.TomcatEmbeddedServletContainer - Tomcat started on port(s): 80 (http)
2019-02-25 10:22:30.445 [main] INFO  com.yun.YunEbStockApplication - Started YunEbStockApplication in 6.366 seconds (JVM running for 7.809)
2019-02-25 10:22:37.167 [http-nio-80-exec-1] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring FrameworkServlet 'dispatcherServlet'
2019-02-25 10:22:37.168 [http-nio-80-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - FrameworkServlet 'dispatcherServlet': initialization started
2019-02-25 10:22:37.189 [http-nio-80-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - FrameworkServlet 'dispatcherServlet': initialization completed in 21 ms
2019-02-25 10:22:37.200 [http-nio-80-exec-1] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/main
2019-02-25 10:22:42.549 [http-nio-80-exec-2] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/login
2019-02-25 10:22:43.058 [http-nio-80-exec-2] DEBUG c.y.user.dao.UserInfoDao.findUserInfoByNameAndPass - ==>  Preparing: select * from user_info where login_name=? and login_pass=? 
2019-02-25 10:22:43.088 [http-nio-80-exec-2] DEBUG c.y.user.dao.UserInfoDao.findUserInfoByNameAndPass - ==> Parameters: aaa(String), aaa(String)
2019-02-25 10:22:43.105 [http-nio-80-exec-2] DEBUG c.y.user.dao.UserInfoDao.findUserInfoByNameAndPass - <==      Total: 1
2019-02-25 10:22:43.116 [http-nio-80-exec-3] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/main
2019-02-25 10:22:46.097 [http-nio-80-exec-4] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productList
2019-02-25 10:22:46.142 [http-nio-80-exec-4] DEBUG c.yun.product.dao.ProductDao.findProductRowByParam - ==>  Preparing: select count(*) from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 
2019-02-25 10:22:46.143 [http-nio-80-exec-4] DEBUG c.yun.product.dao.ProductDao.findProductRowByParam - ==> Parameters: 
2019-02-25 10:22:46.147 [http-nio-80-exec-4] DEBUG c.yun.product.dao.ProductDao.findProductRowByParam - <==      Total: 1
2019-02-25 10:22:46.157 [http-nio-80-exec-4] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 order by prod_id limit ?,? 
2019-02-25 10:22:46.158 [http-nio-80-exec-4] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==> Parameters: 0(Integer), 5(Integer)
2019-02-25 10:22:46.163 [http-nio-80-exec-4] DEBUG com.yun.product.dao.ProductDao.findProductByParam - <==      Total: 5
2019-02-25 10:22:46.165 [http-nio-80-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-02-25 10:22:46.166 [http-nio-80-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 2(Integer)
2019-02-25 10:22:46.170 [http-nio-80-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 2
2019-02-25 10:22:46.171 [http-nio-80-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-02-25 10:22:46.171 [http-nio-80-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 3(Integer)
2019-02-25 10:22:46.173 [http-nio-80-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-02-25 10:22:46.174 [http-nio-80-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-02-25 10:22:46.174 [http-nio-80-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 4(Integer)
2019-02-25 10:22:46.177 [http-nio-80-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 2
2019-02-25 10:22:46.179 [http-nio-80-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-02-25 10:22:46.179 [http-nio-80-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 5(Integer)
2019-02-25 10:22:46.181 [http-nio-80-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 2
2019-02-25 10:22:46.182 [http-nio-80-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-02-25 10:22:46.183 [http-nio-80-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 6(Integer)
2019-02-25 10:22:46.185 [http-nio-80-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-02-25 10:22:48.117 [http-nio-80-exec-8] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/prodParamList
2019-02-25 10:22:48.122 [http-nio-80-exec-8] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-02-25 10:22:48.123 [http-nio-80-exec-8] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 2(Integer)
2019-02-25 10:22:48.125 [http-nio-80-exec-8] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 2
2019-02-25 10:22:49.307 [http-nio-80-exec-9] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/prodParamPreAdd
2019-02-25 10:22:57.319 [http-nio-80-exec-2] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/prodParamSave
2019-02-25 10:22:57.325 [http-nio-80-exec-2] DEBUG c.y.p.d.ProductParameterDao.insertProductParameter - ==>  Preparing: insert into product_parameter(prod_param_name,prod_id) values(?,?) 
2019-02-25 10:22:57.325 [http-nio-80-exec-2] DEBUG c.y.p.d.ProductParameterDao.insertProductParameter - ==> Parameters: 2(String), 2(Integer)
2019-02-25 10:22:57.358 [http-nio-80-exec-2] DEBUG c.y.p.d.ProductParameterDao.insertProductParameter - <==    Updates: 1
2019-02-25 10:22:57.359 [http-nio-80-exec-2] DEBUG c.y.p.d.ProductParameterDao.insertProductParameter - ==>  Preparing: insert into product_parameter(prod_param_name,prod_id) values(?,?) 
2019-02-25 10:22:57.359 [http-nio-80-exec-2] DEBUG c.y.p.d.ProductParameterDao.insertProductParameter - ==> Parameters: 3(String), 2(Integer)
2019-02-25 10:22:57.361 [http-nio-80-exec-2] DEBUG c.y.p.d.ProductParameterDao.insertProductParameter - <==    Updates: 1
2019-02-25 10:22:57.361 [http-nio-80-exec-2] DEBUG c.y.p.d.ProductParameterDao.insertProductParameter - ==>  Preparing: insert into product_parameter(prod_param_name,prod_id) values(?,?) 
2019-02-25 10:22:57.362 [http-nio-80-exec-2] DEBUG c.y.p.d.ProductParameterDao.insertProductParameter - ==> Parameters: (String), 2(Integer)
2019-02-25 10:22:57.363 [http-nio-80-exec-2] DEBUG c.y.p.d.ProductParameterDao.insertProductParameter - <==    Updates: 1
2019-02-25 10:22:57.461 [http-nio-80-exec-3] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productList
2019-02-25 10:22:57.464 [http-nio-80-exec-3] DEBUG c.yun.product.dao.ProductDao.findProductRowByParam - ==>  Preparing: select count(*) from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 
2019-02-25 10:22:57.464 [http-nio-80-exec-3] DEBUG c.yun.product.dao.ProductDao.findProductRowByParam - ==> Parameters: 
2019-02-25 10:22:57.490 [http-nio-80-exec-3] DEBUG c.yun.product.dao.ProductDao.findProductRowByParam - <==      Total: 1
2019-02-25 10:22:57.492 [http-nio-80-exec-3] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 order by prod_id limit ?,? 
2019-02-25 10:22:57.493 [http-nio-80-exec-3] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==> Parameters: 0(Integer), 5(Integer)
2019-02-25 10:22:57.496 [http-nio-80-exec-3] DEBUG com.yun.product.dao.ProductDao.findProductByParam - <==      Total: 5
2019-02-25 10:22:57.496 [http-nio-80-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-02-25 10:22:57.496 [http-nio-80-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 2(Integer)
2019-02-25 10:22:57.498 [http-nio-80-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 5
2019-02-25 10:22:57.499 [http-nio-80-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-02-25 10:22:57.500 [http-nio-80-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 3(Integer)
2019-02-25 10:22:57.509 [http-nio-80-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-02-25 10:22:57.510 [http-nio-80-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-02-25 10:22:57.510 [http-nio-80-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 4(Integer)
2019-02-25 10:22:57.512 [http-nio-80-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 2
2019-02-25 10:22:57.513 [http-nio-80-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-02-25 10:22:57.513 [http-nio-80-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 5(Integer)
2019-02-25 10:22:57.514 [http-nio-80-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 2
2019-02-25 10:22:57.515 [http-nio-80-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-02-25 10:22:57.515 [http-nio-80-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 6(Integer)
2019-02-25 10:22:57.518 [http-nio-80-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-02-25 10:22:59.027 [http-nio-80-exec-4] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/prodParamList
2019-02-25 10:22:59.030 [http-nio-80-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-02-25 10:22:59.031 [http-nio-80-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 2(Integer)
2019-02-25 10:22:59.033 [http-nio-80-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 5
2019-02-25 10:23:00.839 [http-nio-80-exec-5] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/prodParamDelete
2019-02-25 10:23:00.843 [http-nio-80-exec-5] DEBUG c.y.p.d.ProductParameterDao.deleteProductParameter - ==>  Preparing: delete from product_parameter where prod_param_id=? 
2019-02-25 10:23:00.843 [http-nio-80-exec-5] DEBUG c.y.p.d.ProductParameterDao.deleteProductParameter - ==> Parameters: 15(Integer)
2019-02-25 10:23:00.874 [http-nio-80-exec-5] DEBUG c.y.p.d.ProductParameterDao.deleteProductParameter - <==    Updates: 1
2019-02-25 10:23:00.965 [http-nio-80-exec-6] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productList
2019-02-25 10:23:00.967 [http-nio-80-exec-6] DEBUG c.yun.product.dao.ProductDao.findProductRowByParam - ==>  Preparing: select count(*) from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 
2019-02-25 10:23:00.967 [http-nio-80-exec-6] DEBUG c.yun.product.dao.ProductDao.findProductRowByParam - ==> Parameters: 
2019-02-25 10:23:00.968 [http-nio-80-exec-6] DEBUG c.yun.product.dao.ProductDao.findProductRowByParam - <==      Total: 1
2019-02-25 10:23:00.972 [http-nio-80-exec-6] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 order by prod_id limit ?,? 
2019-02-25 10:23:00.972 [http-nio-80-exec-6] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==> Parameters: 0(Integer), 5(Integer)
2019-02-25 10:23:00.974 [http-nio-80-exec-6] DEBUG com.yun.product.dao.ProductDao.findProductByParam - <==      Total: 5
2019-02-25 10:23:00.975 [http-nio-80-exec-6] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-02-25 10:23:00.975 [http-nio-80-exec-6] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 2(Integer)
2019-02-25 10:23:00.976 [http-nio-80-exec-6] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 4
2019-02-25 10:23:00.977 [http-nio-80-exec-6] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-02-25 10:23:00.977 [http-nio-80-exec-6] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 3(Integer)
2019-02-25 10:23:00.978 [http-nio-80-exec-6] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-02-25 10:23:00.979 [http-nio-80-exec-6] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-02-25 10:23:00.979 [http-nio-80-exec-6] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 4(Integer)
2019-02-25 10:23:00.980 [http-nio-80-exec-6] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 2
2019-02-25 10:23:00.980 [http-nio-80-exec-6] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-02-25 10:23:00.981 [http-nio-80-exec-6] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 5(Integer)
2019-02-25 10:23:00.982 [http-nio-80-exec-6] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 2
2019-02-25 10:23:00.982 [http-nio-80-exec-6] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-02-25 10:23:00.982 [http-nio-80-exec-6] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 6(Integer)
2019-02-25 10:23:00.984 [http-nio-80-exec-6] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-02-25 10:23:04.474 [http-nio-80-exec-7] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/prodParamList
2019-02-25 10:23:04.477 [http-nio-80-exec-7] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-02-25 10:23:04.478 [http-nio-80-exec-7] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 2(Integer)
2019-02-25 10:23:04.479 [http-nio-80-exec-7] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 4
2019-02-25 10:31:21.528 [http-nio-80-exec-9] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/login
2019-02-25 10:31:21.532 [http-nio-80-exec-9] DEBUG c.y.user.dao.UserInfoDao.findUserInfoByNameAndPass - ==>  Preparing: select * from user_info where login_name=? and login_pass=? 
2019-02-25 10:31:21.535 [http-nio-80-exec-9] DEBUG c.y.user.dao.UserInfoDao.findUserInfoByNameAndPass - ==> Parameters: aaa(String), aaa(String)
2019-02-25 10:31:21.536 [http-nio-80-exec-9] DEBUG c.y.user.dao.UserInfoDao.findUserInfoByNameAndPass - <==      Total: 1
2019-02-25 10:31:21.547 [http-nio-80-exec-10] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/main
2019-02-25 10:31:23.324 [http-nio-80-exec-1] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productTypeList
2019-02-25 10:31:23.327 [http-nio-80-exec-1] INFO  com.yun.product.controller.ProductTypeController - 跳转到stock/productTypeList.html页面
2019-02-25 10:31:23.400 [http-nio-80-exec-2] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productTypeTree
2019-02-25 10:31:23.402 [http-nio-80-exec-2] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - ==>  Preparing: select p1.prod_type_id,p1.prod_type_name,p1.parent_id,p2.prod_type_id parent_type_id,p2.prod_type_name parent_type_name from product_type p1 LEFT JOIN product_type p2 on p1.parent_id=p2.prod_type_id where p1.parent_id=? 
2019-02-25 10:31:23.403 [http-nio-80-exec-2] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - ==> Parameters: 0(Integer)
2019-02-25 10:31:23.410 [http-nio-80-exec-2] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - ====>  Preparing: select p1.prod_type_id,p1.prod_type_name,p1.parent_id,p2.prod_type_id parent_type_id,p2.prod_type_name parent_type_name from product_type p1 LEFT JOIN product_type p2 on p1.parent_id=p2.prod_type_id where p1.parent_id=? 
2019-02-25 10:31:23.410 [http-nio-80-exec-2] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - ====> Parameters: 29(Integer)
2019-02-25 10:31:23.412 [http-nio-80-exec-2] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - ======>  Preparing: select p1.prod_type_id,p1.prod_type_name,p1.parent_id,p2.prod_type_id parent_type_id,p2.prod_type_name parent_type_name from product_type p1 LEFT JOIN product_type p2 on p1.parent_id=p2.prod_type_id where p1.parent_id=? 
2019-02-25 10:31:23.413 [http-nio-80-exec-2] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - ======> Parameters: 30(Integer)
2019-02-25 10:31:23.416 [http-nio-80-exec-2] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - <======      Total: 0
2019-02-25 10:31:23.417 [http-nio-80-exec-2] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - <====      Total: 1
2019-02-25 10:31:23.418 [http-nio-80-exec-2] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - ====>  Preparing: select p1.prod_type_id,p1.prod_type_name,p1.parent_id,p2.prod_type_id parent_type_id,p2.prod_type_name parent_type_name from product_type p1 LEFT JOIN product_type p2 on p1.parent_id=p2.prod_type_id where p1.parent_id=? 
2019-02-25 10:31:23.418 [http-nio-80-exec-2] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - ====> Parameters: 39(Integer)
2019-02-25 10:31:23.420 [http-nio-80-exec-2] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - ======>  Preparing: select p1.prod_type_id,p1.prod_type_name,p1.parent_id,p2.prod_type_id parent_type_id,p2.prod_type_name parent_type_name from product_type p1 LEFT JOIN product_type p2 on p1.parent_id=p2.prod_type_id where p1.parent_id=? 
2019-02-25 10:31:23.421 [http-nio-80-exec-2] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - ======> Parameters: 41(Integer)
2019-02-25 10:31:23.423 [http-nio-80-exec-2] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - <======      Total: 0
2019-02-25 10:31:23.423 [http-nio-80-exec-2] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - <====      Total: 1
2019-02-25 10:31:23.423 [http-nio-80-exec-2] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - <==      Total: 2
2019-02-25 10:31:25.522 [http-nio-80-exec-3] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productList
2019-02-25 10:31:25.525 [http-nio-80-exec-3] DEBUG c.yun.product.dao.ProductDao.findProductRowByParam - ==>  Preparing: select count(*) from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 
2019-02-25 10:31:25.526 [http-nio-80-exec-3] DEBUG c.yun.product.dao.ProductDao.findProductRowByParam - ==> Parameters: 
2019-02-25 10:31:25.527 [http-nio-80-exec-3] DEBUG c.yun.product.dao.ProductDao.findProductRowByParam - <==      Total: 1
2019-02-25 10:31:25.530 [http-nio-80-exec-3] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 order by prod_id limit ?,? 
2019-02-25 10:31:25.530 [http-nio-80-exec-3] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==> Parameters: 0(Integer), 5(Integer)
2019-02-25 10:31:25.534 [http-nio-80-exec-3] DEBUG com.yun.product.dao.ProductDao.findProductByParam - <==      Total: 5
2019-02-25 10:31:25.534 [http-nio-80-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-02-25 10:31:25.534 [http-nio-80-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 2(Integer)
2019-02-25 10:31:25.536 [http-nio-80-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 4
2019-02-25 10:31:25.536 [http-nio-80-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-02-25 10:31:25.536 [http-nio-80-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 3(Integer)
2019-02-25 10:31:25.538 [http-nio-80-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-02-25 10:31:25.538 [http-nio-80-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-02-25 10:31:25.538 [http-nio-80-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 4(Integer)
2019-02-25 10:31:25.540 [http-nio-80-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 2
2019-02-25 10:31:25.540 [http-nio-80-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-02-25 10:31:25.540 [http-nio-80-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 5(Integer)
2019-02-25 10:31:25.542 [http-nio-80-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 2
2019-02-25 10:31:25.542 [http-nio-80-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-02-25 10:31:25.542 [http-nio-80-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 6(Integer)
2019-02-25 10:31:25.543 [http-nio-80-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-02-25 10:31:26.816 [http-nio-80-exec-4] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/prodParamList
2019-02-25 10:31:26.821 [http-nio-80-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-02-25 10:31:26.821 [http-nio-80-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 2(Integer)
2019-02-25 10:31:26.835 [http-nio-80-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 4
2019-02-25 10:31:27.955 [http-nio-80-exec-8] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/prodParamPreAdd
2019-02-25 10:31:40.528 [http-nio-80-exec-10] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/prodParamSave
2019-02-25 10:31:40.531 [http-nio-80-exec-10] DEBUG c.y.p.d.ProductParameterDao.insertProductParameter - ==>  Preparing: insert into product_parameter(prod_param_name,prod_id) values(?,?) 
2019-02-25 10:31:40.532 [http-nio-80-exec-10] DEBUG c.y.p.d.ProductParameterDao.insertProductParameter - ==> Parameters: asda(String), 2(Integer)
2019-02-25 10:31:40.566 [http-nio-80-exec-10] DEBUG c.y.p.d.ProductParameterDao.insertProductParameter - <==    Updates: 1
2019-02-25 10:31:40.566 [http-nio-80-exec-10] DEBUG c.y.p.d.ProductParameterDao.insertProductParameter - ==>  Preparing: insert into product_parameter(prod_param_name,prod_id) values(?,?) 
2019-02-25 10:31:40.566 [http-nio-80-exec-10] DEBUG c.y.p.d.ProductParameterDao.insertProductParameter - ==> Parameters: asdasd(String), 2(Integer)
2019-02-25 10:31:40.567 [http-nio-80-exec-10] DEBUG c.y.p.d.ProductParameterDao.insertProductParameter - <==    Updates: 1
2019-02-25 10:31:40.568 [http-nio-80-exec-10] DEBUG c.y.p.d.ProductParameterDao.insertProductParameter - ==>  Preparing: insert into product_parameter(prod_param_name,prod_id) values(?,?) 
2019-02-25 10:31:40.568 [http-nio-80-exec-10] DEBUG c.y.p.d.ProductParameterDao.insertProductParameter - ==> Parameters: asdads(String), 2(Integer)
2019-02-25 10:31:40.569 [http-nio-80-exec-10] DEBUG c.y.p.d.ProductParameterDao.insertProductParameter - <==    Updates: 1
2019-02-25 10:31:40.621 [http-nio-80-exec-1] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productList
2019-02-25 10:31:40.623 [http-nio-80-exec-1] DEBUG c.yun.product.dao.ProductDao.findProductRowByParam - ==>  Preparing: select count(*) from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 
2019-02-25 10:31:40.623 [http-nio-80-exec-1] DEBUG c.yun.product.dao.ProductDao.findProductRowByParam - ==> Parameters: 
2019-02-25 10:31:40.625 [http-nio-80-exec-1] DEBUG c.yun.product.dao.ProductDao.findProductRowByParam - <==      Total: 1
2019-02-25 10:31:40.628 [http-nio-80-exec-1] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 order by prod_id limit ?,? 
2019-02-25 10:31:40.628 [http-nio-80-exec-1] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==> Parameters: 0(Integer), 5(Integer)
2019-02-25 10:31:40.630 [http-nio-80-exec-1] DEBUG com.yun.product.dao.ProductDao.findProductByParam - <==      Total: 5
2019-02-25 10:31:40.630 [http-nio-80-exec-1] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-02-25 10:31:40.630 [http-nio-80-exec-1] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 2(Integer)
2019-02-25 10:31:40.631 [http-nio-80-exec-1] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 7
2019-02-25 10:31:40.632 [http-nio-80-exec-1] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-02-25 10:31:40.632 [http-nio-80-exec-1] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 3(Integer)
2019-02-25 10:31:40.633 [http-nio-80-exec-1] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-02-25 10:31:40.633 [http-nio-80-exec-1] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-02-25 10:31:40.633 [http-nio-80-exec-1] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 4(Integer)
2019-02-25 10:31:40.634 [http-nio-80-exec-1] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 2
2019-02-25 10:31:40.634 [http-nio-80-exec-1] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-02-25 10:31:40.634 [http-nio-80-exec-1] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 5(Integer)
2019-02-25 10:31:40.635 [http-nio-80-exec-1] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 2
2019-02-25 10:31:40.635 [http-nio-80-exec-1] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-02-25 10:31:40.635 [http-nio-80-exec-1] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 6(Integer)
2019-02-25 10:31:40.636 [http-nio-80-exec-1] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-02-25 10:32:28.460 [http-nio-80-exec-2] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/main
2019-02-25 10:32:28.500 [http-nio-80-exec-5] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/js/jquery.min.js
2019-02-25 10:32:28.500 [http-nio-80-exec-3] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/css/bootstrap.min.css
2019-02-25 10:32:28.500 [http-nio-80-exec-6] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/js/bootstrap.min.js
2019-02-25 10:32:28.506 [http-nio-80-exec-4] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/css/site.css
2019-02-25 10:32:28.550 [http-nio-80-exec-7] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/default.html
2019-02-25 10:32:28.577 [http-nio-80-exec-8] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/favicon.ico
2019-02-25 10:32:30.197 [http-nio-80-exec-9] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productList
2019-02-25 10:32:30.205 [http-nio-80-exec-9] DEBUG c.yun.product.dao.ProductDao.findProductRowByParam - ==>  Preparing: select count(*) from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 
2019-02-25 10:32:30.205 [http-nio-80-exec-9] DEBUG c.yun.product.dao.ProductDao.findProductRowByParam - ==> Parameters: 
2019-02-25 10:32:30.207 [http-nio-80-exec-9] DEBUG c.yun.product.dao.ProductDao.findProductRowByParam - <==      Total: 1
2019-02-25 10:32:30.212 [http-nio-80-exec-9] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 order by prod_id limit ?,? 
2019-02-25 10:32:30.212 [http-nio-80-exec-9] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==> Parameters: 0(Integer), 5(Integer)
2019-02-25 10:32:30.221 [http-nio-80-exec-9] DEBUG com.yun.product.dao.ProductDao.findProductByParam - <==      Total: 5
2019-02-25 10:32:30.222 [http-nio-80-exec-9] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-02-25 10:32:30.224 [http-nio-80-exec-9] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 2(Integer)
2019-02-25 10:32:30.226 [http-nio-80-exec-9] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 7
2019-02-25 10:32:30.226 [http-nio-80-exec-9] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-02-25 10:32:30.227 [http-nio-80-exec-9] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 3(Integer)
2019-02-25 10:32:30.229 [http-nio-80-exec-9] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-02-25 10:32:30.229 [http-nio-80-exec-9] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-02-25 10:32:30.229 [http-nio-80-exec-9] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 4(Integer)
2019-02-25 10:32:30.232 [http-nio-80-exec-9] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 2
2019-02-25 10:32:30.232 [http-nio-80-exec-9] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-02-25 10:32:30.233 [http-nio-80-exec-9] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 5(Integer)
2019-02-25 10:32:30.236 [http-nio-80-exec-9] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 2
2019-02-25 10:32:30.236 [http-nio-80-exec-9] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-02-25 10:32:30.236 [http-nio-80-exec-9] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 6(Integer)
2019-02-25 10:32:30.237 [http-nio-80-exec-9] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-02-25 10:32:31.564 [http-nio-80-exec-10] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/prodParamList
2019-02-25 10:32:31.566 [http-nio-80-exec-10] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-02-25 10:32:31.567 [http-nio-80-exec-10] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 2(Integer)
2019-02-25 10:32:31.569 [http-nio-80-exec-10] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 7
2019-02-25 10:32:34.493 [http-nio-80-exec-1] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/prodParamDelete
2019-02-25 10:32:34.497 [http-nio-80-exec-1] DEBUG c.y.p.d.ProductParameterDao.deleteProductParameter - ==>  Preparing: delete from product_parameter where prod_param_id=? 
2019-02-25 10:32:34.497 [http-nio-80-exec-1] DEBUG c.y.p.d.ProductParameterDao.deleteProductParameter - ==> Parameters: 18(Integer)
2019-02-25 10:32:34.528 [http-nio-80-exec-1] DEBUG c.y.p.d.ProductParameterDao.deleteProductParameter - <==    Updates: 1
2019-02-25 10:32:34.579 [http-nio-80-exec-2] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productList
2019-02-25 10:32:34.581 [http-nio-80-exec-2] DEBUG c.yun.product.dao.ProductDao.findProductRowByParam - ==>  Preparing: select count(*) from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 
2019-02-25 10:32:34.581 [http-nio-80-exec-2] DEBUG c.yun.product.dao.ProductDao.findProductRowByParam - ==> Parameters: 
2019-02-25 10:32:34.583 [http-nio-80-exec-2] DEBUG c.yun.product.dao.ProductDao.findProductRowByParam - <==      Total: 1
2019-02-25 10:32:34.585 [http-nio-80-exec-2] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 order by prod_id limit ?,? 
2019-02-25 10:32:34.586 [http-nio-80-exec-2] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==> Parameters: 0(Integer), 5(Integer)
2019-02-25 10:32:34.588 [http-nio-80-exec-2] DEBUG com.yun.product.dao.ProductDao.findProductByParam - <==      Total: 5
2019-02-25 10:32:34.588 [http-nio-80-exec-2] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-02-25 10:32:34.588 [http-nio-80-exec-2] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 2(Integer)
2019-02-25 10:32:34.590 [http-nio-80-exec-2] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 6
2019-02-25 10:32:34.590 [http-nio-80-exec-2] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-02-25 10:32:34.591 [http-nio-80-exec-2] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 3(Integer)
2019-02-25 10:32:34.592 [http-nio-80-exec-2] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-02-25 10:32:34.592 [http-nio-80-exec-2] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-02-25 10:32:34.592 [http-nio-80-exec-2] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 4(Integer)
2019-02-25 10:32:34.595 [http-nio-80-exec-2] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 2
2019-02-25 10:32:34.595 [http-nio-80-exec-2] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-02-25 10:32:34.595 [http-nio-80-exec-2] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 5(Integer)
2019-02-25 10:32:34.598 [http-nio-80-exec-2] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 2
2019-02-25 10:32:34.598 [http-nio-80-exec-2] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-02-25 10:32:34.598 [http-nio-80-exec-2] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 6(Integer)
2019-02-25 10:32:34.600 [http-nio-80-exec-2] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-02-25 10:32:36.088 [http-nio-80-exec-5] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/prodParamList
2019-02-25 10:32:36.091 [http-nio-80-exec-5] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-02-25 10:32:36.091 [http-nio-80-exec-5] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 2(Integer)
2019-02-25 10:32:36.093 [http-nio-80-exec-5] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 6
2019-02-25 10:32:37.491 [http-nio-80-exec-6] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/prodParamDelete
2019-02-25 10:32:37.493 [http-nio-80-exec-6] DEBUG c.y.p.d.ProductParameterDao.deleteProductParameter - ==>  Preparing: delete from product_parameter where prod_param_id=? 
2019-02-25 10:32:37.493 [http-nio-80-exec-6] DEBUG c.y.p.d.ProductParameterDao.deleteProductParameter - ==> Parameters: 17(Integer)
2019-02-25 10:32:37.529 [http-nio-80-exec-6] DEBUG c.y.p.d.ProductParameterDao.deleteProductParameter - <==    Updates: 1
2019-02-25 10:32:37.594 [http-nio-80-exec-3] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productList
2019-02-25 10:32:37.599 [http-nio-80-exec-3] DEBUG c.yun.product.dao.ProductDao.findProductRowByParam - ==>  Preparing: select count(*) from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 
2019-02-25 10:32:37.600 [http-nio-80-exec-3] DEBUG c.yun.product.dao.ProductDao.findProductRowByParam - ==> Parameters: 
2019-02-25 10:32:37.601 [http-nio-80-exec-3] DEBUG c.yun.product.dao.ProductDao.findProductRowByParam - <==      Total: 1
2019-02-25 10:32:37.606 [http-nio-80-exec-3] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 order by prod_id limit ?,? 
2019-02-25 10:32:37.608 [http-nio-80-exec-3] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==> Parameters: 0(Integer), 5(Integer)
2019-02-25 10:32:37.611 [http-nio-80-exec-3] DEBUG com.yun.product.dao.ProductDao.findProductByParam - <==      Total: 5
2019-02-25 10:32:37.611 [http-nio-80-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-02-25 10:32:37.611 [http-nio-80-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 2(Integer)
2019-02-25 10:32:37.613 [http-nio-80-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 5
2019-02-25 10:32:37.613 [http-nio-80-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-02-25 10:32:37.613 [http-nio-80-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 3(Integer)
2019-02-25 10:32:37.614 [http-nio-80-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-02-25 10:32:37.615 [http-nio-80-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-02-25 10:32:37.615 [http-nio-80-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 4(Integer)
2019-02-25 10:32:37.617 [http-nio-80-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 2
2019-02-25 10:32:37.617 [http-nio-80-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-02-25 10:32:37.617 [http-nio-80-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 5(Integer)
2019-02-25 10:32:37.619 [http-nio-80-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 2
2019-02-25 10:32:37.619 [http-nio-80-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-02-25 10:32:37.619 [http-nio-80-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 6(Integer)
2019-02-25 10:32:37.620 [http-nio-80-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-02-25 10:33:21.006 [http-nio-80-exec-8] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/prodParamList
2019-02-25 10:33:21.010 [http-nio-80-exec-8] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-02-25 10:33:21.010 [http-nio-80-exec-8] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 2(Integer)
2019-02-25 10:33:21.012 [http-nio-80-exec-8] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 5
2019-02-25 10:37:36.750 [http-nio-80-exec-5] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/prodParamList
2019-02-25 10:37:36.753 [http-nio-80-exec-5] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-02-25 10:37:36.753 [http-nio-80-exec-5] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 2(Integer)
2019-02-25 10:37:36.755 [http-nio-80-exec-5] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 5
2019-02-25 10:37:40.195 [http-nio-80-exec-6] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productList
2019-02-25 10:37:40.197 [http-nio-80-exec-6] DEBUG c.yun.product.dao.ProductDao.findProductRowByParam - ==>  Preparing: select count(*) from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 
2019-02-25 10:37:40.197 [http-nio-80-exec-6] DEBUG c.yun.product.dao.ProductDao.findProductRowByParam - ==> Parameters: 
2019-02-25 10:37:40.199 [http-nio-80-exec-6] DEBUG c.yun.product.dao.ProductDao.findProductRowByParam - <==      Total: 1
2019-02-25 10:37:40.202 [http-nio-80-exec-6] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 order by prod_id limit ?,? 
2019-02-25 10:37:40.202 [http-nio-80-exec-6] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==> Parameters: 0(Integer), 5(Integer)
2019-02-25 10:37:40.204 [http-nio-80-exec-6] DEBUG com.yun.product.dao.ProductDao.findProductByParam - <==      Total: 5
2019-02-25 10:37:40.204 [http-nio-80-exec-6] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-02-25 10:37:40.204 [http-nio-80-exec-6] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 2(Integer)
2019-02-25 10:37:40.205 [http-nio-80-exec-6] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 5
2019-02-25 10:37:40.206 [http-nio-80-exec-6] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-02-25 10:37:40.206 [http-nio-80-exec-6] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 3(Integer)
2019-02-25 10:37:40.207 [http-nio-80-exec-6] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-02-25 10:37:40.207 [http-nio-80-exec-6] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-02-25 10:37:40.207 [http-nio-80-exec-6] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 4(Integer)
2019-02-25 10:37:40.209 [http-nio-80-exec-6] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 2
2019-02-25 10:37:40.209 [http-nio-80-exec-6] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-02-25 10:37:40.209 [http-nio-80-exec-6] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 5(Integer)
2019-02-25 10:37:40.210 [http-nio-80-exec-6] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 2
2019-02-25 10:37:40.211 [http-nio-80-exec-6] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-02-25 10:37:40.211 [http-nio-80-exec-6] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 6(Integer)
2019-02-25 10:37:40.212 [http-nio-80-exec-6] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-02-25 10:37:41.837 [http-nio-80-exec-3] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/prodParamList
2019-02-25 10:37:41.839 [http-nio-80-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-02-25 10:37:41.839 [http-nio-80-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 2(Integer)
2019-02-25 10:37:41.841 [http-nio-80-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 5
2019-02-25 10:38:36.109 [http-nio-80-exec-4] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productList
2019-02-25 10:38:36.111 [http-nio-80-exec-4] DEBUG c.yun.product.dao.ProductDao.findProductRowByParam - ==>  Preparing: select count(*) from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 
2019-02-25 10:38:36.111 [http-nio-80-exec-4] DEBUG c.yun.product.dao.ProductDao.findProductRowByParam - ==> Parameters: 
2019-02-25 10:38:36.112 [http-nio-80-exec-4] DEBUG c.yun.product.dao.ProductDao.findProductRowByParam - <==      Total: 1
2019-02-25 10:38:36.114 [http-nio-80-exec-4] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 order by prod_id limit ?,? 
2019-02-25 10:38:36.115 [http-nio-80-exec-4] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==> Parameters: 0(Integer), 5(Integer)
2019-02-25 10:38:36.117 [http-nio-80-exec-4] DEBUG com.yun.product.dao.ProductDao.findProductByParam - <==      Total: 5
2019-02-25 10:38:36.117 [http-nio-80-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-02-25 10:38:36.118 [http-nio-80-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 2(Integer)
2019-02-25 10:38:36.120 [http-nio-80-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 5
2019-02-25 10:38:36.120 [http-nio-80-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-02-25 10:38:36.120 [http-nio-80-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 3(Integer)
2019-02-25 10:38:36.121 [http-nio-80-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-02-25 10:38:36.122 [http-nio-80-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-02-25 10:38:36.122 [http-nio-80-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 4(Integer)
2019-02-25 10:38:36.124 [http-nio-80-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 2
2019-02-25 10:38:36.124 [http-nio-80-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-02-25 10:38:36.124 [http-nio-80-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 5(Integer)
2019-02-25 10:38:36.125 [http-nio-80-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 2
2019-02-25 10:38:36.125 [http-nio-80-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-02-25 10:38:36.125 [http-nio-80-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 6(Integer)
2019-02-25 10:38:36.126 [http-nio-80-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-02-25 10:38:37.755 [http-nio-80-exec-7] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/prodParamList
2019-02-25 10:38:37.764 [http-nio-80-exec-7] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-02-25 10:38:37.764 [http-nio-80-exec-7] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 2(Integer)
2019-02-25 10:38:37.766 [http-nio-80-exec-7] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 5
2019-02-25 10:38:42.776 [http-nio-80-exec-8] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/main
2019-02-25 10:38:42.820 [http-nio-80-exec-1] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/js/bootstrap.min.js
2019-02-25 10:38:42.823 [http-nio-80-exec-9] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/css/site.css
2019-02-25 10:38:42.830 [http-nio-80-exec-9] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/js/jquery.min.js
2019-02-25 10:38:42.833 [http-nio-80-exec-10] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/css/bootstrap.min.css
2019-02-25 10:38:42.868 [http-nio-80-exec-5] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/default.html
2019-02-25 10:38:42.889 [http-nio-80-exec-6] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/favicon.ico
2019-02-25 10:38:43.989 [http-nio-80-exec-3] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productList
2019-02-25 10:38:43.995 [http-nio-80-exec-3] DEBUG c.yun.product.dao.ProductDao.findProductRowByParam - ==>  Preparing: select count(*) from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 
2019-02-25 10:38:43.996 [http-nio-80-exec-3] DEBUG c.yun.product.dao.ProductDao.findProductRowByParam - ==> Parameters: 
2019-02-25 10:38:43.998 [http-nio-80-exec-3] DEBUG c.yun.product.dao.ProductDao.findProductRowByParam - <==      Total: 1
2019-02-25 10:38:44.003 [http-nio-80-exec-3] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 order by prod_id limit ?,? 
2019-02-25 10:38:44.003 [http-nio-80-exec-3] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==> Parameters: 0(Integer), 5(Integer)
2019-02-25 10:38:44.004 [http-nio-80-exec-3] DEBUG com.yun.product.dao.ProductDao.findProductByParam - <==      Total: 5
2019-02-25 10:38:44.004 [http-nio-80-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-02-25 10:38:44.004 [http-nio-80-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 2(Integer)
2019-02-25 10:38:44.005 [http-nio-80-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 5
2019-02-25 10:38:44.006 [http-nio-80-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-02-25 10:38:44.006 [http-nio-80-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 3(Integer)
2019-02-25 10:38:44.007 [http-nio-80-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-02-25 10:38:44.007 [http-nio-80-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-02-25 10:38:44.008 [http-nio-80-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 4(Integer)
2019-02-25 10:38:44.009 [http-nio-80-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 2
2019-02-25 10:38:44.009 [http-nio-80-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-02-25 10:38:44.009 [http-nio-80-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 5(Integer)
2019-02-25 10:38:44.010 [http-nio-80-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 2
2019-02-25 10:38:44.011 [http-nio-80-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-02-25 10:38:44.011 [http-nio-80-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 6(Integer)
2019-02-25 10:38:44.012 [http-nio-80-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-02-25 10:38:45.351 [http-nio-80-exec-4] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/prodParamList
2019-02-25 10:38:45.354 [http-nio-80-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-02-25 10:38:45.355 [http-nio-80-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 2(Integer)
2019-02-25 10:38:45.361 [http-nio-80-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 5
2019-02-25 10:41:58.761 [http-nio-80-exec-5] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/prodParamList
2019-02-25 10:41:58.764 [http-nio-80-exec-5] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-02-25 10:41:58.764 [http-nio-80-exec-5] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 2(Integer)
2019-02-25 10:41:58.765 [http-nio-80-exec-5] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 5
2019-02-25 10:42:03.739 [http-nio-80-exec-6] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/prodParamPreAdd
2019-02-25 10:42:07.994 [http-nio-80-exec-3] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productList
2019-02-25 10:42:07.996 [http-nio-80-exec-3] DEBUG c.yun.product.dao.ProductDao.findProductRowByParam - ==>  Preparing: select count(*) from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 
2019-02-25 10:42:07.997 [http-nio-80-exec-3] DEBUG c.yun.product.dao.ProductDao.findProductRowByParam - ==> Parameters: 
2019-02-25 10:42:07.997 [http-nio-80-exec-3] DEBUG c.yun.product.dao.ProductDao.findProductRowByParam - <==      Total: 1
2019-02-25 10:42:08.000 [http-nio-80-exec-3] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 order by prod_id limit ?,? 
2019-02-25 10:42:08.000 [http-nio-80-exec-3] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==> Parameters: 0(Integer), 5(Integer)
2019-02-25 10:42:08.001 [http-nio-80-exec-3] DEBUG com.yun.product.dao.ProductDao.findProductByParam - <==      Total: 5
2019-02-25 10:42:08.002 [http-nio-80-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-02-25 10:42:08.002 [http-nio-80-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 2(Integer)
2019-02-25 10:42:08.005 [http-nio-80-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 5
2019-02-25 10:42:08.006 [http-nio-80-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-02-25 10:42:08.006 [http-nio-80-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 3(Integer)
2019-02-25 10:42:08.008 [http-nio-80-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-02-25 10:42:08.009 [http-nio-80-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-02-25 10:42:08.009 [http-nio-80-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 4(Integer)
2019-02-25 10:42:08.010 [http-nio-80-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 2
2019-02-25 10:42:08.010 [http-nio-80-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-02-25 10:42:08.010 [http-nio-80-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 5(Integer)
2019-02-25 10:42:08.011 [http-nio-80-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 2
2019-02-25 10:42:08.011 [http-nio-80-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-02-25 10:42:08.011 [http-nio-80-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 6(Integer)
2019-02-25 10:42:08.013 [http-nio-80-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-02-25 10:42:09.381 [http-nio-80-exec-4] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/prodParamList
2019-02-25 10:42:09.383 [http-nio-80-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-02-25 10:42:09.384 [http-nio-80-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 2(Integer)
2019-02-25 10:42:09.386 [http-nio-80-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 5
2019-02-25 10:42:41.721 [http-nio-80-exec-7] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productList
2019-02-25 10:42:41.723 [http-nio-80-exec-7] DEBUG c.yun.product.dao.ProductDao.findProductRowByParam - ==>  Preparing: select count(*) from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 
2019-02-25 10:42:41.723 [http-nio-80-exec-7] DEBUG c.yun.product.dao.ProductDao.findProductRowByParam - ==> Parameters: 
2019-02-25 10:42:41.724 [http-nio-80-exec-7] DEBUG c.yun.product.dao.ProductDao.findProductRowByParam - <==      Total: 1
2019-02-25 10:42:41.727 [http-nio-80-exec-7] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 order by prod_id limit ?,? 
2019-02-25 10:42:41.727 [http-nio-80-exec-7] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==> Parameters: 0(Integer), 5(Integer)
2019-02-25 10:42:41.728 [http-nio-80-exec-7] DEBUG com.yun.product.dao.ProductDao.findProductByParam - <==      Total: 5
2019-02-25 10:42:41.729 [http-nio-80-exec-7] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-02-25 10:42:41.729 [http-nio-80-exec-7] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 2(Integer)
2019-02-25 10:42:41.730 [http-nio-80-exec-7] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 5
2019-02-25 10:42:41.730 [http-nio-80-exec-7] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-02-25 10:42:41.731 [http-nio-80-exec-7] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 3(Integer)
2019-02-25 10:42:41.731 [http-nio-80-exec-7] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-02-25 10:42:41.732 [http-nio-80-exec-7] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-02-25 10:42:41.732 [http-nio-80-exec-7] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 4(Integer)
2019-02-25 10:42:41.733 [http-nio-80-exec-7] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 2
2019-02-25 10:42:41.733 [http-nio-80-exec-7] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-02-25 10:42:41.733 [http-nio-80-exec-7] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 5(Integer)
2019-02-25 10:42:41.734 [http-nio-80-exec-7] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 2
2019-02-25 10:42:41.734 [http-nio-80-exec-7] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-02-25 10:42:41.734 [http-nio-80-exec-7] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 6(Integer)
2019-02-25 10:42:41.735 [http-nio-80-exec-7] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-02-25 10:42:43.204 [http-nio-80-exec-8] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/prodParamList
2019-02-25 10:42:43.206 [http-nio-80-exec-8] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-02-25 10:42:43.206 [http-nio-80-exec-8] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 2(Integer)
2019-02-25 10:42:43.207 [http-nio-80-exec-8] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 5
2019-02-25 10:43:36.468 [http-nio-80-exec-2] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productTypeList
2019-02-25 10:43:36.469 [http-nio-80-exec-2] INFO  com.yun.product.controller.ProductTypeController - 跳转到stock/productTypeList.html页面
2019-02-25 10:43:36.541 [http-nio-80-exec-1] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productTypeTree
2019-02-25 10:43:36.545 [http-nio-80-exec-1] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - ==>  Preparing: select p1.prod_type_id,p1.prod_type_name,p1.parent_id,p2.prod_type_id parent_type_id,p2.prod_type_name parent_type_name from product_type p1 LEFT JOIN product_type p2 on p1.parent_id=p2.prod_type_id where p1.parent_id=? 
2019-02-25 10:43:36.545 [http-nio-80-exec-1] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - ==> Parameters: 0(Integer)
2019-02-25 10:43:36.548 [http-nio-80-exec-1] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - ====>  Preparing: select p1.prod_type_id,p1.prod_type_name,p1.parent_id,p2.prod_type_id parent_type_id,p2.prod_type_name parent_type_name from product_type p1 LEFT JOIN product_type p2 on p1.parent_id=p2.prod_type_id where p1.parent_id=? 
2019-02-25 10:43:36.548 [http-nio-80-exec-1] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - ====> Parameters: 29(Integer)
2019-02-25 10:43:36.551 [http-nio-80-exec-1] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - ======>  Preparing: select p1.prod_type_id,p1.prod_type_name,p1.parent_id,p2.prod_type_id parent_type_id,p2.prod_type_name parent_type_name from product_type p1 LEFT JOIN product_type p2 on p1.parent_id=p2.prod_type_id where p1.parent_id=? 
2019-02-25 10:43:36.551 [http-nio-80-exec-1] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - ======> Parameters: 30(Integer)
2019-02-25 10:43:36.553 [http-nio-80-exec-1] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - <======      Total: 0
2019-02-25 10:43:36.553 [http-nio-80-exec-1] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - <====      Total: 1
2019-02-25 10:43:36.554 [http-nio-80-exec-1] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - ====>  Preparing: select p1.prod_type_id,p1.prod_type_name,p1.parent_id,p2.prod_type_id parent_type_id,p2.prod_type_name parent_type_name from product_type p1 LEFT JOIN product_type p2 on p1.parent_id=p2.prod_type_id where p1.parent_id=? 
2019-02-25 10:43:36.554 [http-nio-80-exec-1] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - ====> Parameters: 39(Integer)
2019-02-25 10:43:36.555 [http-nio-80-exec-1] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - ======>  Preparing: select p1.prod_type_id,p1.prod_type_name,p1.parent_id,p2.prod_type_id parent_type_id,p2.prod_type_name parent_type_name from product_type p1 LEFT JOIN product_type p2 on p1.parent_id=p2.prod_type_id where p1.parent_id=? 
2019-02-25 10:43:36.555 [http-nio-80-exec-1] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - ======> Parameters: 41(Integer)
2019-02-25 10:43:36.556 [http-nio-80-exec-1] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - <======      Total: 0
2019-02-25 10:43:36.556 [http-nio-80-exec-1] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - <====      Total: 1
2019-02-25 10:43:36.557 [http-nio-80-exec-1] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - <==      Total: 2
2019-02-25 10:43:37.266 [http-nio-80-exec-9] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productList
2019-02-25 10:43:37.270 [http-nio-80-exec-9] DEBUG c.yun.product.dao.ProductDao.findProductRowByParam - ==>  Preparing: select count(*) from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 
2019-02-25 10:43:37.270 [http-nio-80-exec-9] DEBUG c.yun.product.dao.ProductDao.findProductRowByParam - ==> Parameters: 
2019-02-25 10:43:37.272 [http-nio-80-exec-9] DEBUG c.yun.product.dao.ProductDao.findProductRowByParam - <==      Total: 1
2019-02-25 10:43:37.276 [http-nio-80-exec-9] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 order by prod_id limit ?,? 
2019-02-25 10:43:37.276 [http-nio-80-exec-9] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==> Parameters: 0(Integer), 5(Integer)
2019-02-25 10:43:37.279 [http-nio-80-exec-9] DEBUG com.yun.product.dao.ProductDao.findProductByParam - <==      Total: 5
2019-02-25 10:43:37.279 [http-nio-80-exec-9] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-02-25 10:43:37.279 [http-nio-80-exec-9] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 2(Integer)
2019-02-25 10:43:37.282 [http-nio-80-exec-9] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 5
2019-02-25 10:43:37.283 [http-nio-80-exec-9] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-02-25 10:43:37.283 [http-nio-80-exec-9] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 3(Integer)
2019-02-25 10:43:37.284 [http-nio-80-exec-9] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-02-25 10:43:37.284 [http-nio-80-exec-9] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-02-25 10:43:37.284 [http-nio-80-exec-9] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 4(Integer)
2019-02-25 10:43:37.285 [http-nio-80-exec-9] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 2
2019-02-25 10:43:37.285 [http-nio-80-exec-9] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-02-25 10:43:37.285 [http-nio-80-exec-9] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 5(Integer)
2019-02-25 10:43:37.286 [http-nio-80-exec-9] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 2
2019-02-25 10:43:37.287 [http-nio-80-exec-9] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-02-25 10:43:37.287 [http-nio-80-exec-9] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 6(Integer)
2019-02-25 10:43:37.288 [http-nio-80-exec-9] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-02-25 10:43:38.377 [http-nio-80-exec-10] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/prodParamList
2019-02-25 10:43:38.379 [http-nio-80-exec-10] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-02-25 10:43:38.379 [http-nio-80-exec-10] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 2(Integer)
2019-02-25 10:43:38.381 [http-nio-80-exec-10] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 5
2019-02-25 10:44:04.706 [http-nio-80-exec-5] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productList
2019-02-25 10:44:04.710 [http-nio-80-exec-5] DEBUG c.yun.product.dao.ProductDao.findProductRowByParam - ==>  Preparing: select count(*) from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 
2019-02-25 10:44:04.710 [http-nio-80-exec-5] DEBUG c.yun.product.dao.ProductDao.findProductRowByParam - ==> Parameters: 
2019-02-25 10:44:04.711 [http-nio-80-exec-5] DEBUG c.yun.product.dao.ProductDao.findProductRowByParam - <==      Total: 1
2019-02-25 10:44:04.714 [http-nio-80-exec-5] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 order by prod_id limit ?,? 
2019-02-25 10:44:04.714 [http-nio-80-exec-5] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==> Parameters: 0(Integer), 5(Integer)
2019-02-25 10:44:04.719 [http-nio-80-exec-5] DEBUG com.yun.product.dao.ProductDao.findProductByParam - <==      Total: 5
2019-02-25 10:44:04.719 [http-nio-80-exec-5] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-02-25 10:44:04.720 [http-nio-80-exec-5] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 2(Integer)
2019-02-25 10:44:04.722 [http-nio-80-exec-5] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 5
2019-02-25 10:44:04.723 [http-nio-80-exec-5] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-02-25 10:44:04.723 [http-nio-80-exec-5] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 3(Integer)
2019-02-25 10:44:04.725 [http-nio-80-exec-5] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-02-25 10:44:04.726 [http-nio-80-exec-5] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-02-25 10:44:04.726 [http-nio-80-exec-5] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 4(Integer)
2019-02-25 10:44:04.727 [http-nio-80-exec-5] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 2
2019-02-25 10:44:04.727 [http-nio-80-exec-5] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-02-25 10:44:04.728 [http-nio-80-exec-5] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 5(Integer)
2019-02-25 10:44:04.729 [http-nio-80-exec-5] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 2
2019-02-25 10:44:04.729 [http-nio-80-exec-5] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-02-25 10:44:04.729 [http-nio-80-exec-5] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 6(Integer)
2019-02-25 10:44:04.731 [http-nio-80-exec-5] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-02-25 10:44:06.012 [http-nio-80-exec-6] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/prodParamList
2019-02-25 10:44:06.014 [http-nio-80-exec-6] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-02-25 10:44:06.015 [http-nio-80-exec-6] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 2(Integer)
2019-02-25 10:44:06.016 [http-nio-80-exec-6] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 5
2019-02-25 10:45:34.588 [http-nio-80-exec-4] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productList
2019-02-25 10:45:34.592 [http-nio-80-exec-4] DEBUG c.yun.product.dao.ProductDao.findProductRowByParam - ==>  Preparing: select count(*) from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 
2019-02-25 10:45:34.592 [http-nio-80-exec-4] DEBUG c.yun.product.dao.ProductDao.findProductRowByParam - ==> Parameters: 
2019-02-25 10:45:34.593 [http-nio-80-exec-4] DEBUG c.yun.product.dao.ProductDao.findProductRowByParam - <==      Total: 1
2019-02-25 10:45:34.596 [http-nio-80-exec-4] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 order by prod_id limit ?,? 
2019-02-25 10:45:34.597 [http-nio-80-exec-4] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==> Parameters: 0(Integer), 5(Integer)
2019-02-25 10:45:34.598 [http-nio-80-exec-4] DEBUG com.yun.product.dao.ProductDao.findProductByParam - <==      Total: 5
2019-02-25 10:45:34.599 [http-nio-80-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-02-25 10:45:34.599 [http-nio-80-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 2(Integer)
2019-02-25 10:45:34.600 [http-nio-80-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 5
2019-02-25 10:45:34.600 [http-nio-80-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-02-25 10:45:34.601 [http-nio-80-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 3(Integer)
2019-02-25 10:45:34.602 [http-nio-80-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-02-25 10:45:34.602 [http-nio-80-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-02-25 10:45:34.602 [http-nio-80-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 4(Integer)
2019-02-25 10:45:34.604 [http-nio-80-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 2
2019-02-25 10:45:34.604 [http-nio-80-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-02-25 10:45:34.604 [http-nio-80-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 5(Integer)
2019-02-25 10:45:34.605 [http-nio-80-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 2
2019-02-25 10:45:34.606 [http-nio-80-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-02-25 10:45:34.606 [http-nio-80-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 6(Integer)
2019-02-25 10:45:34.607 [http-nio-80-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-02-25 10:45:36.100 [http-nio-80-exec-7] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/prodParamList
2019-02-25 10:45:36.101 [http-nio-80-exec-7] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-02-25 10:45:36.102 [http-nio-80-exec-7] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 2(Integer)
2019-02-25 10:45:36.102 [http-nio-80-exec-7] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 5
2019-02-25 10:45:47.039 [http-nio-80-exec-8] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productList
2019-02-25 10:45:47.048 [http-nio-80-exec-8] DEBUG c.yun.product.dao.ProductDao.findProductRowByParam - ==>  Preparing: select count(*) from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 
2019-02-25 10:45:47.050 [http-nio-80-exec-8] DEBUG c.yun.product.dao.ProductDao.findProductRowByParam - ==> Parameters: 
2019-02-25 10:45:47.051 [http-nio-80-exec-8] DEBUG c.yun.product.dao.ProductDao.findProductRowByParam - <==      Total: 1
2019-02-25 10:45:47.054 [http-nio-80-exec-8] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 order by prod_id limit ?,? 
2019-02-25 10:45:47.055 [http-nio-80-exec-8] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==> Parameters: 0(Integer), 5(Integer)
2019-02-25 10:45:47.059 [http-nio-80-exec-8] DEBUG com.yun.product.dao.ProductDao.findProductByParam - <==      Total: 5
2019-02-25 10:45:47.059 [http-nio-80-exec-8] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-02-25 10:45:47.059 [http-nio-80-exec-8] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 2(Integer)
2019-02-25 10:45:47.065 [http-nio-80-exec-8] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 5
2019-02-25 10:45:47.065 [http-nio-80-exec-8] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-02-25 10:45:47.066 [http-nio-80-exec-8] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 3(Integer)
2019-02-25 10:45:47.067 [http-nio-80-exec-8] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-02-25 10:45:47.069 [http-nio-80-exec-8] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-02-25 10:45:47.069 [http-nio-80-exec-8] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 4(Integer)
2019-02-25 10:45:47.071 [http-nio-80-exec-8] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 2
2019-02-25 10:45:47.071 [http-nio-80-exec-8] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-02-25 10:45:47.081 [http-nio-80-exec-8] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 5(Integer)
2019-02-25 10:45:47.086 [http-nio-80-exec-8] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 2
2019-02-25 10:45:47.087 [http-nio-80-exec-8] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-02-25 10:45:47.087 [http-nio-80-exec-8] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 6(Integer)
2019-02-25 10:45:47.088 [http-nio-80-exec-8] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-02-25 10:45:48.457 [http-nio-80-exec-2] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/prodParamList
2019-02-25 10:45:48.461 [http-nio-80-exec-2] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-02-25 10:45:48.461 [http-nio-80-exec-2] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 2(Integer)
2019-02-25 10:45:48.464 [http-nio-80-exec-2] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 5
2019-02-25 10:45:58.429 [http-nio-80-exec-1] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/prodParamDelete
2019-02-25 10:45:58.434 [http-nio-80-exec-1] DEBUG c.y.p.d.ProductParameterDao.deleteProductParameter - ==>  Preparing: delete from product_parameter where prod_param_id=? 
2019-02-25 10:45:58.435 [http-nio-80-exec-1] DEBUG c.y.p.d.ProductParameterDao.deleteProductParameter - ==> Parameters: 16(Integer)
2019-02-25 10:45:58.487 [http-nio-80-exec-1] DEBUG c.y.p.d.ProductParameterDao.deleteProductParameter - <==    Updates: 1
2019-02-25 10:45:58.544 [http-nio-80-exec-9] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productList
2019-02-25 10:45:58.545 [http-nio-80-exec-9] DEBUG c.yun.product.dao.ProductDao.findProductRowByParam - ==>  Preparing: select count(*) from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 
2019-02-25 10:45:58.545 [http-nio-80-exec-9] DEBUG c.yun.product.dao.ProductDao.findProductRowByParam - ==> Parameters: 
2019-02-25 10:45:58.546 [http-nio-80-exec-9] DEBUG c.yun.product.dao.ProductDao.findProductRowByParam - <==      Total: 1
2019-02-25 10:45:58.549 [http-nio-80-exec-9] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 order by prod_id limit ?,? 
2019-02-25 10:45:58.549 [http-nio-80-exec-9] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==> Parameters: 0(Integer), 5(Integer)
2019-02-25 10:45:58.551 [http-nio-80-exec-9] DEBUG com.yun.product.dao.ProductDao.findProductByParam - <==      Total: 5
2019-02-25 10:45:58.551 [http-nio-80-exec-9] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-02-25 10:45:58.551 [http-nio-80-exec-9] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 2(Integer)
2019-02-25 10:45:58.553 [http-nio-80-exec-9] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 4
2019-02-25 10:45:58.554 [http-nio-80-exec-9] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-02-25 10:45:58.554 [http-nio-80-exec-9] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 3(Integer)
2019-02-25 10:45:58.555 [http-nio-80-exec-9] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-02-25 10:45:58.555 [http-nio-80-exec-9] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-02-25 10:45:58.556 [http-nio-80-exec-9] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 4(Integer)
2019-02-25 10:45:58.556 [http-nio-80-exec-9] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 2
2019-02-25 10:45:58.557 [http-nio-80-exec-9] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-02-25 10:45:58.557 [http-nio-80-exec-9] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 5(Integer)
2019-02-25 10:45:58.558 [http-nio-80-exec-9] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 2
2019-02-25 10:45:58.558 [http-nio-80-exec-9] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-02-25 10:45:58.558 [http-nio-80-exec-9] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 6(Integer)
2019-02-25 10:45:58.559 [http-nio-80-exec-9] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-02-25 10:46:00.804 [http-nio-80-exec-10] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productList
2019-02-25 10:46:00.807 [http-nio-80-exec-10] DEBUG c.yun.product.dao.ProductDao.findProductRowByParam - ==>  Preparing: select count(*) from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 
2019-02-25 10:46:00.807 [http-nio-80-exec-10] DEBUG c.yun.product.dao.ProductDao.findProductRowByParam - ==> Parameters: 
2019-02-25 10:46:00.810 [http-nio-80-exec-10] DEBUG c.yun.product.dao.ProductDao.findProductRowByParam - <==      Total: 1
2019-02-25 10:46:00.814 [http-nio-80-exec-10] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 order by prod_id limit ?,? 
2019-02-25 10:46:00.815 [http-nio-80-exec-10] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==> Parameters: 0(Integer), 5(Integer)
2019-02-25 10:46:00.817 [http-nio-80-exec-10] DEBUG com.yun.product.dao.ProductDao.findProductByParam - <==      Total: 5
2019-02-25 10:46:00.818 [http-nio-80-exec-10] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-02-25 10:46:00.818 [http-nio-80-exec-10] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 2(Integer)
2019-02-25 10:46:00.820 [http-nio-80-exec-10] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 4
2019-02-25 10:46:00.820 [http-nio-80-exec-10] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-02-25 10:46:00.820 [http-nio-80-exec-10] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 3(Integer)
2019-02-25 10:46:00.822 [http-nio-80-exec-10] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-02-25 10:46:00.823 [http-nio-80-exec-10] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-02-25 10:46:00.823 [http-nio-80-exec-10] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 4(Integer)
2019-02-25 10:46:00.831 [http-nio-80-exec-10] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 2
2019-02-25 10:46:00.832 [http-nio-80-exec-10] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-02-25 10:46:00.832 [http-nio-80-exec-10] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 5(Integer)
2019-02-25 10:46:00.834 [http-nio-80-exec-10] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 2
2019-02-25 10:46:00.834 [http-nio-80-exec-10] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-02-25 10:46:00.834 [http-nio-80-exec-10] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 6(Integer)
2019-02-25 10:46:00.835 [http-nio-80-exec-10] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-02-25 10:46:02.245 [http-nio-80-exec-5] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productList
2019-02-25 10:46:02.248 [http-nio-80-exec-5] DEBUG c.yun.product.dao.ProductDao.findProductRowByParam - ==>  Preparing: select count(*) from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 
2019-02-25 10:46:02.248 [http-nio-80-exec-5] DEBUG c.yun.product.dao.ProductDao.findProductRowByParam - ==> Parameters: 
2019-02-25 10:46:02.250 [http-nio-80-exec-5] DEBUG c.yun.product.dao.ProductDao.findProductRowByParam - <==      Total: 1
2019-02-25 10:46:02.253 [http-nio-80-exec-5] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 order by prod_id limit ?,? 
2019-02-25 10:46:02.254 [http-nio-80-exec-5] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==> Parameters: 0(Integer), 5(Integer)
2019-02-25 10:46:02.256 [http-nio-80-exec-5] DEBUG com.yun.product.dao.ProductDao.findProductByParam - <==      Total: 5
2019-02-25 10:46:02.257 [http-nio-80-exec-5] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-02-25 10:46:02.257 [http-nio-80-exec-5] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 2(Integer)
2019-02-25 10:46:02.259 [http-nio-80-exec-5] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 4
2019-02-25 10:46:02.259 [http-nio-80-exec-5] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-02-25 10:46:02.259 [http-nio-80-exec-5] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 3(Integer)
2019-02-25 10:46:02.260 [http-nio-80-exec-5] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-02-25 10:46:02.260 [http-nio-80-exec-5] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-02-25 10:46:02.261 [http-nio-80-exec-5] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 4(Integer)
2019-02-25 10:46:02.262 [http-nio-80-exec-5] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 2
2019-02-25 10:46:02.262 [http-nio-80-exec-5] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-02-25 10:46:02.262 [http-nio-80-exec-5] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 5(Integer)
2019-02-25 10:46:02.264 [http-nio-80-exec-5] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 2
2019-02-25 10:46:02.265 [http-nio-80-exec-5] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-02-25 10:46:02.265 [http-nio-80-exec-5] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 6(Integer)
2019-02-25 10:46:02.267 [http-nio-80-exec-5] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-02-25 10:46:03.473 [http-nio-80-exec-6] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/prodParamList
2019-02-25 10:46:03.474 [http-nio-80-exec-6] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-02-25 10:46:03.475 [http-nio-80-exec-6] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 2(Integer)
2019-02-25 10:46:03.476 [http-nio-80-exec-6] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 4
2019-02-25 10:46:04.915 [http-nio-80-exec-3] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/prodParamDelete
2019-02-25 10:46:04.917 [http-nio-80-exec-3] DEBUG c.y.p.d.ProductParameterDao.deleteProductParameter - ==>  Preparing: delete from product_parameter where prod_param_id=? 
2019-02-25 10:46:04.917 [http-nio-80-exec-3] DEBUG c.y.p.d.ProductParameterDao.deleteProductParameter - ==> Parameters: 14(Integer)
2019-02-25 10:46:04.932 [http-nio-80-exec-3] DEBUG c.y.p.d.ProductParameterDao.deleteProductParameter - <==    Updates: 1
2019-02-25 10:46:04.989 [http-nio-80-exec-4] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productList
2019-02-25 10:46:04.991 [http-nio-80-exec-4] DEBUG c.yun.product.dao.ProductDao.findProductRowByParam - ==>  Preparing: select count(*) from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 
2019-02-25 10:46:04.991 [http-nio-80-exec-4] DEBUG c.yun.product.dao.ProductDao.findProductRowByParam - ==> Parameters: 
2019-02-25 10:46:04.991 [http-nio-80-exec-4] DEBUG c.yun.product.dao.ProductDao.findProductRowByParam - <==      Total: 1
2019-02-25 10:46:04.993 [http-nio-80-exec-4] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 order by prod_id limit ?,? 
2019-02-25 10:46:04.993 [http-nio-80-exec-4] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==> Parameters: 0(Integer), 5(Integer)
2019-02-25 10:46:04.994 [http-nio-80-exec-4] DEBUG com.yun.product.dao.ProductDao.findProductByParam - <==      Total: 5
2019-02-25 10:46:04.994 [http-nio-80-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-02-25 10:46:04.994 [http-nio-80-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 2(Integer)
2019-02-25 10:46:04.995 [http-nio-80-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 3
2019-02-25 10:46:04.995 [http-nio-80-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-02-25 10:46:04.995 [http-nio-80-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 3(Integer)
2019-02-25 10:46:04.996 [http-nio-80-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-02-25 10:46:04.996 [http-nio-80-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-02-25 10:46:04.996 [http-nio-80-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 4(Integer)
2019-02-25 10:46:04.997 [http-nio-80-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 2
2019-02-25 10:46:04.997 [http-nio-80-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-02-25 10:46:04.997 [http-nio-80-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 5(Integer)
2019-02-25 10:46:04.998 [http-nio-80-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 2
2019-02-25 10:46:04.999 [http-nio-80-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-02-25 10:46:04.999 [http-nio-80-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 6(Integer)
2019-02-25 10:46:04.999 [http-nio-80-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-02-25 10:46:06.611 [http-nio-80-exec-7] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/prodParamList
2019-02-25 10:46:06.614 [http-nio-80-exec-7] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-02-25 10:46:06.615 [http-nio-80-exec-7] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 2(Integer)
2019-02-25 10:46:06.616 [http-nio-80-exec-7] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 3
2019-02-25 10:50:47.136 [http-nio-80-exec-2] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productTypeList
2019-02-25 10:50:47.137 [http-nio-80-exec-2] INFO  com.yun.product.controller.ProductTypeController - 跳转到stock/productTypeList.html页面
2019-02-25 10:50:47.199 [http-nio-80-exec-1] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productTypeTree
2019-02-25 10:50:47.202 [http-nio-80-exec-1] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - ==>  Preparing: select p1.prod_type_id,p1.prod_type_name,p1.parent_id,p2.prod_type_id parent_type_id,p2.prod_type_name parent_type_name from product_type p1 LEFT JOIN product_type p2 on p1.parent_id=p2.prod_type_id where p1.parent_id=? 
2019-02-25 10:50:47.203 [http-nio-80-exec-1] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - ==> Parameters: 0(Integer)
2019-02-25 10:50:47.204 [http-nio-80-exec-1] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - ====>  Preparing: select p1.prod_type_id,p1.prod_type_name,p1.parent_id,p2.prod_type_id parent_type_id,p2.prod_type_name parent_type_name from product_type p1 LEFT JOIN product_type p2 on p1.parent_id=p2.prod_type_id where p1.parent_id=? 
2019-02-25 10:50:47.204 [http-nio-80-exec-1] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - ====> Parameters: 29(Integer)
2019-02-25 10:50:47.206 [http-nio-80-exec-1] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - ======>  Preparing: select p1.prod_type_id,p1.prod_type_name,p1.parent_id,p2.prod_type_id parent_type_id,p2.prod_type_name parent_type_name from product_type p1 LEFT JOIN product_type p2 on p1.parent_id=p2.prod_type_id where p1.parent_id=? 
2019-02-25 10:50:47.206 [http-nio-80-exec-1] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - ======> Parameters: 30(Integer)
2019-02-25 10:50:47.207 [http-nio-80-exec-1] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - <======      Total: 0
2019-02-25 10:50:47.207 [http-nio-80-exec-1] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - <====      Total: 1
2019-02-25 10:50:47.207 [http-nio-80-exec-1] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - ====>  Preparing: select p1.prod_type_id,p1.prod_type_name,p1.parent_id,p2.prod_type_id parent_type_id,p2.prod_type_name parent_type_name from product_type p1 LEFT JOIN product_type p2 on p1.parent_id=p2.prod_type_id where p1.parent_id=? 
2019-02-25 10:50:47.208 [http-nio-80-exec-1] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - ====> Parameters: 39(Integer)
2019-02-25 10:50:47.209 [http-nio-80-exec-1] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - ======>  Preparing: select p1.prod_type_id,p1.prod_type_name,p1.parent_id,p2.prod_type_id parent_type_id,p2.prod_type_name parent_type_name from product_type p1 LEFT JOIN product_type p2 on p1.parent_id=p2.prod_type_id where p1.parent_id=? 
2019-02-25 10:50:47.209 [http-nio-80-exec-1] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - ======> Parameters: 41(Integer)
2019-02-25 10:50:47.210 [http-nio-80-exec-1] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - <======      Total: 0
2019-02-25 10:50:47.210 [http-nio-80-exec-1] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - <====      Total: 1
2019-02-25 10:50:47.210 [http-nio-80-exec-1] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - <==      Total: 2
2019-02-25 10:50:47.921 [http-nio-80-exec-9] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productList
2019-02-25 10:50:47.929 [http-nio-80-exec-9] DEBUG c.yun.product.dao.ProductDao.findProductRowByParam - ==>  Preparing: select count(*) from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 
2019-02-25 10:50:47.930 [http-nio-80-exec-9] DEBUG c.yun.product.dao.ProductDao.findProductRowByParam - ==> Parameters: 
2019-02-25 10:50:47.933 [http-nio-80-exec-9] DEBUG c.yun.product.dao.ProductDao.findProductRowByParam - <==      Total: 1
2019-02-25 10:50:47.935 [http-nio-80-exec-9] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 order by prod_id limit ?,? 
2019-02-25 10:50:47.936 [http-nio-80-exec-9] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==> Parameters: 0(Integer), 5(Integer)
2019-02-25 10:50:47.937 [http-nio-80-exec-9] DEBUG com.yun.product.dao.ProductDao.findProductByParam - <==      Total: 5
2019-02-25 10:50:47.937 [http-nio-80-exec-9] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-02-25 10:50:47.937 [http-nio-80-exec-9] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 2(Integer)
2019-02-25 10:50:47.938 [http-nio-80-exec-9] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 3
2019-02-25 10:50:47.939 [http-nio-80-exec-9] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-02-25 10:50:47.939 [http-nio-80-exec-9] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 3(Integer)
2019-02-25 10:50:47.940 [http-nio-80-exec-9] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-02-25 10:50:47.941 [http-nio-80-exec-9] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-02-25 10:50:47.942 [http-nio-80-exec-9] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 4(Integer)
2019-02-25 10:50:47.943 [http-nio-80-exec-9] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 2
2019-02-25 10:50:47.944 [http-nio-80-exec-9] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-02-25 10:50:47.944 [http-nio-80-exec-9] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 5(Integer)
2019-02-25 10:50:47.945 [http-nio-80-exec-9] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 2
2019-02-25 10:50:47.945 [http-nio-80-exec-9] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-02-25 10:50:47.945 [http-nio-80-exec-9] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 6(Integer)
2019-02-25 10:50:47.946 [http-nio-80-exec-9] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-02-25 10:50:49.854 [http-nio-80-exec-10] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/prodParamList
2019-02-25 10:50:49.856 [http-nio-80-exec-10] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-02-25 10:50:49.856 [http-nio-80-exec-10] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 3(Integer)
2019-02-25 10:50:49.857 [http-nio-80-exec-10] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-02-25 10:50:53.468 [http-nio-80-exec-5] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productReceiveStockList
2019-02-25 10:50:53.473 [http-nio-80-exec-5] DEBUG c.y.stock.controller.ProductReceiveStockController - 跳转到待收库存查询控制器
2019-02-25 10:50:53.489 [http-nio-80-exec-5] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - ==>  Preparing: select count(*) from product_receive_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 
2019-02-25 10:50:53.490 [http-nio-80-exec-5] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - ==> Parameters: 
2019-02-25 10:50:53.495 [http-nio-80-exec-5] DEBUG c.y.s.d.P.findProductReceiveStockRowCnt - <==      Total: 1
2019-02-25 10:50:53.499 [http-nio-80-exec-5] DEBUG c.y.s.d.P.findProductReceiveStockList - ==>  Preparing: select ps.prod_rece_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_receive_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 order by p.prod_id,pp.prod_param_id limit ?,? 
2019-02-25 10:50:53.499 [http-nio-80-exec-5] DEBUG c.y.s.d.P.findProductReceiveStockList - ==> Parameters: 0(Integer), 5(Integer)
2019-02-25 10:50:53.518 [http-nio-80-exec-5] DEBUG c.y.s.d.P.findProductReceiveStockList - <==      Total: 5
2019-02-25 10:50:53.520 [http-nio-80-exec-5] DEBUG c.y.stock.controller.ProductReceiveStockController - 转到待收库存页面
2019-02-25 10:50:54.421 [http-nio-80-exec-6] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productStockList
2019-02-25 10:50:54.423 [http-nio-80-exec-6] DEBUG com.yun.stock.controller.ProductStockController - 跳转到物品库存查询控制器
2019-02-25 10:50:54.424 [http-nio-80-exec-6] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==>  Preparing: select count(*) from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 
2019-02-25 10:50:54.424 [http-nio-80-exec-6] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - ==> Parameters: 
2019-02-25 10:50:54.438 [http-nio-80-exec-6] DEBUG c.y.s.dao.ProductStockDao.findProductStockRowCnt - <==      Total: 1
2019-02-25 10:50:54.440 [http-nio-80-exec-6] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==>  Preparing: select ps.prod_stock_id,ps.stock_num,p.prod_id,p.prod_name,p.prod_no,prod_state,pp.prod_param_id,pp.prod_param_name from product_stock ps inner join product p on ps.prod_id=p.prod_id left join product_parameter pp on ps.prod_param_id=pp.prod_param_id where 1=1 order by p.prod_id,pp.prod_param_id limit ?,? 
2019-02-25 10:50:54.440 [http-nio-80-exec-6] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - ==> Parameters: 0(Integer), 5(Integer)
2019-02-25 10:50:54.442 [http-nio-80-exec-6] DEBUG c.y.stock.dao.ProductStockDao.findProductStockList - <==      Total: 2
2019-02-25 10:50:54.443 [http-nio-80-exec-6] DEBUG com.yun.stock.controller.ProductStockController - 转到物品库存页面
2019-02-25 10:50:55.630 [http-nio-80-exec-3] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productReceiveIn
2019-02-25 10:50:57.801 [http-nio-80-exec-4] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productStockReport
2019-02-25 10:50:57.807 [http-nio-80-exec-4] DEBUG c.y.r.d.ProductReceCurrDao.findProductReceCurrList - ==>  Preparing: select ps.*,ps.prod_rece_num+ps.prod_curr_num stockNum from( select t.prod_id,t.prod_name,t.prod_param_id,t.prod_param_name, ifnull((select stock_num from product_receive_stock prs where prs.prod_id=t.prod_id and prs.prod_param_id=t.prod_param_id),0) prod_rece_num, ifnull((select stock_num from product_stock ps where ps.prod_id=t.prod_id and ps.prod_param_id=t.prod_param_id),0) prod_curr_num from (select p.prod_id,p.prod_name,pp.prod_param_id,pp.prod_param_name from product p LEFT JOIN product_parameter pp on p.prod_id=pp.prod_id where p.prod_state=0 and pp.param_state=0 order by p.prod_id,pp.prod_param_id) t)ps where 1=1 
2019-02-25 10:50:57.808 [http-nio-80-exec-4] DEBUG c.y.r.d.ProductReceCurrDao.findProductReceCurrList - ==> Parameters: 
2019-02-25 10:50:57.858 [http-nio-80-exec-4] DEBUG c.y.r.d.ProductReceCurrDao.findProductReceCurrList - <==      Total: 9
2019-02-25 10:50:57.933 [http-nio-80-exec-7] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/js/excel/external/jszip.min.js
2019-02-25 10:50:57.936 [http-nio-80-exec-2] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/js/excel/scripts/demo.page.js
2019-02-25 10:50:57.938 [http-nio-80-exec-1] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/js/excel/external/FileSaver.js
2019-02-25 10:50:57.934 [http-nio-80-exec-8] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/js/excel/scripts/excel-gen.js
2019-02-25 10:50:59.704 [http-nio-80-exec-9] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productSaleCalc
2019-02-25 10:50:59.755 [http-nio-80-exec-10] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/js/Chart.js
2019-02-25 10:51:01.853 [http-nio-80-exec-5] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productSaleCalcQuery
2019-02-25 10:51:01.857 [http-nio-80-exec-5] DEBUG c.y.r.dao.ProductSaleDao.findProductSaleBarChart - ==>  Preparing: select DATE_FORMAT(pt.trade_date,'%Y-%m-%d') trade_date,sum(ifnull(pt.trade_del,0)) sale_num from product_trade pt,product p,product_parameter pp where pt.prod_id=p.prod_id and pt.prod_param_id=pp.prod_param_id and pt.trade_date BETWEEN ? and ? group by DATE_FORMAT(pt.trade_date,'%Y-%m-%d') 
2019-02-25 10:51:01.858 [http-nio-80-exec-5] DEBUG c.y.r.dao.ProductSaleDao.findProductSaleBarChart - ==> Parameters: 2019-02-25(String), 2019-02-25(String)
2019-02-25 10:51:01.917 [http-nio-80-exec-5] DEBUG c.y.r.dao.ProductSaleDao.findProductSaleBarChart - <==      Total: 0
2019-02-25 10:51:03.725 [http-nio-80-exec-6] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/js/My97DatePicker/lang/zh-cn.js
2019-02-25 10:51:03.730 [http-nio-80-exec-3] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/js/My97DatePicker/skin/default/datepicker.css
2019-02-25 10:51:03.736 [http-nio-80-exec-4] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/js/My97DatePicker/calendar.js
2019-02-25 10:51:03.841 [http-nio-80-exec-1] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/js/My97DatePicker/skin/default/img.gif
2019-02-25 10:51:10.470 [http-nio-80-exec-2] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productSaleCalcQuery
2019-02-25 10:51:10.473 [http-nio-80-exec-2] DEBUG c.y.r.dao.ProductSaleDao.findProductSaleBarChart - ==>  Preparing: select DATE_FORMAT(pt.trade_date,'%Y-%m-%d') trade_date,sum(ifnull(pt.trade_del,0)) sale_num from product_trade pt,product p,product_parameter pp where pt.prod_id=p.prod_id and pt.prod_param_id=pp.prod_param_id and pt.trade_date BETWEEN ? and ? group by DATE_FORMAT(pt.trade_date,'%Y-%m-%d') 
2019-02-25 10:51:10.473 [http-nio-80-exec-2] DEBUG c.y.r.dao.ProductSaleDao.findProductSaleBarChart - ==> Parameters: 2019-02-01(String), 2019-02-25(String)
2019-02-25 10:51:10.475 [http-nio-80-exec-2] DEBUG c.y.r.dao.ProductSaleDao.findProductSaleBarChart - <==      Total: 2
2019-02-25 10:51:15.229 [http-nio-80-exec-8] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productSaleCalcQuery
2019-02-25 10:51:15.232 [http-nio-80-exec-8] DEBUG c.y.r.dao.ProductSaleDao.findProductSaleBarChart - ==>  Preparing: select DATE_FORMAT(pt.trade_date,'%Y-%m-%d') trade_date,sum(ifnull(pt.trade_del,0)) sale_num from product_trade pt,product p,product_parameter pp where pt.prod_id=p.prod_id and pt.prod_param_id=pp.prod_param_id and pt.trade_date BETWEEN ? and ? group by DATE_FORMAT(pt.trade_date,'%Y-%m-%d') 
2019-02-25 10:51:15.232 [http-nio-80-exec-8] DEBUG c.y.r.dao.ProductSaleDao.findProductSaleBarChart - ==> Parameters: 2019-01-01(String), 2019-02-25(String)
2019-02-25 10:51:15.263 [http-nio-80-exec-8] DEBUG c.y.r.dao.ProductSaleDao.findProductSaleBarChart - <==      Total: 4
2019-02-25 10:55:42.059 [http-nio-80-exec-4] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productList
2019-02-25 10:55:42.061 [http-nio-80-exec-4] DEBUG c.yun.product.dao.ProductDao.findProductRowByParam - ==>  Preparing: select count(*) from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 
2019-02-25 10:55:42.062 [http-nio-80-exec-4] DEBUG c.yun.product.dao.ProductDao.findProductRowByParam - ==> Parameters: 
2019-02-25 10:55:42.063 [http-nio-80-exec-4] DEBUG c.yun.product.dao.ProductDao.findProductRowByParam - <==      Total: 1
2019-02-25 10:55:42.065 [http-nio-80-exec-4] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 order by prod_id limit ?,? 
2019-02-25 10:55:42.065 [http-nio-80-exec-4] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==> Parameters: 0(Integer), 5(Integer)
2019-02-25 10:55:42.066 [http-nio-80-exec-4] DEBUG com.yun.product.dao.ProductDao.findProductByParam - <==      Total: 5
2019-02-25 10:55:42.066 [http-nio-80-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-02-25 10:55:42.066 [http-nio-80-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 2(Integer)
2019-02-25 10:55:42.067 [http-nio-80-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 3
2019-02-25 10:55:42.068 [http-nio-80-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-02-25 10:55:42.068 [http-nio-80-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 3(Integer)
2019-02-25 10:55:42.068 [http-nio-80-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-02-25 10:55:42.069 [http-nio-80-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-02-25 10:55:42.069 [http-nio-80-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 4(Integer)
2019-02-25 10:55:42.070 [http-nio-80-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 2
2019-02-25 10:55:42.070 [http-nio-80-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-02-25 10:55:42.070 [http-nio-80-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 5(Integer)
2019-02-25 10:55:42.071 [http-nio-80-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 2
2019-02-25 10:55:42.071 [http-nio-80-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-02-25 10:55:42.071 [http-nio-80-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 6(Integer)
2019-02-25 10:55:42.072 [http-nio-80-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-02-25 10:55:43.601 [http-nio-80-exec-3] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/prodParamList
2019-02-25 10:55:43.605 [http-nio-80-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-02-25 10:55:43.605 [http-nio-80-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 2(Integer)
2019-02-25 10:55:43.607 [http-nio-80-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 3
2019-02-25 10:58:01.303 [http-nio-80-exec-1] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productList
2019-02-25 10:58:01.305 [http-nio-80-exec-1] DEBUG c.yun.product.dao.ProductDao.findProductRowByParam - ==>  Preparing: select count(*) from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 
2019-02-25 10:58:01.306 [http-nio-80-exec-1] DEBUG c.yun.product.dao.ProductDao.findProductRowByParam - ==> Parameters: 
2019-02-25 10:58:01.311 [http-nio-80-exec-1] DEBUG c.yun.product.dao.ProductDao.findProductRowByParam - <==      Total: 1
2019-02-25 10:58:01.317 [http-nio-80-exec-1] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 order by prod_id limit ?,? 
2019-02-25 10:58:01.318 [http-nio-80-exec-1] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==> Parameters: 0(Integer), 5(Integer)
2019-02-25 10:58:01.320 [http-nio-80-exec-1] DEBUG com.yun.product.dao.ProductDao.findProductByParam - <==      Total: 5
2019-02-25 10:58:01.320 [http-nio-80-exec-1] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-02-25 10:58:01.321 [http-nio-80-exec-1] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 2(Integer)
2019-02-25 10:58:01.325 [http-nio-80-exec-1] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 3
2019-02-25 10:58:01.325 [http-nio-80-exec-1] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-02-25 10:58:01.335 [http-nio-80-exec-1] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 3(Integer)
2019-02-25 10:58:01.341 [http-nio-80-exec-1] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-02-25 10:58:01.341 [http-nio-80-exec-1] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-02-25 10:58:01.342 [http-nio-80-exec-1] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 4(Integer)
2019-02-25 10:58:01.343 [http-nio-80-exec-1] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 2
2019-02-25 10:58:01.343 [http-nio-80-exec-1] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-02-25 10:58:01.344 [http-nio-80-exec-1] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 5(Integer)
2019-02-25 10:58:01.345 [http-nio-80-exec-1] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 2
2019-02-25 10:58:01.345 [http-nio-80-exec-1] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-02-25 10:58:01.345 [http-nio-80-exec-1] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 6(Integer)
2019-02-25 10:58:01.348 [http-nio-80-exec-1] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-02-25 10:58:02.501 [http-nio-80-exec-2] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/prodParamList
2019-02-25 10:58:02.503 [http-nio-80-exec-2] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-02-25 10:58:02.503 [http-nio-80-exec-2] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 2(Integer)
2019-02-25 10:58:02.504 [http-nio-80-exec-2] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 3
2019-02-25 10:58:07.156 [http-nio-80-exec-8] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/prodParamDelete
2019-02-25 10:58:07.163 [http-nio-80-exec-8] DEBUG c.y.p.d.ProductParameterDao.deleteProductParameter - ==>  Preparing: delete from product_parameter where prod_param_id=? 
2019-02-25 10:58:07.163 [http-nio-80-exec-8] DEBUG c.y.p.d.ProductParameterDao.deleteProductParameter - ==> Parameters: 12(Integer)
2019-02-25 10:58:07.198 [http-nio-80-exec-8] DEBUG c.y.p.d.ProductParameterDao.deleteProductParameter - <==    Updates: 1
2019-02-25 10:58:07.289 [http-nio-80-exec-7] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productList
2019-02-25 10:58:07.291 [http-nio-80-exec-7] DEBUG c.yun.product.dao.ProductDao.findProductRowByParam - ==>  Preparing: select count(*) from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 
2019-02-25 10:58:07.292 [http-nio-80-exec-7] DEBUG c.yun.product.dao.ProductDao.findProductRowByParam - ==> Parameters: 
2019-02-25 10:58:07.293 [http-nio-80-exec-7] DEBUG c.yun.product.dao.ProductDao.findProductRowByParam - <==      Total: 1
2019-02-25 10:58:07.295 [http-nio-80-exec-7] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 order by prod_id limit ?,? 
2019-02-25 10:58:07.296 [http-nio-80-exec-7] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==> Parameters: 0(Integer), 5(Integer)
2019-02-25 10:58:07.297 [http-nio-80-exec-7] DEBUG com.yun.product.dao.ProductDao.findProductByParam - <==      Total: 5
2019-02-25 10:58:07.297 [http-nio-80-exec-7] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-02-25 10:58:07.297 [http-nio-80-exec-7] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 2(Integer)
2019-02-25 10:58:07.298 [http-nio-80-exec-7] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 2
2019-02-25 10:58:07.298 [http-nio-80-exec-7] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-02-25 10:58:07.298 [http-nio-80-exec-7] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 3(Integer)
2019-02-25 10:58:07.298 [http-nio-80-exec-7] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-02-25 10:58:07.298 [http-nio-80-exec-7] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-02-25 10:58:07.299 [http-nio-80-exec-7] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 4(Integer)
2019-02-25 10:58:07.302 [http-nio-80-exec-7] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 2
2019-02-25 10:58:07.302 [http-nio-80-exec-7] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-02-25 10:58:07.303 [http-nio-80-exec-7] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 5(Integer)
2019-02-25 10:58:07.303 [http-nio-80-exec-7] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 2
2019-02-25 10:58:07.303 [http-nio-80-exec-7] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-02-25 10:58:07.303 [http-nio-80-exec-7] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 6(Integer)
2019-02-25 10:58:07.305 [http-nio-80-exec-7] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-02-25 10:58:07.555 [http-nio-80-exec-9] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/prodParamList
2019-02-25 10:58:07.557 [http-nio-80-exec-9] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-02-25 10:58:07.557 [http-nio-80-exec-9] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 4(Integer)
2019-02-25 10:58:07.559 [http-nio-80-exec-9] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 2
2019-02-25 10:58:35.767 [http-nio-80-exec-10] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/js/jquery.min.map
2019-02-25 10:58:35.777 [http-nio-80-exec-5] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/css/bootstrap.min.css.map
2019-02-25 10:59:45.159 [http-nio-80-exec-6] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/main
2019-02-25 10:59:45.292 [http-nio-80-exec-1] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/css/bootstrap.min.css
2019-02-25 10:59:45.444 [http-nio-80-exec-2] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/css/site.css
2019-02-25 10:59:45.445 [http-nio-80-exec-7] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/js/bootstrap.min.js
2019-02-25 10:59:45.511 [http-nio-80-exec-9] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/css/bootstrap.min.css.map
2019-02-25 10:59:45.737 [http-nio-80-exec-8] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/js/jquery.min.js
2019-02-25 10:59:45.787 [http-nio-80-exec-5] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/default.html
2019-02-25 10:59:45.805 [http-nio-80-exec-10] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/js/jquery.min.map
2019-02-25 10:59:51.364 [http-nio-80-exec-4] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productList
2019-02-25 10:59:51.370 [http-nio-80-exec-4] DEBUG c.yun.product.dao.ProductDao.findProductRowByParam - ==>  Preparing: select count(*) from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 
2019-02-25 10:59:51.371 [http-nio-80-exec-4] DEBUG c.yun.product.dao.ProductDao.findProductRowByParam - ==> Parameters: 
2019-02-25 10:59:51.372 [http-nio-80-exec-4] DEBUG c.yun.product.dao.ProductDao.findProductRowByParam - <==      Total: 1
2019-02-25 10:59:51.376 [http-nio-80-exec-4] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 order by prod_id limit ?,? 
2019-02-25 10:59:51.377 [http-nio-80-exec-4] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==> Parameters: 0(Integer), 5(Integer)
2019-02-25 10:59:51.379 [http-nio-80-exec-4] DEBUG com.yun.product.dao.ProductDao.findProductByParam - <==      Total: 5
2019-02-25 10:59:51.379 [http-nio-80-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-02-25 10:59:51.379 [http-nio-80-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 2(Integer)
2019-02-25 10:59:51.381 [http-nio-80-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 2
2019-02-25 10:59:51.382 [http-nio-80-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-02-25 10:59:51.382 [http-nio-80-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 3(Integer)
2019-02-25 10:59:51.383 [http-nio-80-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-02-25 10:59:51.383 [http-nio-80-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-02-25 10:59:51.383 [http-nio-80-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 4(Integer)
2019-02-25 10:59:51.384 [http-nio-80-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 2
2019-02-25 10:59:51.384 [http-nio-80-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-02-25 10:59:51.384 [http-nio-80-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 5(Integer)
2019-02-25 10:59:51.386 [http-nio-80-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 2
2019-02-25 10:59:51.386 [http-nio-80-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-02-25 10:59:51.387 [http-nio-80-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 6(Integer)
2019-02-25 10:59:51.389 [http-nio-80-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-02-25 10:59:51.511 [http-nio-80-exec-3] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/js/jquery.min.map
2019-02-25 10:59:51.518 [http-nio-80-exec-6] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/css/bootstrap.min.css.map
2019-02-25 10:59:53.229 [http-nio-80-exec-1] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/prodParamList
2019-02-25 10:59:53.231 [http-nio-80-exec-1] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-02-25 10:59:53.232 [http-nio-80-exec-1] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 2(Integer)
2019-02-25 10:59:53.233 [http-nio-80-exec-1] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 2
2019-02-25 11:00:24.286 [http-nio-80-exec-2] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productList
2019-02-25 11:00:24.288 [http-nio-80-exec-2] DEBUG c.yun.product.dao.ProductDao.findProductRowByParam - ==>  Preparing: select count(*) from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 
2019-02-25 11:00:24.289 [http-nio-80-exec-2] DEBUG c.yun.product.dao.ProductDao.findProductRowByParam - ==> Parameters: 
2019-02-25 11:00:24.290 [http-nio-80-exec-2] DEBUG c.yun.product.dao.ProductDao.findProductRowByParam - <==      Total: 1
2019-02-25 11:00:24.295 [http-nio-80-exec-2] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 order by prod_id limit ?,? 
2019-02-25 11:00:24.295 [http-nio-80-exec-2] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==> Parameters: 0(Integer), 5(Integer)
2019-02-25 11:00:24.298 [http-nio-80-exec-2] DEBUG com.yun.product.dao.ProductDao.findProductByParam - <==      Total: 5
2019-02-25 11:00:24.299 [http-nio-80-exec-2] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-02-25 11:00:24.299 [http-nio-80-exec-2] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 2(Integer)
2019-02-25 11:00:24.303 [http-nio-80-exec-2] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 2
2019-02-25 11:00:24.304 [http-nio-80-exec-2] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-02-25 11:00:24.304 [http-nio-80-exec-2] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 3(Integer)
2019-02-25 11:00:24.305 [http-nio-80-exec-2] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-02-25 11:00:24.305 [http-nio-80-exec-2] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-02-25 11:00:24.305 [http-nio-80-exec-2] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 4(Integer)
2019-02-25 11:00:24.306 [http-nio-80-exec-2] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 2
2019-02-25 11:00:24.307 [http-nio-80-exec-2] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-02-25 11:00:24.307 [http-nio-80-exec-2] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 5(Integer)
2019-02-25 11:00:24.308 [http-nio-80-exec-2] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 2
2019-02-25 11:00:24.308 [http-nio-80-exec-2] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-02-25 11:00:24.309 [http-nio-80-exec-2] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 6(Integer)
2019-02-25 11:00:24.310 [http-nio-80-exec-2] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-02-25 11:00:24.596 [http-nio-80-exec-7] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/js/jquery.min.map
2019-02-25 11:00:24.607 [http-nio-80-exec-7] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/css/bootstrap.min.css.map
2019-02-25 11:00:26.533 [http-nio-80-exec-8] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/prodParamList
2019-02-25 11:00:26.536 [http-nio-80-exec-8] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-02-25 11:00:26.537 [http-nio-80-exec-8] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 2(Integer)
2019-02-25 11:00:26.538 [http-nio-80-exec-8] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 2
2019-02-25 11:00:34.180 [http-nio-80-exec-5] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/prodParamDelete
2019-02-25 11:00:34.184 [http-nio-80-exec-5] DEBUG c.y.p.d.ProductParameterDao.deleteProductParameter - ==>  Preparing: delete from product_parameter where prod_param_id=? 
2019-02-25 11:00:34.184 [http-nio-80-exec-5] DEBUG c.y.p.d.ProductParameterDao.deleteProductParameter - ==> Parameters: 8(Integer)
2019-02-25 11:00:34.193 [http-nio-80-exec-5] DEBUG c.y.p.d.ProductParameterDao.deleteProductParameter - <==    Updates: 1
2019-02-25 11:00:34.235 [http-nio-80-exec-10] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productList
2019-02-25 11:00:34.236 [http-nio-80-exec-10] DEBUG c.yun.product.dao.ProductDao.findProductRowByParam - ==>  Preparing: select count(*) from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 
2019-02-25 11:00:34.236 [http-nio-80-exec-10] DEBUG c.yun.product.dao.ProductDao.findProductRowByParam - ==> Parameters: 
2019-02-25 11:00:34.236 [http-nio-80-exec-10] DEBUG c.yun.product.dao.ProductDao.findProductRowByParam - <==      Total: 1
2019-02-25 11:00:34.239 [http-nio-80-exec-10] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 order by prod_id limit ?,? 
2019-02-25 11:00:34.239 [http-nio-80-exec-10] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==> Parameters: 0(Integer), 5(Integer)
2019-02-25 11:00:34.241 [http-nio-80-exec-10] DEBUG com.yun.product.dao.ProductDao.findProductByParam - <==      Total: 5
2019-02-25 11:00:34.241 [http-nio-80-exec-10] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-02-25 11:00:34.241 [http-nio-80-exec-10] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 2(Integer)
2019-02-25 11:00:34.242 [http-nio-80-exec-10] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-02-25 11:00:34.242 [http-nio-80-exec-10] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-02-25 11:00:34.242 [http-nio-80-exec-10] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 3(Integer)
2019-02-25 11:00:34.243 [http-nio-80-exec-10] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-02-25 11:00:34.243 [http-nio-80-exec-10] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-02-25 11:00:34.244 [http-nio-80-exec-10] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 4(Integer)
2019-02-25 11:00:34.244 [http-nio-80-exec-10] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 2
2019-02-25 11:00:34.245 [http-nio-80-exec-10] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-02-25 11:00:34.245 [http-nio-80-exec-10] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 5(Integer)
2019-02-25 11:00:34.245 [http-nio-80-exec-10] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 2
2019-02-25 11:00:34.246 [http-nio-80-exec-10] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-02-25 11:00:34.246 [http-nio-80-exec-10] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 6(Integer)
2019-02-25 11:00:34.247 [http-nio-80-exec-10] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-02-25 11:00:34.381 [http-nio-80-exec-4] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/js/jquery.min.map
2019-02-25 11:00:34.386 [http-nio-80-exec-3] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/css/bootstrap.min.css.map
2019-02-25 11:00:37.607 [http-nio-80-exec-6] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/prodParamList
2019-02-25 11:00:37.611 [http-nio-80-exec-6] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-02-25 11:00:37.612 [http-nio-80-exec-6] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 2(Integer)
2019-02-25 11:00:37.613 [http-nio-80-exec-6] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-02-25 11:00:38.857 [http-nio-80-exec-1] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/prodParamPreAdd
2019-02-25 11:00:38.983 [http-nio-80-exec-2] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/js/jquery.min.map
2019-02-25 11:00:38.992 [http-nio-80-exec-7] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/css/bootstrap.min.css.map
2019-02-25 11:00:52.703 [http-nio-80-exec-8] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/prodParamSave
2019-02-25 11:00:52.707 [http-nio-80-exec-8] DEBUG c.y.p.d.ProductParameterDao.insertProductParameter - ==>  Preparing: insert into product_parameter(prod_param_name,prod_id) values(?,?) 
2019-02-25 11:00:52.707 [http-nio-80-exec-8] DEBUG c.y.p.d.ProductParameterDao.insertProductParameter - ==> Parameters: aaa(String), 2(Integer)
2019-02-25 11:00:52.747 [http-nio-80-exec-8] DEBUG c.y.p.d.ProductParameterDao.insertProductParameter - <==    Updates: 1
2019-02-25 11:00:52.748 [http-nio-80-exec-8] DEBUG c.y.p.d.ProductParameterDao.insertProductParameter - ==>  Preparing: insert into product_parameter(prod_param_name,prod_id) values(?,?) 
2019-02-25 11:00:52.748 [http-nio-80-exec-8] DEBUG c.y.p.d.ProductParameterDao.insertProductParameter - ==> Parameters: adasd(String), 2(Integer)
2019-02-25 11:00:52.750 [http-nio-80-exec-8] DEBUG c.y.p.d.ProductParameterDao.insertProductParameter - <==    Updates: 1
2019-02-25 11:00:52.750 [http-nio-80-exec-8] DEBUG c.y.p.d.ProductParameterDao.insertProductParameter - ==>  Preparing: insert into product_parameter(prod_param_name,prod_id) values(?,?) 
2019-02-25 11:00:52.750 [http-nio-80-exec-8] DEBUG c.y.p.d.ProductParameterDao.insertProductParameter - ==> Parameters: asdasd(String), 2(Integer)
2019-02-25 11:00:52.751 [http-nio-80-exec-8] DEBUG c.y.p.d.ProductParameterDao.insertProductParameter - <==    Updates: 1
2019-02-25 11:00:52.751 [http-nio-80-exec-8] DEBUG c.y.p.d.ProductParameterDao.insertProductParameter - ==>  Preparing: insert into product_parameter(prod_param_name,prod_id) values(?,?) 
2019-02-25 11:00:52.751 [http-nio-80-exec-8] DEBUG c.y.p.d.ProductParameterDao.insertProductParameter - ==> Parameters: asdasd(String), 2(Integer)
2019-02-25 11:00:52.752 [http-nio-80-exec-8] DEBUG c.y.p.d.ProductParameterDao.insertProductParameter - <==    Updates: 1
2019-02-25 11:00:52.752 [http-nio-80-exec-8] DEBUG c.y.p.d.ProductParameterDao.insertProductParameter - ==>  Preparing: insert into product_parameter(prod_param_name,prod_id) values(?,?) 
2019-02-25 11:00:52.753 [http-nio-80-exec-8] DEBUG c.y.p.d.ProductParameterDao.insertProductParameter - ==> Parameters: asdasd(String), 2(Integer)
2019-02-25 11:00:52.753 [http-nio-80-exec-8] DEBUG c.y.p.d.ProductParameterDao.insertProductParameter - <==    Updates: 1
2019-02-25 11:00:52.753 [http-nio-80-exec-8] DEBUG c.y.p.d.ProductParameterDao.insertProductParameter - ==>  Preparing: insert into product_parameter(prod_param_name,prod_id) values(?,?) 
2019-02-25 11:00:52.754 [http-nio-80-exec-8] DEBUG c.y.p.d.ProductParameterDao.insertProductParameter - ==> Parameters: asd(String), 2(Integer)
2019-02-25 11:00:52.754 [http-nio-80-exec-8] DEBUG c.y.p.d.ProductParameterDao.insertProductParameter - <==    Updates: 1
2019-02-25 11:00:52.857 [http-nio-80-exec-5] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productList
2019-02-25 11:00:52.858 [http-nio-80-exec-5] DEBUG c.yun.product.dao.ProductDao.findProductRowByParam - ==>  Preparing: select count(*) from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 
2019-02-25 11:00:52.858 [http-nio-80-exec-5] DEBUG c.yun.product.dao.ProductDao.findProductRowByParam - ==> Parameters: 
2019-02-25 11:00:52.859 [http-nio-80-exec-5] DEBUG c.yun.product.dao.ProductDao.findProductRowByParam - <==      Total: 1
2019-02-25 11:00:52.861 [http-nio-80-exec-5] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 order by prod_id limit ?,? 
2019-02-25 11:00:52.861 [http-nio-80-exec-5] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==> Parameters: 0(Integer), 5(Integer)
2019-02-25 11:00:52.862 [http-nio-80-exec-5] DEBUG com.yun.product.dao.ProductDao.findProductByParam - <==      Total: 5
2019-02-25 11:00:52.862 [http-nio-80-exec-5] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-02-25 11:00:52.862 [http-nio-80-exec-5] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 2(Integer)
2019-02-25 11:00:52.863 [http-nio-80-exec-5] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 7
2019-02-25 11:00:52.863 [http-nio-80-exec-5] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-02-25 11:00:52.863 [http-nio-80-exec-5] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 3(Integer)
2019-02-25 11:00:52.864 [http-nio-80-exec-5] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-02-25 11:00:52.864 [http-nio-80-exec-5] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-02-25 11:00:52.864 [http-nio-80-exec-5] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 4(Integer)
2019-02-25 11:00:52.865 [http-nio-80-exec-5] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 2
2019-02-25 11:00:52.865 [http-nio-80-exec-5] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-02-25 11:00:52.865 [http-nio-80-exec-5] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 5(Integer)
2019-02-25 11:00:52.866 [http-nio-80-exec-5] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 2
2019-02-25 11:00:52.867 [http-nio-80-exec-5] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-02-25 11:00:52.867 [http-nio-80-exec-5] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 6(Integer)
2019-02-25 11:00:52.868 [http-nio-80-exec-5] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-02-25 11:00:53.011 [http-nio-80-exec-10] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/js/jquery.min.map
2019-02-25 11:00:53.013 [http-nio-80-exec-4] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/css/bootstrap.min.css.map
2019-02-25 11:00:55.183 [http-nio-80-exec-3] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/prodParamList
2019-02-25 11:00:55.196 [http-nio-80-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-02-25 11:00:55.196 [http-nio-80-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 2(Integer)
2019-02-25 11:00:55.197 [http-nio-80-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 7
2019-02-25 11:01:26.730 [http-nio-80-exec-6] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/prodParamList
2019-02-25 11:01:26.734 [http-nio-80-exec-6] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-02-25 11:01:26.735 [http-nio-80-exec-6] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 2(Integer)
2019-02-25 11:01:26.736 [http-nio-80-exec-6] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 7
2019-02-25 11:01:37.452 [http-nio-80-exec-1] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productList
2019-02-25 11:01:37.460 [http-nio-80-exec-1] DEBUG c.yun.product.dao.ProductDao.findProductRowByParam - ==>  Preparing: select count(*) from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 
2019-02-25 11:01:37.461 [http-nio-80-exec-1] DEBUG c.yun.product.dao.ProductDao.findProductRowByParam - ==> Parameters: 
2019-02-25 11:01:37.463 [http-nio-80-exec-1] DEBUG c.yun.product.dao.ProductDao.findProductRowByParam - <==      Total: 1
2019-02-25 11:01:37.466 [http-nio-80-exec-1] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 order by prod_id limit ?,? 
2019-02-25 11:01:37.466 [http-nio-80-exec-1] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==> Parameters: 0(Integer), 5(Integer)
2019-02-25 11:01:37.467 [http-nio-80-exec-1] DEBUG com.yun.product.dao.ProductDao.findProductByParam - <==      Total: 5
2019-02-25 11:01:37.467 [http-nio-80-exec-1] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-02-25 11:01:37.467 [http-nio-80-exec-1] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 2(Integer)
2019-02-25 11:01:37.469 [http-nio-80-exec-1] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 7
2019-02-25 11:01:37.469 [http-nio-80-exec-1] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-02-25 11:01:37.469 [http-nio-80-exec-1] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 3(Integer)
2019-02-25 11:01:37.471 [http-nio-80-exec-1] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-02-25 11:01:37.471 [http-nio-80-exec-1] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-02-25 11:01:37.472 [http-nio-80-exec-1] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 4(Integer)
2019-02-25 11:01:37.472 [http-nio-80-exec-1] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 2
2019-02-25 11:01:37.472 [http-nio-80-exec-1] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-02-25 11:01:37.473 [http-nio-80-exec-1] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 5(Integer)
2019-02-25 11:01:37.473 [http-nio-80-exec-1] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 2
2019-02-25 11:01:37.473 [http-nio-80-exec-1] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-02-25 11:01:37.473 [http-nio-80-exec-1] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 6(Integer)
2019-02-25 11:01:37.474 [http-nio-80-exec-1] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-02-25 11:01:37.601 [http-nio-80-exec-2] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/js/jquery.min.map
2019-02-25 11:01:37.610 [http-nio-80-exec-7] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/css/bootstrap.min.css.map
2019-02-25 11:01:39.197 [http-nio-80-exec-9] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/prodParamList
2019-02-25 11:01:39.199 [http-nio-80-exec-9] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-02-25 11:01:39.199 [http-nio-80-exec-9] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 2(Integer)
2019-02-25 11:01:39.200 [http-nio-80-exec-9] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 7
2019-02-25 11:19:13.113 [http-nio-80-exec-10] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productList
2019-02-25 11:19:13.116 [http-nio-80-exec-10] DEBUG c.yun.product.dao.ProductDao.findProductRowByParam - ==>  Preparing: select count(*) from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 
2019-02-25 11:19:13.117 [http-nio-80-exec-10] DEBUG c.yun.product.dao.ProductDao.findProductRowByParam - ==> Parameters: 
2019-02-25 11:19:13.119 [http-nio-80-exec-10] DEBUG c.yun.product.dao.ProductDao.findProductRowByParam - <==      Total: 1
2019-02-25 11:19:13.124 [http-nio-80-exec-10] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 order by prod_id limit ?,? 
2019-02-25 11:19:13.124 [http-nio-80-exec-10] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==> Parameters: 0(Integer), 5(Integer)
2019-02-25 11:19:13.126 [http-nio-80-exec-10] DEBUG com.yun.product.dao.ProductDao.findProductByParam - <==      Total: 5
2019-02-25 11:19:13.126 [http-nio-80-exec-10] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-02-25 11:19:13.127 [http-nio-80-exec-10] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 2(Integer)
2019-02-25 11:19:13.132 [http-nio-80-exec-10] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 7
2019-02-25 11:19:13.133 [http-nio-80-exec-10] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-02-25 11:19:13.133 [http-nio-80-exec-10] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 3(Integer)
2019-02-25 11:19:13.134 [http-nio-80-exec-10] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-02-25 11:19:13.135 [http-nio-80-exec-10] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-02-25 11:19:13.135 [http-nio-80-exec-10] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 4(Integer)
2019-02-25 11:19:13.136 [http-nio-80-exec-10] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 2
2019-02-25 11:19:13.136 [http-nio-80-exec-10] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-02-25 11:19:13.137 [http-nio-80-exec-10] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 5(Integer)
2019-02-25 11:19:13.137 [http-nio-80-exec-10] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 2
2019-02-25 11:19:13.138 [http-nio-80-exec-10] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-02-25 11:19:13.138 [http-nio-80-exec-10] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 6(Integer)
2019-02-25 11:19:13.138 [http-nio-80-exec-10] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-02-25 11:19:13.304 [http-nio-80-exec-3] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/css/bootstrap.min.css.map
2019-02-25 11:19:13.317 [http-nio-80-exec-4] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/js/jquery.min.map
2019-02-25 11:19:14.687 [http-nio-80-exec-6] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/prodParamList
2019-02-25 11:19:14.689 [http-nio-80-exec-6] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where prod_id=? 
2019-02-25 11:19:14.689 [http-nio-80-exec-6] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 2(Integer)
2019-02-25 11:19:14.691 [http-nio-80-exec-6] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 7
2019-02-25 11:36:32.005 [main] INFO  com.yun.YunEbStockApplication - Starting YunEbStockApplication on USER-20181202BJ with PID 4876 (E:\workspace\yun-eb-stock\target\classes started by Administrator in E:\workspace\yun-eb-stock)
2019-02-25 11:36:32.009 [main] DEBUG com.yun.YunEbStockApplication - Running with Spring Boot v1.5.9.RELEASE, Spring v4.3.13.RELEASE
2019-02-25 11:36:32.010 [main] INFO  com.yun.YunEbStockApplication - No active profile set, falling back to default profiles: default
2019-02-25 11:36:32.294 [background-preinit] INFO  org.hibernate.validator.internal.util.Version - HV000001: Hibernate Validator 5.3.6.Final
2019-02-25 11:36:32.821 [main] INFO  o.s.b.c.e.AnnotationConfigEmbeddedWebApplicationContext - Refreshing org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@6a28ffa4: startup date [Mon Feb 25 11:36:32 CST 2019]; root of context hierarchy
2019-02-25 11:36:34.761 [main] INFO  o.s.b.c.e.tomcat.TomcatEmbeddedServletContainer - Tomcat initialized with port(s): 80 (http)
2019-02-25 11:36:34.774 [main] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2019-02-25 11:36:34.775 [main] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet Engine: Apache Tomcat/8.5.23
2019-02-25 11:36:34.913 [localhost-startStop-1] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2019-02-25 11:36:34.913 [localhost-startStop-1] INFO  org.springframework.web.context.ContextLoader - Root WebApplicationContext: initialization completed in 2092 ms
2019-02-25 11:36:35.147 [localhost-startStop-1] INFO  o.s.boot.web.servlet.FilterRegistrationBean - Mapping filter: 'characterEncodingFilter' to: [/*]
2019-02-25 11:36:35.148 [localhost-startStop-1] INFO  o.s.boot.web.servlet.FilterRegistrationBean - Mapping filter: 'hiddenHttpMethodFilter' to: [/*]
2019-02-25 11:36:35.149 [localhost-startStop-1] INFO  o.s.boot.web.servlet.FilterRegistrationBean - Mapping filter: 'httpPutFormContentFilter' to: [/*]
2019-02-25 11:36:35.149 [localhost-startStop-1] INFO  o.s.boot.web.servlet.FilterRegistrationBean - Mapping filter: 'requestContextFilter' to: [/*]
2019-02-25 11:36:35.150 [localhost-startStop-1] INFO  o.s.boot.web.servlet.FilterRegistrationBean - Mapping filter: 'loginFilter' to urls: [/*]
2019-02-25 11:36:35.150 [localhost-startStop-1] INFO  o.s.boot.web.servlet.ServletRegistrationBean - Mapping servlet: 'dispatcherServlet' to [/]
2019-02-25 11:36:36.148 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerAdapter - Looking for @ControllerAdvice: org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@6a28ffa4: startup date [Mon Feb 25 11:36:32 CST 2019]; root of context hierarchy
2019-02-25 11:36:36.219 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productList]}" onto public java.lang.String com.yun.product.controller.ProductController.productList(org.springframework.ui.Model,java.lang.String,java.lang.String,java.lang.String,java.lang.String)
2019-02-25 11:36:36.220 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productPreAdd]}" onto public java.lang.String com.yun.product.controller.ProductController.productPreAdd()
2019-02-25 11:36:36.221 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productSave]}" onto public java.lang.String com.yun.product.controller.ProductController.productSave(com.yun.product.model.Product)
2019-02-25 11:36:36.221 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productDelete]}" onto public java.lang.String com.yun.product.controller.ProductController.productDelete(int)
2019-02-25 11:36:36.221 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productPreUpdate]}" onto public java.lang.String com.yun.product.controller.ProductController.productPreUpdate(int,org.springframework.ui.Model)
2019-02-25 11:36:36.221 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productUpdate]}" onto public java.lang.String com.yun.product.controller.ProductController.productUpdate(com.yun.product.model.Product)
2019-02-25 11:36:36.222 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productListForAutoComplete]}" onto public java.util.List<com.yun.product.model.Product> com.yun.product.controller.ProductController.productListForAutoComplete(java.lang.String)
2019-02-25 11:36:36.222 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productListForStock]}" onto public java.util.List<com.yun.product.model.Product> com.yun.product.controller.ProductController.productListForStock()
2019-02-25 11:36:36.223 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productListForTrade]}" onto public java.util.List<com.yun.product.model.Product> com.yun.product.controller.ProductController.productListForTrade(java.lang.String)
2019-02-25 11:36:36.225 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/prodParamDelete]}" onto public java.lang.String com.yun.product.controller.ProductParamController.prodParamDelete(int)
2019-02-25 11:36:36.225 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/prodParamPreAdd]}" onto public java.lang.String com.yun.product.controller.ProductParamController.prodParamPreAdd(int,org.springframework.ui.Model)
2019-02-25 11:36:36.225 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/prodParamSave]}" onto public java.lang.String com.yun.product.controller.ProductParamController.prodParamSave(int,java.lang.String[])
2019-02-25 11:36:36.226 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/prodParamList]}" onto public java.lang.String com.yun.product.controller.ProductParamController.prodParamList(int)
2019-02-25 11:36:36.226 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/prodParamDeleteBat]}" onto public void com.yun.product.controller.ProductParamController.prodParamDeleteBat(java.lang.String[],javax.servlet.http.HttpServletResponse) throws java.io.IOException
2019-02-25 11:36:36.230 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeTree]}" onto public java.util.List<com.yun.product.model.ProductType> com.yun.product.controller.ProductTypeController.productTypeTree()
2019-02-25 11:36:36.231 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeList]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeList(org.springframework.ui.Model)
2019-02-25 11:36:36.231 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeEdit]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeEdit()
2019-02-25 11:36:36.231 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeSave]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeSave(com.yun.product.model.ProductType)
2019-02-25 11:36:36.231 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeUpdate]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeUpdate(java.lang.Integer,org.springframework.ui.Model)
2019-02-25 11:36:36.231 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeUpdateSave]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeUpdateSave(com.yun.product.model.ProductType)
2019-02-25 11:36:36.232 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeDelete]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeDelete(java.lang.Integer,javax.servlet.http.HttpServletResponse) throws java.io.IOException
2019-02-25 11:36:36.233 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockReport]}" onto public java.lang.String com.yun.report.controller.ProductStockReportController.productStockReport(java.lang.String,java.lang.String,java.lang.String,org.springframework.ui.Model)
2019-02-25 11:36:36.233 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveStockChange]}" onto public java.lang.String com.yun.report.controller.ProductStockReportController.productReceiveStockChange(java.lang.String,java.lang.String,java.lang.String,java.lang.String,org.springframework.ui.Model)
2019-02-25 11:36:36.233 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productCurrentStockChange]}" onto public java.lang.String com.yun.report.controller.ProductStockReportController.productCurrentStockChange(java.lang.String,java.lang.String,java.lang.String,java.lang.String,org.springframework.ui.Model)
2019-02-25 11:36:36.234 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productSaleCalcQuery]}" onto public java.lang.String com.yun.report.controller.ProductStockReportController.productSaleCalcQuery(java.lang.String,java.lang.String,java.lang.String,java.lang.String)
2019-02-25 11:36:36.234 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productSaleTop]}" onto public java.lang.String com.yun.report.controller.ProductStockReportController.productSaleTop(java.lang.String,java.lang.String,java.lang.String,java.lang.String,org.springframework.ui.Model)
2019-02-25 11:36:36.234 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productSaleCalc]}" onto public java.lang.String com.yun.report.controller.ProductStockReportController.productSaleCalc()
2019-02-25 11:36:36.235 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveStockList]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveStockController.productReceiveStocklist(java.lang.String,java.lang.String,org.springframework.ui.Model)
2019-02-25 11:36:36.236 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveStockPreAdd]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveStockController.productReceiveStockPreAdd()
2019-02-25 11:36:36.236 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveStockSave]}" onto public void com.yun.stock.controller.ProductReceiveStockController.productReceiveStockSave(com.yun.stock.model.ProductReceiveStock,javax.servlet.http.HttpServletResponse) throws java.io.IOException
2019-02-25 11:36:36.236 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveStockDelete]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveStockController.productReceiveStockDelete(int)
2019-02-25 11:36:36.236 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveStockPreUpdate]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveStockController.productReceiveStockPreUpdate(int,org.springframework.ui.Model)
2019-02-25 11:36:36.237 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveStockUpdate]}" onto public void com.yun.stock.controller.ProductReceiveStockController.productReceiveStockUpdate(com.yun.stock.model.ProductReceiveStock,javax.servlet.http.HttpServletResponse) throws java.io.IOException
2019-02-25 11:36:36.238 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveStockToCurrentStock]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveTradeController.productReceiveStockToCurrentStock(int,org.springframework.ui.Model)
2019-02-25 11:36:36.238 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveRejectSave]}" onto public void com.yun.stock.controller.ProductReceiveTradeController.receiveRejectSave(com.yun.stock.model.ProductReceiveTrade,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse) throws java.io.IOException
2019-02-25 11:36:36.238 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveToCurrentSave]}" onto public void com.yun.stock.controller.ProductReceiveTradeController.productReceiveToCurrentSave(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse) throws java.lang.Exception
2019-02-25 11:36:36.238 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveIn]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveTradeController.receiveIn(org.springframework.ui.Model)
2019-02-25 11:36:36.238 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveInSave]}" onto public void com.yun.stock.controller.ProductReceiveTradeController.receiveInSave(com.yun.stock.model.ProductReceiveTrade,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse) throws java.io.IOException
2019-02-25 11:36:36.239 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveReject]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveTradeController.receiveReject(org.springframework.ui.Model)
2019-02-25 11:36:36.240 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockSave]}" onto public void com.yun.stock.controller.ProductStockController.productStockSave(com.yun.stock.model.ProductStock,javax.servlet.http.HttpServletResponse) throws java.io.IOException
2019-02-25 11:36:36.240 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockList]}" onto public java.lang.String com.yun.stock.controller.ProductStockController.productStocklist(java.lang.String,java.lang.String,org.springframework.ui.Model)
2019-02-25 11:36:36.240 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockPreAdd]}" onto public java.lang.String com.yun.stock.controller.ProductStockController.productStockPreAdd()
2019-02-25 11:36:36.241 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockDelete]}" onto public java.lang.String com.yun.stock.controller.ProductStockController.productStockDelete(int)
2019-02-25 11:36:36.241 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockPreUpdate]}" onto public java.lang.String com.yun.stock.controller.ProductStockController.productStockPreUpdate(int,org.springframework.ui.Model)
2019-02-25 11:36:36.242 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockUpdate]}" onto public void com.yun.stock.controller.ProductStockController.productStockUpdate(com.yun.stock.model.ProductStock,javax.servlet.http.HttpServletResponse) throws java.io.IOException
2019-02-25 11:36:36.243 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productCurrentOut]}" onto public java.lang.String com.yun.stock.controller.ProductTradeController.receiveReject(org.springframework.ui.Model)
2019-02-25 11:36:36.243 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productCurrentIn]}" onto public java.lang.String com.yun.stock.controller.ProductTradeController.productCurrentIn(org.springframework.ui.Model)
2019-02-25 11:36:36.244 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productCurrentInSave]}" onto public void com.yun.stock.controller.ProductTradeController.productCurrentInSave(com.yun.stock.model.ProductTrade,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse) throws java.io.IOException
2019-02-25 11:36:36.244 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productCurrentOutSave]}" onto public void com.yun.stock.controller.ProductTradeController.productCurrentOutSave(com.yun.stock.model.ProductTrade,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse) throws java.io.IOException
2019-02-25 11:36:36.245 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/main]}" onto public java.lang.String com.yun.user.controller.MainController.main()
2019-02-25 11:36:36.246 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/sysBak]}" onto public void com.yun.user.controller.SysBakController.sysBak(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
2019-02-25 11:36:36.246 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/deleteBakFile]}" onto public java.lang.String com.yun.user.controller.SysBakController.deleteBakFile(java.lang.String)
2019-02-25 11:36:36.246 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/sysBakList]}" onto public java.lang.String com.yun.user.controller.SysBakController.sysBakList(org.springframework.ui.Model)
2019-02-25 11:36:36.247 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/userList]}" onto public java.lang.String com.yun.user.controller.UserController.userList(org.springframework.ui.Model)
2019-02-25 11:36:36.247 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/userEdit]}" onto public java.lang.String com.yun.user.controller.UserController.userEdit()
2019-02-25 11:36:36.247 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/login]}" onto public void com.yun.user.controller.UserController.login(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse) throws java.io.IOException
2019-02-25 11:36:36.248 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/deleteUserInfo]}" onto public java.lang.String com.yun.user.controller.UserController.userDelete(int)
2019-02-25 11:36:36.248 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/userSave]}" onto public java.lang.String com.yun.user.controller.UserController.userSave(com.yun.user.model.UserInfo)
2019-02-25 11:36:36.251 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/error]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> org.springframework.boot.autoconfigure.web.BasicErrorController.error(javax.servlet.http.HttpServletRequest)
2019-02-25 11:36:36.251 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/error],produces=[text/html]}" onto public org.springframework.web.servlet.ModelAndView org.springframework.boot.autoconfigure.web.BasicErrorController.errorHtml(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
2019-02-25 11:36:36.286 [main] WARN  o.s.w.servlet.resource.ResourceHttpRequestHandler - Locations list is empty. No resources will be served unless a custom ResourceResolver is configured as an alternative to PathResourceResolver.
2019-02-25 11:36:36.296 [main] INFO  o.s.web.servlet.handler.SimpleUrlHandlerMapping - Mapped URL path [/dbbak] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-02-25 11:36:36.296 [main] INFO  o.s.web.servlet.handler.SimpleUrlHandlerMapping - Mapped URL path [/webjars/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-02-25 11:36:36.296 [main] INFO  o.s.web.servlet.handler.SimpleUrlHandlerMapping - Mapped URL path [/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-02-25 11:36:36.341 [main] INFO  o.s.web.servlet.handler.SimpleUrlHandlerMapping - Mapped URL path [/**/favicon.ico] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-02-25 11:36:36.705 [main] INFO  o.s.b.a.w.WebMvcAutoConfiguration$WelcomePageHandlerMapping - Adding welcome page: class path resource [static/index.html]
2019-02-25 11:36:36.966 [main] INFO  o.s.jmx.export.annotation.AnnotationMBeanExporter - Registering beans for JMX exposure on startup
2019-02-25 11:36:36.993 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-80"]
2019-02-25 11:36:37.005 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-80"]
2019-02-25 11:36:37.021 [main] INFO  org.apache.tomcat.util.net.NioSelectorPool - Using a shared selector for servlet write/read
2019-02-25 11:36:37.214 [main] INFO  o.s.b.c.e.tomcat.TomcatEmbeddedServletContainer - Tomcat started on port(s): 80 (http)
2019-02-25 11:36:37.219 [main] INFO  com.yun.YunEbStockApplication - Started YunEbStockApplication in 5.707 seconds (JVM running for 7.376)
2019-02-25 11:37:06.355 [main] INFO  com.yun.YunEbStockApplication - Starting YunEbStockApplication on USER-20181202BJ with PID 6632 (E:\workspace\yun-eb-stock\target\classes started by Administrator in E:\workspace\yun-eb-stock)
2019-02-25 11:37:06.359 [main] DEBUG com.yun.YunEbStockApplication - Running with Spring Boot v1.5.9.RELEASE, Spring v4.3.13.RELEASE
2019-02-25 11:37:06.360 [main] INFO  com.yun.YunEbStockApplication - No active profile set, falling back to default profiles: default
2019-02-25 11:37:06.749 [main] INFO  o.s.b.c.e.AnnotationConfigEmbeddedWebApplicationContext - Refreshing org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@6a28ffa4: startup date [Mon Feb 25 11:37:06 CST 2019]; root of context hierarchy
2019-02-25 11:37:06.934 [background-preinit] INFO  org.hibernate.validator.internal.util.Version - HV000001: Hibernate Validator 5.3.6.Final
2019-02-25 11:37:09.045 [main] INFO  o.s.b.c.e.tomcat.TomcatEmbeddedServletContainer - Tomcat initialized with port(s): 80 (http)
2019-02-25 11:37:09.055 [main] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2019-02-25 11:37:09.056 [main] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet Engine: Apache Tomcat/8.5.23
2019-02-25 11:37:09.201 [localhost-startStop-1] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2019-02-25 11:37:09.201 [localhost-startStop-1] INFO  org.springframework.web.context.ContextLoader - Root WebApplicationContext: initialization completed in 2453 ms
2019-02-25 11:37:09.375 [localhost-startStop-1] INFO  o.s.boot.web.servlet.FilterRegistrationBean - Mapping filter: 'characterEncodingFilter' to: [/*]
2019-02-25 11:37:09.376 [localhost-startStop-1] INFO  o.s.boot.web.servlet.FilterRegistrationBean - Mapping filter: 'hiddenHttpMethodFilter' to: [/*]
2019-02-25 11:37:09.376 [localhost-startStop-1] INFO  o.s.boot.web.servlet.FilterRegistrationBean - Mapping filter: 'httpPutFormContentFilter' to: [/*]
2019-02-25 11:37:09.377 [localhost-startStop-1] INFO  o.s.boot.web.servlet.FilterRegistrationBean - Mapping filter: 'requestContextFilter' to: [/*]
2019-02-25 11:37:09.377 [localhost-startStop-1] INFO  o.s.boot.web.servlet.FilterRegistrationBean - Mapping filter: 'loginFilter' to urls: [/*]
2019-02-25 11:37:09.377 [localhost-startStop-1] INFO  o.s.boot.web.servlet.ServletRegistrationBean - Mapping servlet: 'dispatcherServlet' to [/]
2019-02-25 11:37:10.336 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerAdapter - Looking for @ControllerAdvice: org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@6a28ffa4: startup date [Mon Feb 25 11:37:06 CST 2019]; root of context hierarchy
2019-02-25 11:37:10.397 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productList]}" onto public java.lang.String com.yun.product.controller.ProductController.productList(org.springframework.ui.Model,java.lang.String,java.lang.String,java.lang.String,java.lang.String)
2019-02-25 11:37:10.398 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productPreAdd]}" onto public java.lang.String com.yun.product.controller.ProductController.productPreAdd()
2019-02-25 11:37:10.398 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productSave]}" onto public java.lang.String com.yun.product.controller.ProductController.productSave(com.yun.product.model.Product)
2019-02-25 11:37:10.399 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productDelete]}" onto public java.lang.String com.yun.product.controller.ProductController.productDelete(int)
2019-02-25 11:37:10.399 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productPreUpdate]}" onto public java.lang.String com.yun.product.controller.ProductController.productPreUpdate(int,org.springframework.ui.Model)
2019-02-25 11:37:10.399 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productUpdate]}" onto public java.lang.String com.yun.product.controller.ProductController.productUpdate(com.yun.product.model.Product)
2019-02-25 11:37:10.400 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productListForAutoComplete]}" onto public java.util.List<com.yun.product.model.Product> com.yun.product.controller.ProductController.productListForAutoComplete(java.lang.String)
2019-02-25 11:37:10.400 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productListForStock]}" onto public java.util.List<com.yun.product.model.Product> com.yun.product.controller.ProductController.productListForStock()
2019-02-25 11:37:10.400 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productListForTrade]}" onto public java.util.List<com.yun.product.model.Product> com.yun.product.controller.ProductController.productListForTrade(java.lang.String)
2019-02-25 11:37:10.401 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/prodParamDelete]}" onto public java.lang.String com.yun.product.controller.ProductParamController.prodParamDelete(int)
2019-02-25 11:37:10.402 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/prodParamPreAdd]}" onto public java.lang.String com.yun.product.controller.ProductParamController.prodParamPreAdd(int,org.springframework.ui.Model)
2019-02-25 11:37:10.402 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/prodParamSave]}" onto public java.lang.String com.yun.product.controller.ProductParamController.prodParamSave(int,java.lang.String[])
2019-02-25 11:37:10.402 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/prodParamList]}" onto public java.lang.String com.yun.product.controller.ProductParamController.prodParamList(int)
2019-02-25 11:37:10.402 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/prodParamDeleteBat]}" onto public void com.yun.product.controller.ProductParamController.prodParamDeleteBat(java.lang.String[],javax.servlet.http.HttpServletResponse) throws java.io.IOException
2019-02-25 11:37:10.406 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeTree]}" onto public java.util.List<com.yun.product.model.ProductType> com.yun.product.controller.ProductTypeController.productTypeTree()
2019-02-25 11:37:10.406 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeList]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeList(org.springframework.ui.Model)
2019-02-25 11:37:10.407 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeEdit]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeEdit()
2019-02-25 11:37:10.407 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeSave]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeSave(com.yun.product.model.ProductType)
2019-02-25 11:37:10.407 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeUpdate]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeUpdate(java.lang.Integer,org.springframework.ui.Model)
2019-02-25 11:37:10.408 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeUpdateSave]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeUpdateSave(com.yun.product.model.ProductType)
2019-02-25 11:37:10.408 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeDelete]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeDelete(java.lang.Integer,javax.servlet.http.HttpServletResponse) throws java.io.IOException
2019-02-25 11:37:10.409 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productSaleTop]}" onto public java.lang.String com.yun.report.controller.ProductStockReportController.productSaleTop(java.lang.String,java.lang.String,java.lang.String,java.lang.String,org.springframework.ui.Model)
2019-02-25 11:37:10.410 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productSaleCalc]}" onto public java.lang.String com.yun.report.controller.ProductStockReportController.productSaleCalc()
2019-02-25 11:37:10.410 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockReport]}" onto public java.lang.String com.yun.report.controller.ProductStockReportController.productStockReport(java.lang.String,java.lang.String,java.lang.String,org.springframework.ui.Model)
2019-02-25 11:37:10.411 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveStockChange]}" onto public java.lang.String com.yun.report.controller.ProductStockReportController.productReceiveStockChange(java.lang.String,java.lang.String,java.lang.String,java.lang.String,org.springframework.ui.Model)
2019-02-25 11:37:10.411 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productCurrentStockChange]}" onto public java.lang.String com.yun.report.controller.ProductStockReportController.productCurrentStockChange(java.lang.String,java.lang.String,java.lang.String,java.lang.String,org.springframework.ui.Model)
2019-02-25 11:37:10.411 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productSaleCalcQuery]}" onto public java.lang.String com.yun.report.controller.ProductStockReportController.productSaleCalcQuery(java.lang.String,java.lang.String,java.lang.String,java.lang.String)
2019-02-25 11:37:10.412 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveStockList]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveStockController.productReceiveStocklist(java.lang.String,java.lang.String,org.springframework.ui.Model)
2019-02-25 11:37:10.413 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveStockPreAdd]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveStockController.productReceiveStockPreAdd()
2019-02-25 11:37:10.413 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveStockSave]}" onto public void com.yun.stock.controller.ProductReceiveStockController.productReceiveStockSave(com.yun.stock.model.ProductReceiveStock,javax.servlet.http.HttpServletResponse) throws java.io.IOException
2019-02-25 11:37:10.414 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveStockDelete]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveStockController.productReceiveStockDelete(int)
2019-02-25 11:37:10.414 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveStockPreUpdate]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveStockController.productReceiveStockPreUpdate(int,org.springframework.ui.Model)
2019-02-25 11:37:10.414 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveStockUpdate]}" onto public void com.yun.stock.controller.ProductReceiveStockController.productReceiveStockUpdate(com.yun.stock.model.ProductReceiveStock,javax.servlet.http.HttpServletResponse) throws java.io.IOException
2019-02-25 11:37:10.416 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveStockToCurrentStock]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveTradeController.productReceiveStockToCurrentStock(int,org.springframework.ui.Model)
2019-02-25 11:37:10.417 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveIn]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveTradeController.receiveIn(org.springframework.ui.Model)
2019-02-25 11:37:10.417 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveInSave]}" onto public void com.yun.stock.controller.ProductReceiveTradeController.receiveInSave(com.yun.stock.model.ProductReceiveTrade,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse) throws java.io.IOException
2019-02-25 11:37:10.417 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveReject]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveTradeController.receiveReject(org.springframework.ui.Model)
2019-02-25 11:37:10.418 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveRejectSave]}" onto public void com.yun.stock.controller.ProductReceiveTradeController.receiveRejectSave(com.yun.stock.model.ProductReceiveTrade,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse) throws java.io.IOException
2019-02-25 11:37:10.418 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveToCurrentSave]}" onto public void com.yun.stock.controller.ProductReceiveTradeController.productReceiveToCurrentSave(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse) throws java.lang.Exception
2019-02-25 11:37:10.420 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockSave]}" onto public void com.yun.stock.controller.ProductStockController.productStockSave(com.yun.stock.model.ProductStock,javax.servlet.http.HttpServletResponse) throws java.io.IOException
2019-02-25 11:37:10.420 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockList]}" onto public java.lang.String com.yun.stock.controller.ProductStockController.productStocklist(java.lang.String,java.lang.String,org.springframework.ui.Model)
2019-02-25 11:37:10.421 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockPreAdd]}" onto public java.lang.String com.yun.stock.controller.ProductStockController.productStockPreAdd()
2019-02-25 11:37:10.421 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockDelete]}" onto public java.lang.String com.yun.stock.controller.ProductStockController.productStockDelete(int)
2019-02-25 11:37:10.421 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockPreUpdate]}" onto public java.lang.String com.yun.stock.controller.ProductStockController.productStockPreUpdate(int,org.springframework.ui.Model)
2019-02-25 11:37:10.421 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockUpdate]}" onto public void com.yun.stock.controller.ProductStockController.productStockUpdate(com.yun.stock.model.ProductStock,javax.servlet.http.HttpServletResponse) throws java.io.IOException
2019-02-25 11:37:10.422 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productCurrentOut]}" onto public java.lang.String com.yun.stock.controller.ProductTradeController.receiveReject(org.springframework.ui.Model)
2019-02-25 11:37:10.422 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productCurrentIn]}" onto public java.lang.String com.yun.stock.controller.ProductTradeController.productCurrentIn(org.springframework.ui.Model)
2019-02-25 11:37:10.423 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productCurrentInSave]}" onto public void com.yun.stock.controller.ProductTradeController.productCurrentInSave(com.yun.stock.model.ProductTrade,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse) throws java.io.IOException
2019-02-25 11:37:10.423 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productCurrentOutSave]}" onto public void com.yun.stock.controller.ProductTradeController.productCurrentOutSave(com.yun.stock.model.ProductTrade,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse) throws java.io.IOException
2019-02-25 11:37:10.424 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/main]}" onto public java.lang.String com.yun.user.controller.MainController.main()
2019-02-25 11:37:10.424 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/sysBak]}" onto public void com.yun.user.controller.SysBakController.sysBak(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
2019-02-25 11:37:10.424 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/deleteBakFile]}" onto public java.lang.String com.yun.user.controller.SysBakController.deleteBakFile(java.lang.String)
2019-02-25 11:37:10.425 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/sysBakList]}" onto public java.lang.String com.yun.user.controller.SysBakController.sysBakList(org.springframework.ui.Model)
2019-02-25 11:37:10.425 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/userList]}" onto public java.lang.String com.yun.user.controller.UserController.userList(org.springframework.ui.Model)
2019-02-25 11:37:10.425 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/userEdit]}" onto public java.lang.String com.yun.user.controller.UserController.userEdit()
2019-02-25 11:37:10.426 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/login]}" onto public void com.yun.user.controller.UserController.login(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse) throws java.io.IOException
2019-02-25 11:37:10.426 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/deleteUserInfo]}" onto public java.lang.String com.yun.user.controller.UserController.userDelete(int)
2019-02-25 11:37:10.426 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/userSave]}" onto public java.lang.String com.yun.user.controller.UserController.userSave(com.yun.user.model.UserInfo)
2019-02-25 11:37:10.429 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/error]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> org.springframework.boot.autoconfigure.web.BasicErrorController.error(javax.servlet.http.HttpServletRequest)
2019-02-25 11:37:10.430 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/error],produces=[text/html]}" onto public org.springframework.web.servlet.ModelAndView org.springframework.boot.autoconfigure.web.BasicErrorController.errorHtml(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
2019-02-25 11:37:10.460 [main] WARN  o.s.w.servlet.resource.ResourceHttpRequestHandler - Locations list is empty. No resources will be served unless a custom ResourceResolver is configured as an alternative to PathResourceResolver.
2019-02-25 11:37:10.471 [main] INFO  o.s.web.servlet.handler.SimpleUrlHandlerMapping - Mapped URL path [/dbbak] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-02-25 11:37:10.471 [main] INFO  o.s.web.servlet.handler.SimpleUrlHandlerMapping - Mapped URL path [/webjars/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-02-25 11:37:10.471 [main] INFO  o.s.web.servlet.handler.SimpleUrlHandlerMapping - Mapped URL path [/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-02-25 11:37:10.518 [main] INFO  o.s.web.servlet.handler.SimpleUrlHandlerMapping - Mapped URL path [/**/favicon.ico] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-02-25 11:37:10.863 [main] INFO  o.s.b.a.w.WebMvcAutoConfiguration$WelcomePageHandlerMapping - Adding welcome page: class path resource [static/index.html]
2019-02-25 11:37:11.171 [main] INFO  o.s.jmx.export.annotation.AnnotationMBeanExporter - Registering beans for JMX exposure on startup
2019-02-25 11:37:11.200 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-80"]
2019-02-25 11:37:11.213 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-80"]
2019-02-25 11:37:11.447 [main] INFO  org.apache.tomcat.util.net.NioSelectorPool - Using a shared selector for servlet write/read
2019-02-25 11:37:11.470 [main] INFO  o.s.b.c.e.tomcat.TomcatEmbeddedServletContainer - Tomcat started on port(s): 80 (http)
2019-02-25 11:37:11.479 [main] INFO  com.yun.YunEbStockApplication - Started YunEbStockApplication in 5.73 seconds (JVM running for 7.226)
2019-02-25 11:37:23.884 [http-nio-80-exec-1] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring FrameworkServlet 'dispatcherServlet'
2019-02-25 11:37:23.885 [http-nio-80-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - FrameworkServlet 'dispatcherServlet': initialization started
2019-02-25 11:37:23.918 [http-nio-80-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - FrameworkServlet 'dispatcherServlet': initialization completed in 33 ms
2019-02-25 11:37:23.930 [http-nio-80-exec-1] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/main
2019-02-25 11:37:25.560 [http-nio-80-exec-2] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/js/jquery.min.map
2019-02-25 11:37:25.571 [http-nio-80-exec-3] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/css/bootstrap.min.css.map
2019-02-25 11:37:30.540 [http-nio-80-exec-4] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/login
2019-02-25 11:37:30.868 [http-nio-80-exec-4] DEBUG c.y.user.dao.UserInfoDao.findUserInfoByNameAndPass - ==>  Preparing: select * from user_info where login_name=? and login_pass=? 
2019-02-25 11:37:30.890 [http-nio-80-exec-4] DEBUG c.y.user.dao.UserInfoDao.findUserInfoByNameAndPass - ==> Parameters: aaa(String), aaa(String)
2019-02-25 11:37:30.903 [http-nio-80-exec-4] DEBUG c.y.user.dao.UserInfoDao.findUserInfoByNameAndPass - <==      Total: 1
2019-02-25 11:37:30.913 [http-nio-80-exec-5] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/main
2019-02-25 11:37:32.297 [http-nio-80-exec-6] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productList
2019-02-25 11:37:32.330 [http-nio-80-exec-6] DEBUG c.yun.product.dao.ProductDao.findProductRowByParam - ==>  Preparing: select count(*) from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 
2019-02-25 11:37:32.331 [http-nio-80-exec-6] DEBUG c.yun.product.dao.ProductDao.findProductRowByParam - ==> Parameters: 
2019-02-25 11:37:32.337 [http-nio-80-exec-6] DEBUG c.yun.product.dao.ProductDao.findProductRowByParam - <==      Total: 1
2019-02-25 11:37:32.345 [http-nio-80-exec-6] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 order by prod_id limit ?,? 
2019-02-25 11:37:32.346 [http-nio-80-exec-6] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==> Parameters: 0(Integer), 5(Integer)
2019-02-25 11:37:32.349 [http-nio-80-exec-6] DEBUG com.yun.product.dao.ProductDao.findProductByParam - <==      Total: 5
2019-02-25 11:37:32.351 [http-nio-80-exec-6] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where param_state=0 and prod_id=? 
2019-02-25 11:37:32.351 [http-nio-80-exec-6] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 2(Integer)
2019-02-25 11:37:32.356 [http-nio-80-exec-6] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 7
2019-02-25 11:37:32.357 [http-nio-80-exec-6] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where param_state=0 and prod_id=? 
2019-02-25 11:37:32.357 [http-nio-80-exec-6] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 3(Integer)
2019-02-25 11:37:32.358 [http-nio-80-exec-6] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-02-25 11:37:32.358 [http-nio-80-exec-6] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where param_state=0 and prod_id=? 
2019-02-25 11:37:32.359 [http-nio-80-exec-6] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 4(Integer)
2019-02-25 11:37:32.360 [http-nio-80-exec-6] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 2
2019-02-25 11:37:32.360 [http-nio-80-exec-6] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where param_state=0 and prod_id=? 
2019-02-25 11:37:32.361 [http-nio-80-exec-6] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 5(Integer)
2019-02-25 11:37:32.362 [http-nio-80-exec-6] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 2
2019-02-25 11:37:32.362 [http-nio-80-exec-6] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where param_state=0 and prod_id=? 
2019-02-25 11:37:32.363 [http-nio-80-exec-6] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 6(Integer)
2019-02-25 11:37:32.365 [http-nio-80-exec-6] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-02-25 11:37:33.761 [http-nio-80-exec-7] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/prodParamList
2019-02-25 11:37:33.769 [http-nio-80-exec-7] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where param_state=0 and prod_id=? 
2019-02-25 11:37:33.772 [http-nio-80-exec-7] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 2(Integer)
2019-02-25 11:37:33.775 [http-nio-80-exec-7] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 7
2019-02-25 11:37:38.030 [http-nio-80-exec-8] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/prodParamDeleteBat
2019-02-25 11:37:47.504 [http-nio-80-exec-9] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productList
2019-02-25 11:37:47.512 [http-nio-80-exec-9] DEBUG c.yun.product.dao.ProductDao.findProductRowByParam - ==>  Preparing: select count(*) from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 
2019-02-25 11:37:47.512 [http-nio-80-exec-9] DEBUG c.yun.product.dao.ProductDao.findProductRowByParam - ==> Parameters: 
2019-02-25 11:37:47.513 [http-nio-80-exec-9] DEBUG c.yun.product.dao.ProductDao.findProductRowByParam - <==      Total: 1
2019-02-25 11:37:47.517 [http-nio-80-exec-9] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 order by prod_id limit ?,? 
2019-02-25 11:37:47.518 [http-nio-80-exec-9] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==> Parameters: 0(Integer), 5(Integer)
2019-02-25 11:37:47.522 [http-nio-80-exec-9] DEBUG com.yun.product.dao.ProductDao.findProductByParam - <==      Total: 5
2019-02-25 11:37:47.523 [http-nio-80-exec-9] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where param_state=0 and prod_id=? 
2019-02-25 11:37:47.523 [http-nio-80-exec-9] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 2(Integer)
2019-02-25 11:37:47.525 [http-nio-80-exec-9] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 7
2019-02-25 11:37:47.525 [http-nio-80-exec-9] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where param_state=0 and prod_id=? 
2019-02-25 11:37:47.526 [http-nio-80-exec-9] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 3(Integer)
2019-02-25 11:37:47.527 [http-nio-80-exec-9] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-02-25 11:37:47.527 [http-nio-80-exec-9] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where param_state=0 and prod_id=? 
2019-02-25 11:37:47.528 [http-nio-80-exec-9] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 4(Integer)
2019-02-25 11:37:47.529 [http-nio-80-exec-9] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 2
2019-02-25 11:37:47.529 [http-nio-80-exec-9] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where param_state=0 and prod_id=? 
2019-02-25 11:37:47.531 [http-nio-80-exec-9] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 5(Integer)
2019-02-25 11:37:47.533 [http-nio-80-exec-9] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 2
2019-02-25 11:37:47.534 [http-nio-80-exec-9] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where param_state=0 and prod_id=? 
2019-02-25 11:37:47.535 [http-nio-80-exec-9] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 6(Integer)
2019-02-25 11:37:47.538 [http-nio-80-exec-9] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-02-25 11:37:49.037 [http-nio-80-exec-10] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/prodParamList
2019-02-25 11:37:49.043 [http-nio-80-exec-10] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where param_state=0 and prod_id=? 
2019-02-25 11:37:49.044 [http-nio-80-exec-10] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 2(Integer)
2019-02-25 11:37:49.046 [http-nio-80-exec-10] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 7
2019-02-25 11:37:51.736 [http-nio-80-exec-1] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/prodParamDelete
2019-02-25 11:37:51.741 [http-nio-80-exec-1] DEBUG c.y.p.d.ProductParameterDao.deleteProductParameter - ==>  Preparing: update product_parameter set param_state=1 where prod_param_id=? 
2019-02-25 11:37:51.742 [http-nio-80-exec-1] DEBUG c.y.p.d.ProductParameterDao.deleteProductParameter - ==> Parameters: 13(Integer)
2019-02-25 11:37:51.811 [http-nio-80-exec-1] DEBUG c.y.p.d.ProductParameterDao.deleteProductParameter - <==    Updates: 1
2019-02-25 11:37:51.872 [http-nio-80-exec-3] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productList
2019-02-25 11:37:51.875 [http-nio-80-exec-3] DEBUG c.yun.product.dao.ProductDao.findProductRowByParam - ==>  Preparing: select count(*) from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 
2019-02-25 11:37:51.875 [http-nio-80-exec-3] DEBUG c.yun.product.dao.ProductDao.findProductRowByParam - ==> Parameters: 
2019-02-25 11:37:51.877 [http-nio-80-exec-3] DEBUG c.yun.product.dao.ProductDao.findProductRowByParam - <==      Total: 1
2019-02-25 11:37:51.884 [http-nio-80-exec-3] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 order by prod_id limit ?,? 
2019-02-25 11:37:51.885 [http-nio-80-exec-3] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==> Parameters: 0(Integer), 5(Integer)
2019-02-25 11:37:51.902 [http-nio-80-exec-3] DEBUG com.yun.product.dao.ProductDao.findProductByParam - <==      Total: 5
2019-02-25 11:37:51.902 [http-nio-80-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where param_state=0 and prod_id=? 
2019-02-25 11:37:51.903 [http-nio-80-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 2(Integer)
2019-02-25 11:37:51.905 [http-nio-80-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 6
2019-02-25 11:37:51.905 [http-nio-80-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where param_state=0 and prod_id=? 
2019-02-25 11:37:51.905 [http-nio-80-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 3(Integer)
2019-02-25 11:37:51.906 [http-nio-80-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-02-25 11:37:51.907 [http-nio-80-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where param_state=0 and prod_id=? 
2019-02-25 11:37:51.907 [http-nio-80-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 4(Integer)
2019-02-25 11:37:51.908 [http-nio-80-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 2
2019-02-25 11:37:51.909 [http-nio-80-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where param_state=0 and prod_id=? 
2019-02-25 11:37:51.909 [http-nio-80-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 5(Integer)
2019-02-25 11:37:51.910 [http-nio-80-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 2
2019-02-25 11:37:51.910 [http-nio-80-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where param_state=0 and prod_id=? 
2019-02-25 11:37:51.910 [http-nio-80-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 6(Integer)
2019-02-25 11:37:51.911 [http-nio-80-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-02-25 11:40:03.632 [main] INFO  com.yun.YunEbStockApplication - Starting YunEbStockApplication on USER-20181202BJ with PID 6508 (E:\workspace\yun-eb-stock\target\classes started by Administrator in E:\workspace\yun-eb-stock)
2019-02-25 11:40:03.638 [main] DEBUG com.yun.YunEbStockApplication - Running with Spring Boot v1.5.9.RELEASE, Spring v4.3.13.RELEASE
2019-02-25 11:40:03.638 [main] INFO  com.yun.YunEbStockApplication - No active profile set, falling back to default profiles: default
2019-02-25 11:40:04.131 [background-preinit] INFO  org.hibernate.validator.internal.util.Version - HV000001: Hibernate Validator 5.3.6.Final
2019-02-25 11:40:04.185 [main] INFO  o.s.b.c.e.AnnotationConfigEmbeddedWebApplicationContext - Refreshing org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@6a28ffa4: startup date [Mon Feb 25 11:40:04 CST 2019]; root of context hierarchy
2019-02-25 11:40:06.282 [main] INFO  o.s.b.c.e.tomcat.TomcatEmbeddedServletContainer - Tomcat initialized with port(s): 80 (http)
2019-02-25 11:40:06.294 [main] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2019-02-25 11:40:06.295 [main] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet Engine: Apache Tomcat/8.5.23
2019-02-25 11:40:06.421 [localhost-startStop-1] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2019-02-25 11:40:06.421 [localhost-startStop-1] INFO  org.springframework.web.context.ContextLoader - Root WebApplicationContext: initialization completed in 2236 ms
2019-02-25 11:40:06.683 [localhost-startStop-1] INFO  o.s.boot.web.servlet.FilterRegistrationBean - Mapping filter: 'characterEncodingFilter' to: [/*]
2019-02-25 11:40:06.683 [localhost-startStop-1] INFO  o.s.boot.web.servlet.FilterRegistrationBean - Mapping filter: 'hiddenHttpMethodFilter' to: [/*]
2019-02-25 11:40:06.684 [localhost-startStop-1] INFO  o.s.boot.web.servlet.FilterRegistrationBean - Mapping filter: 'httpPutFormContentFilter' to: [/*]
2019-02-25 11:40:06.684 [localhost-startStop-1] INFO  o.s.boot.web.servlet.FilterRegistrationBean - Mapping filter: 'requestContextFilter' to: [/*]
2019-02-25 11:40:06.684 [localhost-startStop-1] INFO  o.s.boot.web.servlet.FilterRegistrationBean - Mapping filter: 'loginFilter' to urls: [/*]
2019-02-25 11:40:06.684 [localhost-startStop-1] INFO  o.s.boot.web.servlet.ServletRegistrationBean - Mapping servlet: 'dispatcherServlet' to [/]
2019-02-25 11:40:07.642 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerAdapter - Looking for @ControllerAdvice: org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@6a28ffa4: startup date [Mon Feb 25 11:40:04 CST 2019]; root of context hierarchy
2019-02-25 11:40:07.705 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productList]}" onto public java.lang.String com.yun.product.controller.ProductController.productList(org.springframework.ui.Model,java.lang.String,java.lang.String,java.lang.String,java.lang.String)
2019-02-25 11:40:07.706 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productPreAdd]}" onto public java.lang.String com.yun.product.controller.ProductController.productPreAdd()
2019-02-25 11:40:07.706 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productSave]}" onto public java.lang.String com.yun.product.controller.ProductController.productSave(com.yun.product.model.Product)
2019-02-25 11:40:07.707 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productDelete]}" onto public java.lang.String com.yun.product.controller.ProductController.productDelete(int)
2019-02-25 11:40:07.707 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productPreUpdate]}" onto public java.lang.String com.yun.product.controller.ProductController.productPreUpdate(int,org.springframework.ui.Model)
2019-02-25 11:40:07.707 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productUpdate]}" onto public java.lang.String com.yun.product.controller.ProductController.productUpdate(com.yun.product.model.Product)
2019-02-25 11:40:07.708 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productListForAutoComplete]}" onto public java.util.List<com.yun.product.model.Product> com.yun.product.controller.ProductController.productListForAutoComplete(java.lang.String)
2019-02-25 11:40:07.708 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productListForStock]}" onto public java.util.List<com.yun.product.model.Product> com.yun.product.controller.ProductController.productListForStock()
2019-02-25 11:40:07.708 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productListForTrade]}" onto public java.util.List<com.yun.product.model.Product> com.yun.product.controller.ProductController.productListForTrade(java.lang.String)
2019-02-25 11:40:07.709 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/prodParamDelete]}" onto public java.lang.String com.yun.product.controller.ProductParamController.prodParamDelete(int)
2019-02-25 11:40:07.710 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/prodParamPreAdd]}" onto public java.lang.String com.yun.product.controller.ProductParamController.prodParamPreAdd(int,org.springframework.ui.Model)
2019-02-25 11:40:07.710 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/prodParamSave]}" onto public java.lang.String com.yun.product.controller.ProductParamController.prodParamSave(int,java.lang.String[])
2019-02-25 11:40:07.710 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/prodParamList]}" onto public java.lang.String com.yun.product.controller.ProductParamController.prodParamList(int)
2019-02-25 11:40:07.710 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/prodParamDeleteBat]}" onto public void com.yun.product.controller.ProductParamController.prodParamDeleteBat(java.lang.String[],javax.servlet.http.HttpServletResponse) throws java.io.IOException
2019-02-25 11:40:07.714 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeList]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeList(org.springframework.ui.Model)
2019-02-25 11:40:07.715 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeTree]}" onto public java.util.List<com.yun.product.model.ProductType> com.yun.product.controller.ProductTypeController.productTypeTree()
2019-02-25 11:40:07.715 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeEdit]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeEdit()
2019-02-25 11:40:07.715 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeSave]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeSave(com.yun.product.model.ProductType)
2019-02-25 11:40:07.715 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeUpdate]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeUpdate(java.lang.Integer,org.springframework.ui.Model)
2019-02-25 11:40:07.715 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeUpdateSave]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeUpdateSave(com.yun.product.model.ProductType)
2019-02-25 11:40:07.716 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeDelete]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeDelete(java.lang.Integer,javax.servlet.http.HttpServletResponse) throws java.io.IOException
2019-02-25 11:40:07.717 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productSaleTop]}" onto public java.lang.String com.yun.report.controller.ProductStockReportController.productSaleTop(java.lang.String,java.lang.String,java.lang.String,java.lang.String,org.springframework.ui.Model)
2019-02-25 11:40:07.717 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productSaleCalc]}" onto public java.lang.String com.yun.report.controller.ProductStockReportController.productSaleCalc()
2019-02-25 11:40:07.717 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockReport]}" onto public java.lang.String com.yun.report.controller.ProductStockReportController.productStockReport(java.lang.String,java.lang.String,java.lang.String,org.springframework.ui.Model)
2019-02-25 11:40:07.717 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveStockChange]}" onto public java.lang.String com.yun.report.controller.ProductStockReportController.productReceiveStockChange(java.lang.String,java.lang.String,java.lang.String,java.lang.String,org.springframework.ui.Model)
2019-02-25 11:40:07.718 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productCurrentStockChange]}" onto public java.lang.String com.yun.report.controller.ProductStockReportController.productCurrentStockChange(java.lang.String,java.lang.String,java.lang.String,java.lang.String,org.springframework.ui.Model)
2019-02-25 11:40:07.718 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productSaleCalcQuery]}" onto public java.lang.String com.yun.report.controller.ProductStockReportController.productSaleCalcQuery(java.lang.String,java.lang.String,java.lang.String,java.lang.String)
2019-02-25 11:40:07.719 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveStockList]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveStockController.productReceiveStocklist(java.lang.String,java.lang.String,org.springframework.ui.Model)
2019-02-25 11:40:07.719 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveStockPreAdd]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveStockController.productReceiveStockPreAdd()
2019-02-25 11:40:07.720 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveStockSave]}" onto public void com.yun.stock.controller.ProductReceiveStockController.productReceiveStockSave(com.yun.stock.model.ProductReceiveStock,javax.servlet.http.HttpServletResponse) throws java.io.IOException
2019-02-25 11:40:07.720 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveStockDelete]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveStockController.productReceiveStockDelete(int)
2019-02-25 11:40:07.720 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveStockPreUpdate]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveStockController.productReceiveStockPreUpdate(int,org.springframework.ui.Model)
2019-02-25 11:40:07.720 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveStockUpdate]}" onto public void com.yun.stock.controller.ProductReceiveStockController.productReceiveStockUpdate(com.yun.stock.model.ProductReceiveStock,javax.servlet.http.HttpServletResponse) throws java.io.IOException
2019-02-25 11:40:07.721 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveStockToCurrentStock]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveTradeController.productReceiveStockToCurrentStock(int,org.springframework.ui.Model)
2019-02-25 11:40:07.722 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveIn]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveTradeController.receiveIn(org.springframework.ui.Model)
2019-02-25 11:40:07.722 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveInSave]}" onto public void com.yun.stock.controller.ProductReceiveTradeController.receiveInSave(com.yun.stock.model.ProductReceiveTrade,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse) throws java.io.IOException
2019-02-25 11:40:07.722 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveReject]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveTradeController.receiveReject(org.springframework.ui.Model)
2019-02-25 11:40:07.722 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveRejectSave]}" onto public void com.yun.stock.controller.ProductReceiveTradeController.receiveRejectSave(com.yun.stock.model.ProductReceiveTrade,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse) throws java.io.IOException
2019-02-25 11:40:07.723 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveToCurrentSave]}" onto public void com.yun.stock.controller.ProductReceiveTradeController.productReceiveToCurrentSave(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse) throws java.lang.Exception
2019-02-25 11:40:07.724 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockSave]}" onto public void com.yun.stock.controller.ProductStockController.productStockSave(com.yun.stock.model.ProductStock,javax.servlet.http.HttpServletResponse) throws java.io.IOException
2019-02-25 11:40:07.724 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockList]}" onto public java.lang.String com.yun.stock.controller.ProductStockController.productStocklist(java.lang.String,java.lang.String,org.springframework.ui.Model)
2019-02-25 11:40:07.724 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockPreAdd]}" onto public java.lang.String com.yun.stock.controller.ProductStockController.productStockPreAdd()
2019-02-25 11:40:07.724 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockDelete]}" onto public java.lang.String com.yun.stock.controller.ProductStockController.productStockDelete(int)
2019-02-25 11:40:07.725 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockPreUpdate]}" onto public java.lang.String com.yun.stock.controller.ProductStockController.productStockPreUpdate(int,org.springframework.ui.Model)
2019-02-25 11:40:07.725 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockUpdate]}" onto public void com.yun.stock.controller.ProductStockController.productStockUpdate(com.yun.stock.model.ProductStock,javax.servlet.http.HttpServletResponse) throws java.io.IOException
2019-02-25 11:40:07.726 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productCurrentOut]}" onto public java.lang.String com.yun.stock.controller.ProductTradeController.receiveReject(org.springframework.ui.Model)
2019-02-25 11:40:07.726 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productCurrentIn]}" onto public java.lang.String com.yun.stock.controller.ProductTradeController.productCurrentIn(org.springframework.ui.Model)
2019-02-25 11:40:07.726 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productCurrentInSave]}" onto public void com.yun.stock.controller.ProductTradeController.productCurrentInSave(com.yun.stock.model.ProductTrade,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse) throws java.io.IOException
2019-02-25 11:40:07.726 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productCurrentOutSave]}" onto public void com.yun.stock.controller.ProductTradeController.productCurrentOutSave(com.yun.stock.model.ProductTrade,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse) throws java.io.IOException
2019-02-25 11:40:07.727 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/main]}" onto public java.lang.String com.yun.user.controller.MainController.main()
2019-02-25 11:40:07.728 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/sysBak]}" onto public void com.yun.user.controller.SysBakController.sysBak(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
2019-02-25 11:40:07.728 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/deleteBakFile]}" onto public java.lang.String com.yun.user.controller.SysBakController.deleteBakFile(java.lang.String)
2019-02-25 11:40:07.728 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/sysBakList]}" onto public java.lang.String com.yun.user.controller.SysBakController.sysBakList(org.springframework.ui.Model)
2019-02-25 11:40:07.729 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/userList]}" onto public java.lang.String com.yun.user.controller.UserController.userList(org.springframework.ui.Model)
2019-02-25 11:40:07.729 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/userEdit]}" onto public java.lang.String com.yun.user.controller.UserController.userEdit()
2019-02-25 11:40:07.729 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/login]}" onto public void com.yun.user.controller.UserController.login(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse) throws java.io.IOException
2019-02-25 11:40:07.729 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/deleteUserInfo]}" onto public java.lang.String com.yun.user.controller.UserController.userDelete(int)
2019-02-25 11:40:07.730 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/userSave]}" onto public java.lang.String com.yun.user.controller.UserController.userSave(com.yun.user.model.UserInfo)
2019-02-25 11:40:07.733 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/error]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> org.springframework.boot.autoconfigure.web.BasicErrorController.error(javax.servlet.http.HttpServletRequest)
2019-02-25 11:40:07.733 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/error],produces=[text/html]}" onto public org.springframework.web.servlet.ModelAndView org.springframework.boot.autoconfigure.web.BasicErrorController.errorHtml(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
2019-02-25 11:40:07.766 [main] WARN  o.s.w.servlet.resource.ResourceHttpRequestHandler - Locations list is empty. No resources will be served unless a custom ResourceResolver is configured as an alternative to PathResourceResolver.
2019-02-25 11:40:07.776 [main] INFO  o.s.web.servlet.handler.SimpleUrlHandlerMapping - Mapped URL path [/dbbak] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-02-25 11:40:07.777 [main] INFO  o.s.web.servlet.handler.SimpleUrlHandlerMapping - Mapped URL path [/webjars/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-02-25 11:40:07.777 [main] INFO  o.s.web.servlet.handler.SimpleUrlHandlerMapping - Mapped URL path [/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-02-25 11:40:07.822 [main] INFO  o.s.web.servlet.handler.SimpleUrlHandlerMapping - Mapped URL path [/**/favicon.ico] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-02-25 11:40:08.166 [main] INFO  o.s.b.a.w.WebMvcAutoConfiguration$WelcomePageHandlerMapping - Adding welcome page: class path resource [static/index.html]
2019-02-25 11:40:08.429 [main] INFO  o.s.jmx.export.annotation.AnnotationMBeanExporter - Registering beans for JMX exposure on startup
2019-02-25 11:40:08.451 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-80"]
2019-02-25 11:40:08.462 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-80"]
2019-02-25 11:40:08.667 [main] INFO  org.apache.tomcat.util.net.NioSelectorPool - Using a shared selector for servlet write/read
2019-02-25 11:40:08.687 [main] INFO  o.s.b.c.e.tomcat.TomcatEmbeddedServletContainer - Tomcat started on port(s): 80 (http)
2019-02-25 11:40:08.694 [main] INFO  com.yun.YunEbStockApplication - Started YunEbStockApplication in 5.618 seconds (JVM running for 6.965)
2019-02-25 11:40:11.616 [http-nio-80-exec-1] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring FrameworkServlet 'dispatcherServlet'
2019-02-25 11:40:11.617 [http-nio-80-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - FrameworkServlet 'dispatcherServlet': initialization started
2019-02-25 11:40:11.638 [http-nio-80-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - FrameworkServlet 'dispatcherServlet': initialization completed in 21 ms
2019-02-25 11:40:11.651 [http-nio-80-exec-1] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/main
2019-02-25 11:40:16.257 [http-nio-80-exec-2] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/login
2019-02-25 11:40:16.620 [http-nio-80-exec-2] DEBUG c.y.user.dao.UserInfoDao.findUserInfoByNameAndPass - ==>  Preparing: select * from user_info where login_name=? and login_pass=? 
2019-02-25 11:40:16.649 [http-nio-80-exec-2] DEBUG c.y.user.dao.UserInfoDao.findUserInfoByNameAndPass - ==> Parameters: aaa(String), aaa(String)
2019-02-25 11:40:16.666 [http-nio-80-exec-2] DEBUG c.y.user.dao.UserInfoDao.findUserInfoByNameAndPass - <==      Total: 1
2019-02-25 11:40:16.681 [http-nio-80-exec-3] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/main
2019-02-25 11:40:18.175 [http-nio-80-exec-4] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productList
2019-02-25 11:40:18.204 [http-nio-80-exec-4] DEBUG c.yun.product.dao.ProductDao.findProductRowByParam - ==>  Preparing: select count(*) from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 
2019-02-25 11:40:18.205 [http-nio-80-exec-4] DEBUG c.yun.product.dao.ProductDao.findProductRowByParam - ==> Parameters: 
2019-02-25 11:40:18.210 [http-nio-80-exec-4] DEBUG c.yun.product.dao.ProductDao.findProductRowByParam - <==      Total: 1
2019-02-25 11:40:18.218 [http-nio-80-exec-4] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 order by prod_id limit ?,? 
2019-02-25 11:40:18.219 [http-nio-80-exec-4] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==> Parameters: 0(Integer), 5(Integer)
2019-02-25 11:40:18.222 [http-nio-80-exec-4] DEBUG com.yun.product.dao.ProductDao.findProductByParam - <==      Total: 5
2019-02-25 11:40:18.224 [http-nio-80-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where param_state=0 and prod_id=? 
2019-02-25 11:40:18.225 [http-nio-80-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 2(Integer)
2019-02-25 11:40:18.229 [http-nio-80-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 6
2019-02-25 11:40:18.229 [http-nio-80-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where param_state=0 and prod_id=? 
2019-02-25 11:40:18.229 [http-nio-80-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 3(Integer)
2019-02-25 11:40:18.231 [http-nio-80-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-02-25 11:40:18.231 [http-nio-80-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where param_state=0 and prod_id=? 
2019-02-25 11:40:18.232 [http-nio-80-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 4(Integer)
2019-02-25 11:40:18.234 [http-nio-80-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 2
2019-02-25 11:40:18.235 [http-nio-80-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where param_state=0 and prod_id=? 
2019-02-25 11:40:18.235 [http-nio-80-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 5(Integer)
2019-02-25 11:40:18.237 [http-nio-80-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 2
2019-02-25 11:40:18.237 [http-nio-80-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where param_state=0 and prod_id=? 
2019-02-25 11:40:18.238 [http-nio-80-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 6(Integer)
2019-02-25 11:40:18.239 [http-nio-80-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-02-25 11:40:19.811 [http-nio-80-exec-5] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/prodParamList
2019-02-25 11:40:19.824 [http-nio-80-exec-5] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where param_state=0 and prod_id=? 
2019-02-25 11:40:19.825 [http-nio-80-exec-5] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 2(Integer)
2019-02-25 11:40:19.828 [http-nio-80-exec-5] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 6
2019-02-25 11:40:23.691 [http-nio-80-exec-1] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/prodParamDeleteBat
2019-02-25 11:40:23.697 [http-nio-80-exec-1] DEBUG c.y.p.d.ProductParameterDao.deleteProductParameter - ==>  Preparing: update product_parameter set param_state=1 where prod_param_id=? 
2019-02-25 11:40:23.698 [http-nio-80-exec-1] DEBUG c.y.p.d.ProductParameterDao.deleteProductParameter - ==> Parameters: 19(Integer)
2019-02-25 11:40:23.713 [http-nio-80-exec-1] DEBUG c.y.p.d.ProductParameterDao.deleteProductParameter - <==    Updates: 1
2019-02-25 11:40:23.714 [http-nio-80-exec-1] DEBUG c.y.p.d.ProductParameterDao.deleteProductParameter - ==>  Preparing: update product_parameter set param_state=1 where prod_param_id=? 
2019-02-25 11:40:23.714 [http-nio-80-exec-1] DEBUG c.y.p.d.ProductParameterDao.deleteProductParameter - ==> Parameters: 20(Integer)
2019-02-25 11:40:23.716 [http-nio-80-exec-1] DEBUG c.y.p.d.ProductParameterDao.deleteProductParameter - <==    Updates: 1
2019-02-25 11:40:23.717 [http-nio-80-exec-1] DEBUG c.y.p.d.ProductParameterDao.deleteProductParameter - ==>  Preparing: update product_parameter set param_state=1 where prod_param_id=? 
2019-02-25 11:40:23.717 [http-nio-80-exec-1] DEBUG c.y.p.d.ProductParameterDao.deleteProductParameter - ==> Parameters: 21(Integer)
2019-02-25 11:40:23.720 [http-nio-80-exec-1] DEBUG c.y.p.d.ProductParameterDao.deleteProductParameter - <==    Updates: 1
2019-02-25 11:40:56.932 [main] INFO  com.yun.YunEbStockApplication - Starting YunEbStockApplication on USER-20181202BJ with PID 6184 (E:\workspace\yun-eb-stock\target\classes started by Administrator in E:\workspace\yun-eb-stock)
2019-02-25 11:40:57.034 [main] DEBUG com.yun.YunEbStockApplication - Running with Spring Boot v1.5.9.RELEASE, Spring v4.3.13.RELEASE
2019-02-25 11:40:57.035 [main] INFO  com.yun.YunEbStockApplication - No active profile set, falling back to default profiles: default
2019-02-25 11:40:57.560 [main] INFO  o.s.b.c.e.AnnotationConfigEmbeddedWebApplicationContext - Refreshing org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@6a28ffa4: startup date [Mon Feb 25 11:40:57 CST 2019]; root of context hierarchy
2019-02-25 11:40:57.622 [background-preinit] INFO  org.hibernate.validator.internal.util.Version - HV000001: Hibernate Validator 5.3.6.Final
2019-02-25 11:40:59.530 [main] INFO  o.s.b.c.e.tomcat.TomcatEmbeddedServletContainer - Tomcat initialized with port(s): 80 (http)
2019-02-25 11:40:59.547 [main] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2019-02-25 11:40:59.549 [main] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet Engine: Apache Tomcat/8.5.23
2019-02-25 11:40:59.690 [localhost-startStop-1] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2019-02-25 11:40:59.690 [localhost-startStop-1] INFO  org.springframework.web.context.ContextLoader - Root WebApplicationContext: initialization completed in 2130 ms
2019-02-25 11:40:59.886 [localhost-startStop-1] INFO  o.s.boot.web.servlet.FilterRegistrationBean - Mapping filter: 'characterEncodingFilter' to: [/*]
2019-02-25 11:40:59.886 [localhost-startStop-1] INFO  o.s.boot.web.servlet.FilterRegistrationBean - Mapping filter: 'hiddenHttpMethodFilter' to: [/*]
2019-02-25 11:40:59.887 [localhost-startStop-1] INFO  o.s.boot.web.servlet.FilterRegistrationBean - Mapping filter: 'httpPutFormContentFilter' to: [/*]
2019-02-25 11:40:59.887 [localhost-startStop-1] INFO  o.s.boot.web.servlet.FilterRegistrationBean - Mapping filter: 'requestContextFilter' to: [/*]
2019-02-25 11:40:59.887 [localhost-startStop-1] INFO  o.s.boot.web.servlet.FilterRegistrationBean - Mapping filter: 'loginFilter' to urls: [/*]
2019-02-25 11:40:59.887 [localhost-startStop-1] INFO  o.s.boot.web.servlet.ServletRegistrationBean - Mapping servlet: 'dispatcherServlet' to [/]
2019-02-25 11:41:01.006 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerAdapter - Looking for @ControllerAdvice: org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@6a28ffa4: startup date [Mon Feb 25 11:40:57 CST 2019]; root of context hierarchy
2019-02-25 11:41:01.068 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productList]}" onto public java.lang.String com.yun.product.controller.ProductController.productList(org.springframework.ui.Model,java.lang.String,java.lang.String,java.lang.String,java.lang.String)
2019-02-25 11:41:01.069 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productPreAdd]}" onto public java.lang.String com.yun.product.controller.ProductController.productPreAdd()
2019-02-25 11:41:01.070 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productSave]}" onto public java.lang.String com.yun.product.controller.ProductController.productSave(com.yun.product.model.Product)
2019-02-25 11:41:01.070 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productDelete]}" onto public java.lang.String com.yun.product.controller.ProductController.productDelete(int)
2019-02-25 11:41:01.070 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productPreUpdate]}" onto public java.lang.String com.yun.product.controller.ProductController.productPreUpdate(int,org.springframework.ui.Model)
2019-02-25 11:41:01.070 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productUpdate]}" onto public java.lang.String com.yun.product.controller.ProductController.productUpdate(com.yun.product.model.Product)
2019-02-25 11:41:01.071 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productListForAutoComplete]}" onto public java.util.List<com.yun.product.model.Product> com.yun.product.controller.ProductController.productListForAutoComplete(java.lang.String)
2019-02-25 11:41:01.071 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productListForStock]}" onto public java.util.List<com.yun.product.model.Product> com.yun.product.controller.ProductController.productListForStock()
2019-02-25 11:41:01.071 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productListForTrade]}" onto public java.util.List<com.yun.product.model.Product> com.yun.product.controller.ProductController.productListForTrade(java.lang.String)
2019-02-25 11:41:01.072 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/prodParamDelete]}" onto public java.lang.String com.yun.product.controller.ProductParamController.prodParamDelete(int)
2019-02-25 11:41:01.073 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/prodParamPreAdd]}" onto public java.lang.String com.yun.product.controller.ProductParamController.prodParamPreAdd(int,org.springframework.ui.Model)
2019-02-25 11:41:01.073 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/prodParamSave]}" onto public java.lang.String com.yun.product.controller.ProductParamController.prodParamSave(int,java.lang.String[])
2019-02-25 11:41:01.073 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/prodParamList]}" onto public java.lang.String com.yun.product.controller.ProductParamController.prodParamList(int)
2019-02-25 11:41:01.073 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/prodParamDeleteBat]}" onto public java.lang.String com.yun.product.controller.ProductParamController.prodParamDeleteBat(java.lang.String[],javax.servlet.http.HttpServletResponse) throws java.io.IOException
2019-02-25 11:41:01.076 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeTree]}" onto public java.util.List<com.yun.product.model.ProductType> com.yun.product.controller.ProductTypeController.productTypeTree()
2019-02-25 11:41:01.077 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeList]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeList(org.springframework.ui.Model)
2019-02-25 11:41:01.077 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeEdit]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeEdit()
2019-02-25 11:41:01.077 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeSave]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeSave(com.yun.product.model.ProductType)
2019-02-25 11:41:01.077 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeUpdate]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeUpdate(java.lang.Integer,org.springframework.ui.Model)
2019-02-25 11:41:01.078 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeUpdateSave]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeUpdateSave(com.yun.product.model.ProductType)
2019-02-25 11:41:01.078 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeDelete]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeDelete(java.lang.Integer,javax.servlet.http.HttpServletResponse) throws java.io.IOException
2019-02-25 11:41:01.079 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productSaleTop]}" onto public java.lang.String com.yun.report.controller.ProductStockReportController.productSaleTop(java.lang.String,java.lang.String,java.lang.String,java.lang.String,org.springframework.ui.Model)
2019-02-25 11:41:01.080 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productSaleCalc]}" onto public java.lang.String com.yun.report.controller.ProductStockReportController.productSaleCalc()
2019-02-25 11:41:01.080 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockReport]}" onto public java.lang.String com.yun.report.controller.ProductStockReportController.productStockReport(java.lang.String,java.lang.String,java.lang.String,org.springframework.ui.Model)
2019-02-25 11:41:01.080 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveStockChange]}" onto public java.lang.String com.yun.report.controller.ProductStockReportController.productReceiveStockChange(java.lang.String,java.lang.String,java.lang.String,java.lang.String,org.springframework.ui.Model)
2019-02-25 11:41:01.081 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productCurrentStockChange]}" onto public java.lang.String com.yun.report.controller.ProductStockReportController.productCurrentStockChange(java.lang.String,java.lang.String,java.lang.String,java.lang.String,org.springframework.ui.Model)
2019-02-25 11:41:01.081 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productSaleCalcQuery]}" onto public java.lang.String com.yun.report.controller.ProductStockReportController.productSaleCalcQuery(java.lang.String,java.lang.String,java.lang.String,java.lang.String)
2019-02-25 11:41:01.082 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveStockList]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveStockController.productReceiveStocklist(java.lang.String,java.lang.String,org.springframework.ui.Model)
2019-02-25 11:41:01.082 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveStockPreAdd]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveStockController.productReceiveStockPreAdd()
2019-02-25 11:41:01.082 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveStockSave]}" onto public void com.yun.stock.controller.ProductReceiveStockController.productReceiveStockSave(com.yun.stock.model.ProductReceiveStock,javax.servlet.http.HttpServletResponse) throws java.io.IOException
2019-02-25 11:41:01.083 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveStockDelete]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveStockController.productReceiveStockDelete(int)
2019-02-25 11:41:01.083 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveStockPreUpdate]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveStockController.productReceiveStockPreUpdate(int,org.springframework.ui.Model)
2019-02-25 11:41:01.083 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveStockUpdate]}" onto public void com.yun.stock.controller.ProductReceiveStockController.productReceiveStockUpdate(com.yun.stock.model.ProductReceiveStock,javax.servlet.http.HttpServletResponse) throws java.io.IOException
2019-02-25 11:41:01.084 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveIn]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveTradeController.receiveIn(org.springframework.ui.Model)
2019-02-25 11:41:01.084 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveInSave]}" onto public void com.yun.stock.controller.ProductReceiveTradeController.receiveInSave(com.yun.stock.model.ProductReceiveTrade,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse) throws java.io.IOException
2019-02-25 11:41:01.085 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveReject]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveTradeController.receiveReject(org.springframework.ui.Model)
2019-02-25 11:41:01.085 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveStockToCurrentStock]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveTradeController.productReceiveStockToCurrentStock(int,org.springframework.ui.Model)
2019-02-25 11:41:01.085 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveRejectSave]}" onto public void com.yun.stock.controller.ProductReceiveTradeController.receiveRejectSave(com.yun.stock.model.ProductReceiveTrade,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse) throws java.io.IOException
2019-02-25 11:41:01.085 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveToCurrentSave]}" onto public void com.yun.stock.controller.ProductReceiveTradeController.productReceiveToCurrentSave(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse) throws java.lang.Exception
2019-02-25 11:41:01.086 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockSave]}" onto public void com.yun.stock.controller.ProductStockController.productStockSave(com.yun.stock.model.ProductStock,javax.servlet.http.HttpServletResponse) throws java.io.IOException
2019-02-25 11:41:01.086 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockList]}" onto public java.lang.String com.yun.stock.controller.ProductStockController.productStocklist(java.lang.String,java.lang.String,org.springframework.ui.Model)
2019-02-25 11:41:01.087 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockPreAdd]}" onto public java.lang.String com.yun.stock.controller.ProductStockController.productStockPreAdd()
2019-02-25 11:41:01.087 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockDelete]}" onto public java.lang.String com.yun.stock.controller.ProductStockController.productStockDelete(int)
2019-02-25 11:41:01.087 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockPreUpdate]}" onto public java.lang.String com.yun.stock.controller.ProductStockController.productStockPreUpdate(int,org.springframework.ui.Model)
2019-02-25 11:41:01.087 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockUpdate]}" onto public void com.yun.stock.controller.ProductStockController.productStockUpdate(com.yun.stock.model.ProductStock,javax.servlet.http.HttpServletResponse) throws java.io.IOException
2019-02-25 11:41:01.088 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productCurrentOut]}" onto public java.lang.String com.yun.stock.controller.ProductTradeController.receiveReject(org.springframework.ui.Model)
2019-02-25 11:41:01.088 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productCurrentIn]}" onto public java.lang.String com.yun.stock.controller.ProductTradeController.productCurrentIn(org.springframework.ui.Model)
2019-02-25 11:41:01.089 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productCurrentInSave]}" onto public void com.yun.stock.controller.ProductTradeController.productCurrentInSave(com.yun.stock.model.ProductTrade,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse) throws java.io.IOException
2019-02-25 11:41:01.089 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productCurrentOutSave]}" onto public void com.yun.stock.controller.ProductTradeController.productCurrentOutSave(com.yun.stock.model.ProductTrade,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse) throws java.io.IOException
2019-02-25 11:41:01.089 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/main]}" onto public java.lang.String com.yun.user.controller.MainController.main()
2019-02-25 11:41:01.090 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/sysBak]}" onto public void com.yun.user.controller.SysBakController.sysBak(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
2019-02-25 11:41:01.090 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/deleteBakFile]}" onto public java.lang.String com.yun.user.controller.SysBakController.deleteBakFile(java.lang.String)
2019-02-25 11:41:01.090 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/sysBakList]}" onto public java.lang.String com.yun.user.controller.SysBakController.sysBakList(org.springframework.ui.Model)
2019-02-25 11:41:01.091 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/userList]}" onto public java.lang.String com.yun.user.controller.UserController.userList(org.springframework.ui.Model)
2019-02-25 11:41:01.092 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/login]}" onto public void com.yun.user.controller.UserController.login(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse) throws java.io.IOException
2019-02-25 11:41:01.092 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/userEdit]}" onto public java.lang.String com.yun.user.controller.UserController.userEdit()
2019-02-25 11:41:01.092 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/userSave]}" onto public java.lang.String com.yun.user.controller.UserController.userSave(com.yun.user.model.UserInfo)
2019-02-25 11:41:01.092 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/deleteUserInfo]}" onto public java.lang.String com.yun.user.controller.UserController.userDelete(int)
2019-02-25 11:41:01.096 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/error]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> org.springframework.boot.autoconfigure.web.BasicErrorController.error(javax.servlet.http.HttpServletRequest)
2019-02-25 11:41:01.096 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/error],produces=[text/html]}" onto public org.springframework.web.servlet.ModelAndView org.springframework.boot.autoconfigure.web.BasicErrorController.errorHtml(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
2019-02-25 11:41:01.126 [main] WARN  o.s.w.servlet.resource.ResourceHttpRequestHandler - Locations list is empty. No resources will be served unless a custom ResourceResolver is configured as an alternative to PathResourceResolver.
2019-02-25 11:41:01.137 [main] INFO  o.s.web.servlet.handler.SimpleUrlHandlerMapping - Mapped URL path [/dbbak] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-02-25 11:41:01.137 [main] INFO  o.s.web.servlet.handler.SimpleUrlHandlerMapping - Mapped URL path [/webjars/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-02-25 11:41:01.137 [main] INFO  o.s.web.servlet.handler.SimpleUrlHandlerMapping - Mapped URL path [/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-02-25 11:41:01.185 [main] INFO  o.s.web.servlet.handler.SimpleUrlHandlerMapping - Mapped URL path [/**/favicon.ico] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-02-25 11:41:01.583 [main] INFO  o.s.b.a.w.WebMvcAutoConfiguration$WelcomePageHandlerMapping - Adding welcome page: class path resource [static/index.html]
2019-02-25 11:41:01.863 [main] INFO  o.s.jmx.export.annotation.AnnotationMBeanExporter - Registering beans for JMX exposure on startup
2019-02-25 11:41:01.886 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-80"]
2019-02-25 11:41:01.897 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-80"]
2019-02-25 11:41:02.088 [main] INFO  org.apache.tomcat.util.net.NioSelectorPool - Using a shared selector for servlet write/read
2019-02-25 11:41:02.112 [main] INFO  o.s.b.c.e.tomcat.TomcatEmbeddedServletContainer - Tomcat started on port(s): 80 (http)
2019-02-25 11:41:02.117 [main] INFO  com.yun.YunEbStockApplication - Started YunEbStockApplication in 5.658 seconds (JVM running for 7.196)
2019-02-25 11:41:04.072 [http-nio-80-exec-1] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring FrameworkServlet 'dispatcherServlet'
2019-02-25 11:41:04.072 [http-nio-80-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - FrameworkServlet 'dispatcherServlet': initialization started
2019-02-25 11:41:04.098 [http-nio-80-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - FrameworkServlet 'dispatcherServlet': initialization completed in 26 ms
2019-02-25 11:41:04.112 [http-nio-80-exec-1] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/main
2019-02-25 11:41:08.424 [http-nio-80-exec-2] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/login
2019-02-25 11:41:08.771 [http-nio-80-exec-2] DEBUG c.y.user.dao.UserInfoDao.findUserInfoByNameAndPass - ==>  Preparing: select * from user_info where login_name=? and login_pass=? 
2019-02-25 11:41:08.797 [http-nio-80-exec-2] DEBUG c.y.user.dao.UserInfoDao.findUserInfoByNameAndPass - ==> Parameters: aaa(String), aaa(String)
2019-02-25 11:41:08.810 [http-nio-80-exec-2] DEBUG c.y.user.dao.UserInfoDao.findUserInfoByNameAndPass - <==      Total: 1
2019-02-25 11:41:08.821 [http-nio-80-exec-3] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/main
2019-02-25 11:41:10.256 [http-nio-80-exec-4] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productList
2019-02-25 11:41:10.302 [http-nio-80-exec-4] DEBUG c.yun.product.dao.ProductDao.findProductRowByParam - ==>  Preparing: select count(*) from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 
2019-02-25 11:41:10.303 [http-nio-80-exec-4] DEBUG c.yun.product.dao.ProductDao.findProductRowByParam - ==> Parameters: 
2019-02-25 11:41:10.307 [http-nio-80-exec-4] DEBUG c.yun.product.dao.ProductDao.findProductRowByParam - <==      Total: 1
2019-02-25 11:41:10.317 [http-nio-80-exec-4] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 order by prod_id limit ?,? 
2019-02-25 11:41:10.318 [http-nio-80-exec-4] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==> Parameters: 0(Integer), 5(Integer)
2019-02-25 11:41:10.321 [http-nio-80-exec-4] DEBUG com.yun.product.dao.ProductDao.findProductByParam - <==      Total: 5
2019-02-25 11:41:10.323 [http-nio-80-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where param_state=0 and prod_id=? 
2019-02-25 11:41:10.324 [http-nio-80-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 2(Integer)
2019-02-25 11:41:10.327 [http-nio-80-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 3
2019-02-25 11:41:10.327 [http-nio-80-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where param_state=0 and prod_id=? 
2019-02-25 11:41:10.327 [http-nio-80-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 3(Integer)
2019-02-25 11:41:10.329 [http-nio-80-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-02-25 11:41:10.330 [http-nio-80-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where param_state=0 and prod_id=? 
2019-02-25 11:41:10.330 [http-nio-80-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 4(Integer)
2019-02-25 11:41:10.332 [http-nio-80-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 2
2019-02-25 11:41:10.332 [http-nio-80-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where param_state=0 and prod_id=? 
2019-02-25 11:41:10.333 [http-nio-80-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 5(Integer)
2019-02-25 11:41:10.334 [http-nio-80-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 2
2019-02-25 11:41:10.334 [http-nio-80-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where param_state=0 and prod_id=? 
2019-02-25 11:41:10.335 [http-nio-80-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 6(Integer)
2019-02-25 11:41:10.336 [http-nio-80-exec-4] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-02-25 11:41:11.695 [http-nio-80-exec-5] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/prodParamList
2019-02-25 11:41:11.700 [http-nio-80-exec-5] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where param_state=0 and prod_id=? 
2019-02-25 11:41:11.702 [http-nio-80-exec-5] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 2(Integer)
2019-02-25 11:41:11.704 [http-nio-80-exec-5] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 3
2019-02-25 11:41:14.853 [http-nio-80-exec-1] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/prodParamDeleteBat
2019-02-25 11:41:14.858 [http-nio-80-exec-1] DEBUG c.y.p.d.ProductParameterDao.deleteProductParameter - ==>  Preparing: update product_parameter set param_state=1 where prod_param_id=? 
2019-02-25 11:41:14.859 [http-nio-80-exec-1] DEBUG c.y.p.d.ProductParameterDao.deleteProductParameter - ==> Parameters: 22(Integer)
2019-02-25 11:41:14.925 [http-nio-80-exec-1] DEBUG c.y.p.d.ProductParameterDao.deleteProductParameter - <==    Updates: 1
2019-02-25 11:41:14.927 [http-nio-80-exec-1] DEBUG c.y.p.d.ProductParameterDao.deleteProductParameter - ==>  Preparing: update product_parameter set param_state=1 where prod_param_id=? 
2019-02-25 11:41:14.927 [http-nio-80-exec-1] DEBUG c.y.p.d.ProductParameterDao.deleteProductParameter - ==> Parameters: 23(Integer)
2019-02-25 11:41:14.928 [http-nio-80-exec-1] DEBUG c.y.p.d.ProductParameterDao.deleteProductParameter - <==    Updates: 1
2019-02-25 11:41:14.929 [http-nio-80-exec-1] DEBUG c.y.p.d.ProductParameterDao.deleteProductParameter - ==>  Preparing: update product_parameter set param_state=1 where prod_param_id=? 
2019-02-25 11:41:14.929 [http-nio-80-exec-1] DEBUG c.y.p.d.ProductParameterDao.deleteProductParameter - ==> Parameters: 24(Integer)
2019-02-25 11:41:14.931 [http-nio-80-exec-1] DEBUG c.y.p.d.ProductParameterDao.deleteProductParameter - <==    Updates: 1
2019-02-25 11:41:14.984 [http-nio-80-exec-2] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/productList
2019-02-25 11:41:14.986 [http-nio-80-exec-2] DEBUG c.yun.product.dao.ProductDao.findProductRowByParam - ==>  Preparing: select count(*) from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 
2019-02-25 11:41:14.987 [http-nio-80-exec-2] DEBUG c.yun.product.dao.ProductDao.findProductRowByParam - ==> Parameters: 
2019-02-25 11:41:14.988 [http-nio-80-exec-2] DEBUG c.yun.product.dao.ProductDao.findProductRowByParam - <==      Total: 1
2019-02-25 11:41:14.990 [http-nio-80-exec-2] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==>  Preparing: select * from product p left join product_type pt on p.prod_type_id=pt.prod_type_id where 1=1 and p.prod_state=0 order by prod_id limit ?,? 
2019-02-25 11:41:14.991 [http-nio-80-exec-2] DEBUG com.yun.product.dao.ProductDao.findProductByParam - ==> Parameters: 0(Integer), 5(Integer)
2019-02-25 11:41:14.993 [http-nio-80-exec-2] DEBUG com.yun.product.dao.ProductDao.findProductByParam - <==      Total: 5
2019-02-25 11:41:14.993 [http-nio-80-exec-2] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where param_state=0 and prod_id=? 
2019-02-25 11:41:14.993 [http-nio-80-exec-2] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 2(Integer)
2019-02-25 11:41:14.995 [http-nio-80-exec-2] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 0
2019-02-25 11:41:14.996 [http-nio-80-exec-2] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where param_state=0 and prod_id=? 
2019-02-25 11:41:14.998 [http-nio-80-exec-2] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 3(Integer)
2019-02-25 11:41:15.000 [http-nio-80-exec-2] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-02-25 11:41:15.000 [http-nio-80-exec-2] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where param_state=0 and prod_id=? 
2019-02-25 11:41:15.000 [http-nio-80-exec-2] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 4(Integer)
2019-02-25 11:41:15.002 [http-nio-80-exec-2] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 2
2019-02-25 11:41:15.002 [http-nio-80-exec-2] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where param_state=0 and prod_id=? 
2019-02-25 11:41:15.003 [http-nio-80-exec-2] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 5(Integer)
2019-02-25 11:41:15.004 [http-nio-80-exec-2] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 2
2019-02-25 11:41:15.005 [http-nio-80-exec-2] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where param_state=0 and prod_id=? 
2019-02-25 11:41:15.006 [http-nio-80-exec-2] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 6(Integer)
2019-02-25 11:41:15.008 [http-nio-80-exec-2] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 1
2019-02-25 11:41:16.353 [http-nio-80-exec-3] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/prodParamList
2019-02-25 11:41:16.355 [http-nio-80-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==>  Preparing: select * from product_parameter where param_state=0 and prod_id=? 
2019-02-25 11:41:16.355 [http-nio-80-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - ==> Parameters: 2(Integer)
2019-02-25 11:41:16.356 [http-nio-80-exec-3] DEBUG c.y.p.d.P.findProductParameterListByProductId - <==      Total: 0
2019-02-25 11:41:18.203 [http-nio-80-exec-4] DEBUG com.yun.user.filter.LoginFilter - 当前请求的地址requestUrl：/prodParamPreAdd
2019-02-25 11:41:58.613 [main] INFO  o.s.b.t.context.SpringBootTestContextBootstrapper - Neither @ContextConfiguration nor @ContextHierarchy found for test class [com.yun.ProductTypeTest], using SpringBootContextLoader
2019-02-25 11:41:58.625 [main] INFO  o.s.test.context.support.AbstractContextLoader - Could not detect default resource locations for test class [com.yun.ProductTypeTest]: no resource found for suffixes {-context.xml, Context.groovy}.
2019-02-25 11:41:58.627 [main] INFO  o.s.t.c.support.AnnotationConfigContextLoaderUtils - Could not detect default configuration classes for test class [com.yun.ProductTypeTest]: ProductTypeTest does not declare any static, non-private, non-final, nested classes annotated with @Configuration.
2019-02-25 11:41:58.836 [main] INFO  o.s.b.t.context.SpringBootTestContextBootstrapper - Found @SpringBootConfiguration com.yun.YunEbStockApplication for test class com.yun.ProductTypeTest
2019-02-25 11:41:58.853 [main] INFO  o.s.b.t.context.SpringBootTestContextBootstrapper - Loaded default TestExecutionListener class names from location [META-INF/spring.factories]: [org.springframework.boot.test.mock.mockito.MockitoTestExecutionListener, org.springframework.boot.test.mock.mockito.ResetMocksTestExecutionListener, org.springframework.boot.test.autoconfigure.restdocs.RestDocsTestExecutionListener, org.springframework.boot.test.autoconfigure.web.client.MockRestServiceServerResetTestExecutionListener, org.springframework.boot.test.autoconfigure.web.servlet.MockMvcPrintOnlyOnFailureTestExecutionListener, org.springframework.boot.test.autoconfigure.web.servlet.WebDriverTestExecutionListener, org.springframework.test.context.web.ServletTestExecutionListener, org.springframework.test.context.support.DirtiesContextBeforeModesTestExecutionListener, org.springframework.test.context.support.DependencyInjectionTestExecutionListener, org.springframework.test.context.support.DirtiesContextTestExecutionListener, org.springframework.test.context.transaction.TransactionalTestExecutionListener, org.springframework.test.context.jdbc.SqlScriptsTestExecutionListener]
2019-02-25 11:41:58.963 [main] INFO  o.s.b.t.context.SpringBootTestContextBootstrapper - Using TestExecutionListeners: [org.springframework.test.context.web.ServletTestExecutionListener@689604d9, org.springframework.test.context.support.DirtiesContextBeforeModesTestExecutionListener@18078bef, org.springframework.boot.test.autoconfigure.SpringBootDependencyInjectionTestExecutionListener@799f10e1, org.springframework.test.context.support.DirtiesContextTestExecutionListener@4c371370, org.springframework.test.context.transaction.TransactionalTestExecutionListener@145f66e3, org.springframework.test.context.jdbc.SqlScriptsTestExecutionListener@3023df74, org.springframework.boot.test.autoconfigure.restdocs.RestDocsTestExecutionListener@313ac989, org.springframework.boot.test.autoconfigure.web.servlet.MockMvcPrintOnlyOnFailureTestExecutionListener@4562e04d, org.springframework.boot.test.autoconfigure.web.servlet.WebDriverTestExecutionListener@2a65fe7c, org.springframework.boot.test.mock.mockito.MockitoTestExecutionListener@4135c3b, org.springframework.boot.test.mock.mockito.ResetMocksTestExecutionListener@6302bbb1, org.springframework.boot.test.autoconfigure.web.client.MockRestServiceServerResetTestExecutionListener@31304f14]
2019-02-25 11:41:58.968 [main] INFO  o.s.b.t.context.SpringBootTestContextBootstrapper - Neither @ContextConfiguration nor @ContextHierarchy found for test class [com.yun.YunEbStockApplicationTests], using SpringBootContextLoader
2019-02-25 11:41:58.969 [main] INFO  o.s.test.context.support.AbstractContextLoader - Could not detect default resource locations for test class [com.yun.YunEbStockApplicationTests]: no resource found for suffixes {-context.xml, Context.groovy}.
2019-02-25 11:41:58.970 [main] INFO  o.s.t.c.support.AnnotationConfigContextLoaderUtils - Could not detect default configuration classes for test class [com.yun.YunEbStockApplicationTests]: YunEbStockApplicationTests does not declare any static, non-private, non-final, nested classes annotated with @Configuration.
2019-02-25 11:41:58.979 [main] INFO  o.s.b.t.context.SpringBootTestContextBootstrapper - Found @SpringBootConfiguration com.yun.YunEbStockApplication for test class com.yun.YunEbStockApplicationTests
2019-02-25 11:41:58.985 [main] INFO  o.s.b.t.context.SpringBootTestContextBootstrapper - Loaded default TestExecutionListener class names from location [META-INF/spring.factories]: [org.springframework.boot.test.mock.mockito.MockitoTestExecutionListener, org.springframework.boot.test.mock.mockito.ResetMocksTestExecutionListener, org.springframework.boot.test.autoconfigure.restdocs.RestDocsTestExecutionListener, org.springframework.boot.test.autoconfigure.web.client.MockRestServiceServerResetTestExecutionListener, org.springframework.boot.test.autoconfigure.web.servlet.MockMvcPrintOnlyOnFailureTestExecutionListener, org.springframework.boot.test.autoconfigure.web.servlet.WebDriverTestExecutionListener, org.springframework.test.context.web.ServletTestExecutionListener, org.springframework.test.context.support.DirtiesContextBeforeModesTestExecutionListener, org.springframework.test.context.support.DependencyInjectionTestExecutionListener, org.springframework.test.context.support.DirtiesContextTestExecutionListener, org.springframework.test.context.transaction.TransactionalTestExecutionListener, org.springframework.test.context.jdbc.SqlScriptsTestExecutionListener]
2019-02-25 11:41:58.990 [main] INFO  o.s.b.t.context.SpringBootTestContextBootstrapper - Using TestExecutionListeners: [org.springframework.test.context.web.ServletTestExecutionListener@408d971b, org.springframework.test.context.support.DirtiesContextBeforeModesTestExecutionListener@6c6cb480, org.springframework.boot.test.autoconfigure.SpringBootDependencyInjectionTestExecutionListener@3c46e67a, org.springframework.test.context.support.DirtiesContextTestExecutionListener@c730b35, org.springframework.test.context.transaction.TransactionalTestExecutionListener@206a70ef, org.springframework.test.context.jdbc.SqlScriptsTestExecutionListener@292b08d6, org.springframework.boot.test.autoconfigure.restdocs.RestDocsTestExecutionListener@22555ebf, org.springframework.boot.test.autoconfigure.web.servlet.MockMvcPrintOnlyOnFailureTestExecutionListener@36ebc363, org.springframework.boot.test.autoconfigure.web.servlet.WebDriverTestExecutionListener@45752059, org.springframework.boot.test.mock.mockito.MockitoTestExecutionListener@34e9fd99, org.springframework.boot.test.mock.mockito.ResetMocksTestExecutionListener@3c41ed1d, org.springframework.boot.test.autoconfigure.web.client.MockRestServiceServerResetTestExecutionListener@54d9d12d]
2019-02-25 11:41:59.000 [main] INFO  o.s.b.t.context.SpringBootTestContextBootstrapper - Neither @ContextConfiguration nor @ContextHierarchy found for test class [com.yun.ProductTypeTest], using SpringBootContextLoader
2019-02-25 11:41:59.001 [main] INFO  o.s.test.context.support.AbstractContextLoader - Could not detect default resource locations for test class [com.yun.ProductTypeTest]: no resource found for suffixes {-context.xml, Context.groovy}.
2019-02-25 11:41:59.001 [main] INFO  o.s.t.c.support.AnnotationConfigContextLoaderUtils - Could not detect default configuration classes for test class [com.yun.ProductTypeTest]: ProductTypeTest does not declare any static, non-private, non-final, nested classes annotated with @Configuration.
2019-02-25 11:41:59.036 [main] INFO  o.s.b.t.context.SpringBootTestContextBootstrapper - Found @SpringBootConfiguration com.yun.YunEbStockApplication for test class com.yun.ProductTypeTest
2019-02-25 11:41:59.043 [main] INFO  o.s.b.t.context.SpringBootTestContextBootstrapper - Loaded default TestExecutionListener class names from location [META-INF/spring.factories]: [org.springframework.boot.test.mock.mockito.MockitoTestExecutionListener, org.springframework.boot.test.mock.mockito.ResetMocksTestExecutionListener, org.springframework.boot.test.autoconfigure.restdocs.RestDocsTestExecutionListener, org.springframework.boot.test.autoconfigure.web.client.MockRestServiceServerResetTestExecutionListener, org.springframework.boot.test.autoconfigure.web.servlet.MockMvcPrintOnlyOnFailureTestExecutionListener, org.springframework.boot.test.autoconfigure.web.servlet.WebDriverTestExecutionListener, org.springframework.test.context.web.ServletTestExecutionListener, org.springframework.test.context.support.DirtiesContextBeforeModesTestExecutionListener, org.springframework.test.context.support.DependencyInjectionTestExecutionListener, org.springframework.test.context.support.DirtiesContextTestExecutionListener, org.springframework.test.context.transaction.TransactionalTestExecutionListener, org.springframework.test.context.jdbc.SqlScriptsTestExecutionListener]
2019-02-25 11:41:59.048 [main] INFO  o.s.b.t.context.SpringBootTestContextBootstrapper - Using TestExecutionListeners: [org.springframework.test.context.web.ServletTestExecutionListener@5dda768f, org.springframework.test.context.support.DirtiesContextBeforeModesTestExecutionListener@7a8c8dcf, org.springframework.boot.test.autoconfigure.SpringBootDependencyInjectionTestExecutionListener@24269709, org.springframework.test.context.support.DirtiesContextTestExecutionListener@2aceadd4, org.springframework.test.context.transaction.TransactionalTestExecutionListener@24aed80c, org.springframework.test.context.jdbc.SqlScriptsTestExecutionListener@3a52dba3, org.springframework.boot.test.autoconfigure.restdocs.RestDocsTestExecutionListener@2a5c8d3f, org.springframework.boot.test.autoconfigure.web.servlet.MockMvcPrintOnlyOnFailureTestExecutionListener@752325ad, org.springframework.boot.test.autoconfigure.web.servlet.WebDriverTestExecutionListener@279fedbd, org.springframework.boot.test.mock.mockito.MockitoTestExecutionListener@b3ca52e, org.springframework.boot.test.mock.mockito.ResetMocksTestExecutionListener@45c7e403, org.springframework.boot.test.autoconfigure.web.client.MockRestServiceServerResetTestExecutionListener@2925bf5b]
2019-02-25 11:41:59.765 [main] INFO  com.yun.ProductTypeTest - Starting ProductTypeTest on USER-20181202BJ with PID 8080 (started by Administrator in E:\workspace\yun-eb-stock)
2019-02-25 11:41:59.766 [main] DEBUG com.yun.ProductTypeTest - Running with Spring Boot v1.5.9.RELEASE, Spring v4.3.13.RELEASE
2019-02-25 11:41:59.766 [main] INFO  com.yun.ProductTypeTest - No active profile set, falling back to default profiles: default
2019-02-25 11:42:00.422 [main] INFO  o.s.w.context.support.GenericWebApplicationContext - Refreshing org.springframework.web.context.support.GenericWebApplicationContext@4d15107f: startup date [Mon Feb 25 11:42:00 CST 2019]; root of context hierarchy
2019-02-25 11:42:00.582 [background-preinit] INFO  org.hibernate.validator.internal.util.Version - HV000001: Hibernate Validator 5.3.6.Final
2019-02-25 11:42:06.075 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerAdapter - Looking for @ControllerAdvice: org.springframework.web.context.support.GenericWebApplicationContext@4d15107f: startup date [Mon Feb 25 11:42:00 CST 2019]; root of context hierarchy
2019-02-25 11:42:06.246 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productListForAutoComplete]}" onto public java.util.List<com.yun.product.model.Product> com.yun.product.controller.ProductController.productListForAutoComplete(java.lang.String)
2019-02-25 11:42:06.249 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productListForStock]}" onto public java.util.List<com.yun.product.model.Product> com.yun.product.controller.ProductController.productListForStock()
2019-02-25 11:42:06.250 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productList]}" onto public java.lang.String com.yun.product.controller.ProductController.productList(org.springframework.ui.Model,java.lang.String,java.lang.String,java.lang.String,java.lang.String)
2019-02-25 11:42:06.250 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productPreAdd]}" onto public java.lang.String com.yun.product.controller.ProductController.productPreAdd()
2019-02-25 11:42:06.251 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productSave]}" onto public java.lang.String com.yun.product.controller.ProductController.productSave(com.yun.product.model.Product)
2019-02-25 11:42:06.251 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productDelete]}" onto public java.lang.String com.yun.product.controller.ProductController.productDelete(int)
2019-02-25 11:42:06.252 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productPreUpdate]}" onto public java.lang.String com.yun.product.controller.ProductController.productPreUpdate(int,org.springframework.ui.Model)
2019-02-25 11:42:06.252 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productUpdate]}" onto public java.lang.String com.yun.product.controller.ProductController.productUpdate(com.yun.product.model.Product)
2019-02-25 11:42:06.253 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productListForTrade]}" onto public java.util.List<com.yun.product.model.Product> com.yun.product.controller.ProductController.productListForTrade(java.lang.String)
2019-02-25 11:42:06.254 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/prodParamDelete]}" onto public java.lang.String com.yun.product.controller.ProductParamController.prodParamDelete(int)
2019-02-25 11:42:06.255 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/prodParamPreAdd]}" onto public java.lang.String com.yun.product.controller.ProductParamController.prodParamPreAdd(int,org.springframework.ui.Model)
2019-02-25 11:42:06.256 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/prodParamSave]}" onto public java.lang.String com.yun.product.controller.ProductParamController.prodParamSave(int,java.lang.String[])
2019-02-25 11:42:06.256 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/prodParamList]}" onto public java.lang.String com.yun.product.controller.ProductParamController.prodParamList(int)
2019-02-25 11:42:06.257 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/prodParamDeleteBat]}" onto public java.lang.String com.yun.product.controller.ProductParamController.prodParamDeleteBat(java.lang.String[],javax.servlet.http.HttpServletResponse) throws java.io.IOException
2019-02-25 11:42:06.262 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeTree]}" onto public java.util.List<com.yun.product.model.ProductType> com.yun.product.controller.ProductTypeController.productTypeTree()
2019-02-25 11:42:06.262 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeList]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeList(org.springframework.ui.Model)
2019-02-25 11:42:06.263 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeEdit]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeEdit()
2019-02-25 11:42:06.263 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeSave]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeSave(com.yun.product.model.ProductType)
2019-02-25 11:42:06.263 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeUpdate]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeUpdate(java.lang.Integer,org.springframework.ui.Model)
2019-02-25 11:42:06.264 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeUpdateSave]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeUpdateSave(com.yun.product.model.ProductType)
2019-02-25 11:42:06.265 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productTypeDelete]}" onto public java.lang.String com.yun.product.controller.ProductTypeController.productTypeDelete(java.lang.Integer,javax.servlet.http.HttpServletResponse) throws java.io.IOException
2019-02-25 11:42:06.266 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productSaleTop]}" onto public java.lang.String com.yun.report.controller.ProductStockReportController.productSaleTop(java.lang.String,java.lang.String,java.lang.String,java.lang.String,org.springframework.ui.Model)
2019-02-25 11:42:06.267 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productSaleCalc]}" onto public java.lang.String com.yun.report.controller.ProductStockReportController.productSaleCalc()
2019-02-25 11:42:06.267 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockReport]}" onto public java.lang.String com.yun.report.controller.ProductStockReportController.productStockReport(java.lang.String,java.lang.String,java.lang.String,org.springframework.ui.Model)
2019-02-25 11:42:06.268 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveStockChange]}" onto public java.lang.String com.yun.report.controller.ProductStockReportController.productReceiveStockChange(java.lang.String,java.lang.String,java.lang.String,java.lang.String,org.springframework.ui.Model)
2019-02-25 11:42:06.268 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productCurrentStockChange]}" onto public java.lang.String com.yun.report.controller.ProductStockReportController.productCurrentStockChange(java.lang.String,java.lang.String,java.lang.String,java.lang.String,org.springframework.ui.Model)
2019-02-25 11:42:06.270 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productSaleCalcQuery]}" onto public java.lang.String com.yun.report.controller.ProductStockReportController.productSaleCalcQuery(java.lang.String,java.lang.String,java.lang.String,java.lang.String)
2019-02-25 11:42:06.272 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveStockList]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveStockController.productReceiveStocklist(java.lang.String,java.lang.String,org.springframework.ui.Model)
2019-02-25 11:42:06.272 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveStockPreAdd]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveStockController.productReceiveStockPreAdd()
2019-02-25 11:42:06.273 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveStockSave]}" onto public void com.yun.stock.controller.ProductReceiveStockController.productReceiveStockSave(com.yun.stock.model.ProductReceiveStock,javax.servlet.http.HttpServletResponse) throws java.io.IOException
2019-02-25 11:42:06.273 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveStockDelete]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveStockController.productReceiveStockDelete(int)
2019-02-25 11:42:06.273 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveStockPreUpdate]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveStockController.productReceiveStockPreUpdate(int,org.springframework.ui.Model)
2019-02-25 11:42:06.274 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveStockUpdate]}" onto public void com.yun.stock.controller.ProductReceiveStockController.productReceiveStockUpdate(com.yun.stock.model.ProductReceiveStock,javax.servlet.http.HttpServletResponse) throws java.io.IOException
2019-02-25 11:42:06.275 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveIn]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveTradeController.receiveIn(org.springframework.ui.Model)
2019-02-25 11:42:06.276 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveInSave]}" onto public void com.yun.stock.controller.ProductReceiveTradeController.receiveInSave(com.yun.stock.model.ProductReceiveTrade,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse) throws java.io.IOException
2019-02-25 11:42:06.276 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveReject]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveTradeController.receiveReject(org.springframework.ui.Model)
2019-02-25 11:42:06.276 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveStockToCurrentStock]}" onto public java.lang.String com.yun.stock.controller.ProductReceiveTradeController.productReceiveStockToCurrentStock(int,org.springframework.ui.Model)
2019-02-25 11:42:06.277 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveRejectSave]}" onto public void com.yun.stock.controller.ProductReceiveTradeController.receiveRejectSave(com.yun.stock.model.ProductReceiveTrade,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse) throws java.io.IOException
2019-02-25 11:42:06.277 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productReceiveToCurrentSave]}" onto public void com.yun.stock.controller.ProductReceiveTradeController.productReceiveToCurrentSave(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse) throws java.lang.Exception
2019-02-25 11:42:06.279 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockSave]}" onto public void com.yun.stock.controller.ProductStockController.productStockSave(com.yun.stock.model.ProductStock,javax.servlet.http.HttpServletResponse) throws java.io.IOException
2019-02-25 11:42:06.280 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockList]}" onto public java.lang.String com.yun.stock.controller.ProductStockController.productStocklist(java.lang.String,java.lang.String,org.springframework.ui.Model)
2019-02-25 11:42:06.281 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockPreAdd]}" onto public java.lang.String com.yun.stock.controller.ProductStockController.productStockPreAdd()
2019-02-25 11:42:06.281 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockDelete]}" onto public java.lang.String com.yun.stock.controller.ProductStockController.productStockDelete(int)
2019-02-25 11:42:06.281 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockPreUpdate]}" onto public java.lang.String com.yun.stock.controller.ProductStockController.productStockPreUpdate(int,org.springframework.ui.Model)
2019-02-25 11:42:06.282 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productStockUpdate]}" onto public void com.yun.stock.controller.ProductStockController.productStockUpdate(com.yun.stock.model.ProductStock,javax.servlet.http.HttpServletResponse) throws java.io.IOException
2019-02-25 11:42:06.283 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productCurrentOut]}" onto public java.lang.String com.yun.stock.controller.ProductTradeController.receiveReject(org.springframework.ui.Model)
2019-02-25 11:42:06.284 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productCurrentIn]}" onto public java.lang.String com.yun.stock.controller.ProductTradeController.productCurrentIn(org.springframework.ui.Model)
2019-02-25 11:42:06.285 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productCurrentInSave]}" onto public void com.yun.stock.controller.ProductTradeController.productCurrentInSave(com.yun.stock.model.ProductTrade,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse) throws java.io.IOException
2019-02-25 11:42:06.285 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/productCurrentOutSave]}" onto public void com.yun.stock.controller.ProductTradeController.productCurrentOutSave(com.yun.stock.model.ProductTrade,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse) throws java.io.IOException
2019-02-25 11:42:06.286 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/main]}" onto public java.lang.String com.yun.user.controller.MainController.main()
2019-02-25 11:42:06.287 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/sysBak]}" onto public void com.yun.user.controller.SysBakController.sysBak(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
2019-02-25 11:42:06.288 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/deleteBakFile]}" onto public java.lang.String com.yun.user.controller.SysBakController.deleteBakFile(java.lang.String)
2019-02-25 11:42:06.288 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/sysBakList]}" onto public java.lang.String com.yun.user.controller.SysBakController.sysBakList(org.springframework.ui.Model)
2019-02-25 11:42:06.289 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/userEdit]}" onto public java.lang.String com.yun.user.controller.UserController.userEdit()
2019-02-25 11:42:06.290 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/userList]}" onto public java.lang.String com.yun.user.controller.UserController.userList(org.springframework.ui.Model)
2019-02-25 11:42:06.290 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/deleteUserInfo]}" onto public java.lang.String com.yun.user.controller.UserController.userDelete(int)
2019-02-25 11:42:06.292 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/userSave]}" onto public java.lang.String com.yun.user.controller.UserController.userSave(com.yun.user.model.UserInfo)
2019-02-25 11:42:06.300 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/login]}" onto public void com.yun.user.controller.UserController.login(java.lang.String,java.lang.String,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletResponse) throws java.io.IOException
2019-02-25 11:42:06.304 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/error]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> org.springframework.boot.autoconfigure.web.BasicErrorController.error(javax.servlet.http.HttpServletRequest)
2019-02-25 11:42:06.306 [main] INFO  o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped "{[/error],produces=[text/html]}" onto public org.springframework.web.servlet.ModelAndView org.springframework.boot.autoconfigure.web.BasicErrorController.errorHtml(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
2019-02-25 11:42:06.384 [main] WARN  o.s.w.servlet.resource.ResourceHttpRequestHandler - Locations list is empty. No resources will be served unless a custom ResourceResolver is configured as an alternative to PathResourceResolver.
2019-02-25 11:42:06.403 [main] INFO  o.s.web.servlet.handler.SimpleUrlHandlerMapping - Mapped URL path [/dbbak] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-02-25 11:42:06.403 [main] INFO  o.s.web.servlet.handler.SimpleUrlHandlerMapping - Mapped URL path [/webjars/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-02-25 11:42:06.403 [main] INFO  o.s.web.servlet.handler.SimpleUrlHandlerMapping - Mapped URL path [/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-02-25 11:42:06.521 [main] INFO  o.s.web.servlet.handler.SimpleUrlHandlerMapping - Mapped URL path [/**/favicon.ico] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-02-25 11:42:07.554 [main] INFO  o.s.b.a.w.WebMvcAutoConfiguration$WelcomePageHandlerMapping - Adding welcome page: ServletContext resource [/index.html]
2019-02-25 11:42:08.153 [main] INFO  com.yun.ProductTypeTest - Started ProductTypeTest in 8.886 seconds (JVM running for 12.072)
2019-02-25 11:42:09.181 [main] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - ==>  Preparing: select p1.prod_type_id,p1.prod_type_name,p1.parent_id,p2.prod_type_id parent_type_id,p2.prod_type_name parent_type_name from product_type p1 LEFT JOIN product_type p2 on p1.parent_id=p2.prod_type_id where p1.parent_id=? 
2019-02-25 11:42:09.233 [main] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - ==> Parameters: 0(Integer)
2019-02-25 11:42:09.258 [main] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - ====>  Preparing: select p1.prod_type_id,p1.prod_type_name,p1.parent_id,p2.prod_type_id parent_type_id,p2.prod_type_name parent_type_name from product_type p1 LEFT JOIN product_type p2 on p1.parent_id=p2.prod_type_id where p1.parent_id=? 
2019-02-25 11:42:09.259 [main] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - ====> Parameters: 29(Integer)
2019-02-25 11:42:09.268 [main] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - ======>  Preparing: select p1.prod_type_id,p1.prod_type_name,p1.parent_id,p2.prod_type_id parent_type_id,p2.prod_type_name parent_type_name from product_type p1 LEFT JOIN product_type p2 on p1.parent_id=p2.prod_type_id where p1.parent_id=? 
2019-02-25 11:42:09.271 [main] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - ======> Parameters: 30(Integer)
2019-02-25 11:42:09.273 [main] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - <======      Total: 0
2019-02-25 11:42:09.274 [main] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - <====      Total: 1
2019-02-25 11:42:09.276 [main] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - ====>  Preparing: select p1.prod_type_id,p1.prod_type_name,p1.parent_id,p2.prod_type_id parent_type_id,p2.prod_type_name parent_type_name from product_type p1 LEFT JOIN product_type p2 on p1.parent_id=p2.prod_type_id where p1.parent_id=? 
2019-02-25 11:42:09.278 [main] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - ====> Parameters: 39(Integer)
2019-02-25 11:42:09.282 [main] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - ======>  Preparing: select p1.prod_type_id,p1.prod_type_name,p1.parent_id,p2.prod_type_id parent_type_id,p2.prod_type_name parent_type_name from product_type p1 LEFT JOIN product_type p2 on p1.parent_id=p2.prod_type_id where p1.parent_id=? 
2019-02-25 11:42:09.288 [main] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - ======> Parameters: 41(Integer)
2019-02-25 11:42:09.292 [main] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - <======      Total: 0
2019-02-25 11:42:09.292 [main] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - <====      Total: 1
2019-02-25 11:42:09.293 [main] DEBUG c.y.product.dao.ProductTypeDao.findProductTypeRoot - <==      Total: 2
2019-02-25 11:42:09.335 [main] INFO  o.s.b.t.context.SpringBootTestContextBootstrapper - Neither @ContextConfiguration nor @ContextHierarchy found for test class [com.yun.YunEbStockApplicationTests], using SpringBootContextLoader
2019-02-25 11:42:09.336 [main] INFO  o.s.test.context.support.AbstractContextLoader - Could not detect default resource locations for test class [com.yun.YunEbStockApplicationTests]: no resource found for suffixes {-context.xml, Context.groovy}.
2019-02-25 11:42:09.337 [main] INFO  o.s.t.c.support.AnnotationConfigContextLoaderUtils - Could not detect default configuration classes for test class [com.yun.YunEbStockApplicationTests]: YunEbStockApplicationTests does not declare any static, non-private, non-final, nested classes annotated with @Configuration.
2019-02-25 11:42:09.343 [main] INFO  o.s.b.t.context.SpringBootTestContextBootstrapper - Found @SpringBootConfiguration com.yun.YunEbStockApplication for test class com.yun.YunEbStockApplicationTests
2019-02-25 11:42:09.348 [main] INFO  o.s.b.t.context.SpringBootTestContextBootstrapper - Loaded default TestExecutionListener class names from location [META-INF/spring.factories]: [org.springframework.boot.test.mock.mockito.MockitoTestExecutionListener, org.springframework.boot.test.mock.mockito.ResetMocksTestExecutionListener, org.springframework.boot.test.autoconfigure.restdocs.RestDocsTestExecutionListener, org.springframework.boot.test.autoconfigure.web.client.MockRestServiceServerResetTestExecutionListener, org.springframework.boot.test.autoconfigure.web.servlet.MockMvcPrintOnlyOnFailureTestExecutionListener, org.springframework.boot.test.autoconfigure.web.servlet.WebDriverTestExecutionListener, org.springframework.test.context.web.ServletTestExecutionListener, org.springframework.test.context.support.DirtiesContextBeforeModesTestExecutionListener, org.springframework.test.context.support.DependencyInjectionTestExecutionListener, org.springframework.test.context.support.DirtiesContextTestExecutionListener, org.springframework.test.context.transaction.TransactionalTestExecutionListener, org.springframework.test.context.jdbc.SqlScriptsTestExecutionListener]
2019-02-25 11:42:09.396 [main] INFO  o.s.b.t.context.SpringBootTestContextBootstrapper - Using TestExecutionListeners: [org.springframework.test.context.web.ServletTestExecutionListener@3a36cd5, org.springframework.test.context.support.DirtiesContextBeforeModesTestExecutionListener@53f0d09c, org.springframework.boot.test.autoconfigure.SpringBootDependencyInjectionTestExecutionListener@47acd13b, org.springframework.test.context.support.DirtiesContextTestExecutionListener@6f8e9d06, org.springframework.test.context.transaction.TransactionalTestExecutionListener@77d381e6, org.springframework.test.context.jdbc.SqlScriptsTestExecutionListener@2272cbb0, org.springframework.boot.test.autoconfigure.restdocs.RestDocsTestExecutionListener@3f6f3cc, org.springframework.boot.test.autoconfigure.web.servlet.MockMvcPrintOnlyOnFailureTestExecutionListener@180b3819, org.springframework.boot.test.autoconfigure.web.servlet.WebDriverTestExecutionListener@733c464f, org.springframework.boot.test.mock.mockito.MockitoTestExecutionListener@47272cd3, org.springframework.boot.test.mock.mockito.ResetMocksTestExecutionListener@73fbdf68, org.springframework.boot.test.autoconfigure.web.client.MockRestServiceServerResetTestExecutionListener@32f1fafe]
2019-02-25 11:42:09.436 [Thread-2] INFO  o.s.w.context.support.GenericWebApplicationContext - Closing org.springframework.web.context.support.GenericWebApplicationContext@4d15107f: startup date [Mon Feb 25 11:42:00 CST 2019]; root of context hierarchy
